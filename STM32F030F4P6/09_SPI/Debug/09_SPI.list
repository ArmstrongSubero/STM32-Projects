
09_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001418  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080014d8  080014d8  000114d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001514  08001514  00011514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001518  08001518  00011518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800151c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f4  20000004  08001520  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000f8  08001520  000200f8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d30c  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001dc7  00000000  00000000  0002d338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e16  00000000  00000000  0002f0ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000648  00000000  00000000  00032f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008b8  00000000  00000000  00033560  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003e4c  00000000  00000000  00033e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000023cb  00000000  00000000  00037c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003a02f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000011cc  00000000  00000000  0003a0ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080014c0 	.word	0x080014c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080014c0 	.word	0x080014c0

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000234:	b510      	push	{r4, lr}
 8000236:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000238:	f000 fbfa 	bl	8000a30 <HAL_RCC_GetHCLKFreq>
 800023c:	21fa      	movs	r1, #250	; 0xfa
 800023e:	0089      	lsls	r1, r1, #2
 8000240:	f7ff ff6c 	bl	800011c <__udivsi3>
 8000244:	f000 f866 	bl	8000314 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000248:	2001      	movs	r0, #1
 800024a:	2200      	movs	r2, #0
 800024c:	0021      	movs	r1, r4
 800024e:	4240      	negs	r0, r0
 8000250:	f000 f830 	bl	80002b4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000254:	2000      	movs	r0, #0
 8000256:	bd10      	pop	{r4, pc}

08000258 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000258:	2310      	movs	r3, #16
 800025a:	4a06      	ldr	r2, [pc, #24]	; (8000274 <HAL_Init+0x1c>)
{
 800025c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000260:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000262:	430b      	orrs	r3, r1
 8000264:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000266:	f7ff ffe5 	bl	8000234 <HAL_InitTick>
  HAL_MspInit();
 800026a:	f001 f831 	bl	80012d0 <HAL_MspInit>
}
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40022000 	.word	0x40022000

08000278 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	20000020 	.word	0x20000020

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	20000020 	.word	0x20000020

08000294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000296:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000298:	f7ff fff6 	bl	8000288 <HAL_GetTick>
  uint32_t wait = Delay;
 800029c:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800029e:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002a0:	1c63      	adds	r3, r4, #1
 80002a2:	1e5a      	subs	r2, r3, #1
 80002a4:	4193      	sbcs	r3, r2
 80002a6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002a8:	f7ff ffee 	bl	8000288 <HAL_GetTick>
 80002ac:	1b40      	subs	r0, r0, r5
 80002ae:	42a0      	cmp	r0, r4
 80002b0:	d3fa      	bcc.n	80002a8 <HAL_Delay+0x14>
  {
  }
}
 80002b2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002b8:	2800      	cmp	r0, #0
 80002ba:	da14      	bge.n	80002e6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	230f      	movs	r3, #15
 80002be:	b2c0      	uxtb	r0, r0
 80002c0:	4003      	ands	r3, r0
 80002c2:	3b08      	subs	r3, #8
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <HAL_NVIC_SetPriority+0x58>)
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	189b      	adds	r3, r3, r2
 80002cc:	2203      	movs	r2, #3
 80002ce:	4010      	ands	r0, r2
 80002d0:	4090      	lsls	r0, r2
 80002d2:	32fc      	adds	r2, #252	; 0xfc
 80002d4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002d6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002da:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002dc:	69dc      	ldr	r4, [r3, #28]
 80002de:	43ac      	bics	r4, r5
 80002e0:	4321      	orrs	r1, r4
 80002e2:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002e4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e6:	2503      	movs	r5, #3
 80002e8:	0883      	lsrs	r3, r0, #2
 80002ea:	4028      	ands	r0, r5
 80002ec:	40a8      	lsls	r0, r5
 80002ee:	35fc      	adds	r5, #252	; 0xfc
 80002f0:	002e      	movs	r6, r5
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <HAL_NVIC_SetPriority+0x5c>)
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	189b      	adds	r3, r3, r2
 80002f8:	22c0      	movs	r2, #192	; 0xc0
 80002fa:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fc:	4029      	ands	r1, r5
 80002fe:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	0092      	lsls	r2, r2, #2
 8000302:	589c      	ldr	r4, [r3, r2]
 8000304:	43b4      	bics	r4, r6
 8000306:	4321      	orrs	r1, r4
 8000308:	5099      	str	r1, [r3, r2]
 800030a:	e7eb      	b.n	80002e4 <HAL_NVIC_SetPriority+0x30>
 800030c:	e000ed00 	.word	0xe000ed00
 8000310:	e000e100 	.word	0xe000e100

08000314 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000314:	4a09      	ldr	r2, [pc, #36]	; (800033c <HAL_SYSTICK_Config+0x28>)
 8000316:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000318:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800031a:	4293      	cmp	r3, r2
 800031c:	d80d      	bhi.n	800033a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800031e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000320:	4a07      	ldr	r2, [pc, #28]	; (8000340 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000322:	4808      	ldr	r0, [pc, #32]	; (8000344 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000324:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000326:	6a03      	ldr	r3, [r0, #32]
 8000328:	0609      	lsls	r1, r1, #24
 800032a:	021b      	lsls	r3, r3, #8
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	430b      	orrs	r3, r1
 8000330:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000332:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000334:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000336:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000338:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800033a:	4770      	bx	lr
 800033c:	00ffffff 	.word	0x00ffffff
 8000340:	e000e010 	.word	0xe000e010
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800034a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800034c:	2804      	cmp	r0, #4
 800034e:	d102      	bne.n	8000356 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000350:	4310      	orrs	r0, r2
 8000352:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000354:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000356:	2104      	movs	r1, #4
 8000358:	438a      	bics	r2, r1
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	e7fa      	b.n	8000354 <HAL_SYSTICK_CLKSourceConfig+0xc>
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	e000e010 	.word	0xe000e010

08000364 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000364:	4770      	bx	lr

08000366 <HAL_SYSTICK_IRQHandler>:
{
 8000366:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000368:	f7ff fffc 	bl	8000364 <HAL_SYSTICK_Callback>
}
 800036c:	bd10      	pop	{r4, pc}
	...

08000370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000370:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000372:	680b      	ldr	r3, [r1, #0]
{ 
 8000374:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000376:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000378:	2300      	movs	r3, #0
{ 
 800037a:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800037c:	9a02      	ldr	r2, [sp, #8]
 800037e:	40da      	lsrs	r2, r3
 8000380:	d101      	bne.n	8000386 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8000382:	b007      	add	sp, #28
 8000384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000386:	2201      	movs	r2, #1
 8000388:	409a      	lsls	r2, r3
 800038a:	9203      	str	r2, [sp, #12]
 800038c:	9903      	ldr	r1, [sp, #12]
 800038e:	9a02      	ldr	r2, [sp, #8]
 8000390:	400a      	ands	r2, r1
 8000392:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000394:	d100      	bne.n	8000398 <HAL_GPIO_Init+0x28>
 8000396:	e08c      	b.n	80004b2 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000398:	9a01      	ldr	r2, [sp, #4]
 800039a:	2110      	movs	r1, #16
 800039c:	6852      	ldr	r2, [r2, #4]
 800039e:	0016      	movs	r6, r2
 80003a0:	438e      	bics	r6, r1
 80003a2:	2e02      	cmp	r6, #2
 80003a4:	d10e      	bne.n	80003c4 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003a6:	2507      	movs	r5, #7
 80003a8:	401d      	ands	r5, r3
 80003aa:	00ad      	lsls	r5, r5, #2
 80003ac:	3901      	subs	r1, #1
 80003ae:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 80003b0:	08dc      	lsrs	r4, r3, #3
 80003b2:	00a4      	lsls	r4, r4, #2
 80003b4:	1904      	adds	r4, r0, r4
 80003b6:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003b8:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	6909      	ldr	r1, [r1, #16]
 80003be:	40a9      	lsls	r1, r5
 80003c0:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80003c2:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003c4:	2403      	movs	r4, #3
 80003c6:	005f      	lsls	r7, r3, #1
 80003c8:	40bc      	lsls	r4, r7
 80003ca:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003cc:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ce:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003d0:	4025      	ands	r5, r4
 80003d2:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003d4:	2503      	movs	r5, #3
 80003d6:	4015      	ands	r5, r2
 80003d8:	40bd      	lsls	r5, r7
 80003da:	4661      	mov	r1, ip
 80003dc:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80003de:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003e0:	2e01      	cmp	r6, #1
 80003e2:	d80f      	bhi.n	8000404 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003e4:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80003e6:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003e8:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003ea:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003ec:	40bd      	lsls	r5, r7
 80003ee:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80003f0:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80003f2:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003f4:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003f6:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003f8:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003fa:	2101      	movs	r1, #1
 80003fc:	400d      	ands	r5, r1
 80003fe:	409d      	lsls	r5, r3
 8000400:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000402:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000404:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000406:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000408:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800040a:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800040c:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800040e:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000410:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000412:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000414:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000416:	420a      	tst	r2, r1
 8000418:	d04b      	beq.n	80004b2 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041a:	2101      	movs	r1, #1
 800041c:	4c26      	ldr	r4, [pc, #152]	; (80004b8 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000420:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000422:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000424:	430d      	orrs	r5, r1
 8000426:	61a5      	str	r5, [r4, #24]
 8000428:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 800042a:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042c:	400c      	ands	r4, r1
 800042e:	9405      	str	r4, [sp, #20]
 8000430:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000432:	240f      	movs	r4, #15
 8000434:	4921      	ldr	r1, [pc, #132]	; (80004bc <HAL_GPIO_Init+0x14c>)
 8000436:	00ad      	lsls	r5, r5, #2
 8000438:	00b6      	lsls	r6, r6, #2
 800043a:	186d      	adds	r5, r5, r1
 800043c:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800043e:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000440:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000442:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000444:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000446:	2400      	movs	r4, #0
 8000448:	4288      	cmp	r0, r1
 800044a:	d00c      	beq.n	8000466 <HAL_GPIO_Init+0xf6>
 800044c:	491c      	ldr	r1, [pc, #112]	; (80004c0 <HAL_GPIO_Init+0x150>)
 800044e:	3401      	adds	r4, #1
 8000450:	4288      	cmp	r0, r1
 8000452:	d008      	beq.n	8000466 <HAL_GPIO_Init+0xf6>
 8000454:	491b      	ldr	r1, [pc, #108]	; (80004c4 <HAL_GPIO_Init+0x154>)
 8000456:	3401      	adds	r4, #1
 8000458:	4288      	cmp	r0, r1
 800045a:	d004      	beq.n	8000466 <HAL_GPIO_Init+0xf6>
 800045c:	491a      	ldr	r1, [pc, #104]	; (80004c8 <HAL_GPIO_Init+0x158>)
 800045e:	3403      	adds	r4, #3
 8000460:	4288      	cmp	r0, r1
 8000462:	d100      	bne.n	8000466 <HAL_GPIO_Init+0xf6>
 8000464:	3c02      	subs	r4, #2
 8000466:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000468:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800046a:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 800046c:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 800046e:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000470:	4c16      	ldr	r4, [pc, #88]	; (80004cc <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000472:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000474:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8000476:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000478:	03d1      	lsls	r1, r2, #15
 800047a:	d401      	bmi.n	8000480 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800047c:	003e      	movs	r6, r7
 800047e:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000480:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000482:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000484:	9e00      	ldr	r6, [sp, #0]
 8000486:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000488:	0391      	lsls	r1, r2, #14
 800048a:	d401      	bmi.n	8000490 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800048c:	003e      	movs	r6, r7
 800048e:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000490:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000492:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000494:	9e00      	ldr	r6, [sp, #0]
 8000496:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000498:	02d1      	lsls	r1, r2, #11
 800049a:	d401      	bmi.n	80004a0 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800049c:	003e      	movs	r6, r7
 800049e:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80004a0:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80004a2:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80004a4:	9f00      	ldr	r7, [sp, #0]
 80004a6:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004a8:	0292      	lsls	r2, r2, #10
 80004aa:	d401      	bmi.n	80004b0 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004ac:	402e      	ands	r6, r5
 80004ae:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80004b0:	60e7      	str	r7, [r4, #12]
    position++;
 80004b2:	3301      	adds	r3, #1
 80004b4:	e762      	b.n	800037c <HAL_GPIO_Init+0xc>
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010000 	.word	0x40010000
 80004c0:	48000400 	.word	0x48000400
 80004c4:	48000800 	.word	0x48000800
 80004c8:	48000c00 	.word	0x48000c00
 80004cc:	40010400 	.word	0x40010400

080004d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	d001      	beq.n	80004d8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004d4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004d6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004d8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004da:	e7fc      	b.n	80004d6 <HAL_GPIO_WritePin+0x6>

080004dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004de:	6803      	ldr	r3, [r0, #0]
{
 80004e0:	b085      	sub	sp, #20
 80004e2:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e4:	07db      	lsls	r3, r3, #31
 80004e6:	d42f      	bmi.n	8000548 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004e8:	682b      	ldr	r3, [r5, #0]
 80004ea:	079b      	lsls	r3, r3, #30
 80004ec:	d500      	bpl.n	80004f0 <HAL_RCC_OscConfig+0x14>
 80004ee:	e081      	b.n	80005f4 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004f0:	682b      	ldr	r3, [r5, #0]
 80004f2:	071b      	lsls	r3, r3, #28
 80004f4:	d500      	bpl.n	80004f8 <HAL_RCC_OscConfig+0x1c>
 80004f6:	e0bc      	b.n	8000672 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004f8:	682b      	ldr	r3, [r5, #0]
 80004fa:	075b      	lsls	r3, r3, #29
 80004fc:	d500      	bpl.n	8000500 <HAL_RCC_OscConfig+0x24>
 80004fe:	e0df      	b.n	80006c0 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000500:	682b      	ldr	r3, [r5, #0]
 8000502:	06db      	lsls	r3, r3, #27
 8000504:	d51a      	bpl.n	800053c <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000506:	696a      	ldr	r2, [r5, #20]
 8000508:	4cb5      	ldr	r4, [pc, #724]	; (80007e0 <HAL_RCC_OscConfig+0x304>)
 800050a:	2304      	movs	r3, #4
 800050c:	2a01      	cmp	r2, #1
 800050e:	d000      	beq.n	8000512 <HAL_RCC_OscConfig+0x36>
 8000510:	e14b      	b.n	80007aa <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000512:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000514:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000516:	430b      	orrs	r3, r1
 8000518:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800051a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800051c:	431a      	orrs	r2, r3
 800051e:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000520:	f7ff feb2 	bl	8000288 <HAL_GetTick>
 8000524:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000526:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000528:	4233      	tst	r3, r6
 800052a:	d100      	bne.n	800052e <HAL_RCC_OscConfig+0x52>
 800052c:	e136      	b.n	800079c <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800052e:	21f8      	movs	r1, #248	; 0xf8
 8000530:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000532:	69ab      	ldr	r3, [r5, #24]
 8000534:	438a      	bics	r2, r1
 8000536:	00db      	lsls	r3, r3, #3
 8000538:	4313      	orrs	r3, r2
 800053a:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800053c:	6a29      	ldr	r1, [r5, #32]
 800053e:	2900      	cmp	r1, #0
 8000540:	d000      	beq.n	8000544 <HAL_RCC_OscConfig+0x68>
 8000542:	e159      	b.n	80007f8 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000544:	2000      	movs	r0, #0
 8000546:	e013      	b.n	8000570 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000548:	210c      	movs	r1, #12
 800054a:	4ca5      	ldr	r4, [pc, #660]	; (80007e0 <HAL_RCC_OscConfig+0x304>)
 800054c:	6862      	ldr	r2, [r4, #4]
 800054e:	400a      	ands	r2, r1
 8000550:	2a04      	cmp	r2, #4
 8000552:	d006      	beq.n	8000562 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000554:	6863      	ldr	r3, [r4, #4]
 8000556:	400b      	ands	r3, r1
 8000558:	2b08      	cmp	r3, #8
 800055a:	d10b      	bne.n	8000574 <HAL_RCC_OscConfig+0x98>
 800055c:	6863      	ldr	r3, [r4, #4]
 800055e:	03db      	lsls	r3, r3, #15
 8000560:	d508      	bpl.n	8000574 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	039b      	lsls	r3, r3, #14
 8000566:	d5bf      	bpl.n	80004e8 <HAL_RCC_OscConfig+0xc>
 8000568:	686b      	ldr	r3, [r5, #4]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d1bc      	bne.n	80004e8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800056e:	2001      	movs	r0, #1
}
 8000570:	b005      	add	sp, #20
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000574:	686b      	ldr	r3, [r5, #4]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d113      	bne.n	80005a2 <HAL_RCC_OscConfig+0xc6>
 800057a:	2380      	movs	r3, #128	; 0x80
 800057c:	6822      	ldr	r2, [r4, #0]
 800057e:	025b      	lsls	r3, r3, #9
 8000580:	4313      	orrs	r3, r2
 8000582:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000584:	f7ff fe80 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000588:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800058a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800058c:	02b6      	lsls	r6, r6, #10
 800058e:	6823      	ldr	r3, [r4, #0]
 8000590:	4233      	tst	r3, r6
 8000592:	d1a9      	bne.n	80004e8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000594:	f7ff fe78 	bl	8000288 <HAL_GetTick>
 8000598:	1bc0      	subs	r0, r0, r7
 800059a:	2864      	cmp	r0, #100	; 0x64
 800059c:	d9f7      	bls.n	800058e <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 800059e:	2003      	movs	r0, #3
 80005a0:	e7e6      	b.n	8000570 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d116      	bne.n	80005d4 <HAL_RCC_OscConfig+0xf8>
 80005a6:	6823      	ldr	r3, [r4, #0]
 80005a8:	4a8e      	ldr	r2, [pc, #568]	; (80007e4 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005aa:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ac:	4013      	ands	r3, r2
 80005ae:	6023      	str	r3, [r4, #0]
 80005b0:	6823      	ldr	r3, [r4, #0]
 80005b2:	4a8d      	ldr	r2, [pc, #564]	; (80007e8 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005b4:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005b6:	4013      	ands	r3, r2
 80005b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005ba:	f7ff fe65 	bl	8000288 <HAL_GetTick>
 80005be:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005c0:	6823      	ldr	r3, [r4, #0]
 80005c2:	4233      	tst	r3, r6
 80005c4:	d100      	bne.n	80005c8 <HAL_RCC_OscConfig+0xec>
 80005c6:	e78f      	b.n	80004e8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005c8:	f7ff fe5e 	bl	8000288 <HAL_GetTick>
 80005cc:	1bc0      	subs	r0, r0, r7
 80005ce:	2864      	cmp	r0, #100	; 0x64
 80005d0:	d9f6      	bls.n	80005c0 <HAL_RCC_OscConfig+0xe4>
 80005d2:	e7e4      	b.n	800059e <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005d4:	2b05      	cmp	r3, #5
 80005d6:	d105      	bne.n	80005e4 <HAL_RCC_OscConfig+0x108>
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	6822      	ldr	r2, [r4, #0]
 80005dc:	02db      	lsls	r3, r3, #11
 80005de:	4313      	orrs	r3, r2
 80005e0:	6023      	str	r3, [r4, #0]
 80005e2:	e7ca      	b.n	800057a <HAL_RCC_OscConfig+0x9e>
 80005e4:	6823      	ldr	r3, [r4, #0]
 80005e6:	4a7f      	ldr	r2, [pc, #508]	; (80007e4 <HAL_RCC_OscConfig+0x308>)
 80005e8:	4013      	ands	r3, r2
 80005ea:	6023      	str	r3, [r4, #0]
 80005ec:	6823      	ldr	r3, [r4, #0]
 80005ee:	4a7e      	ldr	r2, [pc, #504]	; (80007e8 <HAL_RCC_OscConfig+0x30c>)
 80005f0:	4013      	ands	r3, r2
 80005f2:	e7c6      	b.n	8000582 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005f4:	220c      	movs	r2, #12
 80005f6:	4c7a      	ldr	r4, [pc, #488]	; (80007e0 <HAL_RCC_OscConfig+0x304>)
 80005f8:	6863      	ldr	r3, [r4, #4]
 80005fa:	4213      	tst	r3, r2
 80005fc:	d006      	beq.n	800060c <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80005fe:	6863      	ldr	r3, [r4, #4]
 8000600:	4013      	ands	r3, r2
 8000602:	2b08      	cmp	r3, #8
 8000604:	d110      	bne.n	8000628 <HAL_RCC_OscConfig+0x14c>
 8000606:	6863      	ldr	r3, [r4, #4]
 8000608:	03db      	lsls	r3, r3, #15
 800060a:	d40d      	bmi.n	8000628 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800060c:	6823      	ldr	r3, [r4, #0]
 800060e:	079b      	lsls	r3, r3, #30
 8000610:	d502      	bpl.n	8000618 <HAL_RCC_OscConfig+0x13c>
 8000612:	68eb      	ldr	r3, [r5, #12]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d1aa      	bne.n	800056e <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000618:	21f8      	movs	r1, #248	; 0xf8
 800061a:	6822      	ldr	r2, [r4, #0]
 800061c:	692b      	ldr	r3, [r5, #16]
 800061e:	438a      	bics	r2, r1
 8000620:	00db      	lsls	r3, r3, #3
 8000622:	4313      	orrs	r3, r2
 8000624:	6023      	str	r3, [r4, #0]
 8000626:	e763      	b.n	80004f0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000628:	68ea      	ldr	r2, [r5, #12]
 800062a:	2301      	movs	r3, #1
 800062c:	2a00      	cmp	r2, #0
 800062e:	d00f      	beq.n	8000650 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000630:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000632:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000634:	4313      	orrs	r3, r2
 8000636:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000638:	f7ff fe26 	bl	8000288 <HAL_GetTick>
 800063c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800063e:	6823      	ldr	r3, [r4, #0]
 8000640:	4233      	tst	r3, r6
 8000642:	d1e9      	bne.n	8000618 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000644:	f7ff fe20 	bl	8000288 <HAL_GetTick>
 8000648:	1bc0      	subs	r0, r0, r7
 800064a:	2802      	cmp	r0, #2
 800064c:	d9f7      	bls.n	800063e <HAL_RCC_OscConfig+0x162>
 800064e:	e7a6      	b.n	800059e <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000650:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000652:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000654:	439a      	bics	r2, r3
 8000656:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000658:	f7ff fe16 	bl	8000288 <HAL_GetTick>
 800065c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800065e:	6823      	ldr	r3, [r4, #0]
 8000660:	4233      	tst	r3, r6
 8000662:	d100      	bne.n	8000666 <HAL_RCC_OscConfig+0x18a>
 8000664:	e744      	b.n	80004f0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000666:	f7ff fe0f 	bl	8000288 <HAL_GetTick>
 800066a:	1bc0      	subs	r0, r0, r7
 800066c:	2802      	cmp	r0, #2
 800066e:	d9f6      	bls.n	800065e <HAL_RCC_OscConfig+0x182>
 8000670:	e795      	b.n	800059e <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000672:	69ea      	ldr	r2, [r5, #28]
 8000674:	2301      	movs	r3, #1
 8000676:	4c5a      	ldr	r4, [pc, #360]	; (80007e0 <HAL_RCC_OscConfig+0x304>)
 8000678:	2a00      	cmp	r2, #0
 800067a:	d010      	beq.n	800069e <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 800067c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800067e:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000680:	4313      	orrs	r3, r2
 8000682:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000684:	f7ff fe00 	bl	8000288 <HAL_GetTick>
 8000688:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800068a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800068c:	4233      	tst	r3, r6
 800068e:	d000      	beq.n	8000692 <HAL_RCC_OscConfig+0x1b6>
 8000690:	e732      	b.n	80004f8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000692:	f7ff fdf9 	bl	8000288 <HAL_GetTick>
 8000696:	1bc0      	subs	r0, r0, r7
 8000698:	2802      	cmp	r0, #2
 800069a:	d9f6      	bls.n	800068a <HAL_RCC_OscConfig+0x1ae>
 800069c:	e77f      	b.n	800059e <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 800069e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006a0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80006a2:	439a      	bics	r2, r3
 80006a4:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80006a6:	f7ff fdef 	bl	8000288 <HAL_GetTick>
 80006aa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006ae:	4233      	tst	r3, r6
 80006b0:	d100      	bne.n	80006b4 <HAL_RCC_OscConfig+0x1d8>
 80006b2:	e721      	b.n	80004f8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006b4:	f7ff fde8 	bl	8000288 <HAL_GetTick>
 80006b8:	1bc0      	subs	r0, r0, r7
 80006ba:	2802      	cmp	r0, #2
 80006bc:	d9f6      	bls.n	80006ac <HAL_RCC_OscConfig+0x1d0>
 80006be:	e76e      	b.n	800059e <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006c0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80006c2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006c4:	4c46      	ldr	r4, [pc, #280]	; (80007e0 <HAL_RCC_OscConfig+0x304>)
 80006c6:	0552      	lsls	r2, r2, #21
 80006c8:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80006ca:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006cc:	4213      	tst	r3, r2
 80006ce:	d108      	bne.n	80006e2 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	69e3      	ldr	r3, [r4, #28]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	61e3      	str	r3, [r4, #28]
 80006d6:	69e3      	ldr	r3, [r4, #28]
 80006d8:	4013      	ands	r3, r2
 80006da:	9303      	str	r3, [sp, #12]
 80006dc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80006de:	2301      	movs	r3, #1
 80006e0:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006e2:	2780      	movs	r7, #128	; 0x80
 80006e4:	4e41      	ldr	r6, [pc, #260]	; (80007ec <HAL_RCC_OscConfig+0x310>)
 80006e6:	007f      	lsls	r7, r7, #1
 80006e8:	6833      	ldr	r3, [r6, #0]
 80006ea:	423b      	tst	r3, r7
 80006ec:	d006      	beq.n	80006fc <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ee:	68ab      	ldr	r3, [r5, #8]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d113      	bne.n	800071c <HAL_RCC_OscConfig+0x240>
 80006f4:	6a22      	ldr	r2, [r4, #32]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	6223      	str	r3, [r4, #32]
 80006fa:	e030      	b.n	800075e <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006fc:	6833      	ldr	r3, [r6, #0]
 80006fe:	433b      	orrs	r3, r7
 8000700:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000702:	f7ff fdc1 	bl	8000288 <HAL_GetTick>
 8000706:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000708:	6833      	ldr	r3, [r6, #0]
 800070a:	423b      	tst	r3, r7
 800070c:	d1ef      	bne.n	80006ee <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800070e:	f7ff fdbb 	bl	8000288 <HAL_GetTick>
 8000712:	9b01      	ldr	r3, [sp, #4]
 8000714:	1ac0      	subs	r0, r0, r3
 8000716:	2864      	cmp	r0, #100	; 0x64
 8000718:	d9f6      	bls.n	8000708 <HAL_RCC_OscConfig+0x22c>
 800071a:	e740      	b.n	800059e <HAL_RCC_OscConfig+0xc2>
 800071c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800071e:	2b00      	cmp	r3, #0
 8000720:	d114      	bne.n	800074c <HAL_RCC_OscConfig+0x270>
 8000722:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000724:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000726:	4393      	bics	r3, r2
 8000728:	6223      	str	r3, [r4, #32]
 800072a:	6a23      	ldr	r3, [r4, #32]
 800072c:	3203      	adds	r2, #3
 800072e:	4393      	bics	r3, r2
 8000730:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000732:	f7ff fda9 	bl	8000288 <HAL_GetTick>
 8000736:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000738:	6a23      	ldr	r3, [r4, #32]
 800073a:	423b      	tst	r3, r7
 800073c:	d025      	beq.n	800078a <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800073e:	f7ff fda3 	bl	8000288 <HAL_GetTick>
 8000742:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <HAL_RCC_OscConfig+0x314>)
 8000744:	1b80      	subs	r0, r0, r6
 8000746:	4298      	cmp	r0, r3
 8000748:	d9f6      	bls.n	8000738 <HAL_RCC_OscConfig+0x25c>
 800074a:	e728      	b.n	800059e <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800074c:	2b05      	cmp	r3, #5
 800074e:	d10b      	bne.n	8000768 <HAL_RCC_OscConfig+0x28c>
 8000750:	6a21      	ldr	r1, [r4, #32]
 8000752:	3b01      	subs	r3, #1
 8000754:	430b      	orrs	r3, r1
 8000756:	6223      	str	r3, [r4, #32]
 8000758:	6a23      	ldr	r3, [r4, #32]
 800075a:	431a      	orrs	r2, r3
 800075c:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 800075e:	f7ff fd93 	bl	8000288 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000762:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000764:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000766:	e00d      	b.n	8000784 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000768:	6a23      	ldr	r3, [r4, #32]
 800076a:	4393      	bics	r3, r2
 800076c:	2204      	movs	r2, #4
 800076e:	6223      	str	r3, [r4, #32]
 8000770:	6a23      	ldr	r3, [r4, #32]
 8000772:	4393      	bics	r3, r2
 8000774:	e7c0      	b.n	80006f8 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000776:	f7ff fd87 	bl	8000288 <HAL_GetTick>
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <HAL_RCC_OscConfig+0x314>)
 800077c:	1b80      	subs	r0, r0, r6
 800077e:	4298      	cmp	r0, r3
 8000780:	d900      	bls.n	8000784 <HAL_RCC_OscConfig+0x2a8>
 8000782:	e70c      	b.n	800059e <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000784:	6a23      	ldr	r3, [r4, #32]
 8000786:	423b      	tst	r3, r7
 8000788:	d0f5      	beq.n	8000776 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 800078a:	9b00      	ldr	r3, [sp, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d000      	beq.n	8000792 <HAL_RCC_OscConfig+0x2b6>
 8000790:	e6b6      	b.n	8000500 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000792:	69e3      	ldr	r3, [r4, #28]
 8000794:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <HAL_RCC_OscConfig+0x318>)
 8000796:	4013      	ands	r3, r2
 8000798:	61e3      	str	r3, [r4, #28]
 800079a:	e6b1      	b.n	8000500 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800079c:	f7ff fd74 	bl	8000288 <HAL_GetTick>
 80007a0:	1bc0      	subs	r0, r0, r7
 80007a2:	2802      	cmp	r0, #2
 80007a4:	d800      	bhi.n	80007a8 <HAL_RCC_OscConfig+0x2cc>
 80007a6:	e6be      	b.n	8000526 <HAL_RCC_OscConfig+0x4a>
 80007a8:	e6f9      	b.n	800059e <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80007aa:	3205      	adds	r2, #5
 80007ac:	d103      	bne.n	80007b6 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 80007ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80007b0:	439a      	bics	r2, r3
 80007b2:	6362      	str	r2, [r4, #52]	; 0x34
 80007b4:	e6bb      	b.n	800052e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 80007b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80007b8:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80007ba:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80007bc:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80007be:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80007c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007c2:	4393      	bics	r3, r2
 80007c4:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80007c6:	f7ff fd5f 	bl	8000288 <HAL_GetTick>
 80007ca:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80007cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007ce:	4233      	tst	r3, r6
 80007d0:	d100      	bne.n	80007d4 <HAL_RCC_OscConfig+0x2f8>
 80007d2:	e6b3      	b.n	800053c <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80007d4:	f7ff fd58 	bl	8000288 <HAL_GetTick>
 80007d8:	1bc0      	subs	r0, r0, r7
 80007da:	2802      	cmp	r0, #2
 80007dc:	d9f6      	bls.n	80007cc <HAL_RCC_OscConfig+0x2f0>
 80007de:	e6de      	b.n	800059e <HAL_RCC_OscConfig+0xc2>
 80007e0:	40021000 	.word	0x40021000
 80007e4:	fffeffff 	.word	0xfffeffff
 80007e8:	fffbffff 	.word	0xfffbffff
 80007ec:	40007000 	.word	0x40007000
 80007f0:	00001388 	.word	0x00001388
 80007f4:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007f8:	220c      	movs	r2, #12
 80007fa:	4c26      	ldr	r4, [pc, #152]	; (8000894 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 80007fc:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007fe:	6863      	ldr	r3, [r4, #4]
 8000800:	4013      	ands	r3, r2
 8000802:	2b08      	cmp	r3, #8
 8000804:	d100      	bne.n	8000808 <HAL_RCC_OscConfig+0x32c>
 8000806:	e6b3      	b.n	8000570 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	4a23      	ldr	r2, [pc, #140]	; (8000898 <HAL_RCC_OscConfig+0x3bc>)
 800080c:	4013      	ands	r3, r2
 800080e:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000810:	2902      	cmp	r1, #2
 8000812:	d12f      	bne.n	8000874 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000814:	f7ff fd38 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000818:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800081a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800081c:	04b6      	lsls	r6, r6, #18
 800081e:	6823      	ldr	r3, [r4, #0]
 8000820:	4233      	tst	r3, r6
 8000822:	d121      	bne.n	8000868 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000824:	220f      	movs	r2, #15
 8000826:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000828:	4393      	bics	r3, r2
 800082a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800082c:	4313      	orrs	r3, r2
 800082e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000830:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000832:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000834:	6862      	ldr	r2, [r4, #4]
 8000836:	430b      	orrs	r3, r1
 8000838:	4918      	ldr	r1, [pc, #96]	; (800089c <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800083a:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800083c:	400a      	ands	r2, r1
 800083e:	4313      	orrs	r3, r2
 8000840:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	6822      	ldr	r2, [r4, #0]
 8000846:	045b      	lsls	r3, r3, #17
 8000848:	4313      	orrs	r3, r2
 800084a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800084c:	f7ff fd1c 	bl	8000288 <HAL_GetTick>
 8000850:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000852:	04ad      	lsls	r5, r5, #18
 8000854:	6823      	ldr	r3, [r4, #0]
 8000856:	422b      	tst	r3, r5
 8000858:	d000      	beq.n	800085c <HAL_RCC_OscConfig+0x380>
 800085a:	e673      	b.n	8000544 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800085c:	f7ff fd14 	bl	8000288 <HAL_GetTick>
 8000860:	1b80      	subs	r0, r0, r6
 8000862:	2802      	cmp	r0, #2
 8000864:	d9f6      	bls.n	8000854 <HAL_RCC_OscConfig+0x378>
 8000866:	e69a      	b.n	800059e <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000868:	f7ff fd0e 	bl	8000288 <HAL_GetTick>
 800086c:	1bc0      	subs	r0, r0, r7
 800086e:	2802      	cmp	r0, #2
 8000870:	d9d5      	bls.n	800081e <HAL_RCC_OscConfig+0x342>
 8000872:	e694      	b.n	800059e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000874:	f7ff fd08 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000878:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800087a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800087c:	04ad      	lsls	r5, r5, #18
 800087e:	6823      	ldr	r3, [r4, #0]
 8000880:	422b      	tst	r3, r5
 8000882:	d100      	bne.n	8000886 <HAL_RCC_OscConfig+0x3aa>
 8000884:	e65e      	b.n	8000544 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000886:	f7ff fcff 	bl	8000288 <HAL_GetTick>
 800088a:	1b80      	subs	r0, r0, r6
 800088c:	2802      	cmp	r0, #2
 800088e:	d9f6      	bls.n	800087e <HAL_RCC_OscConfig+0x3a2>
 8000890:	e685      	b.n	800059e <HAL_RCC_OscConfig+0xc2>
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40021000 	.word	0x40021000
 8000898:	feffffff 	.word	0xfeffffff
 800089c:	ffc2ffff 	.word	0xffc2ffff

080008a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80008a0:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80008a2:	4c14      	ldr	r4, [pc, #80]	; (80008f4 <HAL_RCC_GetSysClockFreq+0x54>)
{
 80008a4:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80008a6:	2210      	movs	r2, #16
 80008a8:	0021      	movs	r1, r4
 80008aa:	4668      	mov	r0, sp
 80008ac:	f000 fdfe 	bl	80014ac <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80008b0:	0021      	movs	r1, r4
 80008b2:	ad04      	add	r5, sp, #16
 80008b4:	2210      	movs	r2, #16
 80008b6:	3110      	adds	r1, #16
 80008b8:	0028      	movs	r0, r5
 80008ba:	f000 fdf7 	bl	80014ac <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80008be:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80008c0:	4e0d      	ldr	r6, [pc, #52]	; (80008f8 <HAL_RCC_GetSysClockFreq+0x58>)
 80008c2:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80008c4:	401a      	ands	r2, r3
 80008c6:	2a08      	cmp	r2, #8
 80008c8:	d111      	bne.n	80008ee <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80008ca:	200f      	movs	r0, #15
 80008cc:	466a      	mov	r2, sp
 80008ce:	0c99      	lsrs	r1, r3, #18
 80008d0:	4001      	ands	r1, r0
 80008d2:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80008d4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80008d6:	4002      	ands	r2, r0
 80008d8:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80008da:	03db      	lsls	r3, r3, #15
 80008dc:	d505      	bpl.n	80008ea <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80008de:	4807      	ldr	r0, [pc, #28]	; (80008fc <HAL_RCC_GetSysClockFreq+0x5c>)
 80008e0:	f7ff fc1c 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80008e4:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80008e6:	b008      	add	sp, #32
 80008e8:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <HAL_RCC_GetSysClockFreq+0x60>)
 80008ec:	e7fa      	b.n	80008e4 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 80008ee:	4803      	ldr	r0, [pc, #12]	; (80008fc <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80008f0:	e7f9      	b.n	80008e6 <HAL_RCC_GetSysClockFreq+0x46>
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	080014d8 	.word	0x080014d8
 80008f8:	40021000 	.word	0x40021000
 80008fc:	007a1200 	.word	0x007a1200
 8000900:	003d0900 	.word	0x003d0900

08000904 <HAL_RCC_ClockConfig>:
{
 8000904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000906:	2201      	movs	r2, #1
 8000908:	4c43      	ldr	r4, [pc, #268]	; (8000a18 <HAL_RCC_ClockConfig+0x114>)
{
 800090a:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800090c:	6823      	ldr	r3, [r4, #0]
{
 800090e:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000910:	4013      	ands	r3, r2
 8000912:	428b      	cmp	r3, r1
 8000914:	d31c      	bcc.n	8000950 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000916:	6832      	ldr	r2, [r6, #0]
 8000918:	0793      	lsls	r3, r2, #30
 800091a:	d423      	bmi.n	8000964 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800091c:	07d3      	lsls	r3, r2, #31
 800091e:	d429      	bmi.n	8000974 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000920:	2301      	movs	r3, #1
 8000922:	6822      	ldr	r2, [r4, #0]
 8000924:	401a      	ands	r2, r3
 8000926:	4297      	cmp	r7, r2
 8000928:	d367      	bcc.n	80009fa <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800092a:	6833      	ldr	r3, [r6, #0]
 800092c:	4c3b      	ldr	r4, [pc, #236]	; (8000a1c <HAL_RCC_ClockConfig+0x118>)
 800092e:	075b      	lsls	r3, r3, #29
 8000930:	d46a      	bmi.n	8000a08 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000932:	f7ff ffb5 	bl	80008a0 <HAL_RCC_GetSysClockFreq>
 8000936:	6863      	ldr	r3, [r4, #4]
 8000938:	4a39      	ldr	r2, [pc, #228]	; (8000a20 <HAL_RCC_ClockConfig+0x11c>)
 800093a:	061b      	lsls	r3, r3, #24
 800093c:	0f1b      	lsrs	r3, r3, #28
 800093e:	5cd3      	ldrb	r3, [r2, r3]
 8000940:	40d8      	lsrs	r0, r3
 8000942:	4b38      	ldr	r3, [pc, #224]	; (8000a24 <HAL_RCC_ClockConfig+0x120>)
 8000944:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff fc74 	bl	8000234 <HAL_InitTick>
  return HAL_OK;
 800094c:	2000      	movs	r0, #0
 800094e:	e008      	b.n	8000962 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000950:	6823      	ldr	r3, [r4, #0]
 8000952:	4393      	bics	r3, r2
 8000954:	430b      	orrs	r3, r1
 8000956:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000958:	6823      	ldr	r3, [r4, #0]
 800095a:	4013      	ands	r3, r2
 800095c:	4299      	cmp	r1, r3
 800095e:	d0da      	beq.n	8000916 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000960:	2001      	movs	r0, #1
}
 8000962:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000964:	20f0      	movs	r0, #240	; 0xf0
 8000966:	492d      	ldr	r1, [pc, #180]	; (8000a1c <HAL_RCC_ClockConfig+0x118>)
 8000968:	684b      	ldr	r3, [r1, #4]
 800096a:	4383      	bics	r3, r0
 800096c:	68b0      	ldr	r0, [r6, #8]
 800096e:	4303      	orrs	r3, r0
 8000970:	604b      	str	r3, [r1, #4]
 8000972:	e7d3      	b.n	800091c <HAL_RCC_ClockConfig+0x18>
 8000974:	4d29      	ldr	r5, [pc, #164]	; (8000a1c <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000976:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000978:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800097a:	2a01      	cmp	r2, #1
 800097c:	d11a      	bne.n	80009b4 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800097e:	039b      	lsls	r3, r3, #14
 8000980:	d5ee      	bpl.n	8000960 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000982:	2103      	movs	r1, #3
 8000984:	686b      	ldr	r3, [r5, #4]
 8000986:	438b      	bics	r3, r1
 8000988:	4313      	orrs	r3, r2
 800098a:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800098c:	f7ff fc7c 	bl	8000288 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000990:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000992:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000994:	2b01      	cmp	r3, #1
 8000996:	d115      	bne.n	80009c4 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000998:	220c      	movs	r2, #12
 800099a:	686b      	ldr	r3, [r5, #4]
 800099c:	4013      	ands	r3, r2
 800099e:	2b04      	cmp	r3, #4
 80009a0:	d0be      	beq.n	8000920 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009a2:	f7ff fc71 	bl	8000288 <HAL_GetTick>
 80009a6:	9b01      	ldr	r3, [sp, #4]
 80009a8:	1ac0      	subs	r0, r0, r3
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_RCC_ClockConfig+0x124>)
 80009ac:	4298      	cmp	r0, r3
 80009ae:	d9f3      	bls.n	8000998 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 80009b0:	2003      	movs	r0, #3
 80009b2:	e7d6      	b.n	8000962 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009b4:	2a02      	cmp	r2, #2
 80009b6:	d102      	bne.n	80009be <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009b8:	019b      	lsls	r3, r3, #6
 80009ba:	d4e2      	bmi.n	8000982 <HAL_RCC_ClockConfig+0x7e>
 80009bc:	e7d0      	b.n	8000960 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009be:	079b      	lsls	r3, r3, #30
 80009c0:	d4df      	bmi.n	8000982 <HAL_RCC_ClockConfig+0x7e>
 80009c2:	e7cd      	b.n	8000960 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d012      	beq.n	80009ee <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009c8:	220c      	movs	r2, #12
 80009ca:	686b      	ldr	r3, [r5, #4]
 80009cc:	4213      	tst	r3, r2
 80009ce:	d0a7      	beq.n	8000920 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009d0:	f7ff fc5a 	bl	8000288 <HAL_GetTick>
 80009d4:	9b01      	ldr	r3, [sp, #4]
 80009d6:	1ac0      	subs	r0, r0, r3
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <HAL_RCC_ClockConfig+0x124>)
 80009da:	4298      	cmp	r0, r3
 80009dc:	d9f4      	bls.n	80009c8 <HAL_RCC_ClockConfig+0xc4>
 80009de:	e7e7      	b.n	80009b0 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009e0:	f7ff fc52 	bl	8000288 <HAL_GetTick>
 80009e4:	9b01      	ldr	r3, [sp, #4]
 80009e6:	1ac0      	subs	r0, r0, r3
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_RCC_ClockConfig+0x124>)
 80009ea:	4298      	cmp	r0, r3
 80009ec:	d8e0      	bhi.n	80009b0 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009ee:	220c      	movs	r2, #12
 80009f0:	686b      	ldr	r3, [r5, #4]
 80009f2:	4013      	ands	r3, r2
 80009f4:	2b08      	cmp	r3, #8
 80009f6:	d1f3      	bne.n	80009e0 <HAL_RCC_ClockConfig+0xdc>
 80009f8:	e792      	b.n	8000920 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009fa:	6822      	ldr	r2, [r4, #0]
 80009fc:	439a      	bics	r2, r3
 80009fe:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a00:	6822      	ldr	r2, [r4, #0]
 8000a02:	421a      	tst	r2, r3
 8000a04:	d1ac      	bne.n	8000960 <HAL_RCC_ClockConfig+0x5c>
 8000a06:	e790      	b.n	800092a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000a08:	6863      	ldr	r3, [r4, #4]
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_RCC_ClockConfig+0x128>)
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	68f2      	ldr	r2, [r6, #12]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	6063      	str	r3, [r4, #4]
 8000a14:	e78d      	b.n	8000932 <HAL_RCC_ClockConfig+0x2e>
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	40022000 	.word	0x40022000
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	080014fc 	.word	0x080014fc
 8000a24:	20000000 	.word	0x20000000
 8000a28:	00001388 	.word	0x00001388
 8000a2c:	fffff8ff 	.word	0xfffff8ff

08000a30 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000a30:	4b01      	ldr	r3, [pc, #4]	; (8000a38 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a32:	6818      	ldr	r0, [r3, #0]
}
 8000a34:	4770      	bx	lr
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	20000000 	.word	0x20000000

08000a3c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	055b      	lsls	r3, r3, #21
 8000a44:	0f5b      	lsrs	r3, r3, #29
 8000a46:	5cd3      	ldrb	r3, [r2, r3]
 8000a48:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a4a:	6810      	ldr	r0, [r2, #0]
 8000a4c:	40d8      	lsrs	r0, r3
}    
 8000a4e:	4770      	bx	lr
 8000a50:	40021000 	.word	0x40021000
 8000a54:	0800150c 	.word	0x0800150c
 8000a58:	20000000 	.word	0x20000000

08000a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000a5c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000a5e:	6803      	ldr	r3, [r0, #0]
{
 8000a60:	b085      	sub	sp, #20
 8000a62:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000a64:	03db      	lsls	r3, r3, #15
 8000a66:	d528      	bpl.n	8000aba <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a68:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000a6a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a6c:	4c37      	ldr	r4, [pc, #220]	; (8000b4c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000a6e:	0552      	lsls	r2, r2, #21
 8000a70:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000a72:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a74:	4213      	tst	r3, r2
 8000a76:	d108      	bne.n	8000a8a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a78:	69e3      	ldr	r3, [r4, #28]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	61e3      	str	r3, [r4, #28]
 8000a7e:	69e3      	ldr	r3, [r4, #28]
 8000a80:	4013      	ands	r3, r2
 8000a82:	9303      	str	r3, [sp, #12]
 8000a84:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000a86:	2301      	movs	r3, #1
 8000a88:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a8a:	2780      	movs	r7, #128	; 0x80
 8000a8c:	4e30      	ldr	r6, [pc, #192]	; (8000b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8000a8e:	007f      	lsls	r7, r7, #1
 8000a90:	6833      	ldr	r3, [r6, #0]
 8000a92:	423b      	tst	r3, r7
 8000a94:	d026      	beq.n	8000ae4 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000a96:	22c0      	movs	r2, #192	; 0xc0
 8000a98:	6a23      	ldr	r3, [r4, #32]
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	4e2d      	ldr	r6, [pc, #180]	; (8000b54 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000aa0:	d132      	bne.n	8000b08 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000aa2:	6a23      	ldr	r3, [r4, #32]
 8000aa4:	401e      	ands	r6, r3
 8000aa6:	686b      	ldr	r3, [r5, #4]
 8000aa8:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000aaa:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000aac:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d103      	bne.n	8000aba <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ab2:	69e3      	ldr	r3, [r4, #28]
 8000ab4:	4a28      	ldr	r2, [pc, #160]	; (8000b58 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000aba:	682a      	ldr	r2, [r5, #0]
 8000abc:	07d3      	lsls	r3, r2, #31
 8000abe:	d506      	bpl.n	8000ace <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	4922      	ldr	r1, [pc, #136]	; (8000b4c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000ac4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000ac6:	4383      	bics	r3, r0
 8000ac8:	68a8      	ldr	r0, [r5, #8]
 8000aca:	4303      	orrs	r3, r0
 8000acc:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000ace:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000ad0:	0693      	lsls	r3, r2, #26
 8000ad2:	d517      	bpl.n	8000b04 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000ad4:	2110      	movs	r1, #16
 8000ad6:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000ad8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ada:	438b      	bics	r3, r1
 8000adc:	68e9      	ldr	r1, [r5, #12]
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	e00f      	b.n	8000b04 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ae4:	6833      	ldr	r3, [r6, #0]
 8000ae6:	433b      	orrs	r3, r7
 8000ae8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000aea:	f7ff fbcd 	bl	8000288 <HAL_GetTick>
 8000aee:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af0:	6833      	ldr	r3, [r6, #0]
 8000af2:	423b      	tst	r3, r7
 8000af4:	d1cf      	bne.n	8000a96 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000af6:	f7ff fbc7 	bl	8000288 <HAL_GetTick>
 8000afa:	9b01      	ldr	r3, [sp, #4]
 8000afc:	1ac0      	subs	r0, r0, r3
 8000afe:	2864      	cmp	r0, #100	; 0x64
 8000b00:	d9f6      	bls.n	8000af0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8000b02:	2003      	movs	r0, #3
}
 8000b04:	b005      	add	sp, #20
 8000b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000b08:	6869      	ldr	r1, [r5, #4]
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d0c8      	beq.n	8000aa2 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000b10:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000b12:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000b14:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000b16:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000b18:	025b      	lsls	r3, r3, #9
 8000b1a:	4303      	orrs	r3, r0
 8000b1c:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000b1e:	6a23      	ldr	r3, [r4, #32]
 8000b20:	480e      	ldr	r0, [pc, #56]	; (8000b5c <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000b22:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000b24:	4003      	ands	r3, r0
 8000b26:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000b28:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000b2a:	07d3      	lsls	r3, r2, #31
 8000b2c:	d5b9      	bpl.n	8000aa2 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000b2e:	f7ff fbab 	bl	8000288 <HAL_GetTick>
 8000b32:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b34:	2202      	movs	r2, #2
 8000b36:	6a23      	ldr	r3, [r4, #32]
 8000b38:	4213      	tst	r3, r2
 8000b3a:	d1b2      	bne.n	8000aa2 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b3c:	f7ff fba4 	bl	8000288 <HAL_GetTick>
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000b42:	1bc0      	subs	r0, r0, r7
 8000b44:	4298      	cmp	r0, r3
 8000b46:	d9f5      	bls.n	8000b34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8000b48:	e7db      	b.n	8000b02 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40007000 	.word	0x40007000
 8000b54:	fffffcff 	.word	0xfffffcff
 8000b58:	efffffff 	.word	0xefffffff
 8000b5c:	fffeffff 	.word	0xfffeffff
 8000b60:	00001388 	.word	0x00001388

08000b64 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000b64:	21e0      	movs	r1, #224	; 0xe0
 8000b66:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000b68:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	438a      	bics	r2, r1
 8000b6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000b70:	2282      	movs	r2, #130	; 0x82
 8000b72:	6841      	ldr	r1, [r0, #4]
 8000b74:	0052      	lsls	r2, r2, #1
 8000b76:	4291      	cmp	r1, r2
 8000b78:	d10c      	bne.n	8000b94 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	6882      	ldr	r2, [r0, #8]
 8000b7e:	0209      	lsls	r1, r1, #8
 8000b80:	428a      	cmp	r2, r1
 8000b82:	d003      	beq.n	8000b8c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	00c9      	lsls	r1, r1, #3
 8000b88:	428a      	cmp	r2, r1
 8000b8a:	d103      	bne.n	8000b94 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000b8c:	2140      	movs	r1, #64	; 0x40
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	438a      	bics	r2, r1
 8000b92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000b98:	0189      	lsls	r1, r1, #6
 8000b9a:	428a      	cmp	r2, r1
 8000b9c:	d106      	bne.n	8000bac <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 8000b9e:	6819      	ldr	r1, [r3, #0]
 8000ba0:	4c07      	ldr	r4, [pc, #28]	; (8000bc0 <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8000ba2:	4021      	ands	r1, r4
 8000ba4:	6019      	str	r1, [r3, #0]
 8000ba6:	6819      	ldr	r1, [r3, #0]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000bac:	0003      	movs	r3, r0
 8000bae:	2201      	movs	r2, #1
 8000bb0:	335d      	adds	r3, #93	; 0x5d
 8000bb2:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	305c      	adds	r0, #92	; 0x5c
 8000bb8:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 8000bba:	2003      	movs	r0, #3
 8000bbc:	bd10      	pop	{r4, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	ffffdfff 	.word	0xffffdfff

08000bc4 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8000bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc6:	0005      	movs	r5, r0
 8000bc8:	000c      	movs	r4, r1
 8000bca:	0016      	movs	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000bcc:	2780      	movs	r7, #128	; 0x80
 8000bce:	682b      	ldr	r3, [r5, #0]
 8000bd0:	6898      	ldr	r0, [r3, #8]
 8000bd2:	4038      	ands	r0, r7
 8000bd4:	d006      	beq.n	8000be4 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x20>
    if (Timeout != HAL_MAX_DELAY)
 8000bd6:	1c62      	adds	r2, r4, #1
 8000bd8:	d0fa      	beq.n	8000bd0 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000bda:	2c00      	cmp	r4, #0
 8000bdc:	d103      	bne.n	8000be6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x22>
 8000bde:	0028      	movs	r0, r5
 8000be0:	f7ff ffc0 	bl	8000b64 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8000be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000be6:	f7ff fb4f 	bl	8000288 <HAL_GetTick>
 8000bea:	1b80      	subs	r0, r0, r6
 8000bec:	4284      	cmp	r4, r0
 8000bee:	d8ee      	bhi.n	8000bce <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
 8000bf0:	e7f5      	b.n	8000bde <SPI_WaitFlagStateUntilTimeout.constprop.9+0x1a>

08000bf2 <SPI_WaitFifoStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000bf2:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000bf4:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000bf6:	0006      	movs	r6, r0
 8000bf8:	000d      	movs	r5, r1
 8000bfa:	0014      	movs	r4, r2
 8000bfc:	b085      	sub	sp, #20
 8000bfe:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000c00:	00ff      	lsls	r7, r7, #3
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000c02:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 8000c04:	6831      	ldr	r1, [r6, #0]
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000c06:	1dda      	adds	r2, r3, #7
  while ((hspi->Instance->SR & Fifo) != State)
 8000c08:	6888      	ldr	r0, [r1, #8]
 8000c0a:	4028      	ands	r0, r5
 8000c0c:	d00c      	beq.n	8000c28 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x36>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000c0e:	42bd      	cmp	r5, r7
 8000c10:	d103      	bne.n	8000c1a <SPI_WaitFifoStateUntilTimeout.constprop.10+0x28>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000c12:	7b0b      	ldrb	r3, [r1, #12]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	7013      	strb	r3, [r2, #0]
      UNUSED(tmpreg);
 8000c18:	7813      	ldrb	r3, [r2, #0]
    if (Timeout != HAL_MAX_DELAY)
 8000c1a:	1c63      	adds	r3, r4, #1
 8000c1c:	d0f4      	beq.n	8000c08 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x16>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000c1e:	2c00      	cmp	r4, #0
 8000c20:	d104      	bne.n	8000c2c <SPI_WaitFifoStateUntilTimeout.constprop.10+0x3a>
 8000c22:	0030      	movs	r0, r6
 8000c24:	f7ff ff9e 	bl	8000b64 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8000c28:	b005      	add	sp, #20
 8000c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000c2c:	f7ff fb2c 	bl	8000288 <HAL_GetTick>
 8000c30:	9b01      	ldr	r3, [sp, #4]
 8000c32:	1ac0      	subs	r0, r0, r3
 8000c34:	4284      	cmp	r4, r0
 8000c36:	d8e4      	bhi.n	8000c02 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x10>
 8000c38:	e7f3      	b.n	8000c22 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x30>

08000c3a <SPI_EndRxTxTransaction>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000c3a:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000c3c:	0013      	movs	r3, r2
{
 8000c3e:	000d      	movs	r5, r1
 8000c40:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000c42:	000a      	movs	r2, r1
 8000c44:	21c0      	movs	r1, #192	; 0xc0
 8000c46:	0149      	lsls	r1, r1, #5
{
 8000c48:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000c4a:	f7ff ffd2 	bl	8000bf2 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	d005      	beq.n	8000c5e <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c52:	2320      	movs	r3, #32
 8000c54:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8000c56:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	6623      	str	r3, [r4, #96]	; 0x60
 8000c5c:	e00f      	b.n	8000c7e <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000c5e:	0032      	movs	r2, r6
 8000c60:	0029      	movs	r1, r5
 8000c62:	0020      	movs	r0, r4
 8000c64:	f7ff ffae 	bl	8000bc4 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000c68:	2800      	cmp	r0, #0
 8000c6a:	d1f2      	bne.n	8000c52 <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000c6c:	21c0      	movs	r1, #192	; 0xc0
 8000c6e:	0033      	movs	r3, r6
 8000c70:	002a      	movs	r2, r5
 8000c72:	00c9      	lsls	r1, r1, #3
 8000c74:	0020      	movs	r0, r4
 8000c76:	f7ff ffbc 	bl	8000bf2 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	d1e9      	bne.n	8000c52 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8000c7e:	bd70      	pop	{r4, r5, r6, pc}

08000c80 <HAL_SPI_Init>:
{
 8000c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c82:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000c84:	2001      	movs	r0, #1
  if (hspi == NULL)
 8000c86:	2c00      	cmp	r4, #0
 8000c88:	d04b      	beq.n	8000d22 <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8a:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000c8c:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000c90:	355d      	adds	r5, #93	; 0x5d
 8000c92:	782b      	ldrb	r3, [r5, #0]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d105      	bne.n	8000ca6 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8000c9a:	0022      	movs	r2, r4
 8000c9c:	325c      	adds	r2, #92	; 0x5c
 8000c9e:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8000ca0:	0020      	movs	r0, r4
 8000ca2:	f000 fb33 	bl	800130c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ca6:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000ca8:	2240      	movs	r2, #64	; 0x40
 8000caa:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000cac:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8000cae:	680b      	ldr	r3, [r1, #0]
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	4393      	bics	r3, r2
 8000cb4:	600b      	str	r3, [r1, #0]
 8000cb6:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000cb8:	68e2      	ldr	r2, [r4, #12]
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d931      	bls.n	8000d24 <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000cc0:	26f0      	movs	r6, #240	; 0xf0
 8000cc2:	0136      	lsls	r6, r6, #4
 8000cc4:	42b2      	cmp	r2, r6
 8000cc6:	d133      	bne.n	8000d30 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000cc8:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8000cca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	d103      	bne.n	8000cd8 <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d92f      	bls.n	8000d34 <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8000cd4:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000cd6:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8000cd8:	68a7      	ldr	r7, [r4, #8]
 8000cda:	6863      	ldr	r3, [r4, #4]
 8000cdc:	69a0      	ldr	r0, [r4, #24]
 8000cde:	433b      	orrs	r3, r7
 8000ce0:	6927      	ldr	r7, [r4, #16]
 8000ce2:	433b      	orrs	r3, r7
 8000ce4:	6967      	ldr	r7, [r4, #20]
 8000ce6:	433b      	orrs	r3, r7
 8000ce8:	69e7      	ldr	r7, [r4, #28]
 8000cea:	433b      	orrs	r3, r7
 8000cec:	6a27      	ldr	r7, [r4, #32]
 8000cee:	433b      	orrs	r3, r7
 8000cf0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8000cf2:	433b      	orrs	r3, r7
 8000cf4:	2780      	movs	r7, #128	; 0x80
 8000cf6:	00bf      	lsls	r7, r7, #2
 8000cf8:	4007      	ands	r7, r0
 8000cfa:	433b      	orrs	r3, r7
 8000cfc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d00:	0c00      	lsrs	r0, r0, #16
 8000d02:	431a      	orrs	r2, r3
 8000d04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d06:	431a      	orrs	r2, r3
 8000d08:	2304      	movs	r3, #4
 8000d0a:	4018      	ands	r0, r3
 8000d0c:	4310      	orrs	r0, r2
 8000d0e:	4306      	orrs	r6, r0
 8000d10:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000d12:	69cb      	ldr	r3, [r1, #28]
 8000d14:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d16:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000d1c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d1e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000d20:	702b      	strb	r3, [r5, #0]
}
 8000d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000d24:	2680      	movs	r6, #128	; 0x80
 8000d26:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d0ce      	beq.n	8000cca <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d2c:	62a0      	str	r0, [r4, #40]	; 0x28
 8000d2e:	e7cc      	b.n	8000cca <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000d30:	0006      	movs	r6, r0
 8000d32:	e7fb      	b.n	8000d2c <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e7ce      	b.n	8000cd6 <HAL_SPI_Init+0x56>
 8000d38:	fffff7ff 	.word	0xfffff7ff

08000d3c <HAL_SPI_Transmit>:
{
 8000d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3e:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8000d40:	0003      	movs	r3, r0
{
 8000d42:	b087      	sub	sp, #28
  __HAL_LOCK(hspi);
 8000d44:	335c      	adds	r3, #92	; 0x5c
{
 8000d46:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 8000d48:	9302      	str	r3, [sp, #8]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
{
 8000d4c:	0004      	movs	r4, r0
 8000d4e:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8000d50:	2602      	movs	r6, #2
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d100      	bne.n	8000d58 <HAL_SPI_Transmit+0x1c>
 8000d56:	e07a      	b.n	8000e4e <HAL_SPI_Transmit+0x112>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	9a02      	ldr	r2, [sp, #8]
 8000d5c:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000d5e:	f7ff fa93 	bl	8000288 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8000d62:	0023      	movs	r3, r4
 8000d64:	335d      	adds	r3, #93	; 0x5d
  tickstart = HAL_GetTick();
 8000d66:	9000      	str	r0, [sp, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8000d68:	9303      	str	r3, [sp, #12]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d167      	bne.n	8000e42 <HAL_SPI_Transmit+0x106>
    errorcode = HAL_ERROR;
 8000d72:	001e      	movs	r6, r3
  if ((pData == NULL) || (Size == 0U))
 8000d74:	2d00      	cmp	r5, #0
 8000d76:	d064      	beq.n	8000e42 <HAL_SPI_Transmit+0x106>
 8000d78:	9b01      	ldr	r3, [sp, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d061      	beq.n	8000e42 <HAL_SPI_Transmit+0x106>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	9a03      	ldr	r2, [sp, #12]
 8000d82:	7013      	strb	r3, [r2, #0]
  hspi->TxXferSize  = Size;
 8000d84:	466a      	mov	r2, sp
 8000d86:	8892      	ldrh	r2, [r2, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000d88:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 8000d8a:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8000d8c:	466a      	mov	r2, sp
 8000d8e:	8892      	ldrh	r2, [r2, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000d90:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 8000d92:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8000d94:	1da2      	adds	r2, r4, #6
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000d96:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000d98:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8000d9a:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8000d9c:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000d9e:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000da0:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8000da2:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	68a2      	ldr	r2, [r4, #8]
 8000da8:	021b      	lsls	r3, r3, #8
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d105      	bne.n	8000dba <HAL_SPI_Transmit+0x7e>
    SPI_1LINE_TX(hspi);
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	6822      	ldr	r2, [r4, #0]
 8000db2:	01db      	lsls	r3, r3, #7
 8000db4:	6811      	ldr	r1, [r2, #0]
 8000db6:	430b      	orrs	r3, r1
 8000db8:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000dba:	2240      	movs	r2, #64	; 0x40
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	6819      	ldr	r1, [r3, #0]
 8000dc0:	4211      	tst	r1, r2
 8000dc2:	d102      	bne.n	8000dca <HAL_SPI_Transmit+0x8e>
    __HAL_SPI_ENABLE(hspi);
 8000dc4:	6819      	ldr	r1, [r3, #0]
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000dca:	21e0      	movs	r1, #224	; 0xe0
 8000dcc:	68e0      	ldr	r0, [r4, #12]
 8000dce:	00c9      	lsls	r1, r1, #3
 8000dd0:	6862      	ldr	r2, [r4, #4]
 8000dd2:	4288      	cmp	r0, r1
 8000dd4:	d947      	bls.n	8000e66 <HAL_SPI_Transmit+0x12a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d002      	beq.n	8000de0 <HAL_SPI_Transmit+0xa4>
 8000dda:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000ddc:	2a01      	cmp	r2, #1
 8000dde:	d106      	bne.n	8000dee <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)pData);
 8000de0:	882a      	ldrh	r2, [r5, #0]
      pData += sizeof(uint16_t);
 8000de2:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)pData);
 8000de4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000de6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000de8:	3b01      	subs	r3, #1
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000dee:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8000df0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d116      	bne.n	8000e24 <HAL_SPI_Transmit+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000df6:	9a00      	ldr	r2, [sp, #0]
 8000df8:	0039      	movs	r1, r7
 8000dfa:	0020      	movs	r0, r4
 8000dfc:	f7ff ff1d 	bl	8000c3a <SPI_EndRxTxTransaction>
 8000e00:	2800      	cmp	r0, #0
 8000e02:	d000      	beq.n	8000e06 <HAL_SPI_Transmit+0xca>
 8000e04:	e06c      	b.n	8000ee0 <HAL_SPI_Transmit+0x1a4>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000e06:	68a3      	ldr	r3, [r4, #8]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d106      	bne.n	8000e1a <HAL_SPI_Transmit+0xde>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000e0c:	9305      	str	r3, [sp, #20]
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	68da      	ldr	r2, [r3, #12]
 8000e12:	9205      	str	r2, [sp, #20]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	9305      	str	r3, [sp, #20]
 8000e18:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000e1a:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8000e1c:	1e73      	subs	r3, r6, #1
 8000e1e:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 8000e20:	b2f6      	uxtb	r6, r6
 8000e22:	e00e      	b.n	8000e42 <HAL_SPI_Transmit+0x106>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	4232      	tst	r2, r6
 8000e2a:	d007      	beq.n	8000e3c <HAL_SPI_Transmit+0x100>
        hspi->Instance->DR = *((uint16_t *)pData);
 8000e2c:	882a      	ldrh	r2, [r5, #0]
        pData += sizeof(uint16_t);
 8000e2e:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)pData);
 8000e30:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8000e32:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e34:	3b01      	subs	r3, #1
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000e3a:	e7d9      	b.n	8000df0 <HAL_SPI_Transmit+0xb4>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000e3c:	2f00      	cmp	r7, #0
 8000e3e:	d109      	bne.n	8000e54 <HAL_SPI_Transmit+0x118>
          errorcode = HAL_TIMEOUT;
 8000e40:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000e42:	2301      	movs	r3, #1
 8000e44:	9a03      	ldr	r2, [sp, #12]
 8000e46:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8000e48:	2300      	movs	r3, #0
 8000e4a:	9a02      	ldr	r2, [sp, #8]
 8000e4c:	7013      	strb	r3, [r2, #0]
}
 8000e4e:	0030      	movs	r0, r6
 8000e50:	b007      	add	sp, #28
 8000e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000e54:	1c7b      	adds	r3, r7, #1
 8000e56:	d0cb      	beq.n	8000df0 <HAL_SPI_Transmit+0xb4>
 8000e58:	f7ff fa16 	bl	8000288 <HAL_GetTick>
 8000e5c:	9b00      	ldr	r3, [sp, #0]
 8000e5e:	1ac0      	subs	r0, r0, r3
 8000e60:	4287      	cmp	r7, r0
 8000e62:	d8c5      	bhi.n	8000df0 <HAL_SPI_Transmit+0xb4>
 8000e64:	e7ec      	b.n	8000e40 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000e66:	2a00      	cmp	r2, #0
 8000e68:	d002      	beq.n	8000e70 <HAL_SPI_Transmit+0x134>
 8000e6a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000e6c:	2a01      	cmp	r2, #1
 8000e6e:	d109      	bne.n	8000e84 <HAL_SPI_Transmit+0x148>
      if (hspi->TxXferCount > 1U)
 8000e70:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000e72:	2a01      	cmp	r2, #1
 8000e74:	d919      	bls.n	8000eaa <HAL_SPI_Transmit+0x16e>
        hspi->Instance->DR = *((uint16_t *)pData);
 8000e76:	882a      	ldrh	r2, [r5, #0]
        pData += sizeof(uint16_t);
 8000e78:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)pData);
 8000e7a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8000e7c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e84:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8000e86:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0b4      	beq.n	8000df6 <HAL_SPI_Transmit+0xba>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e8c:	6823      	ldr	r3, [r4, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	4232      	tst	r2, r6
 8000e92:	d01a      	beq.n	8000eca <HAL_SPI_Transmit+0x18e>
        if (hspi->TxXferCount > 1U)
 8000e94:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000e96:	2a01      	cmp	r2, #1
 8000e98:	d90f      	bls.n	8000eba <HAL_SPI_Transmit+0x17e>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000e9a:	882a      	ldrh	r2, [r5, #0]
          pData += sizeof(uint16_t);
 8000e9c:	3502      	adds	r5, #2
          hspi->Instance->DR = *((uint16_t *)pData);
 8000e9e:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8000ea0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000ea8:	e7ed      	b.n	8000e86 <HAL_SPI_Transmit+0x14a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8000eaa:	782a      	ldrb	r2, [r5, #0]
 8000eac:	3501      	adds	r5, #1
 8000eae:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000eb0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000eb8:	e7e4      	b.n	8000e84 <HAL_SPI_Transmit+0x148>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8000eba:	782a      	ldrb	r2, [r5, #0]
 8000ebc:	3501      	adds	r5, #1
 8000ebe:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8000ec0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000ec8:	e7dd      	b.n	8000e86 <HAL_SPI_Transmit+0x14a>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000eca:	2f00      	cmp	r7, #0
 8000ecc:	d0b8      	beq.n	8000e40 <HAL_SPI_Transmit+0x104>
 8000ece:	1c7b      	adds	r3, r7, #1
 8000ed0:	d0d9      	beq.n	8000e86 <HAL_SPI_Transmit+0x14a>
 8000ed2:	f7ff f9d9 	bl	8000288 <HAL_GetTick>
 8000ed6:	9b00      	ldr	r3, [sp, #0]
 8000ed8:	1ac0      	subs	r0, r0, r3
 8000eda:	4287      	cmp	r7, r0
 8000edc:	d8d3      	bhi.n	8000e86 <HAL_SPI_Transmit+0x14a>
 8000ede:	e7af      	b.n	8000e40 <HAL_SPI_Transmit+0x104>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000ee0:	2320      	movs	r3, #32
 8000ee2:	6623      	str	r3, [r4, #96]	; 0x60
 8000ee4:	e78f      	b.n	8000e06 <HAL_SPI_Transmit+0xca>
	...

08000ee8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ee8:	b570      	push	{r4, r5, r6, lr}
 8000eea:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000eec:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000eee:	69c2      	ldr	r2, [r0, #28]
 8000ef0:	6883      	ldr	r3, [r0, #8]
 8000ef2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ef4:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ef6:	4303      	orrs	r3, r0
 8000ef8:	6960      	ldr	r0, [r4, #20]
 8000efa:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000efc:	4835      	ldr	r0, [pc, #212]	; (8000fd4 <UART_SetConfig+0xec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000efe:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f00:	4001      	ands	r1, r0
 8000f02:	430b      	orrs	r3, r1
 8000f04:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f06:	686b      	ldr	r3, [r5, #4]
 8000f08:	4933      	ldr	r1, [pc, #204]	; (8000fd8 <UART_SetConfig+0xf0>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f0a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f0c:	400b      	ands	r3, r1
 8000f0e:	68e1      	ldr	r1, [r4, #12]
 8000f10:	430b      	orrs	r3, r1
 8000f12:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f14:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f16:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f18:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f1a:	4830      	ldr	r0, [pc, #192]	; (8000fdc <UART_SetConfig+0xf4>)
 8000f1c:	4001      	ands	r1, r0
 8000f1e:	430b      	orrs	r3, r1

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f20:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f22:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f24:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <UART_SetConfig+0xf8>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	400b      	ands	r3, r1
 8000f2a:	492e      	ldr	r1, [pc, #184]	; (8000fe4 <UART_SetConfig+0xfc>)
 8000f2c:	5cc8      	ldrb	r0, [r1, r3]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d12c      	bne.n	8000f90 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8000f36:	2808      	cmp	r0, #8
 8000f38:	d827      	bhi.n	8000f8a <UART_SetConfig+0xa2>
 8000f3a:	f7ff f8e5 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000f3e:	2605      	.short	0x2605
 8000f40:	261e260b 	.word	0x261e260b
 8000f44:	2626      	.short	0x2626
 8000f46:	21          	.byte	0x21
 8000f47:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000f48:	f7ff fd78 	bl	8000a3c <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000f4c:	6863      	ldr	r3, [r4, #4]
 8000f4e:	0040      	lsls	r0, r0, #1
 8000f50:	085b      	lsrs	r3, r3, #1
 8000f52:	e002      	b.n	8000f5a <UART_SetConfig+0x72>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000f54:	6863      	ldr	r3, [r4, #4]
 8000f56:	0858      	lsrs	r0, r3, #1
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <UART_SetConfig+0x100>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000f5a:	18c0      	adds	r0, r0, r3
 8000f5c:	6861      	ldr	r1, [r4, #4]
 8000f5e:	f7ff f8dd 	bl	800011c <__udivsi3>
 8000f62:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8000f64:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8000f66:	220f      	movs	r2, #15
 8000f68:	0019      	movs	r1, r3
 8000f6a:	4391      	bics	r1, r2
 8000f6c:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000f6e:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8000f70:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000f72:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8000f74:	4313      	orrs	r3, r2
 8000f76:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 8000f78:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000f7a:	f7ff fc91 	bl	80008a0 <HAL_RCC_GetSysClockFreq>
 8000f7e:	e7e5      	b.n	8000f4c <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000f80:	6863      	ldr	r3, [r4, #4]
 8000f82:	0858      	lsrs	r0, r3, #1
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	025b      	lsls	r3, r3, #9
 8000f88:	e7e7      	b.n	8000f5a <UART_SetConfig+0x72>
        ret = HAL_ERROR;
 8000f8a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e7ea      	b.n	8000f66 <UART_SetConfig+0x7e>
    switch (clocksource)
 8000f90:	2808      	cmp	r0, #8
 8000f92:	d81d      	bhi.n	8000fd0 <UART_SetConfig+0xe8>
 8000f94:	f7ff f8b8 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000f98:	1c0a1c05 	.word	0x1c0a1c05
 8000f9c:	1c1c1c14 	.word	0x1c1c1c14
 8000fa0:	17          	.byte	0x17
 8000fa1:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000fa2:	f7ff fd4b 	bl	8000a3c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000fa6:	6861      	ldr	r1, [r4, #4]
 8000fa8:	084b      	lsrs	r3, r1, #1
 8000faa:	e002      	b.n	8000fb2 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000fac:	6861      	ldr	r1, [r4, #4]
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <UART_SetConfig+0x104>)
 8000fb0:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000fb2:	18c0      	adds	r0, r0, r3
 8000fb4:	f7ff f8b2 	bl	800011c <__udivsi3>
 8000fb8:	b280      	uxth	r0, r0
 8000fba:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000fbc:	2000      	movs	r0, #0
        break;
 8000fbe:	e7db      	b.n	8000f78 <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000fc0:	f7ff fc6e 	bl	80008a0 <HAL_RCC_GetSysClockFreq>
 8000fc4:	e7ef      	b.n	8000fa6 <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	6861      	ldr	r1, [r4, #4]
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	0848      	lsrs	r0, r1, #1
 8000fce:	e7f0      	b.n	8000fb2 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	e7d1      	b.n	8000f78 <UART_SetConfig+0x90>
 8000fd4:	ffff69f3 	.word	0xffff69f3
 8000fd8:	ffffcfff 	.word	0xffffcfff
 8000fdc:	fffff4ff 	.word	0xfffff4ff
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	080014f8 	.word	0x080014f8
 8000fe8:	00f42400 	.word	0x00f42400
 8000fec:	007a1200 	.word	0x007a1200

08000ff0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000ff0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000ff2:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000ff4:	07da      	lsls	r2, r3, #31
 8000ff6:	d506      	bpl.n	8001006 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8000ff8:	6801      	ldr	r1, [r0, #0]
 8000ffa:	4c28      	ldr	r4, [pc, #160]	; (800109c <UART_AdvFeatureConfig+0xac>)
 8000ffc:	684a      	ldr	r2, [r1, #4]
 8000ffe:	4022      	ands	r2, r4
 8001000:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001002:	4322      	orrs	r2, r4
 8001004:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001006:	079a      	lsls	r2, r3, #30
 8001008:	d506      	bpl.n	8001018 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800100a:	6801      	ldr	r1, [r0, #0]
 800100c:	4c24      	ldr	r4, [pc, #144]	; (80010a0 <UART_AdvFeatureConfig+0xb0>)
 800100e:	684a      	ldr	r2, [r1, #4]
 8001010:	4022      	ands	r2, r4
 8001012:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001014:	4322      	orrs	r2, r4
 8001016:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001018:	075a      	lsls	r2, r3, #29
 800101a:	d506      	bpl.n	800102a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800101c:	6801      	ldr	r1, [r0, #0]
 800101e:	4c21      	ldr	r4, [pc, #132]	; (80010a4 <UART_AdvFeatureConfig+0xb4>)
 8001020:	684a      	ldr	r2, [r1, #4]
 8001022:	4022      	ands	r2, r4
 8001024:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001026:	4322      	orrs	r2, r4
 8001028:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800102a:	071a      	lsls	r2, r3, #28
 800102c:	d506      	bpl.n	800103c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800102e:	6801      	ldr	r1, [r0, #0]
 8001030:	4c1d      	ldr	r4, [pc, #116]	; (80010a8 <UART_AdvFeatureConfig+0xb8>)
 8001032:	684a      	ldr	r2, [r1, #4]
 8001034:	4022      	ands	r2, r4
 8001036:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001038:	4322      	orrs	r2, r4
 800103a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800103c:	06da      	lsls	r2, r3, #27
 800103e:	d506      	bpl.n	800104e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001040:	6801      	ldr	r1, [r0, #0]
 8001042:	4c1a      	ldr	r4, [pc, #104]	; (80010ac <UART_AdvFeatureConfig+0xbc>)
 8001044:	688a      	ldr	r2, [r1, #8]
 8001046:	4022      	ands	r2, r4
 8001048:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800104a:	4322      	orrs	r2, r4
 800104c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800104e:	069a      	lsls	r2, r3, #26
 8001050:	d506      	bpl.n	8001060 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001052:	6801      	ldr	r1, [r0, #0]
 8001054:	4c16      	ldr	r4, [pc, #88]	; (80010b0 <UART_AdvFeatureConfig+0xc0>)
 8001056:	688a      	ldr	r2, [r1, #8]
 8001058:	4022      	ands	r2, r4
 800105a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800105c:	4322      	orrs	r2, r4
 800105e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001060:	065a      	lsls	r2, r3, #25
 8001062:	d510      	bpl.n	8001086 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001064:	6801      	ldr	r1, [r0, #0]
 8001066:	4d13      	ldr	r5, [pc, #76]	; (80010b4 <UART_AdvFeatureConfig+0xc4>)
 8001068:	684a      	ldr	r2, [r1, #4]
 800106a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800106c:	402a      	ands	r2, r5
 800106e:	4322      	orrs	r2, r4
 8001070:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	0352      	lsls	r2, r2, #13
 8001076:	4294      	cmp	r4, r2
 8001078:	d105      	bne.n	8001086 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800107a:	684a      	ldr	r2, [r1, #4]
 800107c:	4c0e      	ldr	r4, [pc, #56]	; (80010b8 <UART_AdvFeatureConfig+0xc8>)
 800107e:	4022      	ands	r2, r4
 8001080:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001082:	4322      	orrs	r2, r4
 8001084:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001086:	061b      	lsls	r3, r3, #24
 8001088:	d506      	bpl.n	8001098 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800108a:	6802      	ldr	r2, [r0, #0]
 800108c:	490b      	ldr	r1, [pc, #44]	; (80010bc <UART_AdvFeatureConfig+0xcc>)
 800108e:	6853      	ldr	r3, [r2, #4]
 8001090:	400b      	ands	r3, r1
 8001092:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001094:	430b      	orrs	r3, r1
 8001096:	6053      	str	r3, [r2, #4]
  }
}
 8001098:	bd30      	pop	{r4, r5, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	fffdffff 	.word	0xfffdffff
 80010a0:	fffeffff 	.word	0xfffeffff
 80010a4:	fffbffff 	.word	0xfffbffff
 80010a8:	ffff7fff 	.word	0xffff7fff
 80010ac:	ffffefff 	.word	0xffffefff
 80010b0:	ffffdfff 	.word	0xffffdfff
 80010b4:	ffefffff 	.word	0xffefffff
 80010b8:	ff9fffff 	.word	0xff9fffff
 80010bc:	fff7ffff 	.word	0xfff7ffff

080010c0 <HAL_HalfDuplex_Init>:
{
 80010c0:	b570      	push	{r4, r5, r6, lr}
 80010c2:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80010c4:	d101      	bne.n	80010ca <HAL_HalfDuplex_Init+0xa>
    return HAL_ERROR;
 80010c6:	2001      	movs	r0, #1
}
 80010c8:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 80010ca:	0005      	movs	r5, r0
 80010cc:	3569      	adds	r5, #105	; 0x69
 80010ce:	782b      	ldrb	r3, [r5, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d104      	bne.n	80010e0 <HAL_HalfDuplex_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 80010d6:	0002      	movs	r2, r0
 80010d8:	3268      	adds	r2, #104	; 0x68
 80010da:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80010dc:	f000 f93a 	bl	8001354 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80010e0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80010e2:	2101      	movs	r1, #1
 80010e4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80010e6:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80010e8:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80010ea:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80010ec:	438b      	bics	r3, r1
 80010ee:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80010f0:	f7ff fefa 	bl	8000ee8 <UART_SetConfig>
 80010f4:	2801      	cmp	r0, #1
 80010f6:	d0e6      	beq.n	80010c6 <HAL_HalfDuplex_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80010f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <HAL_HalfDuplex_Init+0x44>
    UART_AdvFeatureConfig(huart);
 80010fe:	0020      	movs	r0, r4
 8001100:	f7ff ff76 	bl	8000ff0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	490b      	ldr	r1, [pc, #44]	; (8001134 <HAL_HalfDuplex_Init+0x74>)
 8001108:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800110a:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800110c:	400a      	ands	r2, r1
 800110e:	605a      	str	r2, [r3, #4]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001110:	2208      	movs	r2, #8
 8001112:	6899      	ldr	r1, [r3, #8]
 8001114:	430a      	orrs	r2, r1
 8001116:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001118:	2201      	movs	r2, #1
 800111a:	6819      	ldr	r1, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8001120:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 8001122:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001124:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8001126:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001128:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 800112a:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800112c:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 800112e:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001130:	e7ca      	b.n	80010c8 <HAL_HalfDuplex_Init+0x8>
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	fffff7ff 	.word	0xfffff7ff

08001138 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001138:	2302      	movs	r3, #2
{
 800113a:	b510      	push	{r4, lr}
 800113c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001140:	330e      	adds	r3, #14
 8001142:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001144:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001146:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001148:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114a:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800114c:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114e:	f7ff f9c5 	bl	80004dc <HAL_RCC_OscConfig>
 8001152:	1e01      	subs	r1, r0, #0
 8001154:	d000      	beq.n	8001158 <SystemClock_Config+0x20>
 8001156:	e7fe      	b.n	8001156 <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001158:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800115a:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115c:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800115e:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001160:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001162:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001164:	f7ff fbce 	bl	8000904 <HAL_RCC_ClockConfig>
 8001168:	2800      	cmp	r0, #0
 800116a:	d000      	beq.n	800116e <SystemClock_Config+0x36>
 800116c:	e7fe      	b.n	800116c <SystemClock_Config+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800116e:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001170:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001172:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001174:	f7ff fc72 	bl	8000a5c <HAL_RCCEx_PeriphCLKConfig>
 8001178:	1e04      	subs	r4, r0, #0
 800117a:	d000      	beq.n	800117e <SystemClock_Config+0x46>
 800117c:	e7fe      	b.n	800117c <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800117e:	f7ff fc57 	bl	8000a30 <HAL_RCC_GetHCLKFreq>
 8001182:	21fa      	movs	r1, #250	; 0xfa
 8001184:	0089      	lsls	r1, r1, #2
 8001186:	f7fe ffc9 	bl	800011c <__udivsi3>
 800118a:	f7ff f8c3 	bl	8000314 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800118e:	2004      	movs	r0, #4
 8001190:	f7ff f8da 	bl	8000348 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001194:	2001      	movs	r0, #1
 8001196:	0022      	movs	r2, r4
 8001198:	0021      	movs	r1, r4
 800119a:	4240      	negs	r0, r0
 800119c:	f7ff f88a 	bl	80002b4 <HAL_NVIC_SetPriority>
}
 80011a0:	b014      	add	sp, #80	; 0x50
 80011a2:	bd10      	pop	{r4, pc}

080011a4 <digiPot_Write>:
 *
 * Usage: digiPot_write(i);
 ******************************************************************************/

void digiPot_Write(int i)
{
 80011a4:	b530      	push	{r4, r5, lr}
	 int x = 0x00;

	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011a6:	2490      	movs	r4, #144	; 0x90
	 int x = 0x00;
 80011a8:	2200      	movs	r2, #0
{
 80011aa:	b085      	sub	sp, #20
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011ac:	05e4      	lsls	r4, r4, #23
{
 80011ae:	9001      	str	r0, [sp, #4]
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011b0:	2110      	movs	r1, #16
 80011b2:	0020      	movs	r0, r4
	 int x = 0x00;
 80011b4:	9203      	str	r2, [sp, #12]
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011b6:	f7ff f98b 	bl	80004d0 <HAL_GPIO_WritePin>
	 HAL_SPI_Transmit(&hspi1, (uint8_t*)&x, 0x01, 10);
 80011ba:	4d0a      	ldr	r5, [pc, #40]	; (80011e4 <digiPot_Write+0x40>)
 80011bc:	a903      	add	r1, sp, #12
 80011be:	230a      	movs	r3, #10
 80011c0:	2201      	movs	r2, #1
 80011c2:	0028      	movs	r0, r5
 80011c4:	f7ff fdba 	bl	8000d3c <HAL_SPI_Transmit>
     HAL_SPI_Transmit(&hspi1, (uint8_t*)&i, 0x01, 10);
 80011c8:	230a      	movs	r3, #10
 80011ca:	a901      	add	r1, sp, #4
 80011cc:	2201      	movs	r2, #1
 80011ce:	0028      	movs	r0, r5
 80011d0:	f7ff fdb4 	bl	8000d3c <HAL_SPI_Transmit>
     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2110      	movs	r1, #16
 80011d8:	0020      	movs	r0, r4
 80011da:	f7ff f979 	bl	80004d0 <HAL_GPIO_WritePin>
}
 80011de:	b005      	add	sp, #20
 80011e0:	bd30      	pop	{r4, r5, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	20000094 	.word	0x20000094

080011e8 <main>:
{
 80011e8:	b530      	push	{r4, r5, lr}
 80011ea:	b087      	sub	sp, #28
  HAL_Init();
 80011ec:	f7ff f834 	bl	8000258 <HAL_Init>
  SystemClock_Config();
 80011f0:	f7ff ffa2 	bl	8001138 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	2080      	movs	r0, #128	; 0x80
 80011f6:	4a31      	ldr	r2, [pc, #196]	; (80012bc <main+0xd4>)
 80011f8:	0280      	lsls	r0, r0, #10
 80011fa:	6951      	ldr	r1, [r2, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4301      	orrs	r1, r0
 8001200:	6151      	str	r1, [r2, #20]
 8001202:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001204:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4003      	ands	r3, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001208:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001212:	f7ff f95d 	bl	80004d0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001216:	2310      	movs	r3, #16
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800121a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	3b0f      	subs	r3, #15
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f7ff f8a2 	bl	8000370 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 800122c:	4c24      	ldr	r4, [pc, #144]	; (80012c0 <main+0xd8>)
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <main+0xdc>)
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001230:	0020      	movs	r0, r4
  hspi1.Instance = SPI1;
 8001232:	6023      	str	r3, [r4, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001234:	2382      	movs	r3, #130	; 0x82
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	6063      	str	r3, [r4, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	60a3      	str	r3, [r4, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001240:	23e0      	movs	r3, #224	; 0xe0
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	60e3      	str	r3, [r4, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	61a3      	str	r3, [r4, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800124c:	3be9      	subs	r3, #233	; 0xe9
 800124e:	3bff      	subs	r3, #255	; 0xff
 8001250:	61e3      	str	r3, [r4, #28]
  hspi1.Init.CRCPolynomial = 7;
 8001252:	3b11      	subs	r3, #17
 8001254:	62e3      	str	r3, [r4, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001256:	3301      	adds	r3, #1
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001258:	6125      	str	r5, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125a:	6165      	str	r5, [r4, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800125c:	6225      	str	r5, [r4, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800125e:	6265      	str	r5, [r4, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001260:	62a5      	str	r5, [r4, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001262:	6325      	str	r5, [r4, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001264:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001266:	f7ff fd0b 	bl	8000c80 <HAL_SPI_Init>
 800126a:	42a8      	cmp	r0, r5
 800126c:	d000      	beq.n	8001270 <main+0x88>
 800126e:	e7fe      	b.n	800126e <main+0x86>
  huart1.Instance = USART1;
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <main+0xe0>)
 8001272:	4a16      	ldr	r2, [pc, #88]	; (80012cc <main+0xe4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001274:	6098      	str	r0, [r3, #8]
  huart1.Instance = USART1;
 8001276:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001278:	2296      	movs	r2, #150	; 0x96
 800127a:	0212      	lsls	r2, r2, #8
 800127c:	605a      	str	r2, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800127e:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001280:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001282:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001284:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001286:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001288:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800128a:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800128c:	0018      	movs	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 800128e:	615a      	str	r2, [r3, #20]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001290:	f7ff ff16 	bl	80010c0 <HAL_HalfDuplex_Init>
 8001294:	2800      	cmp	r0, #0
 8001296:	d000      	beq.n	800129a <main+0xb2>
 8001298:	e7fe      	b.n	8001298 <main+0xb0>
   __HAL_SPI_ENABLE(&hspi1);
 800129a:	2340      	movs	r3, #64	; 0x40
 800129c:	6822      	ldr	r2, [r4, #0]
 800129e:	6811      	ldr	r1, [r2, #0]
 80012a0:	430b      	orrs	r3, r1
 80012a2:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i<= 127; i++)
 80012a4:	2400      	movs	r4, #0
		  digiPot_Write(i);
 80012a6:	0020      	movs	r0, r4
 80012a8:	f7ff ff7c 	bl	80011a4 <digiPot_Write>
	  for(int i = 0; i<= 127; i++)
 80012ac:	3401      	adds	r4, #1
		  HAL_Delay(100);
 80012ae:	2064      	movs	r0, #100	; 0x64
 80012b0:	f7fe fff0 	bl	8000294 <HAL_Delay>
	  for(int i = 0; i<= 127; i++)
 80012b4:	2c80      	cmp	r4, #128	; 0x80
 80012b6:	d1f6      	bne.n	80012a6 <main+0xbe>
 80012b8:	e7f4      	b.n	80012a4 <main+0xbc>
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	40021000 	.word	0x40021000
 80012c0:	20000094 	.word	0x20000094
 80012c4:	40013000 	.word	0x40013000
 80012c8:	20000024 	.word	0x20000024
 80012cc:	40013800 	.word	0x40013800

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2001      	movs	r0, #1
 80012d4:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <HAL_MspInit+0x38>)
 80012d6:	6991      	ldr	r1, [r2, #24]
 80012d8:	4301      	orrs	r1, r0
 80012da:	6191      	str	r1, [r2, #24]
 80012dc:	6993      	ldr	r3, [r2, #24]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e0:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80012e2:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80012e6:	3806      	subs	r0, #6
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80012ea:	f7fe ffe3 	bl	80002b4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2002      	movs	r0, #2
 80012f2:	0011      	movs	r1, r2
 80012f4:	4240      	negs	r0, r0
 80012f6:	f7fe ffdd 	bl	80002b4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2001      	movs	r0, #1
 80012fe:	0011      	movs	r1, r2
 8001300:	4240      	negs	r0, r0
 8001302:	f7fe ffd7 	bl	80002b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001306:	bd07      	pop	{r0, r1, r2, pc}
 8001308:	40021000 	.word	0x40021000

0800130c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800130c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <HAL_SPI_MspInit+0x40>)
 8001310:	6802      	ldr	r2, [r0, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d117      	bne.n	8001346 <HAL_SPI_MspInit+0x3a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001316:	2080      	movs	r0, #128	; 0x80
 8001318:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <HAL_SPI_MspInit+0x44>)
 800131a:	0140      	lsls	r0, r0, #5
 800131c:	6991      	ldr	r1, [r2, #24]
 800131e:	4301      	orrs	r1, r0
 8001320:	6191      	str	r1, [r2, #24]
 8001322:	6993      	ldr	r3, [r2, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001324:	2203      	movs	r2, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001326:	4003      	ands	r3, r0
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800132c:	23a0      	movs	r3, #160	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001330:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	3b9e      	subs	r3, #158	; 0x9e
 8001334:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	a901      	add	r1, sp, #4
 800133a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800133e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001340:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f7ff f815 	bl	8000370 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001346:	b007      	add	sp, #28
 8001348:	bd00      	pop	{pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	40013000 	.word	0x40013000
 8001350:	40021000 	.word	0x40021000

08001354 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001354:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_UART_MspInit+0x40>)
 8001358:	6802      	ldr	r2, [r0, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d117      	bne.n	800138e <HAL_UART_MspInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800135e:	2080      	movs	r0, #128	; 0x80
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <HAL_UART_MspInit+0x44>)
 8001362:	01c0      	lsls	r0, r0, #7
 8001364:	6991      	ldr	r1, [r2, #24]
 8001366:	4301      	orrs	r1, r0
 8001368:	6191      	str	r1, [r2, #24]
 800136a:	6993      	ldr	r3, [r2, #24]
    PA2     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136c:	2203      	movs	r2, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 800136e:	4003      	ands	r3, r0
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001374:	2304      	movs	r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001378:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800137a:	330e      	adds	r3, #14
 800137c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001380:	3b11      	subs	r3, #17
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001384:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001386:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001388:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f7fe fff1 	bl	8000370 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800138e:	b007      	add	sp, #28
 8001390:	bd00      	pop	{pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	40013800 	.word	0x40013800
 8001398:	40021000 	.word	0x40021000

0800139c <NMI_Handler>:
 800139c:	4770      	bx	lr

0800139e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800139e:	e7fe      	b.n	800139e <HardFault_Handler>

080013a0 <SVC_Handler>:
 80013a0:	4770      	bx	lr

080013a2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80013a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a6:	f7fe ff67 	bl	8000278 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80013aa:	f7fe ffdc 	bl	8000366 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ae:	bd10      	pop	{r4, pc}

080013b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80013b0:	2101      	movs	r1, #1
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80013b4:	4811      	ldr	r0, [pc, #68]	; (80013fc <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	4002      	ands	r2, r0
 80013c0:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	480e      	ldr	r0, [pc, #56]	; (8001400 <SystemInit+0x50>)
 80013c6:	4002      	ands	r2, r0
 80013c8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <SystemInit+0x54>)
 80013ce:	4002      	ands	r2, r0
 80013d0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <SystemInit+0x58>)
 80013d6:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80013d8:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80013da:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80013dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013de:	4382      	bics	r2, r0
 80013e0:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80013e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e4:	4809      	ldr	r0, [pc, #36]	; (800140c <SystemInit+0x5c>)
 80013e6:	4002      	ands	r2, r0
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80013ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ec:	438a      	bics	r2, r1
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]

}
 80013f4:	4770      	bx	lr
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	40021000 	.word	0x40021000
 80013fc:	08ffb80c 	.word	0x08ffb80c
 8001400:	fef6ffff 	.word	0xfef6ffff
 8001404:	fffbffff 	.word	0xfffbffff
 8001408:	ffc0ffff 	.word	0xffc0ffff
 800140c:	fffffeec 	.word	0xfffffeec

08001410 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001412:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001414:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001416:	e003      	b.n	8001420 <LoopCopyDataInit>

08001418 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800141a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800141c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800141e:	3104      	adds	r1, #4

08001420 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001420:	480b      	ldr	r0, [pc, #44]	; (8001450 <LoopForever+0xa>)
  ldr r3, =_edata
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <LoopForever+0xe>)
  adds r2, r0, r1
 8001424:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001426:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001428:	d3f6      	bcc.n	8001418 <CopyDataInit>
  ldr r2, =_sbss
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <LoopForever+0x12>)
  b LoopFillZerobss
 800142c:	e002      	b.n	8001434 <LoopFillZerobss>

0800142e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  str  r3, [r2]
 8001430:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001432:	3204      	adds	r2, #4

08001434 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <LoopForever+0x16>)
  cmp r2, r3
 8001436:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001438:	d3f9      	bcc.n	800142e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800143a:	f7ff ffb9 	bl	80013b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800143e:	f000 f811 	bl	8001464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001442:	f7ff fed1 	bl	80011e8 <main>

08001446 <LoopForever>:

LoopForever:
    b LoopForever
 8001446:	e7fe      	b.n	8001446 <LoopForever>
  ldr   r0, =_estack
 8001448:	20001000 	.word	0x20001000
  ldr r3, =_sidata
 800144c:	0800151c 	.word	0x0800151c
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001454:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001458:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 800145c:	200000f8 	.word	0x200000f8

08001460 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC1_IRQHandler>
	...

08001464 <__libc_init_array>:
 8001464:	b570      	push	{r4, r5, r6, lr}
 8001466:	2600      	movs	r6, #0
 8001468:	4d0c      	ldr	r5, [pc, #48]	; (800149c <__libc_init_array+0x38>)
 800146a:	4c0d      	ldr	r4, [pc, #52]	; (80014a0 <__libc_init_array+0x3c>)
 800146c:	1b64      	subs	r4, r4, r5
 800146e:	10a4      	asrs	r4, r4, #2
 8001470:	42a6      	cmp	r6, r4
 8001472:	d109      	bne.n	8001488 <__libc_init_array+0x24>
 8001474:	2600      	movs	r6, #0
 8001476:	f000 f823 	bl	80014c0 <_init>
 800147a:	4d0a      	ldr	r5, [pc, #40]	; (80014a4 <__libc_init_array+0x40>)
 800147c:	4c0a      	ldr	r4, [pc, #40]	; (80014a8 <__libc_init_array+0x44>)
 800147e:	1b64      	subs	r4, r4, r5
 8001480:	10a4      	asrs	r4, r4, #2
 8001482:	42a6      	cmp	r6, r4
 8001484:	d105      	bne.n	8001492 <__libc_init_array+0x2e>
 8001486:	bd70      	pop	{r4, r5, r6, pc}
 8001488:	00b3      	lsls	r3, r6, #2
 800148a:	58eb      	ldr	r3, [r5, r3]
 800148c:	4798      	blx	r3
 800148e:	3601      	adds	r6, #1
 8001490:	e7ee      	b.n	8001470 <__libc_init_array+0xc>
 8001492:	00b3      	lsls	r3, r6, #2
 8001494:	58eb      	ldr	r3, [r5, r3]
 8001496:	4798      	blx	r3
 8001498:	3601      	adds	r6, #1
 800149a:	e7f2      	b.n	8001482 <__libc_init_array+0x1e>
 800149c:	08001514 	.word	0x08001514
 80014a0:	08001514 	.word	0x08001514
 80014a4:	08001514 	.word	0x08001514
 80014a8:	08001518 	.word	0x08001518

080014ac <memcpy>:
 80014ac:	2300      	movs	r3, #0
 80014ae:	b510      	push	{r4, lr}
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d100      	bne.n	80014b6 <memcpy+0xa>
 80014b4:	bd10      	pop	{r4, pc}
 80014b6:	5ccc      	ldrb	r4, [r1, r3]
 80014b8:	54c4      	strb	r4, [r0, r3]
 80014ba:	3301      	adds	r3, #1
 80014bc:	e7f8      	b.n	80014b0 <memcpy+0x4>
	...

080014c0 <_init>:
 80014c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014c6:	bc08      	pop	{r3}
 80014c8:	469e      	mov	lr, r3
 80014ca:	4770      	bx	lr

080014cc <_fini>:
 80014cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014d2:	bc08      	pop	{r3}
 80014d4:	469e      	mov	lr, r3
 80014d6:	4770      	bx	lr
