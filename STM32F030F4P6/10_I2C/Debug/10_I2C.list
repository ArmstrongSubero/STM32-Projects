
10_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002234  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080022f4  080022f4  000122f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002398  08002398  00012398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800239c  0800239c  0001239c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  080023a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ec  20000068  08002408  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000154  08002408  00020154  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f8d3  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000200c  00000000  00000000  0002f963  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005a41  00000000  00000000  0003196f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006f0  00000000  00000000  000373b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000928  00000000  00000000  00037aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004aa9  00000000  00000000  000383c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000283a  00000000  00000000  0003ce71  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003f6ab  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000178c  00000000  00000000  0003f728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022dc 	.word	0x080022dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080022dc 	.word	0x080022dc

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000258:	b510      	push	{r4, lr}
 800025a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800025c:	f000 ff76 	bl	800114c <HAL_RCC_GetHCLKFreq>
 8000260:	21fa      	movs	r1, #250	; 0xfa
 8000262:	0089      	lsls	r1, r1, #2
 8000264:	f7ff ff6c 	bl	8000140 <__udivsi3>
 8000268:	f000 f866 	bl	8000338 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800026c:	2001      	movs	r0, #1
 800026e:	2200      	movs	r2, #0
 8000270:	0021      	movs	r1, r4
 8000272:	4240      	negs	r0, r0
 8000274:	f000 f830 	bl	80002d8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000278:	2000      	movs	r0, #0
 800027a:	bd10      	pop	{r4, pc}

0800027c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800027c:	2310      	movs	r3, #16
 800027e:	4a06      	ldr	r2, [pc, #24]	; (8000298 <HAL_Init+0x1c>)
{
 8000280:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000282:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000284:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000286:	430b      	orrs	r3, r1
 8000288:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800028a:	f7ff ffe5 	bl	8000258 <HAL_InitTick>
  HAL_MspInit();
 800028e:	f001 fae7 	bl	8001860 <HAL_MspInit>
}
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	40022000 	.word	0x40022000

0800029c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800029c:	4a02      	ldr	r2, [pc, #8]	; (80002a8 <HAL_IncTick+0xc>)
 800029e:	6813      	ldr	r3, [r2, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	6013      	str	r3, [r2, #0]
}
 80002a4:	4770      	bx	lr
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000090 	.word	0x20000090

080002ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002ac:	4b01      	ldr	r3, [pc, #4]	; (80002b4 <HAL_GetTick+0x8>)
 80002ae:	6818      	ldr	r0, [r3, #0]
}
 80002b0:	4770      	bx	lr
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	20000090 	.word	0x20000090

080002b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80002ba:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002bc:	f7ff fff6 	bl	80002ac <HAL_GetTick>
  uint32_t wait = Delay;
 80002c0:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002c2:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002c4:	1c63      	adds	r3, r4, #1
 80002c6:	1e5a      	subs	r2, r3, #1
 80002c8:	4193      	sbcs	r3, r2
 80002ca:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	f7ff ffee 	bl	80002ac <HAL_GetTick>
 80002d0:	1b40      	subs	r0, r0, r5
 80002d2:	42a0      	cmp	r0, r4
 80002d4:	d3fa      	bcc.n	80002cc <HAL_Delay+0x14>
  {
  }
}
 80002d6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002dc:	2800      	cmp	r0, #0
 80002de:	da14      	bge.n	800030a <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e0:	230f      	movs	r3, #15
 80002e2:	b2c0      	uxtb	r0, r0
 80002e4:	4003      	ands	r3, r0
 80002e6:	3b08      	subs	r3, #8
 80002e8:	4a11      	ldr	r2, [pc, #68]	; (8000330 <HAL_NVIC_SetPriority+0x58>)
 80002ea:	089b      	lsrs	r3, r3, #2
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	189b      	adds	r3, r3, r2
 80002f0:	2203      	movs	r2, #3
 80002f2:	4010      	ands	r0, r2
 80002f4:	4090      	lsls	r0, r2
 80002f6:	32fc      	adds	r2, #252	; 0xfc
 80002f8:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fa:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fc:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fe:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	69dc      	ldr	r4, [r3, #28]
 8000302:	43ac      	bics	r4, r5
 8000304:	4321      	orrs	r1, r4
 8000306:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000308:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800030a:	2503      	movs	r5, #3
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	4028      	ands	r0, r5
 8000310:	40a8      	lsls	r0, r5
 8000312:	35fc      	adds	r5, #252	; 0xfc
 8000314:	002e      	movs	r6, r5
 8000316:	4a07      	ldr	r2, [pc, #28]	; (8000334 <HAL_NVIC_SetPriority+0x5c>)
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	189b      	adds	r3, r3, r2
 800031c:	22c0      	movs	r2, #192	; 0xc0
 800031e:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000320:	4029      	ands	r1, r5
 8000322:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000324:	0092      	lsls	r2, r2, #2
 8000326:	589c      	ldr	r4, [r3, r2]
 8000328:	43b4      	bics	r4, r6
 800032a:	4321      	orrs	r1, r4
 800032c:	5099      	str	r1, [r3, r2]
 800032e:	e7eb      	b.n	8000308 <HAL_NVIC_SetPriority+0x30>
 8000330:	e000ed00 	.word	0xe000ed00
 8000334:	e000e100 	.word	0xe000e100

08000338 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000338:	4a09      	ldr	r2, [pc, #36]	; (8000360 <HAL_SYSTICK_Config+0x28>)
 800033a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800033c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800033e:	4293      	cmp	r3, r2
 8000340:	d80d      	bhi.n	800035e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000342:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000344:	4a07      	ldr	r2, [pc, #28]	; (8000364 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000346:	4808      	ldr	r0, [pc, #32]	; (8000368 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000348:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800034a:	6a03      	ldr	r3, [r0, #32]
 800034c:	0609      	lsls	r1, r1, #24
 800034e:	021b      	lsls	r3, r3, #8
 8000350:	0a1b      	lsrs	r3, r3, #8
 8000352:	430b      	orrs	r3, r1
 8000354:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000356:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000358:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800035a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800035e:	4770      	bx	lr
 8000360:	00ffffff 	.word	0x00ffffff
 8000364:	e000e010 	.word	0xe000e010
 8000368:	e000ed00 	.word	0xe000ed00

0800036c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800036e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000370:	2804      	cmp	r0, #4
 8000372:	d102      	bne.n	800037a <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000374:	4310      	orrs	r0, r2
 8000376:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000378:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800037a:	2104      	movs	r1, #4
 800037c:	438a      	bics	r2, r1
 800037e:	601a      	str	r2, [r3, #0]
}
 8000380:	e7fa      	b.n	8000378 <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	e000e010 	.word	0xe000e010

08000388 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000388:	4770      	bx	lr

0800038a <HAL_SYSTICK_IRQHandler>:
{
 800038a:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 800038c:	f7ff fffc 	bl	8000388 <HAL_SYSTICK_Callback>
}
 8000390:	bd10      	pop	{r4, pc}
	...

08000394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000394:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000396:	680b      	ldr	r3, [r1, #0]
{ 
 8000398:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 800039a:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 800039c:	2300      	movs	r3, #0
{ 
 800039e:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003a0:	9a02      	ldr	r2, [sp, #8]
 80003a2:	40da      	lsrs	r2, r3
 80003a4:	d101      	bne.n	80003aa <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 80003a6:	b007      	add	sp, #28
 80003a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80003aa:	2201      	movs	r2, #1
 80003ac:	409a      	lsls	r2, r3
 80003ae:	9203      	str	r2, [sp, #12]
 80003b0:	9903      	ldr	r1, [sp, #12]
 80003b2:	9a02      	ldr	r2, [sp, #8]
 80003b4:	400a      	ands	r2, r1
 80003b6:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80003b8:	d100      	bne.n	80003bc <HAL_GPIO_Init+0x28>
 80003ba:	e08c      	b.n	80004d6 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80003bc:	9a01      	ldr	r2, [sp, #4]
 80003be:	2110      	movs	r1, #16
 80003c0:	6852      	ldr	r2, [r2, #4]
 80003c2:	0016      	movs	r6, r2
 80003c4:	438e      	bics	r6, r1
 80003c6:	2e02      	cmp	r6, #2
 80003c8:	d10e      	bne.n	80003e8 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003ca:	2507      	movs	r5, #7
 80003cc:	401d      	ands	r5, r3
 80003ce:	00ad      	lsls	r5, r5, #2
 80003d0:	3901      	subs	r1, #1
 80003d2:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 80003d4:	08dc      	lsrs	r4, r3, #3
 80003d6:	00a4      	lsls	r4, r4, #2
 80003d8:	1904      	adds	r4, r0, r4
 80003da:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003dc:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	6909      	ldr	r1, [r1, #16]
 80003e2:	40a9      	lsls	r1, r5
 80003e4:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80003e6:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003e8:	2403      	movs	r4, #3
 80003ea:	005f      	lsls	r7, r3, #1
 80003ec:	40bc      	lsls	r4, r7
 80003ee:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003f0:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003f2:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003f4:	4025      	ands	r5, r4
 80003f6:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003f8:	2503      	movs	r5, #3
 80003fa:	4015      	ands	r5, r2
 80003fc:	40bd      	lsls	r5, r7
 80003fe:	4661      	mov	r1, ip
 8000400:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000402:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000404:	2e01      	cmp	r6, #1
 8000406:	d80f      	bhi.n	8000428 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000408:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 800040a:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800040c:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800040e:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000410:	40bd      	lsls	r5, r7
 8000412:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000414:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000416:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000418:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800041a:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800041c:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800041e:	2101      	movs	r1, #1
 8000420:	400d      	ands	r5, r1
 8000422:	409d      	lsls	r5, r3
 8000424:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000426:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000428:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800042a:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800042c:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800042e:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000430:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000432:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000434:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000436:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000438:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800043a:	420a      	tst	r2, r1
 800043c:	d04b      	beq.n	80004d6 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043e:	2101      	movs	r1, #1
 8000440:	4c26      	ldr	r4, [pc, #152]	; (80004dc <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000442:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000444:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000446:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000448:	430d      	orrs	r5, r1
 800044a:	61a5      	str	r5, [r4, #24]
 800044c:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 800044e:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000450:	400c      	ands	r4, r1
 8000452:	9405      	str	r4, [sp, #20]
 8000454:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000456:	240f      	movs	r4, #15
 8000458:	4921      	ldr	r1, [pc, #132]	; (80004e0 <HAL_GPIO_Init+0x14c>)
 800045a:	00ad      	lsls	r5, r5, #2
 800045c:	00b6      	lsls	r6, r6, #2
 800045e:	186d      	adds	r5, r5, r1
 8000460:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000462:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000464:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000466:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000468:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800046a:	2400      	movs	r4, #0
 800046c:	4288      	cmp	r0, r1
 800046e:	d00c      	beq.n	800048a <HAL_GPIO_Init+0xf6>
 8000470:	491c      	ldr	r1, [pc, #112]	; (80004e4 <HAL_GPIO_Init+0x150>)
 8000472:	3401      	adds	r4, #1
 8000474:	4288      	cmp	r0, r1
 8000476:	d008      	beq.n	800048a <HAL_GPIO_Init+0xf6>
 8000478:	491b      	ldr	r1, [pc, #108]	; (80004e8 <HAL_GPIO_Init+0x154>)
 800047a:	3401      	adds	r4, #1
 800047c:	4288      	cmp	r0, r1
 800047e:	d004      	beq.n	800048a <HAL_GPIO_Init+0xf6>
 8000480:	491a      	ldr	r1, [pc, #104]	; (80004ec <HAL_GPIO_Init+0x158>)
 8000482:	3403      	adds	r4, #3
 8000484:	4288      	cmp	r0, r1
 8000486:	d100      	bne.n	800048a <HAL_GPIO_Init+0xf6>
 8000488:	3c02      	subs	r4, #2
 800048a:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800048c:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800048e:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000490:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000492:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000494:	4c16      	ldr	r4, [pc, #88]	; (80004f0 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000496:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000498:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 800049a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800049c:	03d1      	lsls	r1, r2, #15
 800049e:	d401      	bmi.n	80004a4 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80004a0:	003e      	movs	r6, r7
 80004a2:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80004a4:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80004a6:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 80004a8:	9e00      	ldr	r6, [sp, #0]
 80004aa:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004ac:	0391      	lsls	r1, r2, #14
 80004ae:	d401      	bmi.n	80004b4 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80004b0:	003e      	movs	r6, r7
 80004b2:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80004b4:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80004b6:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 80004b8:	9e00      	ldr	r6, [sp, #0]
 80004ba:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004bc:	02d1      	lsls	r1, r2, #11
 80004be:	d401      	bmi.n	80004c4 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004c0:	003e      	movs	r6, r7
 80004c2:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80004c4:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80004c6:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80004c8:	9f00      	ldr	r7, [sp, #0]
 80004ca:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004cc:	0292      	lsls	r2, r2, #10
 80004ce:	d401      	bmi.n	80004d4 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004d0:	402e      	ands	r6, r5
 80004d2:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80004d4:	60e7      	str	r7, [r4, #12]
    position++;
 80004d6:	3301      	adds	r3, #1
 80004d8:	e762      	b.n	80003a0 <HAL_GPIO_Init+0xc>
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010000 	.word	0x40010000
 80004e4:	48000400 	.word	0x48000400
 80004e8:	48000800 	.word	0x48000800
 80004ec:	48000c00 	.word	0x48000c00
 80004f0:	40010400 	.word	0x40010400

080004f4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80004f4:	6803      	ldr	r3, [r0, #0]
 80004f6:	699a      	ldr	r2, [r3, #24]
 80004f8:	0792      	lsls	r2, r2, #30
 80004fa:	d501      	bpl.n	8000500 <I2C_Flush_TXDR+0xc>
  {
     hi2c->Instance->TXDR = 0x00U;
 80004fc:	2200      	movs	r2, #0
 80004fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000500:	2201      	movs	r2, #1
 8000502:	6999      	ldr	r1, [r3, #24]
 8000504:	4211      	tst	r1, r2
 8000506:	d102      	bne.n	800050e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000508:	6999      	ldr	r1, [r3, #24]
 800050a:	430a      	orrs	r2, r1
 800050c:	619a      	str	r2, [r3, #24]
  }
}
 800050e:	4770      	bx	lr

08000510 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000510:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8000512:	6804      	ldr	r4, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000514:	4806      	ldr	r0, [pc, #24]	; (8000530 <I2C_TransferConfig+0x20>)
  tmpreg = hi2c->Instance->CR2;
 8000516:	6865      	ldr	r5, [r4, #4]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8000518:	0589      	lsls	r1, r1, #22
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800051a:	4028      	ands	r0, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800051c:	9d03      	ldr	r5, [sp, #12]
 800051e:	0d89      	lsrs	r1, r1, #22
 8000520:	432b      	orrs	r3, r5
 8000522:	4319      	orrs	r1, r3
 8000524:	0412      	lsls	r2, r2, #16
 8000526:	430a      	orrs	r2, r1
 8000528:	4302      	orrs	r2, r0
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 800052a:	6062      	str	r2, [r4, #4]
}
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	fc009800 	.word	0xfc009800

08000534 <I2C_WaitOnFlagUntilTimeout>:
{
 8000534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000536:	0004      	movs	r4, r0
 8000538:	000e      	movs	r6, r1
 800053a:	0017      	movs	r7, r2
 800053c:	001d      	movs	r5, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800053e:	6822      	ldr	r2, [r4, #0]
 8000540:	6993      	ldr	r3, [r2, #24]
 8000542:	4033      	ands	r3, r6
 8000544:	1b9b      	subs	r3, r3, r6
 8000546:	4259      	negs	r1, r3
 8000548:	414b      	adcs	r3, r1
 800054a:	42bb      	cmp	r3, r7
 800054c:	d001      	beq.n	8000552 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800054e:	2000      	movs	r0, #0
 8000550:	e00e      	b.n	8000570 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 8000552:	1c6b      	adds	r3, r5, #1
 8000554:	d0f4      	beq.n	8000540 <I2C_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000556:	2d00      	cmp	r5, #0
 8000558:	d10b      	bne.n	8000572 <I2C_WaitOnFlagUntilTimeout+0x3e>
        hi2c->State= HAL_I2C_STATE_READY;
 800055a:	0023      	movs	r3, r4
 800055c:	2220      	movs	r2, #32
 800055e:	3341      	adds	r3, #65	; 0x41
 8000560:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000562:	0022      	movs	r2, r4
 8000564:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8000566:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000568:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800056a:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800056c:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800056e:	7023      	strb	r3, [r4, #0]
}
 8000570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000572:	f7ff fe9b 	bl	80002ac <HAL_GetTick>
 8000576:	9b06      	ldr	r3, [sp, #24]
 8000578:	1ac0      	subs	r0, r0, r3
 800057a:	4285      	cmp	r5, r0
 800057c:	d2df      	bcs.n	800053e <I2C_WaitOnFlagUntilTimeout+0xa>
 800057e:	e7ec      	b.n	800055a <I2C_WaitOnFlagUntilTimeout+0x26>

08000580 <I2C_IsAcknowledgeFailed>:
{
 8000580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000582:	6803      	ldr	r3, [r0, #0]
{
 8000584:	0004      	movs	r4, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000586:	6998      	ldr	r0, [r3, #24]
 8000588:	2310      	movs	r3, #16
{
 800058a:	000e      	movs	r6, r1
 800058c:	0017      	movs	r7, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800058e:	4018      	ands	r0, r3
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000590:	2520      	movs	r5, #32
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000592:	2800      	cmp	r0, #0
 8000594:	d115      	bne.n	80005c2 <I2C_IsAcknowledgeFailed+0x42>
}
 8000596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 8000598:	1c72      	adds	r2, r6, #1
 800059a:	d013      	beq.n	80005c4 <I2C_IsAcknowledgeFailed+0x44>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800059c:	2e00      	cmp	r6, #0
 800059e:	d10b      	bne.n	80005b8 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State= HAL_I2C_STATE_READY;
 80005a0:	0023      	movs	r3, r4
 80005a2:	2220      	movs	r2, #32
 80005a4:	3341      	adds	r3, #65	; 0x41
 80005a6:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80005a8:	0022      	movs	r2, r4
 80005aa:	2300      	movs	r3, #0
 80005ac:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80005ae:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80005b0:	7013      	strb	r3, [r2, #0]
          return HAL_TIMEOUT;
 80005b2:	2003      	movs	r0, #3
          __HAL_UNLOCK(hi2c);
 80005b4:	7023      	strb	r3, [r4, #0]
 80005b6:	e7ee      	b.n	8000596 <I2C_IsAcknowledgeFailed+0x16>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80005b8:	f7ff fe78 	bl	80002ac <HAL_GetTick>
 80005bc:	1bc0      	subs	r0, r0, r7
 80005be:	4286      	cmp	r6, r0
 80005c0:	d3ee      	bcc.n	80005a0 <I2C_IsAcknowledgeFailed+0x20>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80005c2:	6823      	ldr	r3, [r4, #0]
 80005c4:	699a      	ldr	r2, [r3, #24]
 80005c6:	422a      	tst	r2, r5
 80005c8:	d0e6      	beq.n	8000598 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80005ca:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80005cc:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80005ce:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80005d0:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80005d2:	f7ff ff8f 	bl	80004f4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80005d6:	6822      	ldr	r2, [r4, #0]
 80005d8:	4908      	ldr	r1, [pc, #32]	; (80005fc <I2C_IsAcknowledgeFailed+0x7c>)
 80005da:	6853      	ldr	r3, [r2, #4]
    return HAL_ERROR;
 80005dc:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80005de:	400b      	ands	r3, r1
 80005e0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80005e2:	2304      	movs	r3, #4
 80005e4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 80005e6:	0023      	movs	r3, r4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005e8:	0022      	movs	r2, r4
    hi2c->State= HAL_I2C_STATE_READY;
 80005ea:	3341      	adds	r3, #65	; 0x41
 80005ec:	701d      	strb	r5, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80005f2:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005f4:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80005f6:	7023      	strb	r3, [r4, #0]
 80005f8:	e7cd      	b.n	8000596 <I2C_IsAcknowledgeFailed+0x16>
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	fe00e800 	.word	0xfe00e800

08000600 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000602:	0004      	movs	r4, r0
 8000604:	000d      	movs	r5, r1
 8000606:	0016      	movs	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000608:	2702      	movs	r7, #2
 800060a:	6823      	ldr	r3, [r4, #0]
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	423b      	tst	r3, r7
 8000610:	d001      	beq.n	8000616 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8000612:	2000      	movs	r0, #0
 8000614:	e018      	b.n	8000648 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000616:	0032      	movs	r2, r6
 8000618:	0029      	movs	r1, r5
 800061a:	0020      	movs	r0, r4
 800061c:	f7ff ffb0 	bl	8000580 <I2C_IsAcknowledgeFailed>
 8000620:	2800      	cmp	r0, #0
 8000622:	d118      	bne.n	8000656 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if(Timeout != HAL_MAX_DELAY)
 8000624:	1c6b      	adds	r3, r5, #1
 8000626:	d0f0      	beq.n	800060a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8000628:	2d00      	cmp	r5, #0
 800062a:	d10e      	bne.n	800064a <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800062c:	2220      	movs	r2, #32
 800062e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000630:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000632:	4313      	orrs	r3, r2
 8000634:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8000636:	0023      	movs	r3, r4
 8000638:	3341      	adds	r3, #65	; 0x41
 800063a:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800063c:	0022      	movs	r2, r4
 800063e:	2300      	movs	r3, #0
 8000640:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000642:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000644:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000646:	7023      	strb	r3, [r4, #0]
}
 8000648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800064a:	f7ff fe2f 	bl	80002ac <HAL_GetTick>
 800064e:	1b80      	subs	r0, r0, r6
 8000650:	4285      	cmp	r5, r0
 8000652:	d2da      	bcs.n	800060a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8000654:	e7ea      	b.n	800062c <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
      return HAL_ERROR;
 8000656:	2001      	movs	r0, #1
 8000658:	e7f6      	b.n	8000648 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
	...

0800065c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065e:	0004      	movs	r4, r0
 8000660:	000d      	movs	r5, r1
 8000662:	0017      	movs	r7, r2
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000664:	2620      	movs	r6, #32
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000666:	2204      	movs	r2, #4
 8000668:	6823      	ldr	r3, [r4, #0]
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4213      	tst	r3, r2
 800066e:	d001      	beq.n	8000674 <I2C_WaitOnRXNEFlagUntilTimeout+0x18>
  return HAL_OK;
 8000670:	2000      	movs	r0, #0
 8000672:	e025      	b.n	80006c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x64>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000674:	003a      	movs	r2, r7
 8000676:	0029      	movs	r1, r5
 8000678:	0020      	movs	r0, r4
 800067a:	f7ff ff81 	bl	8000580 <I2C_IsAcknowledgeFailed>
 800067e:	2800      	cmp	r0, #0
 8000680:	d10f      	bne.n	80006a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000682:	6823      	ldr	r3, [r4, #0]
 8000684:	699a      	ldr	r2, [r3, #24]
 8000686:	4232      	tst	r2, r6
 8000688:	d00d      	beq.n	80006a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800068a:	61de      	str	r6, [r3, #28]
      I2C_RESET_CR2(hi2c);
 800068c:	685a      	ldr	r2, [r3, #4]
 800068e:	4910      	ldr	r1, [pc, #64]	; (80006d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x74>)
 8000690:	400a      	ands	r2, r1
 8000692:	605a      	str	r2, [r3, #4]
      hi2c->State= HAL_I2C_STATE_READY;
 8000694:	0023      	movs	r3, r4
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000696:	6460      	str	r0, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8000698:	3341      	adds	r3, #65	; 0x41
      __HAL_UNLOCK(hi2c);
 800069a:	3440      	adds	r4, #64	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800069c:	701e      	strb	r6, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800069e:	7058      	strb	r0, [r3, #1]
      __HAL_UNLOCK(hi2c);
 80006a0:	7020      	strb	r0, [r4, #0]
      return HAL_ERROR;
 80006a2:	2001      	movs	r0, #1
 80006a4:	e00c      	b.n	80006c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x64>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80006a6:	2d00      	cmp	r5, #0
 80006a8:	d10b      	bne.n	80006c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006aa:	2220      	movs	r2, #32
 80006ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80006ae:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006b0:	4313      	orrs	r3, r2
 80006b2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80006b4:	0023      	movs	r3, r4
 80006b6:	3341      	adds	r3, #65	; 0x41
 80006b8:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 80006ba:	2300      	movs	r3, #0
 80006bc:	3440      	adds	r4, #64	; 0x40
 80006be:	7023      	strb	r3, [r4, #0]
}
 80006c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80006c2:	f7ff fdf3 	bl	80002ac <HAL_GetTick>
 80006c6:	1bc0      	subs	r0, r0, r7
 80006c8:	4285      	cmp	r5, r0
 80006ca:	d2cc      	bcs.n	8000666 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
 80006cc:	e7ed      	b.n	80006aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	fe00e800 	.word	0xfe00e800

080006d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	0004      	movs	r4, r0
 80006d8:	000d      	movs	r5, r1
 80006da:	0016      	movs	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80006dc:	2720      	movs	r7, #32
 80006de:	6823      	ldr	r3, [r4, #0]
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	423b      	tst	r3, r7
 80006e4:	d001      	beq.n	80006ea <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80006e6:	2000      	movs	r0, #0
 80006e8:	e016      	b.n	8000718 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80006ea:	0032      	movs	r2, r6
 80006ec:	0029      	movs	r1, r5
 80006ee:	0020      	movs	r0, r4
 80006f0:	f7ff ff46 	bl	8000580 <I2C_IsAcknowledgeFailed>
 80006f4:	2800      	cmp	r0, #0
 80006f6:	d116      	bne.n	8000726 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80006f8:	2d00      	cmp	r5, #0
 80006fa:	d10e      	bne.n	800071a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006fc:	2220      	movs	r2, #32
 80006fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000700:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000702:	4313      	orrs	r3, r2
 8000704:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8000706:	0023      	movs	r3, r4
 8000708:	3341      	adds	r3, #65	; 0x41
 800070a:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800070c:	0022      	movs	r2, r4
 800070e:	2300      	movs	r3, #0
 8000710:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000712:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000714:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000716:	7023      	strb	r3, [r4, #0]
}
 8000718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800071a:	f7ff fdc7 	bl	80002ac <HAL_GetTick>
 800071e:	1b80      	subs	r0, r0, r6
 8000720:	4285      	cmp	r5, r0
 8000722:	d2dc      	bcs.n	80006de <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8000724:	e7ea      	b.n	80006fc <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
      return HAL_ERROR;
 8000726:	2001      	movs	r0, #1
 8000728:	e7f6      	b.n	8000718 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
	...

0800072c <HAL_I2C_Init>:
{
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000730:	2001      	movs	r0, #1
  if(hi2c == NULL)
 8000732:	2c00      	cmp	r4, #0
 8000734:	d03f      	beq.n	80007b6 <HAL_I2C_Init+0x8a>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000736:	0025      	movs	r5, r4
 8000738:	3541      	adds	r5, #65	; 0x41
 800073a:	782b      	ldrb	r3, [r5, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d105      	bne.n	800074e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8000742:	0022      	movs	r2, r4
 8000744:	3240      	adds	r2, #64	; 0x40
 8000746:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8000748:	0020      	movs	r0, r4
 800074a:	f001 f8a7 	bl	800189c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800074e:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000750:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000752:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000754:	6823      	ldr	r3, [r4, #0]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000756:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	68a6      	ldr	r6, [r4, #8]
 800075c:	438a      	bics	r2, r1
 800075e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000760:	6861      	ldr	r1, [r4, #4]
 8000762:	4a1a      	ldr	r2, [pc, #104]	; (80007cc <HAL_I2C_Init+0xa0>)
 8000764:	400a      	ands	r2, r1
 8000766:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000768:	6899      	ldr	r1, [r3, #8]
 800076a:	4a19      	ldr	r2, [pc, #100]	; (80007d0 <HAL_I2C_Init+0xa4>)
 800076c:	4011      	ands	r1, r2
 800076e:	6099      	str	r1, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000770:	2801      	cmp	r0, #1
 8000772:	d121      	bne.n	80007b8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	0209      	lsls	r1, r1, #8
 8000778:	4331      	orrs	r1, r6
 800077a:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800077c:	6858      	ldr	r0, [r3, #4]
 800077e:	4915      	ldr	r1, [pc, #84]	; (80007d4 <HAL_I2C_Init+0xa8>)
 8000780:	4301      	orrs	r1, r0
 8000782:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000784:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000786:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000788:	400a      	ands	r2, r1
 800078a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800078c:	6961      	ldr	r1, [r4, #20]
 800078e:	6922      	ldr	r2, [r4, #16]
 8000790:	430a      	orrs	r2, r1
 8000792:	69a1      	ldr	r1, [r4, #24]
 8000794:	0209      	lsls	r1, r1, #8
 8000796:	430a      	orrs	r2, r1
 8000798:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800079a:	6a21      	ldr	r1, [r4, #32]
 800079c:	69e2      	ldr	r2, [r4, #28]
 800079e:	430a      	orrs	r2, r1
 80007a0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80007a2:	2201      	movs	r2, #1
 80007a4:	6819      	ldr	r1, [r3, #0]
 80007a6:	430a      	orrs	r2, r1
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80007aa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80007ac:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80007ae:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80007b0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80007b2:	3442      	adds	r4, #66	; 0x42
 80007b4:	7020      	strb	r0, [r4, #0]
}
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80007b8:	2184      	movs	r1, #132	; 0x84
 80007ba:	0209      	lsls	r1, r1, #8
 80007bc:	4331      	orrs	r1, r6
 80007be:	6099      	str	r1, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80007c0:	2802      	cmp	r0, #2
 80007c2:	d1db      	bne.n	800077c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80007c4:	2180      	movs	r1, #128	; 0x80
 80007c6:	0109      	lsls	r1, r1, #4
 80007c8:	6059      	str	r1, [r3, #4]
 80007ca:	e7d7      	b.n	800077c <HAL_I2C_Init+0x50>
 80007cc:	f0ffffff 	.word	0xf0ffffff
 80007d0:	ffff7fff 	.word	0xffff7fff
 80007d4:	02008000 	.word	0x02008000

080007d8 <HAL_I2C_Master_Transmit>:
{
 80007d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 80007da:	0005      	movs	r5, r0
{
 80007dc:	b087      	sub	sp, #28
 80007de:	9103      	str	r1, [sp, #12]
 80007e0:	9204      	str	r2, [sp, #16]
 80007e2:	9305      	str	r3, [sp, #20]
  if(hi2c->State == HAL_I2C_STATE_READY)
 80007e4:	3541      	adds	r5, #65	; 0x41
 80007e6:	782b      	ldrb	r3, [r5, #0]
{
 80007e8:	0004      	movs	r4, r0
    return HAL_BUSY;
 80007ea:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 80007ec:	2b20      	cmp	r3, #32
 80007ee:	d157      	bne.n	80008a0 <HAL_I2C_Master_Transmit+0xc8>
    __HAL_LOCK(hi2c);
 80007f0:	0023      	movs	r3, r4
 80007f2:	3340      	adds	r3, #64	; 0x40
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d052      	beq.n	80008a0 <HAL_I2C_Master_Transmit+0xc8>
 80007fa:	2601      	movs	r6, #1
 80007fc:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80007fe:	f7ff fd55 	bl	80002ac <HAL_GetTick>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000802:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000804:	0007      	movs	r7, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000806:	9000      	str	r0, [sp, #0]
 8000808:	2319      	movs	r3, #25
 800080a:	0032      	movs	r2, r6
 800080c:	0209      	lsls	r1, r1, #8
 800080e:	0020      	movs	r0, r4
 8000810:	f7ff fe90 	bl	8000534 <I2C_WaitOnFlagUntilTimeout>
 8000814:	2800      	cmp	r0, #0
 8000816:	d142      	bne.n	800089e <HAL_I2C_Master_Transmit+0xc6>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000818:	2321      	movs	r3, #33	; 0x21
 800081a:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800081c:	3b11      	subs	r3, #17
 800081e:	19ad      	adds	r5, r5, r6
 8000820:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000822:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000824:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000826:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000828:	466b      	mov	r3, sp
 800082a:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 800082c:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800082e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000830:	2380      	movs	r3, #128	; 0x80
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8000832:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000834:	019b      	lsls	r3, r3, #6
 8000836:	2aff      	cmp	r2, #255	; 0xff
 8000838:	d921      	bls.n	800087e <HAL_I2C_Master_Transmit+0xa6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800083a:	22ff      	movs	r2, #255	; 0xff
 800083c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	045b      	lsls	r3, r3, #17
 8000844:	9903      	ldr	r1, [sp, #12]
 8000846:	0020      	movs	r0, r4
 8000848:	f7ff fe62 	bl	8000510 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800084c:	26ff      	movs	r6, #255	; 0xff
    while(hi2c->XferCount > 0U)
 800084e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000850:	003a      	movs	r2, r7
 8000852:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000854:	0020      	movs	r0, r4
    while(hi2c->XferCount > 0U)
 8000856:	2b00      	cmp	r3, #0
 8000858:	d119      	bne.n	800088e <HAL_I2C_Master_Transmit+0xb6>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800085a:	f7ff ff3b 	bl	80006d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800085e:	2800      	cmp	r0, #0
 8000860:	d119      	bne.n	8000896 <HAL_I2C_Master_Transmit+0xbe>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000862:	2120      	movs	r1, #32
 8000864:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000866:	4e27      	ldr	r6, [pc, #156]	; (8000904 <HAL_I2C_Master_Transmit+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000868:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800086a:	685a      	ldr	r2, [r3, #4]
 800086c:	4032      	ands	r2, r6
 800086e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000870:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000872:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000874:	3341      	adds	r3, #65	; 0x41
 8000876:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000878:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800087a:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800087c:	e010      	b.n	80008a0 <HAL_I2C_Master_Transmit+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 800087e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000880:	b292      	uxth	r2, r2
 8000882:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	b2d2      	uxtb	r2, r2
 800088a:	049b      	lsls	r3, r3, #18
 800088c:	e7da      	b.n	8000844 <HAL_I2C_Master_Transmit+0x6c>
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800088e:	f7ff feb7 	bl	8000600 <I2C_WaitOnTXISFlagUntilTimeout>
 8000892:	2800      	cmp	r0, #0
 8000894:	d006      	beq.n	80008a4 <HAL_I2C_Master_Transmit+0xcc>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000896:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8000898:	2001      	movs	r0, #1
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800089a:	2b04      	cmp	r3, #4
 800089c:	d000      	beq.n	80008a0 <HAL_I2C_Master_Transmit+0xc8>
          return HAL_TIMEOUT;
 800089e:	2003      	movs	r0, #3
}
 80008a0:	b007      	add	sp, #28
 80008a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80008a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008a6:	6822      	ldr	r2, [r4, #0]
 80008a8:	1c59      	adds	r1, r3, #1
 80008aa:	6261      	str	r1, [r4, #36]	; 0x24
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80008b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80008b2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80008b4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80008b6:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80008b8:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80008ba:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80008bc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80008be:	8522      	strh	r2, [r4, #40]	; 0x28
      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 80008c0:	2a00      	cmp	r2, #0
 80008c2:	d1c4      	bne.n	800084e <HAL_I2C_Master_Transmit+0x76>
 80008c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0c1      	beq.n	800084e <HAL_I2C_Master_Transmit+0x76>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80008ca:	9700      	str	r7, [sp, #0]
 80008cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80008ce:	2180      	movs	r1, #128	; 0x80
 80008d0:	0020      	movs	r0, r4
 80008d2:	f7ff fe2f 	bl	8000534 <I2C_WaitOnFlagUntilTimeout>
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d1e1      	bne.n	800089e <HAL_I2C_Master_Transmit+0xc6>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80008da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80008dc:	2bff      	cmp	r3, #255	; 0xff
 80008de:	d909      	bls.n	80008f4 <HAL_I2C_Master_Transmit+0x11c>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80008e4:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80008e6:	045b      	lsls	r3, r3, #17
 80008e8:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80008ea:	9903      	ldr	r1, [sp, #12]
 80008ec:	0020      	movs	r0, r4
 80008ee:	f7ff fe0f 	bl	8000510 <I2C_TransferConfig>
 80008f2:	e7ac      	b.n	800084e <HAL_I2C_Master_Transmit+0x76>
 80008f4:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 80008f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80008f8:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 80008fa:	b292      	uxth	r2, r2
 80008fc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	9000      	str	r0, [sp, #0]
 8000902:	e7f2      	b.n	80008ea <HAL_I2C_Master_Transmit+0x112>
 8000904:	fe00e800 	.word	0xfe00e800

08000908 <HAL_I2C_Master_Receive>:
{
 8000908:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800090a:	0005      	movs	r5, r0
{
 800090c:	b087      	sub	sp, #28
 800090e:	9103      	str	r1, [sp, #12]
 8000910:	9204      	str	r2, [sp, #16]
 8000912:	9305      	str	r3, [sp, #20]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000914:	3541      	adds	r5, #65	; 0x41
 8000916:	782b      	ldrb	r3, [r5, #0]
{
 8000918:	0004      	movs	r4, r0
    return HAL_BUSY;
 800091a:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 800091c:	2b20      	cmp	r3, #32
 800091e:	d157      	bne.n	80009d0 <HAL_I2C_Master_Receive+0xc8>
    __HAL_LOCK(hi2c);
 8000920:	0023      	movs	r3, r4
 8000922:	3340      	adds	r3, #64	; 0x40
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	2a01      	cmp	r2, #1
 8000928:	d052      	beq.n	80009d0 <HAL_I2C_Master_Receive+0xc8>
 800092a:	2601      	movs	r6, #1
 800092c:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800092e:	f7ff fcbd 	bl	80002ac <HAL_GetTick>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000932:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000934:	0007      	movs	r7, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000936:	9000      	str	r0, [sp, #0]
 8000938:	2319      	movs	r3, #25
 800093a:	0032      	movs	r2, r6
 800093c:	0209      	lsls	r1, r1, #8
 800093e:	0020      	movs	r0, r4
 8000940:	f7ff fdf8 	bl	8000534 <I2C_WaitOnFlagUntilTimeout>
 8000944:	2800      	cmp	r0, #0
 8000946:	d142      	bne.n	80009ce <HAL_I2C_Master_Receive+0xc6>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000948:	2322      	movs	r3, #34	; 0x22
 800094a:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800094c:	3b12      	subs	r3, #18
 800094e:	19ad      	adds	r5, r5, r6
 8000950:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000952:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000954:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000956:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000958:	466b      	mov	r3, sp
 800095a:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 800095c:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800095e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000960:	2390      	movs	r3, #144	; 0x90
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8000962:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000964:	019b      	lsls	r3, r3, #6
 8000966:	2aff      	cmp	r2, #255	; 0xff
 8000968:	d921      	bls.n	80009ae <HAL_I2C_Master_Receive+0xa6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800096a:	22ff      	movs	r2, #255	; 0xff
 800096c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	045b      	lsls	r3, r3, #17
 8000974:	9903      	ldr	r1, [sp, #12]
 8000976:	0020      	movs	r0, r4
 8000978:	f7ff fdca 	bl	8000510 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800097c:	26ff      	movs	r6, #255	; 0xff
    while(hi2c->XferCount > 0U)
 800097e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000980:	003a      	movs	r2, r7
 8000982:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000984:	0020      	movs	r0, r4
    while(hi2c->XferCount > 0U)
 8000986:	2b00      	cmp	r3, #0
 8000988:	d119      	bne.n	80009be <HAL_I2C_Master_Receive+0xb6>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800098a:	f7ff fea3 	bl	80006d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800098e:	2800      	cmp	r0, #0
 8000990:	d119      	bne.n	80009c6 <HAL_I2C_Master_Receive+0xbe>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000992:	2120      	movs	r1, #32
 8000994:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000996:	4e27      	ldr	r6, [pc, #156]	; (8000a34 <HAL_I2C_Master_Receive+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000998:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	4032      	ands	r2, r6
 800099e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80009a0:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80009a2:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80009a4:	3341      	adds	r3, #65	; 0x41
 80009a6:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80009a8:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80009aa:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80009ac:	e010      	b.n	80009d0 <HAL_I2C_Master_Receive+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 80009ae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80009b0:	b292      	uxth	r2, r2
 80009b2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	049b      	lsls	r3, r3, #18
 80009bc:	e7da      	b.n	8000974 <HAL_I2C_Master_Receive+0x6c>
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009be:	f7ff fe4d 	bl	800065c <I2C_WaitOnRXNEFlagUntilTimeout>
 80009c2:	2800      	cmp	r0, #0
 80009c4:	d006      	beq.n	80009d4 <HAL_I2C_Master_Receive+0xcc>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80009c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80009c8:	2001      	movs	r0, #1
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d000      	beq.n	80009d0 <HAL_I2C_Master_Receive+0xc8>
          return HAL_TIMEOUT;
 80009ce:	2003      	movs	r0, #3
}
 80009d0:	b007      	add	sp, #28
 80009d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80009d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	6262      	str	r2, [r4, #36]	; 0x24
 80009da:	6822      	ldr	r2, [r4, #0]
 80009dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80009de:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80009e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80009e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80009e4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80009e6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80009e8:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80009ea:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80009ec:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80009ee:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80009f0:	2a00      	cmp	r2, #0
 80009f2:	d1c4      	bne.n	800097e <HAL_I2C_Master_Receive+0x76>
 80009f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d0c1      	beq.n	800097e <HAL_I2C_Master_Receive+0x76>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80009fa:	9700      	str	r7, [sp, #0]
 80009fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80009fe:	2180      	movs	r1, #128	; 0x80
 8000a00:	0020      	movs	r0, r4
 8000a02:	f7ff fd97 	bl	8000534 <I2C_WaitOnFlagUntilTimeout>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	d1e1      	bne.n	80009ce <HAL_I2C_Master_Receive+0xc6>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000a0c:	2bff      	cmp	r3, #255	; 0xff
 8000a0e:	d909      	bls.n	8000a24 <HAL_I2C_Master_Receive+0x11c>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a14:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000a16:	045b      	lsls	r3, r3, #17
 8000a18:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a1a:	9903      	ldr	r1, [sp, #12]
 8000a1c:	0020      	movs	r0, r4
 8000a1e:	f7ff fd77 	bl	8000510 <I2C_TransferConfig>
 8000a22:	e7ac      	b.n	800097e <HAL_I2C_Master_Receive+0x76>
 8000a24:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000a26:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a28:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8000a2a:	b292      	uxth	r2, r2
 8000a2c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a2e:	b2d2      	uxtb	r2, r2
 8000a30:	9000      	str	r0, [sp, #0]
 8000a32:	e7f2      	b.n	8000a1a <HAL_I2C_Master_Receive+0x112>
 8000a34:	fe00e800 	.word	0xfe00e800

08000a38 <HAL_I2C_IsDeviceReady>:
{
 8000a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	9105      	str	r1, [sp, #20]
 8000a3e:	001d      	movs	r5, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000a40:	0001      	movs	r1, r0
  __IO uint32_t I2C_Trials = 0U;
 8000a42:	2300      	movs	r3, #0
{
 8000a44:	9204      	str	r2, [sp, #16]
  __IO uint32_t I2C_Trials = 0U;
 8000a46:	9307      	str	r3, [sp, #28]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000a48:	3141      	adds	r1, #65	; 0x41
 8000a4a:	780b      	ldrb	r3, [r1, #0]
{
 8000a4c:	0004      	movs	r4, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000a4e:	b2db      	uxtb	r3, r3
    return HAL_BUSY;
 8000a50:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000a52:	2b20      	cmp	r3, #32
 8000a54:	d155      	bne.n	8000b02 <HAL_I2C_IsDeviceReady+0xca>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000a56:	6822      	ldr	r2, [r4, #0]
 8000a58:	6996      	ldr	r6, [r2, #24]
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	0212      	lsls	r2, r2, #8
 8000a5e:	4032      	ands	r2, r6
 8000a60:	d14f      	bne.n	8000b02 <HAL_I2C_IsDeviceReady+0xca>
    __HAL_LOCK(hi2c);
 8000a62:	0026      	movs	r6, r4
 8000a64:	3640      	adds	r6, #64	; 0x40
 8000a66:	7837      	ldrb	r7, [r6, #0]
 8000a68:	2f01      	cmp	r7, #1
 8000a6a:	d04a      	beq.n	8000b02 <HAL_I2C_IsDeviceReady+0xca>
 8000a6c:	3801      	subs	r0, #1
 8000a6e:	7030      	strb	r0, [r6, #0]
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8000a70:	001e      	movs	r6, r3
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a72:	3023      	adds	r0, #35	; 0x23
 8000a74:	7008      	strb	r0, [r1, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a76:	6462      	str	r2, [r4, #68]	; 0x44
 8000a78:	9b05      	ldr	r3, [sp, #20]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode,DevAddress);
 8000a7a:	68e1      	ldr	r1, [r4, #12]
 8000a7c:	059b      	lsls	r3, r3, #22
 8000a7e:	6822      	ldr	r2, [r4, #0]
 8000a80:	0d9b      	lsrs	r3, r3, #22
 8000a82:	2901      	cmp	r1, #1
 8000a84:	d11a      	bne.n	8000abc <HAL_I2C_IsDeviceReady+0x84>
 8000a86:	4936      	ldr	r1, [pc, #216]	; (8000b60 <HAL_I2C_IsDeviceReady+0x128>)
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8000a8c:	f7ff fc0e 	bl	80002ac <HAL_GetTick>
 8000a90:	9003      	str	r0, [sp, #12]
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8000a92:	0027      	movs	r7, r4
 8000a94:	6823      	ldr	r3, [r4, #0]
 8000a96:	3741      	adds	r7, #65	; 0x41
 8000a98:	699a      	ldr	r2, [r3, #24]
 8000a9a:	4232      	tst	r2, r6
 8000a9c:	d018      	beq.n	8000ad0 <HAL_I2C_IsDeviceReady+0x98>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000a9e:	2710      	movs	r7, #16
 8000aa0:	699a      	ldr	r2, [r3, #24]
 8000aa2:	403a      	ands	r2, r7
 8000aa4:	d12f      	bne.n	8000b06 <HAL_I2C_IsDeviceReady+0xce>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000aa6:	9b03      	ldr	r3, [sp, #12]
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	0020      	movs	r0, r4
 8000aae:	002b      	movs	r3, r5
 8000ab0:	f7ff fd40 	bl	8000534 <I2C_WaitOnFlagUntilTimeout>
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	d01c      	beq.n	8000af2 <HAL_I2C_IsDeviceReady+0xba>
    return HAL_TIMEOUT;
 8000ab8:	2003      	movs	r0, #3
 8000aba:	e022      	b.n	8000b02 <HAL_I2C_IsDeviceReady+0xca>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode,DevAddress);
 8000abc:	21a0      	movs	r1, #160	; 0xa0
 8000abe:	0189      	lsls	r1, r1, #6
 8000ac0:	e7e2      	b.n	8000a88 <HAL_I2C_IsDeviceReady+0x50>
          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ac2:	f7ff fbf3 	bl	80002ac <HAL_GetTick>
 8000ac6:	9b03      	ldr	r3, [sp, #12]
 8000ac8:	1ac0      	subs	r0, r0, r3
 8000aca:	4285      	cmp	r5, r0
 8000acc:	d2e1      	bcs.n	8000a92 <HAL_I2C_IsDeviceReady+0x5a>
 8000ace:	e00a      	b.n	8000ae6 <HAL_I2C_IsDeviceReady+0xae>
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8000ad0:	2110      	movs	r1, #16
 8000ad2:	699a      	ldr	r2, [r3, #24]
 8000ad4:	420a      	tst	r2, r1
 8000ad6:	d1e2      	bne.n	8000a9e <HAL_I2C_IsDeviceReady+0x66>
 8000ad8:	783a      	ldrb	r2, [r7, #0]
 8000ada:	2aa0      	cmp	r2, #160	; 0xa0
 8000adc:	d0df      	beq.n	8000a9e <HAL_I2C_IsDeviceReady+0x66>
      	if(Timeout != HAL_MAX_DELAY)
 8000ade:	1c6a      	adds	r2, r5, #1
 8000ae0:	d0da      	beq.n	8000a98 <HAL_I2C_IsDeviceReady+0x60>
          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	d1ed      	bne.n	8000ac2 <HAL_I2C_IsDeviceReady+0x8a>
            hi2c->State = HAL_I2C_STATE_READY;
 8000ae6:	2320      	movs	r3, #32
 8000ae8:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(hi2c);
 8000aea:	2300      	movs	r3, #0
 8000aec:	3440      	adds	r4, #64	; 0x40
 8000aee:	7023      	strb	r3, [r4, #0]
 8000af0:	e7e2      	b.n	8000ab8 <HAL_I2C_IsDeviceReady+0x80>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000af2:	2320      	movs	r3, #32
 8000af4:	6822      	ldr	r2, [r4, #0]
 8000af6:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8000af8:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 8000afa:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8000afc:	3241      	adds	r2, #65	; 0x41
 8000afe:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8000b00:	7020      	strb	r0, [r4, #0]
}
 8000b02:	b009      	add	sp, #36	; 0x24
 8000b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000b06:	9b03      	ldr	r3, [sp, #12]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	0031      	movs	r1, r6
 8000b0e:	002b      	movs	r3, r5
 8000b10:	0020      	movs	r0, r4
 8000b12:	f7ff fd0f 	bl	8000534 <I2C_WaitOnFlagUntilTimeout>
 8000b16:	1e02      	subs	r2, r0, #0
 8000b18:	d1ce      	bne.n	8000ab8 <HAL_I2C_IsDeviceReady+0x80>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b1e:	61de      	str	r6, [r3, #28]
      if (I2C_Trials++ == Trials)
 8000b20:	9907      	ldr	r1, [sp, #28]
 8000b22:	1c48      	adds	r0, r1, #1
 8000b24:	9007      	str	r0, [sp, #28]
 8000b26:	9804      	ldr	r0, [sp, #16]
 8000b28:	4281      	cmp	r1, r0
 8000b2a:	d10f      	bne.n	8000b4c <HAL_I2C_IsDeviceReady+0x114>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	6858      	ldr	r0, [r3, #4]
 8000b30:	01c9      	lsls	r1, r1, #7
 8000b32:	4301      	orrs	r1, r0
 8000b34:	6059      	str	r1, [r3, #4]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000b36:	9b03      	ldr	r3, [sp, #12]
 8000b38:	0031      	movs	r1, r6
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	0020      	movs	r0, r4
 8000b3e:	002b      	movs	r3, r5
 8000b40:	f7ff fcf8 	bl	8000534 <I2C_WaitOnFlagUntilTimeout>
 8000b44:	2800      	cmp	r0, #0
 8000b46:	d1b7      	bne.n	8000ab8 <HAL_I2C_IsDeviceReady+0x80>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b48:	6823      	ldr	r3, [r4, #0]
 8000b4a:	61de      	str	r6, [r3, #28]
    }while(I2C_Trials < Trials);
 8000b4c:	9b07      	ldr	r3, [sp, #28]
 8000b4e:	9a04      	ldr	r2, [sp, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d900      	bls.n	8000b56 <HAL_I2C_IsDeviceReady+0x11e>
 8000b54:	e790      	b.n	8000a78 <HAL_I2C_IsDeviceReady+0x40>
    hi2c->State = HAL_I2C_STATE_READY;
 8000b56:	0023      	movs	r3, r4
 8000b58:	2220      	movs	r2, #32
 8000b5a:	3341      	adds	r3, #65	; 0x41
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	e7c4      	b.n	8000aea <HAL_I2C_IsDeviceReady+0xb2>
 8000b60:	02002000 	.word	0x02002000

08000b64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000b64:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000b66:	0004      	movs	r4, r0
 8000b68:	3441      	adds	r4, #65	; 0x41
 8000b6a:	7822      	ldrb	r2, [r4, #0]
{
 8000b6c:	0003      	movs	r3, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000b6e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000b70:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000b72:	2a20      	cmp	r2, #32
 8000b74:	d118      	bne.n	8000ba8 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000b76:	001d      	movs	r5, r3
 8000b78:	3540      	adds	r5, #64	; 0x40
 8000b7a:	782e      	ldrb	r6, [r5, #0]
 8000b7c:	2e01      	cmp	r6, #1
 8000b7e:	d013      	beq.n	8000ba8 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000b80:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000b82:	3022      	adds	r0, #34	; 0x22
 8000b84:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000b86:	681e      	ldr	r6, [r3, #0]
 8000b88:	3823      	subs	r0, #35	; 0x23
 8000b8a:	4386      	bics	r6, r0
 8000b8c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000b8e:	681e      	ldr	r6, [r3, #0]
 8000b90:	4f06      	ldr	r7, [pc, #24]	; (8000bac <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000b92:	403e      	ands	r6, r7
 8000b94:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000b96:	681e      	ldr	r6, [r3, #0]
 8000b98:	4331      	orrs	r1, r6
 8000b9a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000b9c:	6819      	ldr	r1, [r3, #0]
 8000b9e:	4308      	orrs	r0, r1
 8000ba0:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000ba2:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000ba4:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000ba6:	7028      	strb	r0, [r5, #0]
  }
}
 8000ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	ffffefff 	.word	0xffffefff

08000bb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000bb0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000bb2:	0005      	movs	r5, r0
 8000bb4:	3541      	adds	r5, #65	; 0x41
 8000bb6:	782a      	ldrb	r2, [r5, #0]
{
 8000bb8:	0003      	movs	r3, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000bba:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000bbc:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000bbe:	2a20      	cmp	r2, #32
 8000bc0:	d117      	bne.n	8000bf2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000bc2:	001c      	movs	r4, r3
 8000bc4:	3440      	adds	r4, #64	; 0x40
 8000bc6:	7826      	ldrb	r6, [r4, #0]
 8000bc8:	2e01      	cmp	r6, #1
 8000bca:	d012      	beq.n	8000bf2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000bcc:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000bce:	3022      	adds	r0, #34	; 0x22
 8000bd0:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000bd2:	681e      	ldr	r6, [r3, #0]
 8000bd4:	3823      	subs	r0, #35	; 0x23
 8000bd6:	4386      	bics	r6, r0
 8000bd8:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000bda:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000bdc:	4f05      	ldr	r7, [pc, #20]	; (8000bf4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000bde:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000be0:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000be2:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000be4:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000be6:	6819      	ldr	r1, [r3, #0]
 8000be8:	4308      	orrs	r0, r1
 8000bea:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000bec:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000bee:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000bf0:	7020      	strb	r0, [r4, #0]
  }
}
 8000bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf4:	fffff0ff 	.word	0xfffff0ff

08000bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bfa:	6803      	ldr	r3, [r0, #0]
{
 8000bfc:	b085      	sub	sp, #20
 8000bfe:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c00:	07db      	lsls	r3, r3, #31
 8000c02:	d42f      	bmi.n	8000c64 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c04:	682b      	ldr	r3, [r5, #0]
 8000c06:	079b      	lsls	r3, r3, #30
 8000c08:	d500      	bpl.n	8000c0c <HAL_RCC_OscConfig+0x14>
 8000c0a:	e081      	b.n	8000d10 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c0c:	682b      	ldr	r3, [r5, #0]
 8000c0e:	071b      	lsls	r3, r3, #28
 8000c10:	d500      	bpl.n	8000c14 <HAL_RCC_OscConfig+0x1c>
 8000c12:	e0bc      	b.n	8000d8e <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c14:	682b      	ldr	r3, [r5, #0]
 8000c16:	075b      	lsls	r3, r3, #29
 8000c18:	d500      	bpl.n	8000c1c <HAL_RCC_OscConfig+0x24>
 8000c1a:	e0df      	b.n	8000ddc <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000c1c:	682b      	ldr	r3, [r5, #0]
 8000c1e:	06db      	lsls	r3, r3, #27
 8000c20:	d51a      	bpl.n	8000c58 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000c22:	696a      	ldr	r2, [r5, #20]
 8000c24:	4cb5      	ldr	r4, [pc, #724]	; (8000efc <HAL_RCC_OscConfig+0x304>)
 8000c26:	2304      	movs	r3, #4
 8000c28:	2a01      	cmp	r2, #1
 8000c2a:	d000      	beq.n	8000c2e <HAL_RCC_OscConfig+0x36>
 8000c2c:	e14b      	b.n	8000ec6 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c2e:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c30:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c32:	430b      	orrs	r3, r1
 8000c34:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000c36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000c3c:	f7ff fb36 	bl	80002ac <HAL_GetTick>
 8000c40:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c44:	4233      	tst	r3, r6
 8000c46:	d100      	bne.n	8000c4a <HAL_RCC_OscConfig+0x52>
 8000c48:	e136      	b.n	8000eb8 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c4a:	21f8      	movs	r1, #248	; 0xf8
 8000c4c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000c4e:	69ab      	ldr	r3, [r5, #24]
 8000c50:	438a      	bics	r2, r1
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c58:	6a29      	ldr	r1, [r5, #32]
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d000      	beq.n	8000c60 <HAL_RCC_OscConfig+0x68>
 8000c5e:	e159      	b.n	8000f14 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000c60:	2000      	movs	r0, #0
 8000c62:	e013      	b.n	8000c8c <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c64:	210c      	movs	r1, #12
 8000c66:	4ca5      	ldr	r4, [pc, #660]	; (8000efc <HAL_RCC_OscConfig+0x304>)
 8000c68:	6862      	ldr	r2, [r4, #4]
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	2a04      	cmp	r2, #4
 8000c6e:	d006      	beq.n	8000c7e <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c70:	6863      	ldr	r3, [r4, #4]
 8000c72:	400b      	ands	r3, r1
 8000c74:	2b08      	cmp	r3, #8
 8000c76:	d10b      	bne.n	8000c90 <HAL_RCC_OscConfig+0x98>
 8000c78:	6863      	ldr	r3, [r4, #4]
 8000c7a:	03db      	lsls	r3, r3, #15
 8000c7c:	d508      	bpl.n	8000c90 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7e:	6823      	ldr	r3, [r4, #0]
 8000c80:	039b      	lsls	r3, r3, #14
 8000c82:	d5bf      	bpl.n	8000c04 <HAL_RCC_OscConfig+0xc>
 8000c84:	686b      	ldr	r3, [r5, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1bc      	bne.n	8000c04 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000c8a:	2001      	movs	r0, #1
}
 8000c8c:	b005      	add	sp, #20
 8000c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c90:	686b      	ldr	r3, [r5, #4]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d113      	bne.n	8000cbe <HAL_RCC_OscConfig+0xc6>
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	6822      	ldr	r2, [r4, #0]
 8000c9a:	025b      	lsls	r3, r3, #9
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ca0:	f7ff fb04 	bl	80002ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca4:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000ca6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca8:	02b6      	lsls	r6, r6, #10
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	4233      	tst	r3, r6
 8000cae:	d1a9      	bne.n	8000c04 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cb0:	f7ff fafc 	bl	80002ac <HAL_GetTick>
 8000cb4:	1bc0      	subs	r0, r0, r7
 8000cb6:	2864      	cmp	r0, #100	; 0x64
 8000cb8:	d9f7      	bls.n	8000caa <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000cba:	2003      	movs	r0, #3
 8000cbc:	e7e6      	b.n	8000c8c <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d116      	bne.n	8000cf0 <HAL_RCC_OscConfig+0xf8>
 8000cc2:	6823      	ldr	r3, [r4, #0]
 8000cc4:	4a8e      	ldr	r2, [pc, #568]	; (8000f00 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc6:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc8:	4013      	ands	r3, r2
 8000cca:	6023      	str	r3, [r4, #0]
 8000ccc:	6823      	ldr	r3, [r4, #0]
 8000cce:	4a8d      	ldr	r2, [pc, #564]	; (8000f04 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd0:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cd6:	f7ff fae9 	bl	80002ac <HAL_GetTick>
 8000cda:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cdc:	6823      	ldr	r3, [r4, #0]
 8000cde:	4233      	tst	r3, r6
 8000ce0:	d100      	bne.n	8000ce4 <HAL_RCC_OscConfig+0xec>
 8000ce2:	e78f      	b.n	8000c04 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce4:	f7ff fae2 	bl	80002ac <HAL_GetTick>
 8000ce8:	1bc0      	subs	r0, r0, r7
 8000cea:	2864      	cmp	r0, #100	; 0x64
 8000cec:	d9f6      	bls.n	8000cdc <HAL_RCC_OscConfig+0xe4>
 8000cee:	e7e4      	b.n	8000cba <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf0:	2b05      	cmp	r3, #5
 8000cf2:	d105      	bne.n	8000d00 <HAL_RCC_OscConfig+0x108>
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	6822      	ldr	r2, [r4, #0]
 8000cf8:	02db      	lsls	r3, r3, #11
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	6023      	str	r3, [r4, #0]
 8000cfe:	e7ca      	b.n	8000c96 <HAL_RCC_OscConfig+0x9e>
 8000d00:	6823      	ldr	r3, [r4, #0]
 8000d02:	4a7f      	ldr	r2, [pc, #508]	; (8000f00 <HAL_RCC_OscConfig+0x308>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	6023      	str	r3, [r4, #0]
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	4a7e      	ldr	r2, [pc, #504]	; (8000f04 <HAL_RCC_OscConfig+0x30c>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	e7c6      	b.n	8000c9e <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d10:	220c      	movs	r2, #12
 8000d12:	4c7a      	ldr	r4, [pc, #488]	; (8000efc <HAL_RCC_OscConfig+0x304>)
 8000d14:	6863      	ldr	r3, [r4, #4]
 8000d16:	4213      	tst	r3, r2
 8000d18:	d006      	beq.n	8000d28 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d1a:	6863      	ldr	r3, [r4, #4]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	2b08      	cmp	r3, #8
 8000d20:	d110      	bne.n	8000d44 <HAL_RCC_OscConfig+0x14c>
 8000d22:	6863      	ldr	r3, [r4, #4]
 8000d24:	03db      	lsls	r3, r3, #15
 8000d26:	d40d      	bmi.n	8000d44 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d28:	6823      	ldr	r3, [r4, #0]
 8000d2a:	079b      	lsls	r3, r3, #30
 8000d2c:	d502      	bpl.n	8000d34 <HAL_RCC_OscConfig+0x13c>
 8000d2e:	68eb      	ldr	r3, [r5, #12]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d1aa      	bne.n	8000c8a <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d34:	21f8      	movs	r1, #248	; 0xf8
 8000d36:	6822      	ldr	r2, [r4, #0]
 8000d38:	692b      	ldr	r3, [r5, #16]
 8000d3a:	438a      	bics	r2, r1
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	6023      	str	r3, [r4, #0]
 8000d42:	e763      	b.n	8000c0c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d44:	68ea      	ldr	r2, [r5, #12]
 8000d46:	2301      	movs	r3, #1
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	d00f      	beq.n	8000d6c <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000d4c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d4e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000d50:	4313      	orrs	r3, r2
 8000d52:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d54:	f7ff faaa 	bl	80002ac <HAL_GetTick>
 8000d58:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	4233      	tst	r3, r6
 8000d5e:	d1e9      	bne.n	8000d34 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d60:	f7ff faa4 	bl	80002ac <HAL_GetTick>
 8000d64:	1bc0      	subs	r0, r0, r7
 8000d66:	2802      	cmp	r0, #2
 8000d68:	d9f7      	bls.n	8000d5a <HAL_RCC_OscConfig+0x162>
 8000d6a:	e7a6      	b.n	8000cba <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000d6c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000d70:	439a      	bics	r2, r3
 8000d72:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000d74:	f7ff fa9a 	bl	80002ac <HAL_GetTick>
 8000d78:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	4233      	tst	r3, r6
 8000d7e:	d100      	bne.n	8000d82 <HAL_RCC_OscConfig+0x18a>
 8000d80:	e744      	b.n	8000c0c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d82:	f7ff fa93 	bl	80002ac <HAL_GetTick>
 8000d86:	1bc0      	subs	r0, r0, r7
 8000d88:	2802      	cmp	r0, #2
 8000d8a:	d9f6      	bls.n	8000d7a <HAL_RCC_OscConfig+0x182>
 8000d8c:	e795      	b.n	8000cba <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d8e:	69ea      	ldr	r2, [r5, #28]
 8000d90:	2301      	movs	r3, #1
 8000d92:	4c5a      	ldr	r4, [pc, #360]	; (8000efc <HAL_RCC_OscConfig+0x304>)
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	d010      	beq.n	8000dba <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000d98:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000da0:	f7ff fa84 	bl	80002ac <HAL_GetTick>
 8000da4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000da8:	4233      	tst	r3, r6
 8000daa:	d000      	beq.n	8000dae <HAL_RCC_OscConfig+0x1b6>
 8000dac:	e732      	b.n	8000c14 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dae:	f7ff fa7d 	bl	80002ac <HAL_GetTick>
 8000db2:	1bc0      	subs	r0, r0, r7
 8000db4:	2802      	cmp	r0, #2
 8000db6:	d9f6      	bls.n	8000da6 <HAL_RCC_OscConfig+0x1ae>
 8000db8:	e77f      	b.n	8000cba <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000dba:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dbc:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000dbe:	439a      	bics	r2, r3
 8000dc0:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000dc2:	f7ff fa73 	bl	80002ac <HAL_GetTick>
 8000dc6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000dca:	4233      	tst	r3, r6
 8000dcc:	d100      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x1d8>
 8000dce:	e721      	b.n	8000c14 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fa6c 	bl	80002ac <HAL_GetTick>
 8000dd4:	1bc0      	subs	r0, r0, r7
 8000dd6:	2802      	cmp	r0, #2
 8000dd8:	d9f6      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x1d0>
 8000dda:	e76e      	b.n	8000cba <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ddc:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000dde:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000de0:	4c46      	ldr	r4, [pc, #280]	; (8000efc <HAL_RCC_OscConfig+0x304>)
 8000de2:	0552      	lsls	r2, r2, #21
 8000de4:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000de6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000de8:	4213      	tst	r3, r2
 8000dea:	d108      	bne.n	8000dfe <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dec:	69e3      	ldr	r3, [r4, #28]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61e3      	str	r3, [r4, #28]
 8000df2:	69e3      	ldr	r3, [r4, #28]
 8000df4:	4013      	ands	r3, r2
 8000df6:	9303      	str	r3, [sp, #12]
 8000df8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dfe:	2780      	movs	r7, #128	; 0x80
 8000e00:	4e41      	ldr	r6, [pc, #260]	; (8000f08 <HAL_RCC_OscConfig+0x310>)
 8000e02:	007f      	lsls	r7, r7, #1
 8000e04:	6833      	ldr	r3, [r6, #0]
 8000e06:	423b      	tst	r3, r7
 8000e08:	d006      	beq.n	8000e18 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e0a:	68ab      	ldr	r3, [r5, #8]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d113      	bne.n	8000e38 <HAL_RCC_OscConfig+0x240>
 8000e10:	6a22      	ldr	r2, [r4, #32]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	6223      	str	r3, [r4, #32]
 8000e16:	e030      	b.n	8000e7a <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e18:	6833      	ldr	r3, [r6, #0]
 8000e1a:	433b      	orrs	r3, r7
 8000e1c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e1e:	f7ff fa45 	bl	80002ac <HAL_GetTick>
 8000e22:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e24:	6833      	ldr	r3, [r6, #0]
 8000e26:	423b      	tst	r3, r7
 8000e28:	d1ef      	bne.n	8000e0a <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e2a:	f7ff fa3f 	bl	80002ac <HAL_GetTick>
 8000e2e:	9b01      	ldr	r3, [sp, #4]
 8000e30:	1ac0      	subs	r0, r0, r3
 8000e32:	2864      	cmp	r0, #100	; 0x64
 8000e34:	d9f6      	bls.n	8000e24 <HAL_RCC_OscConfig+0x22c>
 8000e36:	e740      	b.n	8000cba <HAL_RCC_OscConfig+0xc2>
 8000e38:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d114      	bne.n	8000e68 <HAL_RCC_OscConfig+0x270>
 8000e3e:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e40:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e42:	4393      	bics	r3, r2
 8000e44:	6223      	str	r3, [r4, #32]
 8000e46:	6a23      	ldr	r3, [r4, #32]
 8000e48:	3203      	adds	r2, #3
 8000e4a:	4393      	bics	r3, r2
 8000e4c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e4e:	f7ff fa2d 	bl	80002ac <HAL_GetTick>
 8000e52:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e54:	6a23      	ldr	r3, [r4, #32]
 8000e56:	423b      	tst	r3, r7
 8000e58:	d025      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e5a:	f7ff fa27 	bl	80002ac <HAL_GetTick>
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <HAL_RCC_OscConfig+0x314>)
 8000e60:	1b80      	subs	r0, r0, r6
 8000e62:	4298      	cmp	r0, r3
 8000e64:	d9f6      	bls.n	8000e54 <HAL_RCC_OscConfig+0x25c>
 8000e66:	e728      	b.n	8000cba <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	d10b      	bne.n	8000e84 <HAL_RCC_OscConfig+0x28c>
 8000e6c:	6a21      	ldr	r1, [r4, #32]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	430b      	orrs	r3, r1
 8000e72:	6223      	str	r3, [r4, #32]
 8000e74:	6a23      	ldr	r3, [r4, #32]
 8000e76:	431a      	orrs	r2, r3
 8000e78:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000e7a:	f7ff fa17 	bl	80002ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e7e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000e80:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e82:	e00d      	b.n	8000ea0 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e84:	6a23      	ldr	r3, [r4, #32]
 8000e86:	4393      	bics	r3, r2
 8000e88:	2204      	movs	r2, #4
 8000e8a:	6223      	str	r3, [r4, #32]
 8000e8c:	6a23      	ldr	r3, [r4, #32]
 8000e8e:	4393      	bics	r3, r2
 8000e90:	e7c0      	b.n	8000e14 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e92:	f7ff fa0b 	bl	80002ac <HAL_GetTick>
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_RCC_OscConfig+0x314>)
 8000e98:	1b80      	subs	r0, r0, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d900      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x2a8>
 8000e9e:	e70c      	b.n	8000cba <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea0:	6a23      	ldr	r3, [r4, #32]
 8000ea2:	423b      	tst	r3, r7
 8000ea4:	d0f5      	beq.n	8000e92 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000ea6:	9b00      	ldr	r3, [sp, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d000      	beq.n	8000eae <HAL_RCC_OscConfig+0x2b6>
 8000eac:	e6b6      	b.n	8000c1c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eae:	69e3      	ldr	r3, [r4, #28]
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <HAL_RCC_OscConfig+0x318>)
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61e3      	str	r3, [r4, #28]
 8000eb6:	e6b1      	b.n	8000c1c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000eb8:	f7ff f9f8 	bl	80002ac <HAL_GetTick>
 8000ebc:	1bc0      	subs	r0, r0, r7
 8000ebe:	2802      	cmp	r0, #2
 8000ec0:	d800      	bhi.n	8000ec4 <HAL_RCC_OscConfig+0x2cc>
 8000ec2:	e6be      	b.n	8000c42 <HAL_RCC_OscConfig+0x4a>
 8000ec4:	e6f9      	b.n	8000cba <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ec6:	3205      	adds	r2, #5
 8000ec8:	d103      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000eca:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000ecc:	439a      	bics	r2, r3
 8000ece:	6362      	str	r2, [r4, #52]	; 0x34
 8000ed0:	e6bb      	b.n	8000c4a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ed2:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ed4:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ed6:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000ed8:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000eda:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000edc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ede:	4393      	bics	r3, r2
 8000ee0:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ee2:	f7ff f9e3 	bl	80002ac <HAL_GetTick>
 8000ee6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ee8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000eea:	4233      	tst	r3, r6
 8000eec:	d100      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x2f8>
 8000eee:	e6b3      	b.n	8000c58 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ef0:	f7ff f9dc 	bl	80002ac <HAL_GetTick>
 8000ef4:	1bc0      	subs	r0, r0, r7
 8000ef6:	2802      	cmp	r0, #2
 8000ef8:	d9f6      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x2f0>
 8000efa:	e6de      	b.n	8000cba <HAL_RCC_OscConfig+0xc2>
 8000efc:	40021000 	.word	0x40021000
 8000f00:	fffeffff 	.word	0xfffeffff
 8000f04:	fffbffff 	.word	0xfffbffff
 8000f08:	40007000 	.word	0x40007000
 8000f0c:	00001388 	.word	0x00001388
 8000f10:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f14:	220c      	movs	r2, #12
 8000f16:	4c26      	ldr	r4, [pc, #152]	; (8000fb0 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000f18:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f1a:	6863      	ldr	r3, [r4, #4]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d100      	bne.n	8000f24 <HAL_RCC_OscConfig+0x32c>
 8000f22:	e6b3      	b.n	8000c8c <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000f24:	6823      	ldr	r3, [r4, #0]
 8000f26:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <HAL_RCC_OscConfig+0x3bc>)
 8000f28:	4013      	ands	r3, r2
 8000f2a:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f2c:	2902      	cmp	r1, #2
 8000f2e:	d12f      	bne.n	8000f90 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000f30:	f7ff f9bc 	bl	80002ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f34:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000f36:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f38:	04b6      	lsls	r6, r6, #18
 8000f3a:	6823      	ldr	r3, [r4, #0]
 8000f3c:	4233      	tst	r3, r6
 8000f3e:	d121      	bne.n	8000f84 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f40:	220f      	movs	r2, #15
 8000f42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f44:	4393      	bics	r3, r2
 8000f46:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f4c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000f4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000f50:	6862      	ldr	r2, [r4, #4]
 8000f52:	430b      	orrs	r3, r1
 8000f54:	4918      	ldr	r1, [pc, #96]	; (8000fb8 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f56:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f58:	400a      	ands	r2, r1
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	6822      	ldr	r2, [r4, #0]
 8000f62:	045b      	lsls	r3, r3, #17
 8000f64:	4313      	orrs	r3, r2
 8000f66:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f68:	f7ff f9a0 	bl	80002ac <HAL_GetTick>
 8000f6c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f6e:	04ad      	lsls	r5, r5, #18
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	422b      	tst	r3, r5
 8000f74:	d000      	beq.n	8000f78 <HAL_RCC_OscConfig+0x380>
 8000f76:	e673      	b.n	8000c60 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f78:	f7ff f998 	bl	80002ac <HAL_GetTick>
 8000f7c:	1b80      	subs	r0, r0, r6
 8000f7e:	2802      	cmp	r0, #2
 8000f80:	d9f6      	bls.n	8000f70 <HAL_RCC_OscConfig+0x378>
 8000f82:	e69a      	b.n	8000cba <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f84:	f7ff f992 	bl	80002ac <HAL_GetTick>
 8000f88:	1bc0      	subs	r0, r0, r7
 8000f8a:	2802      	cmp	r0, #2
 8000f8c:	d9d5      	bls.n	8000f3a <HAL_RCC_OscConfig+0x342>
 8000f8e:	e694      	b.n	8000cba <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000f90:	f7ff f98c 	bl	80002ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f94:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000f96:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f98:	04ad      	lsls	r5, r5, #18
 8000f9a:	6823      	ldr	r3, [r4, #0]
 8000f9c:	422b      	tst	r3, r5
 8000f9e:	d100      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x3aa>
 8000fa0:	e65e      	b.n	8000c60 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa2:	f7ff f983 	bl	80002ac <HAL_GetTick>
 8000fa6:	1b80      	subs	r0, r0, r6
 8000fa8:	2802      	cmp	r0, #2
 8000faa:	d9f6      	bls.n	8000f9a <HAL_RCC_OscConfig+0x3a2>
 8000fac:	e685      	b.n	8000cba <HAL_RCC_OscConfig+0xc2>
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	feffffff 	.word	0xfeffffff
 8000fb8:	ffc2ffff 	.word	0xffc2ffff

08000fbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fbc:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000fbe:	4c14      	ldr	r4, [pc, #80]	; (8001010 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000fc0:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000fc2:	2210      	movs	r2, #16
 8000fc4:	0021      	movs	r1, r4
 8000fc6:	4668      	mov	r0, sp
 8000fc8:	f000 fd4e 	bl	8001a68 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000fcc:	0021      	movs	r1, r4
 8000fce:	ad04      	add	r5, sp, #16
 8000fd0:	2210      	movs	r2, #16
 8000fd2:	3110      	adds	r1, #16
 8000fd4:	0028      	movs	r0, r5
 8000fd6:	f000 fd47 	bl	8001a68 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000fda:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000fdc:	4e0d      	ldr	r6, [pc, #52]	; (8001014 <HAL_RCC_GetSysClockFreq+0x58>)
 8000fde:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	2a08      	cmp	r2, #8
 8000fe4:	d111      	bne.n	800100a <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	466a      	mov	r2, sp
 8000fea:	0c99      	lsrs	r1, r3, #18
 8000fec:	4001      	ands	r1, r0
 8000fee:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000ff0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000ff2:	4002      	ands	r2, r0
 8000ff4:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000ff6:	03db      	lsls	r3, r3, #15
 8000ff8:	d505      	bpl.n	8001006 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000ffa:	4807      	ldr	r0, [pc, #28]	; (8001018 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000ffc:	f7ff f8a0 	bl	8000140 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001000:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001002:	b008      	add	sp, #32
 8001004:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_RCC_GetSysClockFreq+0x60>)
 8001008:	e7fa      	b.n	8001000 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 800100c:	e7f9      	b.n	8001002 <HAL_RCC_GetSysClockFreq+0x46>
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	080022f4 	.word	0x080022f4
 8001014:	40021000 	.word	0x40021000
 8001018:	007a1200 	.word	0x007a1200
 800101c:	003d0900 	.word	0x003d0900

08001020 <HAL_RCC_ClockConfig>:
{
 8001020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001022:	2201      	movs	r2, #1
 8001024:	4c43      	ldr	r4, [pc, #268]	; (8001134 <HAL_RCC_ClockConfig+0x114>)
{
 8001026:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001028:	6823      	ldr	r3, [r4, #0]
{
 800102a:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800102c:	4013      	ands	r3, r2
 800102e:	428b      	cmp	r3, r1
 8001030:	d31c      	bcc.n	800106c <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001032:	6832      	ldr	r2, [r6, #0]
 8001034:	0793      	lsls	r3, r2, #30
 8001036:	d423      	bmi.n	8001080 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001038:	07d3      	lsls	r3, r2, #31
 800103a:	d429      	bmi.n	8001090 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800103c:	2301      	movs	r3, #1
 800103e:	6822      	ldr	r2, [r4, #0]
 8001040:	401a      	ands	r2, r3
 8001042:	4297      	cmp	r7, r2
 8001044:	d367      	bcc.n	8001116 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001046:	6833      	ldr	r3, [r6, #0]
 8001048:	4c3b      	ldr	r4, [pc, #236]	; (8001138 <HAL_RCC_ClockConfig+0x118>)
 800104a:	075b      	lsls	r3, r3, #29
 800104c:	d46a      	bmi.n	8001124 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800104e:	f7ff ffb5 	bl	8000fbc <HAL_RCC_GetSysClockFreq>
 8001052:	6863      	ldr	r3, [r4, #4]
 8001054:	4a39      	ldr	r2, [pc, #228]	; (800113c <HAL_RCC_ClockConfig+0x11c>)
 8001056:	061b      	lsls	r3, r3, #24
 8001058:	0f1b      	lsrs	r3, r3, #28
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	40d8      	lsrs	r0, r3
 800105e:	4b38      	ldr	r3, [pc, #224]	; (8001140 <HAL_RCC_ClockConfig+0x120>)
 8001060:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff f8f8 	bl	8000258 <HAL_InitTick>
  return HAL_OK;
 8001068:	2000      	movs	r0, #0
 800106a:	e008      	b.n	800107e <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	4393      	bics	r3, r2
 8001070:	430b      	orrs	r3, r1
 8001072:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	4013      	ands	r3, r2
 8001078:	4299      	cmp	r1, r3
 800107a:	d0da      	beq.n	8001032 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 800107c:	2001      	movs	r0, #1
}
 800107e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001080:	20f0      	movs	r0, #240	; 0xf0
 8001082:	492d      	ldr	r1, [pc, #180]	; (8001138 <HAL_RCC_ClockConfig+0x118>)
 8001084:	684b      	ldr	r3, [r1, #4]
 8001086:	4383      	bics	r3, r0
 8001088:	68b0      	ldr	r0, [r6, #8]
 800108a:	4303      	orrs	r3, r0
 800108c:	604b      	str	r3, [r1, #4]
 800108e:	e7d3      	b.n	8001038 <HAL_RCC_ClockConfig+0x18>
 8001090:	4d29      	ldr	r5, [pc, #164]	; (8001138 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001092:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001094:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001096:	2a01      	cmp	r2, #1
 8001098:	d11a      	bne.n	80010d0 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	039b      	lsls	r3, r3, #14
 800109c:	d5ee      	bpl.n	800107c <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800109e:	2103      	movs	r1, #3
 80010a0:	686b      	ldr	r3, [r5, #4]
 80010a2:	438b      	bics	r3, r1
 80010a4:	4313      	orrs	r3, r2
 80010a6:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80010a8:	f7ff f900 	bl	80002ac <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ac:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80010ae:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d115      	bne.n	80010e0 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80010b4:	220c      	movs	r2, #12
 80010b6:	686b      	ldr	r3, [r5, #4]
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d0be      	beq.n	800103c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010be:	f7ff f8f5 	bl	80002ac <HAL_GetTick>
 80010c2:	9b01      	ldr	r3, [sp, #4]
 80010c4:	1ac0      	subs	r0, r0, r3
 80010c6:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <HAL_RCC_ClockConfig+0x124>)
 80010c8:	4298      	cmp	r0, r3
 80010ca:	d9f3      	bls.n	80010b4 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 80010cc:	2003      	movs	r0, #3
 80010ce:	e7d6      	b.n	800107e <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010d0:	2a02      	cmp	r2, #2
 80010d2:	d102      	bne.n	80010da <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d4:	019b      	lsls	r3, r3, #6
 80010d6:	d4e2      	bmi.n	800109e <HAL_RCC_ClockConfig+0x7e>
 80010d8:	e7d0      	b.n	800107c <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010da:	079b      	lsls	r3, r3, #30
 80010dc:	d4df      	bmi.n	800109e <HAL_RCC_ClockConfig+0x7e>
 80010de:	e7cd      	b.n	800107c <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d012      	beq.n	800110a <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010e4:	220c      	movs	r2, #12
 80010e6:	686b      	ldr	r3, [r5, #4]
 80010e8:	4213      	tst	r3, r2
 80010ea:	d0a7      	beq.n	800103c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ec:	f7ff f8de 	bl	80002ac <HAL_GetTick>
 80010f0:	9b01      	ldr	r3, [sp, #4]
 80010f2:	1ac0      	subs	r0, r0, r3
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <HAL_RCC_ClockConfig+0x124>)
 80010f6:	4298      	cmp	r0, r3
 80010f8:	d9f4      	bls.n	80010e4 <HAL_RCC_ClockConfig+0xc4>
 80010fa:	e7e7      	b.n	80010cc <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010fc:	f7ff f8d6 	bl	80002ac <HAL_GetTick>
 8001100:	9b01      	ldr	r3, [sp, #4]
 8001102:	1ac0      	subs	r0, r0, r3
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_RCC_ClockConfig+0x124>)
 8001106:	4298      	cmp	r0, r3
 8001108:	d8e0      	bhi.n	80010cc <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800110a:	220c      	movs	r2, #12
 800110c:	686b      	ldr	r3, [r5, #4]
 800110e:	4013      	ands	r3, r2
 8001110:	2b08      	cmp	r3, #8
 8001112:	d1f3      	bne.n	80010fc <HAL_RCC_ClockConfig+0xdc>
 8001114:	e792      	b.n	800103c <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001116:	6822      	ldr	r2, [r4, #0]
 8001118:	439a      	bics	r2, r3
 800111a:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800111c:	6822      	ldr	r2, [r4, #0]
 800111e:	421a      	tst	r2, r3
 8001120:	d1ac      	bne.n	800107c <HAL_RCC_ClockConfig+0x5c>
 8001122:	e790      	b.n	8001046 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001124:	6863      	ldr	r3, [r4, #4]
 8001126:	4a08      	ldr	r2, [pc, #32]	; (8001148 <HAL_RCC_ClockConfig+0x128>)
 8001128:	4013      	ands	r3, r2
 800112a:	68f2      	ldr	r2, [r6, #12]
 800112c:	4313      	orrs	r3, r2
 800112e:	6063      	str	r3, [r4, #4]
 8001130:	e78d      	b.n	800104e <HAL_RCC_ClockConfig+0x2e>
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	40022000 	.word	0x40022000
 8001138:	40021000 	.word	0x40021000
 800113c:	0800234a 	.word	0x0800234a
 8001140:	20000000 	.word	0x20000000
 8001144:	00001388 	.word	0x00001388
 8001148:	fffff8ff 	.word	0xfffff8ff

0800114c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800114c:	4b01      	ldr	r3, [pc, #4]	; (8001154 <HAL_RCC_GetHCLKFreq+0x8>)
 800114e:	6818      	ldr	r0, [r3, #0]
}
 8001150:	4770      	bx	lr
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	20000000 	.word	0x20000000

08001158 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <HAL_RCC_GetPCLK1Freq+0x14>)
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <HAL_RCC_GetPCLK1Freq+0x18>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	055b      	lsls	r3, r3, #21
 8001160:	0f5b      	lsrs	r3, r3, #29
 8001162:	5cd3      	ldrb	r3, [r2, r3]
 8001164:	4a03      	ldr	r2, [pc, #12]	; (8001174 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001166:	6810      	ldr	r0, [r2, #0]
 8001168:	40d8      	lsrs	r0, r3
}    
 800116a:	4770      	bx	lr
 800116c:	40021000 	.word	0x40021000
 8001170:	0800235a 	.word	0x0800235a
 8001174:	20000000 	.word	0x20000000

08001178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800117a:	6803      	ldr	r3, [r0, #0]
{
 800117c:	b085      	sub	sp, #20
 800117e:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001180:	03db      	lsls	r3, r3, #15
 8001182:	d528      	bpl.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001184:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001186:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001188:	4c37      	ldr	r4, [pc, #220]	; (8001268 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 800118a:	0552      	lsls	r2, r2, #21
 800118c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800118e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001190:	4213      	tst	r3, r2
 8001192:	d108      	bne.n	80011a6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001194:	69e3      	ldr	r3, [r4, #28]
 8001196:	4313      	orrs	r3, r2
 8001198:	61e3      	str	r3, [r4, #28]
 800119a:	69e3      	ldr	r3, [r4, #28]
 800119c:	4013      	ands	r3, r2
 800119e:	9303      	str	r3, [sp, #12]
 80011a0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80011a2:	2301      	movs	r3, #1
 80011a4:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a6:	2780      	movs	r7, #128	; 0x80
 80011a8:	4e30      	ldr	r6, [pc, #192]	; (800126c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80011aa:	007f      	lsls	r7, r7, #1
 80011ac:	6833      	ldr	r3, [r6, #0]
 80011ae:	423b      	tst	r3, r7
 80011b0:	d026      	beq.n	8001200 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011b2:	22c0      	movs	r2, #192	; 0xc0
 80011b4:	6a23      	ldr	r3, [r4, #32]
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	4013      	ands	r3, r2
 80011ba:	4e2d      	ldr	r6, [pc, #180]	; (8001270 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011bc:	d132      	bne.n	8001224 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80011be:	6a23      	ldr	r3, [r4, #32]
 80011c0:	401e      	ands	r6, r3
 80011c2:	686b      	ldr	r3, [r5, #4]
 80011c4:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011c6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80011c8:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d103      	bne.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ce:	69e3      	ldr	r3, [r4, #28]
 80011d0:	4a28      	ldr	r2, [pc, #160]	; (8001274 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80011d6:	682a      	ldr	r2, [r5, #0]
 80011d8:	07d3      	lsls	r3, r2, #31
 80011da:	d506      	bpl.n	80011ea <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80011dc:	2003      	movs	r0, #3
 80011de:	4922      	ldr	r1, [pc, #136]	; (8001268 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 80011e0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80011e2:	4383      	bics	r3, r0
 80011e4:	68a8      	ldr	r0, [r5, #8]
 80011e6:	4303      	orrs	r3, r0
 80011e8:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80011ea:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80011ec:	0693      	lsls	r3, r2, #26
 80011ee:	d517      	bpl.n	8001220 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80011f0:	2110      	movs	r1, #16
 80011f2:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 80011f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011f6:	438b      	bics	r3, r1
 80011f8:	68e9      	ldr	r1, [r5, #12]
 80011fa:	430b      	orrs	r3, r1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	e00f      	b.n	8001220 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001200:	6833      	ldr	r3, [r6, #0]
 8001202:	433b      	orrs	r3, r7
 8001204:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001206:	f7ff f851 	bl	80002ac <HAL_GetTick>
 800120a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120c:	6833      	ldr	r3, [r6, #0]
 800120e:	423b      	tst	r3, r7
 8001210:	d1cf      	bne.n	80011b2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001212:	f7ff f84b 	bl	80002ac <HAL_GetTick>
 8001216:	9b01      	ldr	r3, [sp, #4]
 8001218:	1ac0      	subs	r0, r0, r3
 800121a:	2864      	cmp	r0, #100	; 0x64
 800121c:	d9f6      	bls.n	800120c <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 800121e:	2003      	movs	r0, #3
}
 8001220:	b005      	add	sp, #20
 8001222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001224:	6869      	ldr	r1, [r5, #4]
 8001226:	400a      	ands	r2, r1
 8001228:	4293      	cmp	r3, r2
 800122a:	d0c8      	beq.n	80011be <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 800122c:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800122e:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001230:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001232:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8001234:	025b      	lsls	r3, r3, #9
 8001236:	4303      	orrs	r3, r0
 8001238:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800123a:	6a23      	ldr	r3, [r4, #32]
 800123c:	480e      	ldr	r0, [pc, #56]	; (8001278 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800123e:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001240:	4003      	ands	r3, r0
 8001242:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8001244:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001246:	07d3      	lsls	r3, r2, #31
 8001248:	d5b9      	bpl.n	80011be <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 800124a:	f7ff f82f 	bl	80002ac <HAL_GetTick>
 800124e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001250:	2202      	movs	r2, #2
 8001252:	6a23      	ldr	r3, [r4, #32]
 8001254:	4213      	tst	r3, r2
 8001256:	d1b2      	bne.n	80011be <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001258:	f7ff f828 	bl	80002ac <HAL_GetTick>
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 800125e:	1bc0      	subs	r0, r0, r7
 8001260:	4298      	cmp	r0, r3
 8001262:	d9f5      	bls.n	8001250 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001264:	e7db      	b.n	800121e <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	40021000 	.word	0x40021000
 800126c:	40007000 	.word	0x40007000
 8001270:	fffffcff 	.word	0xfffffcff
 8001274:	efffffff 	.word	0xefffffff
 8001278:	fffeffff 	.word	0xfffeffff
 800127c:	00001388 	.word	0x00001388

08001280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001280:	b570      	push	{r4, r5, r6, lr}
 8001282:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001284:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001286:	69c2      	ldr	r2, [r0, #28]
 8001288:	6883      	ldr	r3, [r0, #8]
 800128a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800128c:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800128e:	4303      	orrs	r3, r0
 8001290:	6960      	ldr	r0, [r4, #20]
 8001292:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001294:	4835      	ldr	r0, [pc, #212]	; (800136c <UART_SetConfig+0xec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001296:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001298:	4001      	ands	r1, r0
 800129a:	430b      	orrs	r3, r1
 800129c:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800129e:	686b      	ldr	r3, [r5, #4]
 80012a0:	4933      	ldr	r1, [pc, #204]	; (8001370 <UART_SetConfig+0xf0>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80012a2:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012a4:	400b      	ands	r3, r1
 80012a6:	68e1      	ldr	r1, [r4, #12]
 80012a8:	430b      	orrs	r3, r1
 80012aa:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80012ac:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80012ae:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80012b0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80012b2:	4830      	ldr	r0, [pc, #192]	; (8001374 <UART_SetConfig+0xf4>)
 80012b4:	4001      	ands	r1, r0
 80012b6:	430b      	orrs	r3, r1

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012b8:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80012ba:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012bc:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <UART_SetConfig+0xf8>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	400b      	ands	r3, r1
 80012c2:	492e      	ldr	r1, [pc, #184]	; (800137c <UART_SetConfig+0xfc>)
 80012c4:	5cc8      	ldrb	r0, [r1, r3]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d12c      	bne.n	8001328 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 80012ce:	2808      	cmp	r0, #8
 80012d0:	d827      	bhi.n	8001322 <UART_SetConfig+0xa2>
 80012d2:	f7fe ff2b 	bl	800012c <__gnu_thumb1_case_uqi>
 80012d6:	2605      	.short	0x2605
 80012d8:	261e260b 	.word	0x261e260b
 80012dc:	2626      	.short	0x2626
 80012de:	21          	.byte	0x21
 80012df:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80012e0:	f7ff ff3a 	bl	8001158 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80012e4:	6863      	ldr	r3, [r4, #4]
 80012e6:	0040      	lsls	r0, r0, #1
 80012e8:	085b      	lsrs	r3, r3, #1
 80012ea:	e002      	b.n	80012f2 <UART_SetConfig+0x72>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80012ec:	6863      	ldr	r3, [r4, #4]
 80012ee:	0858      	lsrs	r0, r3, #1
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <UART_SetConfig+0x100>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80012f2:	18c0      	adds	r0, r0, r3
 80012f4:	6861      	ldr	r1, [r4, #4]
 80012f6:	f7fe ff23 	bl	8000140 <__udivsi3>
 80012fa:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80012fc:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80012fe:	220f      	movs	r2, #15
 8001300:	0019      	movs	r1, r3
 8001302:	4391      	bics	r1, r2
 8001304:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001306:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8001308:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800130a:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 800130c:	4313      	orrs	r3, r2
 800130e:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 8001310:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001312:	f7ff fe53 	bl	8000fbc <HAL_RCC_GetSysClockFreq>
 8001316:	e7e5      	b.n	80012e4 <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001318:	6863      	ldr	r3, [r4, #4]
 800131a:	0858      	lsrs	r0, r3, #1
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	025b      	lsls	r3, r3, #9
 8001320:	e7e7      	b.n	80012f2 <UART_SetConfig+0x72>
        ret = HAL_ERROR;
 8001322:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001324:	2300      	movs	r3, #0
 8001326:	e7ea      	b.n	80012fe <UART_SetConfig+0x7e>
    switch (clocksource)
 8001328:	2808      	cmp	r0, #8
 800132a:	d81d      	bhi.n	8001368 <UART_SetConfig+0xe8>
 800132c:	f7fe fefe 	bl	800012c <__gnu_thumb1_case_uqi>
 8001330:	1c0a1c05 	.word	0x1c0a1c05
 8001334:	1c1c1c14 	.word	0x1c1c1c14
 8001338:	17          	.byte	0x17
 8001339:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800133a:	f7ff ff0d 	bl	8001158 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800133e:	6861      	ldr	r1, [r4, #4]
 8001340:	084b      	lsrs	r3, r1, #1
 8001342:	e002      	b.n	800134a <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001344:	6861      	ldr	r1, [r4, #4]
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <UART_SetConfig+0x104>)
 8001348:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800134a:	18c0      	adds	r0, r0, r3
 800134c:	f7fe fef8 	bl	8000140 <__udivsi3>
 8001350:	b280      	uxth	r0, r0
 8001352:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001354:	2000      	movs	r0, #0
        break;
 8001356:	e7db      	b.n	8001310 <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001358:	f7ff fe30 	bl	8000fbc <HAL_RCC_GetSysClockFreq>
 800135c:	e7ef      	b.n	800133e <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	6861      	ldr	r1, [r4, #4]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	0848      	lsrs	r0, r1, #1
 8001366:	e7f0      	b.n	800134a <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8001368:	2001      	movs	r0, #1
 800136a:	e7d1      	b.n	8001310 <UART_SetConfig+0x90>
 800136c:	ffff69f3 	.word	0xffff69f3
 8001370:	ffffcfff 	.word	0xffffcfff
 8001374:	fffff4ff 	.word	0xfffff4ff
 8001378:	40021000 	.word	0x40021000
 800137c:	08002314 	.word	0x08002314
 8001380:	00f42400 	.word	0x00f42400
 8001384:	007a1200 	.word	0x007a1200

08001388 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001388:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800138a:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800138c:	07da      	lsls	r2, r3, #31
 800138e:	d506      	bpl.n	800139e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001390:	6801      	ldr	r1, [r0, #0]
 8001392:	4c28      	ldr	r4, [pc, #160]	; (8001434 <UART_AdvFeatureConfig+0xac>)
 8001394:	684a      	ldr	r2, [r1, #4]
 8001396:	4022      	ands	r2, r4
 8001398:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800139a:	4322      	orrs	r2, r4
 800139c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800139e:	079a      	lsls	r2, r3, #30
 80013a0:	d506      	bpl.n	80013b0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80013a2:	6801      	ldr	r1, [r0, #0]
 80013a4:	4c24      	ldr	r4, [pc, #144]	; (8001438 <UART_AdvFeatureConfig+0xb0>)
 80013a6:	684a      	ldr	r2, [r1, #4]
 80013a8:	4022      	ands	r2, r4
 80013aa:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80013ac:	4322      	orrs	r2, r4
 80013ae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80013b0:	075a      	lsls	r2, r3, #29
 80013b2:	d506      	bpl.n	80013c2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80013b4:	6801      	ldr	r1, [r0, #0]
 80013b6:	4c21      	ldr	r4, [pc, #132]	; (800143c <UART_AdvFeatureConfig+0xb4>)
 80013b8:	684a      	ldr	r2, [r1, #4]
 80013ba:	4022      	ands	r2, r4
 80013bc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80013be:	4322      	orrs	r2, r4
 80013c0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80013c2:	071a      	lsls	r2, r3, #28
 80013c4:	d506      	bpl.n	80013d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80013c6:	6801      	ldr	r1, [r0, #0]
 80013c8:	4c1d      	ldr	r4, [pc, #116]	; (8001440 <UART_AdvFeatureConfig+0xb8>)
 80013ca:	684a      	ldr	r2, [r1, #4]
 80013cc:	4022      	ands	r2, r4
 80013ce:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80013d0:	4322      	orrs	r2, r4
 80013d2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80013d4:	06da      	lsls	r2, r3, #27
 80013d6:	d506      	bpl.n	80013e6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80013d8:	6801      	ldr	r1, [r0, #0]
 80013da:	4c1a      	ldr	r4, [pc, #104]	; (8001444 <UART_AdvFeatureConfig+0xbc>)
 80013dc:	688a      	ldr	r2, [r1, #8]
 80013de:	4022      	ands	r2, r4
 80013e0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80013e2:	4322      	orrs	r2, r4
 80013e4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80013e6:	069a      	lsls	r2, r3, #26
 80013e8:	d506      	bpl.n	80013f8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80013ea:	6801      	ldr	r1, [r0, #0]
 80013ec:	4c16      	ldr	r4, [pc, #88]	; (8001448 <UART_AdvFeatureConfig+0xc0>)
 80013ee:	688a      	ldr	r2, [r1, #8]
 80013f0:	4022      	ands	r2, r4
 80013f2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80013f4:	4322      	orrs	r2, r4
 80013f6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80013f8:	065a      	lsls	r2, r3, #25
 80013fa:	d510      	bpl.n	800141e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80013fc:	6801      	ldr	r1, [r0, #0]
 80013fe:	4d13      	ldr	r5, [pc, #76]	; (800144c <UART_AdvFeatureConfig+0xc4>)
 8001400:	684a      	ldr	r2, [r1, #4]
 8001402:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001404:	402a      	ands	r2, r5
 8001406:	4322      	orrs	r2, r4
 8001408:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800140a:	2280      	movs	r2, #128	; 0x80
 800140c:	0352      	lsls	r2, r2, #13
 800140e:	4294      	cmp	r4, r2
 8001410:	d105      	bne.n	800141e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001412:	684a      	ldr	r2, [r1, #4]
 8001414:	4c0e      	ldr	r4, [pc, #56]	; (8001450 <UART_AdvFeatureConfig+0xc8>)
 8001416:	4022      	ands	r2, r4
 8001418:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800141a:	4322      	orrs	r2, r4
 800141c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800141e:	061b      	lsls	r3, r3, #24
 8001420:	d506      	bpl.n	8001430 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001422:	6802      	ldr	r2, [r0, #0]
 8001424:	490b      	ldr	r1, [pc, #44]	; (8001454 <UART_AdvFeatureConfig+0xcc>)
 8001426:	6853      	ldr	r3, [r2, #4]
 8001428:	400b      	ands	r3, r1
 800142a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800142c:	430b      	orrs	r3, r1
 800142e:	6053      	str	r3, [r2, #4]
  }
}
 8001430:	bd30      	pop	{r4, r5, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	fffdffff 	.word	0xfffdffff
 8001438:	fffeffff 	.word	0xfffeffff
 800143c:	fffbffff 	.word	0xfffbffff
 8001440:	ffff7fff 	.word	0xffff7fff
 8001444:	ffffefff 	.word	0xffffefff
 8001448:	ffffdfff 	.word	0xffffdfff
 800144c:	ffefffff 	.word	0xffefffff
 8001450:	ff9fffff 	.word	0xff9fffff
 8001454:	fff7ffff 	.word	0xfff7ffff

08001458 <HAL_HalfDuplex_Init>:
{
 8001458:	b570      	push	{r4, r5, r6, lr}
 800145a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 800145c:	d101      	bne.n	8001462 <HAL_HalfDuplex_Init+0xa>
    return HAL_ERROR;
 800145e:	2001      	movs	r0, #1
}
 8001460:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001462:	0005      	movs	r5, r0
 8001464:	3569      	adds	r5, #105	; 0x69
 8001466:	782b      	ldrb	r3, [r5, #0]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d104      	bne.n	8001478 <HAL_HalfDuplex_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800146e:	0002      	movs	r2, r0
 8001470:	3268      	adds	r2, #104	; 0x68
 8001472:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001474:	f000 fa38 	bl	80018e8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001478:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800147a:	2101      	movs	r1, #1
 800147c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800147e:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001480:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001482:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001484:	438b      	bics	r3, r1
 8001486:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001488:	f7ff fefa 	bl	8001280 <UART_SetConfig>
 800148c:	2801      	cmp	r0, #1
 800148e:	d0e6      	beq.n	800145e <HAL_HalfDuplex_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <HAL_HalfDuplex_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8001496:	0020      	movs	r0, r4
 8001498:	f7ff ff76 	bl	8001388 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	490b      	ldr	r1, [pc, #44]	; (80014cc <HAL_HalfDuplex_Init+0x74>)
 80014a0:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014a2:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80014a4:	400a      	ands	r2, r1
 80014a6:	605a      	str	r2, [r3, #4]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80014a8:	2208      	movs	r2, #8
 80014aa:	6899      	ldr	r1, [r3, #8]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80014b0:	2201      	movs	r2, #1
 80014b2:	6819      	ldr	r1, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 80014b8:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 80014ba:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014bc:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 80014be:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80014c0:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 80014c2:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80014c4:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 80014c6:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 80014c8:	e7ca      	b.n	8001460 <HAL_HalfDuplex_Init+0x8>
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	fffff7ff 	.word	0xfffff7ff

080014d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80014d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014d2:	0004      	movs	r4, r0
 80014d4:	000e      	movs	r6, r1
 80014d6:	0015      	movs	r5, r2
 80014d8:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014da:	6822      	ldr	r2, [r4, #0]
 80014dc:	69d3      	ldr	r3, [r2, #28]
 80014de:	4033      	ands	r3, r6
 80014e0:	1b9b      	subs	r3, r3, r6
 80014e2:	4259      	negs	r1, r3
 80014e4:	414b      	adcs	r3, r1
 80014e6:	42ab      	cmp	r3, r5
 80014e8:	d001      	beq.n	80014ee <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80014ea:	2000      	movs	r0, #0
 80014ec:	e018      	b.n	8001520 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 80014ee:	9b06      	ldr	r3, [sp, #24]
 80014f0:	3301      	adds	r3, #1
 80014f2:	d0f3      	beq.n	80014dc <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014f4:	9b06      	ldr	r3, [sp, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d113      	bne.n	8001522 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	490c      	ldr	r1, [pc, #48]	; (8001530 <UART_WaitOnFlagUntilTimeout+0x60>)
 80014fe:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001500:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001502:	400a      	ands	r2, r1
 8001504:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	31a3      	adds	r1, #163	; 0xa3
 800150a:	31ff      	adds	r1, #255	; 0xff
 800150c:	438a      	bics	r2, r1
 800150e:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001510:	0022      	movs	r2, r4
 8001512:	2320      	movs	r3, #32
 8001514:	3269      	adds	r2, #105	; 0x69
 8001516:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8001518:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 800151a:	2300      	movs	r3, #0
 800151c:	3468      	adds	r4, #104	; 0x68
 800151e:	7023      	strb	r3, [r4, #0]
}
 8001520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001522:	f7fe fec3 	bl	80002ac <HAL_GetTick>
 8001526:	9b06      	ldr	r3, [sp, #24]
 8001528:	1bc0      	subs	r0, r0, r7
 800152a:	4283      	cmp	r3, r0
 800152c:	d2d5      	bcs.n	80014da <UART_WaitOnFlagUntilTimeout+0xa>
 800152e:	e7e4      	b.n	80014fa <UART_WaitOnFlagUntilTimeout+0x2a>
 8001530:	fffffe5f 	.word	0xfffffe5f

08001534 <HAL_UART_Transmit>:
{
 8001534:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8001536:	0007      	movs	r7, r0
{
 8001538:	b085      	sub	sp, #20
 800153a:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 800153c:	3769      	adds	r7, #105	; 0x69
 800153e:	783b      	ldrb	r3, [r7, #0]
{
 8001540:	0004      	movs	r4, r0
 8001542:	000d      	movs	r5, r1
 8001544:	0016      	movs	r6, r2
    return HAL_BUSY;
 8001546:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8001548:	2b20      	cmp	r3, #32
 800154a:	d146      	bne.n	80015da <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 800154c:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800154e:	2900      	cmp	r1, #0
 8001550:	d043      	beq.n	80015da <HAL_UART_Transmit+0xa6>
 8001552:	2a00      	cmp	r2, #0
 8001554:	d041      	beq.n	80015da <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	68a2      	ldr	r2, [r4, #8]
 800155a:	015b      	lsls	r3, r3, #5
 800155c:	429a      	cmp	r2, r3
 800155e:	d104      	bne.n	800156a <HAL_UART_Transmit+0x36>
 8001560:	6923      	ldr	r3, [r4, #16]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 8001566:	4201      	tst	r1, r0
 8001568:	d137      	bne.n	80015da <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800156a:	0023      	movs	r3, r4
 800156c:	3368      	adds	r3, #104	; 0x68
 800156e:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001570:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001572:	2a01      	cmp	r2, #1
 8001574:	d031      	beq.n	80015da <HAL_UART_Transmit+0xa6>
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800157a:	2300      	movs	r3, #0
 800157c:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800157e:	3321      	adds	r3, #33	; 0x21
 8001580:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001582:	f7fe fe93 	bl	80002ac <HAL_GetTick>
    huart->TxXferSize = Size;
 8001586:	0023      	movs	r3, r4
 8001588:	3350      	adds	r3, #80	; 0x50
 800158a:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 800158c:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800158e:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8001590:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001592:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8001594:	0021      	movs	r1, r4
 8001596:	3152      	adds	r1, #82	; 0x52
 8001598:	880a      	ldrh	r2, [r1, #0]
 800159a:	b292      	uxth	r2, r2
 800159c:	2a00      	cmp	r2, #0
 800159e:	d10d      	bne.n	80015bc <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015a0:	9b03      	ldr	r3, [sp, #12]
 80015a2:	2140      	movs	r1, #64	; 0x40
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	0020      	movs	r0, r4
 80015a8:	9b02      	ldr	r3, [sp, #8]
 80015aa:	f7ff ff91 	bl	80014d0 <UART_WaitOnFlagUntilTimeout>
 80015ae:	2800      	cmp	r0, #0
 80015b0:	d112      	bne.n	80015d8 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 80015b2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80015b4:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 80015b6:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 80015b8:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80015ba:	e00e      	b.n	80015da <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 80015bc:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015be:	2200      	movs	r2, #0
      huart->TxXferCount--;
 80015c0:	3b01      	subs	r3, #1
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015c6:	9b03      	ldr	r3, [sp, #12]
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	0020      	movs	r0, r4
 80015ce:	9b02      	ldr	r3, [sp, #8]
 80015d0:	f7ff ff7e 	bl	80014d0 <UART_WaitOnFlagUntilTimeout>
 80015d4:	2800      	cmp	r0, #0
 80015d6:	d002      	beq.n	80015de <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 80015d8:	2003      	movs	r0, #3
}
 80015da:	b005      	add	sp, #20
 80015dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015de:	68a3      	ldr	r3, [r4, #8]
 80015e0:	6822      	ldr	r2, [r4, #0]
 80015e2:	42b3      	cmp	r3, r6
 80015e4:	d108      	bne.n	80015f8 <HAL_UART_Transmit+0xc4>
 80015e6:	6923      	ldr	r3, [r4, #16]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d105      	bne.n	80015f8 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80015ec:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 80015ee:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80015f0:	05db      	lsls	r3, r3, #23
 80015f2:	0ddb      	lsrs	r3, r3, #23
 80015f4:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80015f6:	e7cd      	b.n	8001594 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80015f8:	782b      	ldrb	r3, [r5, #0]
 80015fa:	3501      	adds	r5, #1
 80015fc:	8513      	strh	r3, [r2, #40]	; 0x28
 80015fe:	e7c9      	b.n	8001594 <HAL_UART_Transmit+0x60>

08001600 <SystemClock_Config>:

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001600:	2310      	movs	r3, #16
{
 8001602:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001604:	22a0      	movs	r2, #160	; 0xa0
{
 8001606:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001608:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160a:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800160c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800160e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001610:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001612:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001614:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001616:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001618:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800161a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800161c:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800161e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001620:	f7ff faea 	bl	8000bf8 <HAL_RCC_OscConfig>
 8001624:	2800      	cmp	r0, #0
 8001626:	d000      	beq.n	800162a <SystemClock_Config+0x2a>
 8001628:	e7fe      	b.n	8001628 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162a:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162c:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800162e:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001630:	0029      	movs	r1, r5
 8001632:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001634:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001636:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001638:	f7ff fcf2 	bl	8001020 <HAL_RCC_ClockConfig>
 800163c:	2800      	cmp	r0, #0
 800163e:	d000      	beq.n	8001642 <SystemClock_Config+0x42>
 8001640:	e7fe      	b.n	8001640 <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001642:	2321      	movs	r3, #33	; 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001644:	9006      	str	r0, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001646:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001648:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800164a:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800164c:	f7ff fd94 	bl	8001178 <HAL_RCCEx_PeriphCLKConfig>
 8001650:	1e04      	subs	r4, r0, #0
 8001652:	d000      	beq.n	8001656 <SystemClock_Config+0x56>
 8001654:	e7fe      	b.n	8001654 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001656:	f7ff fd79 	bl	800114c <HAL_RCC_GetHCLKFreq>
 800165a:	21fa      	movs	r1, #250	; 0xfa
 800165c:	0089      	lsls	r1, r1, #2
 800165e:	f7fe fd6f 	bl	8000140 <__udivsi3>
 8001662:	f7fe fe69 	bl	8000338 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001666:	2004      	movs	r0, #4
 8001668:	f7fe fe80 	bl	800036c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800166c:	2001      	movs	r0, #1
 800166e:	0022      	movs	r2, r4
 8001670:	0021      	movs	r1, r4
 8001672:	4240      	negs	r0, r0
 8001674:	f7fe fe30 	bl	80002d8 <HAL_NVIC_SetPriority>
}
 8001678:	b015      	add	sp, #84	; 0x54
 800167a:	bd30      	pop	{r4, r5, pc}

0800167c <Read_From_24LCxx>:

}

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef Read_From_24LCxx(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t len) {
 800167c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* We compute the MSB and LSB parts of the memory address */
  addr[0] = (uint8_t) ((MemAddress & 0xFF00) >> 8);
  addr[1] = (uint8_t) (MemAddress & 0xFF);

  /* First we send the memory location address where start reading data */
  returnValue = HAL_I2C_Master_Transmit(hi2c, DevAddress, addr, 2, HAL_MAX_DELAY);
 800167e:	2601      	movs	r6, #1
HAL_StatusTypeDef Read_From_24LCxx(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t len) {
 8001680:	000d      	movs	r5, r1
 8001682:	b087      	sub	sp, #28
 8001684:	9303      	str	r3, [sp, #12]
 8001686:	ab0c      	add	r3, sp, #48	; 0x30
  addr[0] = (uint8_t) ((MemAddress & 0xFF00) >> 8);
 8001688:	a905      	add	r1, sp, #20
HAL_StatusTypeDef Read_From_24LCxx(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t len) {
 800168a:	881f      	ldrh	r7, [r3, #0]
  returnValue = HAL_I2C_Master_Transmit(hi2c, DevAddress, addr, 2, HAL_MAX_DELAY);
 800168c:	4276      	negs	r6, r6
  addr[0] = (uint8_t) ((MemAddress & 0xFF00) >> 8);
 800168e:	0a13      	lsrs	r3, r2, #8
 8001690:	700b      	strb	r3, [r1, #0]
  addr[1] = (uint8_t) (MemAddress & 0xFF);
 8001692:	704a      	strb	r2, [r1, #1]
  returnValue = HAL_I2C_Master_Transmit(hi2c, DevAddress, addr, 2, HAL_MAX_DELAY);
 8001694:	2302      	movs	r3, #2
 8001696:	000a      	movs	r2, r1
 8001698:	9600      	str	r6, [sp, #0]
 800169a:	0029      	movs	r1, r5
HAL_StatusTypeDef Read_From_24LCxx(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t len) {
 800169c:	0004      	movs	r4, r0
  returnValue = HAL_I2C_Master_Transmit(hi2c, DevAddress, addr, 2, HAL_MAX_DELAY);
 800169e:	f7ff f89b 	bl	80007d8 <HAL_I2C_Master_Transmit>
  if(returnValue != HAL_OK)
 80016a2:	2800      	cmp	r0, #0
 80016a4:	d106      	bne.n	80016b4 <Read_From_24LCxx+0x38>
    return returnValue;

  /* Next we can retrieve the data from EEPROM */
  returnValue = HAL_I2C_Master_Receive(hi2c, DevAddress, pData, len, HAL_MAX_DELAY);
 80016a6:	9600      	str	r6, [sp, #0]
 80016a8:	003b      	movs	r3, r7
 80016aa:	9a03      	ldr	r2, [sp, #12]
 80016ac:	0029      	movs	r1, r5
 80016ae:	0020      	movs	r0, r4
 80016b0:	f7ff f92a 	bl	8000908 <HAL_I2C_Master_Receive>

  return returnValue;
}
 80016b4:	b007      	add	sp, #28
 80016b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016b8 <Write_To_24LCxx>:

HAL_StatusTypeDef Write_To_24LCxx(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t len) {
 80016b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ba:	b087      	sub	sp, #28
 80016bc:	9305      	str	r3, [sp, #20]
 80016be:	ab0c      	add	r3, sp, #48	; 0x30
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	0017      	movs	r7, r2
 80016c4:	9303      	str	r3, [sp, #12]
  HAL_StatusTypeDef returnValue;
  uint8_t *data;

  /* First we allocate a temporary buffer to store the destination memory
   * address and the data to store */
  data = (uint8_t*)malloc(sizeof(uint8_t)*(len+2));
 80016c6:	3302      	adds	r3, #2
HAL_StatusTypeDef Write_To_24LCxx(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t len) {
 80016c8:	0005      	movs	r5, r0
  data = (uint8_t*)malloc(sizeof(uint8_t)*(len+2));
 80016ca:	0018      	movs	r0, r3
HAL_StatusTypeDef Write_To_24LCxx(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t len) {
 80016cc:	000e      	movs	r6, r1
  data = (uint8_t*)malloc(sizeof(uint8_t)*(len+2));
 80016ce:	9304      	str	r3, [sp, #16]
 80016d0:	f000 f9b6 	bl	8001a40 <malloc>

  /* We compute the MSB and LSB parts of the memory address */
  data[0] = (uint8_t) ((MemAddress & 0xFF00) >> 8);
 80016d4:	0a3b      	lsrs	r3, r7, #8
 80016d6:	7003      	strb	r3, [r0, #0]
  data[1] = (uint8_t) (MemAddress & 0xFF);
 80016d8:	7047      	strb	r7, [r0, #1]
  data = (uint8_t*)malloc(sizeof(uint8_t)*(len+2));
 80016da:	0004      	movs	r4, r0

  /* And copy the content of the pData array in the temporary buffer */
  memcpy(data+2, pData, len);
 80016dc:	9a03      	ldr	r2, [sp, #12]
 80016de:	9905      	ldr	r1, [sp, #20]
 80016e0:	3002      	adds	r0, #2

  /* We are now ready to transfer the buffer over the I2C bus */
  returnValue = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, len + 2, HAL_MAX_DELAY);
 80016e2:	2701      	movs	r7, #1
  memcpy(data+2, pData, len);
 80016e4:	f000 f9c0 	bl	8001a68 <memcpy>
  returnValue = HAL_I2C_Master_Transmit(hi2c, DevAddress, data, len + 2, HAL_MAX_DELAY);
 80016e8:	466b      	mov	r3, sp
 80016ea:	427f      	negs	r7, r7
 80016ec:	8a1b      	ldrh	r3, [r3, #16]
 80016ee:	0022      	movs	r2, r4
 80016f0:	9700      	str	r7, [sp, #0]
 80016f2:	0031      	movs	r1, r6
 80016f4:	0028      	movs	r0, r5
 80016f6:	f7ff f86f 	bl	80007d8 <HAL_I2C_Master_Transmit>
  if(returnValue != HAL_OK)
 80016fa:	2800      	cmp	r0, #0
 80016fc:	d10a      	bne.n	8001714 <Write_To_24LCxx+0x5c>
    return returnValue;

  free(data);
 80016fe:	0020      	movs	r0, r4
 8001700:	f000 f9a8 	bl	8001a54 <free>
  /* We wait until the EEPROM effectively stores data in memory.
   * The technique shown in the book doesn't work here, due some
   * limitations of the I2C peripheral in STM32F1 devices. We
   * so use the dedicated HAL routine.
   */
  while(HAL_I2C_IsDeviceReady(hi2c, DevAddress, 1, HAL_MAX_DELAY) != HAL_OK);
 8001704:	003b      	movs	r3, r7
 8001706:	2201      	movs	r2, #1
 8001708:	0031      	movs	r1, r6
 800170a:	0028      	movs	r0, r5
 800170c:	f7ff f994 	bl	8000a38 <HAL_I2C_IsDeviceReady>
 8001710:	2800      	cmp	r0, #0
 8001712:	d1f7      	bne.n	8001704 <Write_To_24LCxx+0x4c>

  return HAL_OK;
}
 8001714:	b007      	add	sp, #28
 8001716:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001718 <main>:
{
 8001718:	b530      	push	{r4, r5, lr}
 800171a:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 800171c:	f7fe fdae 	bl	800027c <HAL_Init>
  SystemClock_Config();
 8001720:	f7ff ff6e 	bl	8001600 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001724:	2080      	movs	r0, #128	; 0x80
 8001726:	4a44      	ldr	r2, [pc, #272]	; (8001838 <main+0x120>)
 8001728:	0280      	lsls	r0, r0, #10
 800172a:	6951      	ldr	r1, [r2, #20]
  hi2c1.Instance = I2C1;
 800172c:	4d43      	ldr	r5, [pc, #268]	; (800183c <main+0x124>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	4301      	orrs	r1, r0
 8001730:	6151      	str	r1, [r2, #20]
 8001732:	6953      	ldr	r3, [r2, #20]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001734:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4003      	ands	r3, r0
 8001738:	9303      	str	r3, [sp, #12]
 800173a:	9b03      	ldr	r3, [sp, #12]
  hi2c1.Instance = I2C1;
 800173c:	4b40      	ldr	r3, [pc, #256]	; (8001840 <main+0x128>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800173e:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 8001740:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x0000020C;
 8001742:	2383      	movs	r3, #131	; 0x83
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	606b      	str	r3, [r5, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001748:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800174a:	60ea      	str	r2, [r5, #12]
  hi2c1.Init.OwnAddress1 = 0;
 800174c:	60ab      	str	r3, [r5, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800174e:	612b      	str	r3, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001750:	616b      	str	r3, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001752:	61ab      	str	r3, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001754:	61eb      	str	r3, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001756:	622b      	str	r3, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001758:	f7fe ffe8 	bl	800072c <HAL_I2C_Init>
 800175c:	2800      	cmp	r0, #0
 800175e:	d000      	beq.n	8001762 <main+0x4a>
 8001760:	e7fe      	b.n	8001760 <main+0x48>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001762:	2180      	movs	r1, #128	; 0x80
 8001764:	0028      	movs	r0, r5
 8001766:	0149      	lsls	r1, r1, #5
 8001768:	f7ff f9fc 	bl	8000b64 <HAL_I2CEx_ConfigAnalogFilter>
 800176c:	1e01      	subs	r1, r0, #0
 800176e:	d000      	beq.n	8001772 <main+0x5a>
 8001770:	e7fe      	b.n	8001770 <main+0x58>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001772:	0028      	movs	r0, r5
 8001774:	f7ff fa1c 	bl	8000bb0 <HAL_I2CEx_ConfigDigitalFilter>
 8001778:	2800      	cmp	r0, #0
 800177a:	d000      	beq.n	800177e <main+0x66>
 800177c:	e7fe      	b.n	800177c <main+0x64>
  huart1.Instance = USART1;
 800177e:	4c31      	ldr	r4, [pc, #196]	; (8001844 <main+0x12c>)
 8001780:	4b31      	ldr	r3, [pc, #196]	; (8001848 <main+0x130>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001782:	60a0      	str	r0, [r4, #8]
  huart1.Instance = USART1;
 8001784:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 38400;
 8001786:	2396      	movs	r3, #150	; 0x96
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	6063      	str	r3, [r4, #4]
  huart1.Init.Mode = UART_MODE_TX;
 800178c:	2308      	movs	r3, #8
  huart1.Init.StopBits = UART_STOPBITS_1;
 800178e:	60e0      	str	r0, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001790:	6120      	str	r0, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	61a0      	str	r0, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	61e0      	str	r0, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001796:	6220      	str	r0, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001798:	6260      	str	r0, [r4, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800179a:	0020      	movs	r0, r4
  huart1.Init.Mode = UART_MODE_TX;
 800179c:	6163      	str	r3, [r4, #20]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800179e:	f7ff fe5b 	bl	8001458 <HAL_HalfDuplex_Init>
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d000      	beq.n	80017a8 <main+0x90>
 80017a6:	e7fe      	b.n	80017a6 <main+0x8e>
  const char wmsg[] ="Hello I2C";
 80017a8:	220a      	movs	r2, #10
 80017aa:	4928      	ldr	r1, [pc, #160]	; (800184c <main+0x134>)
 80017ac:	a804      	add	r0, sp, #16
 80017ae:	f000 f95b 	bl	8001a68 <memcpy>
	 Write_To_24LCxx(&hi2c1, 0x50, 0x00, (uint8_t*)wmsg, strlen(wmsg)+1);
 80017b2:	a804      	add	r0, sp, #16
 80017b4:	f7fe fcb2 	bl	800011c <strlen>
 80017b8:	3001      	adds	r0, #1
 80017ba:	b280      	uxth	r0, r0
 80017bc:	ab04      	add	r3, sp, #16
 80017be:	2200      	movs	r2, #0
 80017c0:	2150      	movs	r1, #80	; 0x50
 80017c2:	9000      	str	r0, [sp, #0]
 80017c4:	0028      	movs	r0, r5
 80017c6:	f7ff ff77 	bl	80016b8 <Write_To_24LCxx>
	 Read_From_24LCxx(&hi2c1, 0x50, 0x00, (uint8_t*)rmsg, strlen(wmsg)+1);
 80017ca:	a804      	add	r0, sp, #16
 80017cc:	f7fe fca6 	bl	800011c <strlen>
 80017d0:	3001      	adds	r0, #1
 80017d2:	b280      	uxth	r0, r0
 80017d4:	9000      	str	r0, [sp, #0]
 80017d6:	2150      	movs	r1, #80	; 0x50
 80017d8:	ab07      	add	r3, sp, #28
 80017da:	2200      	movs	r2, #0
 80017dc:	0028      	movs	r0, r5
 80017de:	f7ff ff4d 	bl	800167c <Read_From_24LCxx>
	 if(strcmp(wmsg, rmsg) == 0){
 80017e2:	a907      	add	r1, sp, #28
 80017e4:	a804      	add	r0, sp, #16
 80017e6:	f7fe fc8f 	bl	8000108 <strcmp>
 80017ea:	2800      	cmp	r0, #0
 80017ec:	d120      	bne.n	8001830 <main+0x118>
		 sprintf(msg, "Write Success!\n");
 80017ee:	4918      	ldr	r1, [pc, #96]	; (8001850 <main+0x138>)
 80017f0:	a80a      	add	r0, sp, #40	; 0x28
 80017f2:	f000 fa1f 	bl	8001c34 <strcpy>
		 HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80017f6:	a80a      	add	r0, sp, #40	; 0x28
 80017f8:	f7fe fc90 	bl	800011c <strlen>
 80017fc:	2301      	movs	r3, #1
 80017fe:	b282      	uxth	r2, r0
 8001800:	a90a      	add	r1, sp, #40	; 0x28
 8001802:	425b      	negs	r3, r3
 8001804:	0020      	movs	r0, r4
 8001806:	f7ff fe95 	bl	8001534 <HAL_UART_Transmit>
		 sprintf(msg, "%s\n", rmsg);
 800180a:	4912      	ldr	r1, [pc, #72]	; (8001854 <main+0x13c>)
 800180c:	aa07      	add	r2, sp, #28
		sprintf(msg, "Write Failed, Read: %s\n", rmsg);
 800180e:	a80a      	add	r0, sp, #40	; 0x28
 8001810:	f000 f9ee 	bl	8001bf0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001814:	a80a      	add	r0, sp, #40	; 0x28
 8001816:	f7fe fc81 	bl	800011c <strlen>
 800181a:	2301      	movs	r3, #1
 800181c:	b282      	uxth	r2, r0
 800181e:	425b      	negs	r3, r3
 8001820:	a90a      	add	r1, sp, #40	; 0x28
 8001822:	0020      	movs	r0, r4
 8001824:	f7ff fe86 	bl	8001534 <HAL_UART_Transmit>
		HAL_Delay(10000);
 8001828:	480b      	ldr	r0, [pc, #44]	; (8001858 <main+0x140>)
 800182a:	f7fe fd45 	bl	80002b8 <HAL_Delay>
 800182e:	e7c0      	b.n	80017b2 <main+0x9a>
		sprintf(msg, "Write Failed, Read: %s\n", rmsg);
 8001830:	aa07      	add	r2, sp, #28
 8001832:	490a      	ldr	r1, [pc, #40]	; (800185c <main+0x144>)
 8001834:	e7eb      	b.n	800180e <main+0xf6>
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	40021000 	.word	0x40021000
 800183c:	20000094 	.word	0x20000094
 8001840:	40005400 	.word	0x40005400
 8001844:	200000e0 	.word	0x200000e0
 8001848:	40013800 	.word	0x40013800
 800184c:	08002340 	.word	0x08002340
 8001850:	08002318 	.word	0x08002318
 8001854:	0800233c 	.word	0x0800233c
 8001858:	00002710 	.word	0x00002710
 800185c:	08002328 	.word	0x08002328

08001860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	2001      	movs	r0, #1
 8001864:	4a0c      	ldr	r2, [pc, #48]	; (8001898 <HAL_MspInit+0x38>)
 8001866:	6991      	ldr	r1, [r2, #24]
 8001868:	4301      	orrs	r1, r0
 800186a:	6191      	str	r1, [r2, #24]
 800186c:	6993      	ldr	r3, [r2, #24]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001870:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001872:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001874:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001876:	3806      	subs	r0, #6
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001878:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800187a:	f7fe fd2d 	bl	80002d8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2002      	movs	r0, #2
 8001882:	0011      	movs	r1, r2
 8001884:	4240      	negs	r0, r0
 8001886:	f7fe fd27 	bl	80002d8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2001      	movs	r0, #1
 800188e:	0011      	movs	r1, r2
 8001890:	4240      	negs	r0, r0
 8001892:	f7fe fd21 	bl	80002d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001896:	bd07      	pop	{r0, r1, r2, pc}
 8001898:	40021000 	.word	0x40021000

0800189c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800189c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_I2C_MspInit+0x44>)
 80018a0:	6802      	ldr	r2, [r0, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d119      	bne.n	80018da <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018a6:	23c0      	movs	r3, #192	; 0xc0
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ac:	2312      	movs	r3, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b2:	3b11      	subs	r3, #17
 80018b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b6:	3302      	adds	r3, #2
 80018b8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018bc:	3301      	adds	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018c0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	f7fe fd67 	bl	8000394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018c6:	2080      	movs	r0, #128	; 0x80
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <HAL_I2C_MspInit+0x48>)
 80018ca:	0380      	lsls	r0, r0, #14
 80018cc:	69d1      	ldr	r1, [r2, #28]
 80018ce:	4301      	orrs	r1, r0
 80018d0:	61d1      	str	r1, [r2, #28]
 80018d2:	69d3      	ldr	r3, [r2, #28]
 80018d4:	4003      	ands	r3, r0
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018da:	b007      	add	sp, #28
 80018dc:	bd00      	pop	{pc}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	40005400 	.word	0x40005400
 80018e4:	40021000 	.word	0x40021000

080018e8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <HAL_UART_MspInit+0x40>)
 80018ec:	6802      	ldr	r2, [r0, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d117      	bne.n	8001922 <HAL_UART_MspInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f2:	2080      	movs	r0, #128	; 0x80
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <HAL_UART_MspInit+0x44>)
 80018f6:	01c0      	lsls	r0, r0, #7
 80018f8:	6991      	ldr	r1, [r2, #24]
 80018fa:	4301      	orrs	r1, r0
 80018fc:	6191      	str	r1, [r2, #24]
 80018fe:	6993      	ldr	r3, [r2, #24]
    PA2     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001900:	2203      	movs	r2, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8001902:	4003      	ands	r3, r0
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001908:	2304      	movs	r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800190c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190e:	330e      	adds	r3, #14
 8001910:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001914:	3b11      	subs	r3, #17
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001918:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800191a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800191c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f7fe fd39 	bl	8000394 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001922:	b007      	add	sp, #28
 8001924:	bd00      	pop	{pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	40013800 	.word	0x40013800
 800192c:	40021000 	.word	0x40021000

08001930 <NMI_Handler>:
 8001930:	4770      	bx	lr

08001932 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001932:	e7fe      	b.n	8001932 <HardFault_Handler>

08001934 <SVC_Handler>:
 8001934:	4770      	bx	lr

08001936 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001936:	4770      	bx	lr

08001938 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001938:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193a:	f7fe fcaf 	bl	800029c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800193e:	f7fe fd24 	bl	800038a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001942:	bd10      	pop	{r4, pc}

08001944 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001944:	2101      	movs	r1, #1
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001948:	4811      	ldr	r0, [pc, #68]	; (8001990 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	4002      	ands	r2, r0
 8001954:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	480e      	ldr	r0, [pc, #56]	; (8001994 <SystemInit+0x50>)
 800195a:	4002      	ands	r2, r0
 800195c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	480d      	ldr	r0, [pc, #52]	; (8001998 <SystemInit+0x54>)
 8001962:	4002      	ands	r2, r0
 8001964:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	480c      	ldr	r0, [pc, #48]	; (800199c <SystemInit+0x58>)
 800196a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800196c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800196e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001972:	4382      	bics	r2, r0
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001978:	4809      	ldr	r0, [pc, #36]	; (80019a0 <SystemInit+0x5c>)
 800197a:	4002      	ands	r2, r0
 800197c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800197e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001980:	438a      	bics	r2, r1
 8001982:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]

}
 8001988:	4770      	bx	lr
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	40021000 	.word	0x40021000
 8001990:	08ffb80c 	.word	0x08ffb80c
 8001994:	fef6ffff 	.word	0xfef6ffff
 8001998:	fffbffff 	.word	0xfffbffff
 800199c:	ffc0ffff 	.word	0xffc0ffff
 80019a0:	fffffeec 	.word	0xfffffeec

080019a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019a4:	480d      	ldr	r0, [pc, #52]	; (80019dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019aa:	e003      	b.n	80019b4 <LoopCopyDataInit>

080019ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80019ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019b2:	3104      	adds	r1, #4

080019b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019b4:	480b      	ldr	r0, [pc, #44]	; (80019e4 <LoopForever+0xa>)
  ldr r3, =_edata
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <LoopForever+0xe>)
  adds r2, r0, r1
 80019b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80019ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80019bc:	d3f6      	bcc.n	80019ac <CopyDataInit>
  ldr r2, =_sbss
 80019be:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <LoopForever+0x12>)
  b LoopFillZerobss
 80019c0:	e002      	b.n	80019c8 <LoopFillZerobss>

080019c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  str  r3, [r2]
 80019c4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c6:	3204      	adds	r2, #4

080019c8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <LoopForever+0x16>)
  cmp r2, r3
 80019ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019cc:	d3f9      	bcc.n	80019c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80019ce:	f7ff ffb9 	bl	8001944 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80019d2:	f000 f811 	bl	80019f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019d6:	f7ff fe9f 	bl	8001718 <main>

080019da <LoopForever>:

LoopForever:
    b LoopForever
 80019da:	e7fe      	b.n	80019da <LoopForever>
  ldr   r0, =_estack
 80019dc:	20001000 	.word	0x20001000
  ldr r3, =_sidata
 80019e0:	080023a0 	.word	0x080023a0
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019e8:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 80019ec:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 80019f0:	20000154 	.word	0x20000154

080019f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC1_IRQHandler>
	...

080019f8 <__libc_init_array>:
 80019f8:	b570      	push	{r4, r5, r6, lr}
 80019fa:	2600      	movs	r6, #0
 80019fc:	4d0c      	ldr	r5, [pc, #48]	; (8001a30 <__libc_init_array+0x38>)
 80019fe:	4c0d      	ldr	r4, [pc, #52]	; (8001a34 <__libc_init_array+0x3c>)
 8001a00:	1b64      	subs	r4, r4, r5
 8001a02:	10a4      	asrs	r4, r4, #2
 8001a04:	42a6      	cmp	r6, r4
 8001a06:	d109      	bne.n	8001a1c <__libc_init_array+0x24>
 8001a08:	2600      	movs	r6, #0
 8001a0a:	f000 fc67 	bl	80022dc <_init>
 8001a0e:	4d0a      	ldr	r5, [pc, #40]	; (8001a38 <__libc_init_array+0x40>)
 8001a10:	4c0a      	ldr	r4, [pc, #40]	; (8001a3c <__libc_init_array+0x44>)
 8001a12:	1b64      	subs	r4, r4, r5
 8001a14:	10a4      	asrs	r4, r4, #2
 8001a16:	42a6      	cmp	r6, r4
 8001a18:	d105      	bne.n	8001a26 <__libc_init_array+0x2e>
 8001a1a:	bd70      	pop	{r4, r5, r6, pc}
 8001a1c:	00b3      	lsls	r3, r6, #2
 8001a1e:	58eb      	ldr	r3, [r5, r3]
 8001a20:	4798      	blx	r3
 8001a22:	3601      	adds	r6, #1
 8001a24:	e7ee      	b.n	8001a04 <__libc_init_array+0xc>
 8001a26:	00b3      	lsls	r3, r6, #2
 8001a28:	58eb      	ldr	r3, [r5, r3]
 8001a2a:	4798      	blx	r3
 8001a2c:	3601      	adds	r6, #1
 8001a2e:	e7f2      	b.n	8001a16 <__libc_init_array+0x1e>
 8001a30:	08002398 	.word	0x08002398
 8001a34:	08002398 	.word	0x08002398
 8001a38:	08002398 	.word	0x08002398
 8001a3c:	0800239c 	.word	0x0800239c

08001a40 <malloc>:
 8001a40:	b510      	push	{r4, lr}
 8001a42:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <malloc+0x10>)
 8001a44:	0001      	movs	r1, r0
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	f000 f862 	bl	8001b10 <_malloc_r>
 8001a4c:	bd10      	pop	{r4, pc}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	20000004 	.word	0x20000004

08001a54 <free>:
 8001a54:	b510      	push	{r4, lr}
 8001a56:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <free+0x10>)
 8001a58:	0001      	movs	r1, r0
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	f000 f80e 	bl	8001a7c <_free_r>
 8001a60:	bd10      	pop	{r4, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	20000004 	.word	0x20000004

08001a68 <memcpy>:
 8001a68:	2300      	movs	r3, #0
 8001a6a:	b510      	push	{r4, lr}
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d100      	bne.n	8001a72 <memcpy+0xa>
 8001a70:	bd10      	pop	{r4, pc}
 8001a72:	5ccc      	ldrb	r4, [r1, r3]
 8001a74:	54c4      	strb	r4, [r0, r3]
 8001a76:	3301      	adds	r3, #1
 8001a78:	e7f8      	b.n	8001a6c <memcpy+0x4>
	...

08001a7c <_free_r>:
 8001a7c:	b570      	push	{r4, r5, r6, lr}
 8001a7e:	0005      	movs	r5, r0
 8001a80:	2900      	cmp	r1, #0
 8001a82:	d010      	beq.n	8001aa6 <_free_r+0x2a>
 8001a84:	1f0c      	subs	r4, r1, #4
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da00      	bge.n	8001a8e <_free_r+0x12>
 8001a8c:	18e4      	adds	r4, r4, r3
 8001a8e:	0028      	movs	r0, r5
 8001a90:	f000 f8d8 	bl	8001c44 <__malloc_lock>
 8001a94:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <_free_r+0x90>)
 8001a96:	6813      	ldr	r3, [r2, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d105      	bne.n	8001aa8 <_free_r+0x2c>
 8001a9c:	6063      	str	r3, [r4, #4]
 8001a9e:	6014      	str	r4, [r2, #0]
 8001aa0:	0028      	movs	r0, r5
 8001aa2:	f000 f8d0 	bl	8001c46 <__malloc_unlock>
 8001aa6:	bd70      	pop	{r4, r5, r6, pc}
 8001aa8:	42a3      	cmp	r3, r4
 8001aaa:	d909      	bls.n	8001ac0 <_free_r+0x44>
 8001aac:	6821      	ldr	r1, [r4, #0]
 8001aae:	1860      	adds	r0, r4, r1
 8001ab0:	4283      	cmp	r3, r0
 8001ab2:	d1f3      	bne.n	8001a9c <_free_r+0x20>
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	1841      	adds	r1, r0, r1
 8001aba:	6021      	str	r1, [r4, #0]
 8001abc:	e7ee      	b.n	8001a9c <_free_r+0x20>
 8001abe:	0013      	movs	r3, r2
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	2a00      	cmp	r2, #0
 8001ac4:	d001      	beq.n	8001aca <_free_r+0x4e>
 8001ac6:	42a2      	cmp	r2, r4
 8001ac8:	d9f9      	bls.n	8001abe <_free_r+0x42>
 8001aca:	6819      	ldr	r1, [r3, #0]
 8001acc:	1858      	adds	r0, r3, r1
 8001ace:	42a0      	cmp	r0, r4
 8001ad0:	d10b      	bne.n	8001aea <_free_r+0x6e>
 8001ad2:	6820      	ldr	r0, [r4, #0]
 8001ad4:	1809      	adds	r1, r1, r0
 8001ad6:	1858      	adds	r0, r3, r1
 8001ad8:	6019      	str	r1, [r3, #0]
 8001ada:	4282      	cmp	r2, r0
 8001adc:	d1e0      	bne.n	8001aa0 <_free_r+0x24>
 8001ade:	6810      	ldr	r0, [r2, #0]
 8001ae0:	6852      	ldr	r2, [r2, #4]
 8001ae2:	1841      	adds	r1, r0, r1
 8001ae4:	6019      	str	r1, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	e7da      	b.n	8001aa0 <_free_r+0x24>
 8001aea:	42a0      	cmp	r0, r4
 8001aec:	d902      	bls.n	8001af4 <_free_r+0x78>
 8001aee:	230c      	movs	r3, #12
 8001af0:	602b      	str	r3, [r5, #0]
 8001af2:	e7d5      	b.n	8001aa0 <_free_r+0x24>
 8001af4:	6821      	ldr	r1, [r4, #0]
 8001af6:	1860      	adds	r0, r4, r1
 8001af8:	4282      	cmp	r2, r0
 8001afa:	d103      	bne.n	8001b04 <_free_r+0x88>
 8001afc:	6810      	ldr	r0, [r2, #0]
 8001afe:	6852      	ldr	r2, [r2, #4]
 8001b00:	1841      	adds	r1, r0, r1
 8001b02:	6021      	str	r1, [r4, #0]
 8001b04:	6062      	str	r2, [r4, #4]
 8001b06:	605c      	str	r4, [r3, #4]
 8001b08:	e7ca      	b.n	8001aa0 <_free_r+0x24>
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	20000084 	.word	0x20000084

08001b10 <_malloc_r>:
 8001b10:	2303      	movs	r3, #3
 8001b12:	b570      	push	{r4, r5, r6, lr}
 8001b14:	1ccd      	adds	r5, r1, #3
 8001b16:	439d      	bics	r5, r3
 8001b18:	3508      	adds	r5, #8
 8001b1a:	0006      	movs	r6, r0
 8001b1c:	2d0c      	cmp	r5, #12
 8001b1e:	d21e      	bcs.n	8001b5e <_malloc_r+0x4e>
 8001b20:	250c      	movs	r5, #12
 8001b22:	42a9      	cmp	r1, r5
 8001b24:	d81d      	bhi.n	8001b62 <_malloc_r+0x52>
 8001b26:	0030      	movs	r0, r6
 8001b28:	f000 f88c 	bl	8001c44 <__malloc_lock>
 8001b2c:	4a25      	ldr	r2, [pc, #148]	; (8001bc4 <_malloc_r+0xb4>)
 8001b2e:	6814      	ldr	r4, [r2, #0]
 8001b30:	0021      	movs	r1, r4
 8001b32:	2900      	cmp	r1, #0
 8001b34:	d119      	bne.n	8001b6a <_malloc_r+0x5a>
 8001b36:	4c24      	ldr	r4, [pc, #144]	; (8001bc8 <_malloc_r+0xb8>)
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d103      	bne.n	8001b46 <_malloc_r+0x36>
 8001b3e:	0030      	movs	r0, r6
 8001b40:	f000 f844 	bl	8001bcc <_sbrk_r>
 8001b44:	6020      	str	r0, [r4, #0]
 8001b46:	0029      	movs	r1, r5
 8001b48:	0030      	movs	r0, r6
 8001b4a:	f000 f83f 	bl	8001bcc <_sbrk_r>
 8001b4e:	1c43      	adds	r3, r0, #1
 8001b50:	d12c      	bne.n	8001bac <_malloc_r+0x9c>
 8001b52:	230c      	movs	r3, #12
 8001b54:	0030      	movs	r0, r6
 8001b56:	6033      	str	r3, [r6, #0]
 8001b58:	f000 f875 	bl	8001c46 <__malloc_unlock>
 8001b5c:	e003      	b.n	8001b66 <_malloc_r+0x56>
 8001b5e:	2d00      	cmp	r5, #0
 8001b60:	dadf      	bge.n	8001b22 <_malloc_r+0x12>
 8001b62:	230c      	movs	r3, #12
 8001b64:	6033      	str	r3, [r6, #0]
 8001b66:	2000      	movs	r0, #0
 8001b68:	bd70      	pop	{r4, r5, r6, pc}
 8001b6a:	680b      	ldr	r3, [r1, #0]
 8001b6c:	1b5b      	subs	r3, r3, r5
 8001b6e:	d41a      	bmi.n	8001ba6 <_malloc_r+0x96>
 8001b70:	2b0b      	cmp	r3, #11
 8001b72:	d903      	bls.n	8001b7c <_malloc_r+0x6c>
 8001b74:	600b      	str	r3, [r1, #0]
 8001b76:	18cc      	adds	r4, r1, r3
 8001b78:	6025      	str	r5, [r4, #0]
 8001b7a:	e003      	b.n	8001b84 <_malloc_r+0x74>
 8001b7c:	428c      	cmp	r4, r1
 8001b7e:	d10e      	bne.n	8001b9e <_malloc_r+0x8e>
 8001b80:	6863      	ldr	r3, [r4, #4]
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	0030      	movs	r0, r6
 8001b86:	f000 f85e 	bl	8001c46 <__malloc_unlock>
 8001b8a:	0020      	movs	r0, r4
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	300b      	adds	r0, #11
 8001b90:	1d23      	adds	r3, r4, #4
 8001b92:	4390      	bics	r0, r2
 8001b94:	1ac3      	subs	r3, r0, r3
 8001b96:	d0e7      	beq.n	8001b68 <_malloc_r+0x58>
 8001b98:	425a      	negs	r2, r3
 8001b9a:	50e2      	str	r2, [r4, r3]
 8001b9c:	e7e4      	b.n	8001b68 <_malloc_r+0x58>
 8001b9e:	684b      	ldr	r3, [r1, #4]
 8001ba0:	6063      	str	r3, [r4, #4]
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	e7ee      	b.n	8001b84 <_malloc_r+0x74>
 8001ba6:	000c      	movs	r4, r1
 8001ba8:	6849      	ldr	r1, [r1, #4]
 8001baa:	e7c2      	b.n	8001b32 <_malloc_r+0x22>
 8001bac:	2303      	movs	r3, #3
 8001bae:	1cc4      	adds	r4, r0, #3
 8001bb0:	439c      	bics	r4, r3
 8001bb2:	42a0      	cmp	r0, r4
 8001bb4:	d0e0      	beq.n	8001b78 <_malloc_r+0x68>
 8001bb6:	1a21      	subs	r1, r4, r0
 8001bb8:	0030      	movs	r0, r6
 8001bba:	f000 f807 	bl	8001bcc <_sbrk_r>
 8001bbe:	1c43      	adds	r3, r0, #1
 8001bc0:	d1da      	bne.n	8001b78 <_malloc_r+0x68>
 8001bc2:	e7c6      	b.n	8001b52 <_malloc_r+0x42>
 8001bc4:	20000084 	.word	0x20000084
 8001bc8:	20000088 	.word	0x20000088

08001bcc <_sbrk_r>:
 8001bcc:	2300      	movs	r3, #0
 8001bce:	b570      	push	{r4, r5, r6, lr}
 8001bd0:	4c06      	ldr	r4, [pc, #24]	; (8001bec <_sbrk_r+0x20>)
 8001bd2:	0005      	movs	r5, r0
 8001bd4:	0008      	movs	r0, r1
 8001bd6:	6023      	str	r3, [r4, #0]
 8001bd8:	f000 fb70 	bl	80022bc <_sbrk>
 8001bdc:	1c43      	adds	r3, r0, #1
 8001bde:	d103      	bne.n	8001be8 <_sbrk_r+0x1c>
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d000      	beq.n	8001be8 <_sbrk_r+0x1c>
 8001be6:	602b      	str	r3, [r5, #0]
 8001be8:	bd70      	pop	{r4, r5, r6, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	20000150 	.word	0x20000150

08001bf0 <siprintf>:
 8001bf0:	b40e      	push	{r1, r2, r3}
 8001bf2:	b510      	push	{r4, lr}
 8001bf4:	b09d      	sub	sp, #116	; 0x74
 8001bf6:	a902      	add	r1, sp, #8
 8001bf8:	9002      	str	r0, [sp, #8]
 8001bfa:	6108      	str	r0, [r1, #16]
 8001bfc:	480b      	ldr	r0, [pc, #44]	; (8001c2c <siprintf+0x3c>)
 8001bfe:	2482      	movs	r4, #130	; 0x82
 8001c00:	6088      	str	r0, [r1, #8]
 8001c02:	6148      	str	r0, [r1, #20]
 8001c04:	2001      	movs	r0, #1
 8001c06:	4240      	negs	r0, r0
 8001c08:	ab1f      	add	r3, sp, #124	; 0x7c
 8001c0a:	81c8      	strh	r0, [r1, #14]
 8001c0c:	4808      	ldr	r0, [pc, #32]	; (8001c30 <siprintf+0x40>)
 8001c0e:	cb04      	ldmia	r3!, {r2}
 8001c10:	00a4      	lsls	r4, r4, #2
 8001c12:	6800      	ldr	r0, [r0, #0]
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	818c      	strh	r4, [r1, #12]
 8001c18:	f000 f878 	bl	8001d0c <_svfiprintf_r>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9a02      	ldr	r2, [sp, #8]
 8001c20:	7013      	strb	r3, [r2, #0]
 8001c22:	b01d      	add	sp, #116	; 0x74
 8001c24:	bc10      	pop	{r4}
 8001c26:	bc08      	pop	{r3}
 8001c28:	b003      	add	sp, #12
 8001c2a:	4718      	bx	r3
 8001c2c:	7fffffff 	.word	0x7fffffff
 8001c30:	20000004 	.word	0x20000004

08001c34 <strcpy>:
 8001c34:	1c03      	adds	r3, r0, #0
 8001c36:	780a      	ldrb	r2, [r1, #0]
 8001c38:	3101      	adds	r1, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	2a00      	cmp	r2, #0
 8001c40:	d1f9      	bne.n	8001c36 <strcpy+0x2>
 8001c42:	4770      	bx	lr

08001c44 <__malloc_lock>:
 8001c44:	4770      	bx	lr

08001c46 <__malloc_unlock>:
 8001c46:	4770      	bx	lr

08001c48 <__ssputs_r>:
 8001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4a:	688e      	ldr	r6, [r1, #8]
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	0007      	movs	r7, r0
 8001c50:	000c      	movs	r4, r1
 8001c52:	9203      	str	r2, [sp, #12]
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	429e      	cmp	r6, r3
 8001c58:	d839      	bhi.n	8001cce <__ssputs_r+0x86>
 8001c5a:	2390      	movs	r3, #144	; 0x90
 8001c5c:	898a      	ldrh	r2, [r1, #12]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	421a      	tst	r2, r3
 8001c62:	d034      	beq.n	8001cce <__ssputs_r+0x86>
 8001c64:	2503      	movs	r5, #3
 8001c66:	6909      	ldr	r1, [r1, #16]
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	1a5b      	subs	r3, r3, r1
 8001c6c:	9302      	str	r3, [sp, #8]
 8001c6e:	6963      	ldr	r3, [r4, #20]
 8001c70:	9802      	ldr	r0, [sp, #8]
 8001c72:	435d      	muls	r5, r3
 8001c74:	0feb      	lsrs	r3, r5, #31
 8001c76:	195d      	adds	r5, r3, r5
 8001c78:	9b01      	ldr	r3, [sp, #4]
 8001c7a:	106d      	asrs	r5, r5, #1
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	181b      	adds	r3, r3, r0
 8001c80:	42ab      	cmp	r3, r5
 8001c82:	d900      	bls.n	8001c86 <__ssputs_r+0x3e>
 8001c84:	001d      	movs	r5, r3
 8001c86:	0553      	lsls	r3, r2, #21
 8001c88:	d532      	bpl.n	8001cf0 <__ssputs_r+0xa8>
 8001c8a:	0029      	movs	r1, r5
 8001c8c:	0038      	movs	r0, r7
 8001c8e:	f7ff ff3f 	bl	8001b10 <_malloc_r>
 8001c92:	1e06      	subs	r6, r0, #0
 8001c94:	d109      	bne.n	8001caa <__ssputs_r+0x62>
 8001c96:	230c      	movs	r3, #12
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	2340      	movs	r3, #64	; 0x40
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	89a2      	ldrh	r2, [r4, #12]
 8001ca0:	4240      	negs	r0, r0
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	81a3      	strh	r3, [r4, #12]
 8001ca6:	b005      	add	sp, #20
 8001ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001caa:	9a02      	ldr	r2, [sp, #8]
 8001cac:	6921      	ldr	r1, [r4, #16]
 8001cae:	f7ff fedb 	bl	8001a68 <memcpy>
 8001cb2:	89a3      	ldrh	r3, [r4, #12]
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <__ssputs_r+0xc0>)
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	81a3      	strh	r3, [r4, #12]
 8001cbe:	9b02      	ldr	r3, [sp, #8]
 8001cc0:	6126      	str	r6, [r4, #16]
 8001cc2:	18f6      	adds	r6, r6, r3
 8001cc4:	6026      	str	r6, [r4, #0]
 8001cc6:	6165      	str	r5, [r4, #20]
 8001cc8:	9e01      	ldr	r6, [sp, #4]
 8001cca:	1aed      	subs	r5, r5, r3
 8001ccc:	60a5      	str	r5, [r4, #8]
 8001cce:	9b01      	ldr	r3, [sp, #4]
 8001cd0:	42b3      	cmp	r3, r6
 8001cd2:	d200      	bcs.n	8001cd6 <__ssputs_r+0x8e>
 8001cd4:	001e      	movs	r6, r3
 8001cd6:	0032      	movs	r2, r6
 8001cd8:	9903      	ldr	r1, [sp, #12]
 8001cda:	6820      	ldr	r0, [r4, #0]
 8001cdc:	f000 faad 	bl	800223a <memmove>
 8001ce0:	68a3      	ldr	r3, [r4, #8]
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	1b9b      	subs	r3, r3, r6
 8001ce6:	60a3      	str	r3, [r4, #8]
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	199e      	adds	r6, r3, r6
 8001cec:	6026      	str	r6, [r4, #0]
 8001cee:	e7da      	b.n	8001ca6 <__ssputs_r+0x5e>
 8001cf0:	002a      	movs	r2, r5
 8001cf2:	0038      	movs	r0, r7
 8001cf4:	f000 fab3 	bl	800225e <_realloc_r>
 8001cf8:	1e06      	subs	r6, r0, #0
 8001cfa:	d1e0      	bne.n	8001cbe <__ssputs_r+0x76>
 8001cfc:	6921      	ldr	r1, [r4, #16]
 8001cfe:	0038      	movs	r0, r7
 8001d00:	f7ff febc 	bl	8001a7c <_free_r>
 8001d04:	e7c7      	b.n	8001c96 <__ssputs_r+0x4e>
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	fffffb7f 	.word	0xfffffb7f

08001d0c <_svfiprintf_r>:
 8001d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0e:	b09f      	sub	sp, #124	; 0x7c
 8001d10:	9002      	str	r0, [sp, #8]
 8001d12:	9305      	str	r3, [sp, #20]
 8001d14:	898b      	ldrh	r3, [r1, #12]
 8001d16:	000f      	movs	r7, r1
 8001d18:	0016      	movs	r6, r2
 8001d1a:	061b      	lsls	r3, r3, #24
 8001d1c:	d511      	bpl.n	8001d42 <_svfiprintf_r+0x36>
 8001d1e:	690b      	ldr	r3, [r1, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10e      	bne.n	8001d42 <_svfiprintf_r+0x36>
 8001d24:	2140      	movs	r1, #64	; 0x40
 8001d26:	f7ff fef3 	bl	8001b10 <_malloc_r>
 8001d2a:	6038      	str	r0, [r7, #0]
 8001d2c:	6138      	str	r0, [r7, #16]
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	d105      	bne.n	8001d3e <_svfiprintf_r+0x32>
 8001d32:	230c      	movs	r3, #12
 8001d34:	9a02      	ldr	r2, [sp, #8]
 8001d36:	3801      	subs	r0, #1
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	b01f      	add	sp, #124	; 0x7c
 8001d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d3e:	2340      	movs	r3, #64	; 0x40
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	2300      	movs	r3, #0
 8001d44:	ad06      	add	r5, sp, #24
 8001d46:	616b      	str	r3, [r5, #20]
 8001d48:	3320      	adds	r3, #32
 8001d4a:	766b      	strb	r3, [r5, #25]
 8001d4c:	3310      	adds	r3, #16
 8001d4e:	76ab      	strb	r3, [r5, #26]
 8001d50:	0034      	movs	r4, r6
 8001d52:	7823      	ldrb	r3, [r4, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d147      	bne.n	8001de8 <_svfiprintf_r+0xdc>
 8001d58:	1ba3      	subs	r3, r4, r6
 8001d5a:	9304      	str	r3, [sp, #16]
 8001d5c:	d00d      	beq.n	8001d7a <_svfiprintf_r+0x6e>
 8001d5e:	1ba3      	subs	r3, r4, r6
 8001d60:	0032      	movs	r2, r6
 8001d62:	0039      	movs	r1, r7
 8001d64:	9802      	ldr	r0, [sp, #8]
 8001d66:	f7ff ff6f 	bl	8001c48 <__ssputs_r>
 8001d6a:	1c43      	adds	r3, r0, #1
 8001d6c:	d100      	bne.n	8001d70 <_svfiprintf_r+0x64>
 8001d6e:	e0b5      	b.n	8001edc <_svfiprintf_r+0x1d0>
 8001d70:	696a      	ldr	r2, [r5, #20]
 8001d72:	9b04      	ldr	r3, [sp, #16]
 8001d74:	4694      	mov	ip, r2
 8001d76:	4463      	add	r3, ip
 8001d78:	616b      	str	r3, [r5, #20]
 8001d7a:	7823      	ldrb	r3, [r4, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d100      	bne.n	8001d82 <_svfiprintf_r+0x76>
 8001d80:	e0ac      	b.n	8001edc <_svfiprintf_r+0x1d0>
 8001d82:	2201      	movs	r2, #1
 8001d84:	2300      	movs	r3, #0
 8001d86:	4252      	negs	r2, r2
 8001d88:	606a      	str	r2, [r5, #4]
 8001d8a:	a902      	add	r1, sp, #8
 8001d8c:	3254      	adds	r2, #84	; 0x54
 8001d8e:	1852      	adds	r2, r2, r1
 8001d90:	3401      	adds	r4, #1
 8001d92:	602b      	str	r3, [r5, #0]
 8001d94:	60eb      	str	r3, [r5, #12]
 8001d96:	60ab      	str	r3, [r5, #8]
 8001d98:	7013      	strb	r3, [r2, #0]
 8001d9a:	65ab      	str	r3, [r5, #88]	; 0x58
 8001d9c:	4e58      	ldr	r6, [pc, #352]	; (8001f00 <_svfiprintf_r+0x1f4>)
 8001d9e:	2205      	movs	r2, #5
 8001da0:	7821      	ldrb	r1, [r4, #0]
 8001da2:	0030      	movs	r0, r6
 8001da4:	f000 fa3e 	bl	8002224 <memchr>
 8001da8:	1c62      	adds	r2, r4, #1
 8001daa:	2800      	cmp	r0, #0
 8001dac:	d120      	bne.n	8001df0 <_svfiprintf_r+0xe4>
 8001dae:	6829      	ldr	r1, [r5, #0]
 8001db0:	06cb      	lsls	r3, r1, #27
 8001db2:	d504      	bpl.n	8001dbe <_svfiprintf_r+0xb2>
 8001db4:	2353      	movs	r3, #83	; 0x53
 8001db6:	ae02      	add	r6, sp, #8
 8001db8:	3020      	adds	r0, #32
 8001dba:	199b      	adds	r3, r3, r6
 8001dbc:	7018      	strb	r0, [r3, #0]
 8001dbe:	070b      	lsls	r3, r1, #28
 8001dc0:	d504      	bpl.n	8001dcc <_svfiprintf_r+0xc0>
 8001dc2:	2353      	movs	r3, #83	; 0x53
 8001dc4:	202b      	movs	r0, #43	; 0x2b
 8001dc6:	ae02      	add	r6, sp, #8
 8001dc8:	199b      	adds	r3, r3, r6
 8001dca:	7018      	strb	r0, [r3, #0]
 8001dcc:	7823      	ldrb	r3, [r4, #0]
 8001dce:	2b2a      	cmp	r3, #42	; 0x2a
 8001dd0:	d016      	beq.n	8001e00 <_svfiprintf_r+0xf4>
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	210a      	movs	r1, #10
 8001dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001dd8:	7822      	ldrb	r2, [r4, #0]
 8001dda:	3a30      	subs	r2, #48	; 0x30
 8001ddc:	2a09      	cmp	r2, #9
 8001dde:	d955      	bls.n	8001e8c <_svfiprintf_r+0x180>
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d015      	beq.n	8001e10 <_svfiprintf_r+0x104>
 8001de4:	9309      	str	r3, [sp, #36]	; 0x24
 8001de6:	e013      	b.n	8001e10 <_svfiprintf_r+0x104>
 8001de8:	2b25      	cmp	r3, #37	; 0x25
 8001dea:	d0b5      	beq.n	8001d58 <_svfiprintf_r+0x4c>
 8001dec:	3401      	adds	r4, #1
 8001dee:	e7b0      	b.n	8001d52 <_svfiprintf_r+0x46>
 8001df0:	2301      	movs	r3, #1
 8001df2:	1b80      	subs	r0, r0, r6
 8001df4:	4083      	lsls	r3, r0
 8001df6:	6829      	ldr	r1, [r5, #0]
 8001df8:	0014      	movs	r4, r2
 8001dfa:	430b      	orrs	r3, r1
 8001dfc:	602b      	str	r3, [r5, #0]
 8001dfe:	e7cd      	b.n	8001d9c <_svfiprintf_r+0x90>
 8001e00:	9b05      	ldr	r3, [sp, #20]
 8001e02:	1d18      	adds	r0, r3, #4
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	9005      	str	r0, [sp, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	db39      	blt.n	8001e80 <_svfiprintf_r+0x174>
 8001e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8001e0e:	0014      	movs	r4, r2
 8001e10:	7823      	ldrb	r3, [r4, #0]
 8001e12:	2b2e      	cmp	r3, #46	; 0x2e
 8001e14:	d10b      	bne.n	8001e2e <_svfiprintf_r+0x122>
 8001e16:	7863      	ldrb	r3, [r4, #1]
 8001e18:	1c62      	adds	r2, r4, #1
 8001e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8001e1c:	d13e      	bne.n	8001e9c <_svfiprintf_r+0x190>
 8001e1e:	9b05      	ldr	r3, [sp, #20]
 8001e20:	3402      	adds	r4, #2
 8001e22:	1d1a      	adds	r2, r3, #4
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	9205      	str	r2, [sp, #20]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db34      	blt.n	8001e96 <_svfiprintf_r+0x18a>
 8001e2c:	9307      	str	r3, [sp, #28]
 8001e2e:	4e35      	ldr	r6, [pc, #212]	; (8001f04 <_svfiprintf_r+0x1f8>)
 8001e30:	7821      	ldrb	r1, [r4, #0]
 8001e32:	2203      	movs	r2, #3
 8001e34:	0030      	movs	r0, r6
 8001e36:	f000 f9f5 	bl	8002224 <memchr>
 8001e3a:	2800      	cmp	r0, #0
 8001e3c:	d006      	beq.n	8001e4c <_svfiprintf_r+0x140>
 8001e3e:	2340      	movs	r3, #64	; 0x40
 8001e40:	1b80      	subs	r0, r0, r6
 8001e42:	4083      	lsls	r3, r0
 8001e44:	682a      	ldr	r2, [r5, #0]
 8001e46:	3401      	adds	r4, #1
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	602b      	str	r3, [r5, #0]
 8001e4c:	7821      	ldrb	r1, [r4, #0]
 8001e4e:	2206      	movs	r2, #6
 8001e50:	482d      	ldr	r0, [pc, #180]	; (8001f08 <_svfiprintf_r+0x1fc>)
 8001e52:	1c66      	adds	r6, r4, #1
 8001e54:	7629      	strb	r1, [r5, #24]
 8001e56:	f000 f9e5 	bl	8002224 <memchr>
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	d046      	beq.n	8001eec <_svfiprintf_r+0x1e0>
 8001e5e:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <_svfiprintf_r+0x200>)
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d12f      	bne.n	8001ec4 <_svfiprintf_r+0x1b8>
 8001e64:	6829      	ldr	r1, [r5, #0]
 8001e66:	9b05      	ldr	r3, [sp, #20]
 8001e68:	2207      	movs	r2, #7
 8001e6a:	05c9      	lsls	r1, r1, #23
 8001e6c:	d528      	bpl.n	8001ec0 <_svfiprintf_r+0x1b4>
 8001e6e:	189b      	adds	r3, r3, r2
 8001e70:	4393      	bics	r3, r2
 8001e72:	3308      	adds	r3, #8
 8001e74:	9305      	str	r3, [sp, #20]
 8001e76:	696b      	ldr	r3, [r5, #20]
 8001e78:	9a03      	ldr	r2, [sp, #12]
 8001e7a:	189b      	adds	r3, r3, r2
 8001e7c:	616b      	str	r3, [r5, #20]
 8001e7e:	e767      	b.n	8001d50 <_svfiprintf_r+0x44>
 8001e80:	425b      	negs	r3, r3
 8001e82:	60eb      	str	r3, [r5, #12]
 8001e84:	2302      	movs	r3, #2
 8001e86:	430b      	orrs	r3, r1
 8001e88:	602b      	str	r3, [r5, #0]
 8001e8a:	e7c0      	b.n	8001e0e <_svfiprintf_r+0x102>
 8001e8c:	434b      	muls	r3, r1
 8001e8e:	3401      	adds	r4, #1
 8001e90:	189b      	adds	r3, r3, r2
 8001e92:	2001      	movs	r0, #1
 8001e94:	e7a0      	b.n	8001dd8 <_svfiprintf_r+0xcc>
 8001e96:	2301      	movs	r3, #1
 8001e98:	425b      	negs	r3, r3
 8001e9a:	e7c7      	b.n	8001e2c <_svfiprintf_r+0x120>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	0014      	movs	r4, r2
 8001ea0:	200a      	movs	r0, #10
 8001ea2:	001a      	movs	r2, r3
 8001ea4:	606b      	str	r3, [r5, #4]
 8001ea6:	7821      	ldrb	r1, [r4, #0]
 8001ea8:	3930      	subs	r1, #48	; 0x30
 8001eaa:	2909      	cmp	r1, #9
 8001eac:	d903      	bls.n	8001eb6 <_svfiprintf_r+0x1aa>
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0bd      	beq.n	8001e2e <_svfiprintf_r+0x122>
 8001eb2:	9207      	str	r2, [sp, #28]
 8001eb4:	e7bb      	b.n	8001e2e <_svfiprintf_r+0x122>
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	3401      	adds	r4, #1
 8001eba:	1852      	adds	r2, r2, r1
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e7f2      	b.n	8001ea6 <_svfiprintf_r+0x19a>
 8001ec0:	3307      	adds	r3, #7
 8001ec2:	e7d5      	b.n	8001e70 <_svfiprintf_r+0x164>
 8001ec4:	ab05      	add	r3, sp, #20
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	003a      	movs	r2, r7
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <_svfiprintf_r+0x204>)
 8001ecc:	0029      	movs	r1, r5
 8001ece:	9802      	ldr	r0, [sp, #8]
 8001ed0:	e000      	b.n	8001ed4 <_svfiprintf_r+0x1c8>
 8001ed2:	bf00      	nop
 8001ed4:	9003      	str	r0, [sp, #12]
 8001ed6:	9b03      	ldr	r3, [sp, #12]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	d1cc      	bne.n	8001e76 <_svfiprintf_r+0x16a>
 8001edc:	89bb      	ldrh	r3, [r7, #12]
 8001ede:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001ee0:	065b      	lsls	r3, r3, #25
 8001ee2:	d400      	bmi.n	8001ee6 <_svfiprintf_r+0x1da>
 8001ee4:	e729      	b.n	8001d3a <_svfiprintf_r+0x2e>
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	4240      	negs	r0, r0
 8001eea:	e726      	b.n	8001d3a <_svfiprintf_r+0x2e>
 8001eec:	ab05      	add	r3, sp, #20
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	003a      	movs	r2, r7
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <_svfiprintf_r+0x204>)
 8001ef4:	0029      	movs	r1, r5
 8001ef6:	9802      	ldr	r0, [sp, #8]
 8001ef8:	f000 f87a 	bl	8001ff0 <_printf_i>
 8001efc:	e7ea      	b.n	8001ed4 <_svfiprintf_r+0x1c8>
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	08002362 	.word	0x08002362
 8001f04:	08002368 	.word	0x08002368
 8001f08:	0800236c 	.word	0x0800236c
 8001f0c:	00000000 	.word	0x00000000
 8001f10:	08001c49 	.word	0x08001c49

08001f14 <_printf_common>:
 8001f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f16:	0015      	movs	r5, r2
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	688a      	ldr	r2, [r1, #8]
 8001f1c:	690b      	ldr	r3, [r1, #16]
 8001f1e:	9000      	str	r0, [sp, #0]
 8001f20:	000c      	movs	r4, r1
 8001f22:	4293      	cmp	r3, r2
 8001f24:	da00      	bge.n	8001f28 <_printf_common+0x14>
 8001f26:	0013      	movs	r3, r2
 8001f28:	0022      	movs	r2, r4
 8001f2a:	602b      	str	r3, [r5, #0]
 8001f2c:	3243      	adds	r2, #67	; 0x43
 8001f2e:	7812      	ldrb	r2, [r2, #0]
 8001f30:	2a00      	cmp	r2, #0
 8001f32:	d001      	beq.n	8001f38 <_printf_common+0x24>
 8001f34:	3301      	adds	r3, #1
 8001f36:	602b      	str	r3, [r5, #0]
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	069b      	lsls	r3, r3, #26
 8001f3c:	d502      	bpl.n	8001f44 <_printf_common+0x30>
 8001f3e:	682b      	ldr	r3, [r5, #0]
 8001f40:	3302      	adds	r3, #2
 8001f42:	602b      	str	r3, [r5, #0]
 8001f44:	2706      	movs	r7, #6
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	401f      	ands	r7, r3
 8001f4a:	d027      	beq.n	8001f9c <_printf_common+0x88>
 8001f4c:	0023      	movs	r3, r4
 8001f4e:	3343      	adds	r3, #67	; 0x43
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	1e5a      	subs	r2, r3, #1
 8001f54:	4193      	sbcs	r3, r2
 8001f56:	6822      	ldr	r2, [r4, #0]
 8001f58:	0692      	lsls	r2, r2, #26
 8001f5a:	d430      	bmi.n	8001fbe <_printf_common+0xaa>
 8001f5c:	0022      	movs	r2, r4
 8001f5e:	9901      	ldr	r1, [sp, #4]
 8001f60:	3243      	adds	r2, #67	; 0x43
 8001f62:	9800      	ldr	r0, [sp, #0]
 8001f64:	9e08      	ldr	r6, [sp, #32]
 8001f66:	47b0      	blx	r6
 8001f68:	1c43      	adds	r3, r0, #1
 8001f6a:	d025      	beq.n	8001fb8 <_printf_common+0xa4>
 8001f6c:	2306      	movs	r3, #6
 8001f6e:	6820      	ldr	r0, [r4, #0]
 8001f70:	682a      	ldr	r2, [r5, #0]
 8001f72:	68e1      	ldr	r1, [r4, #12]
 8001f74:	4003      	ands	r3, r0
 8001f76:	2500      	movs	r5, #0
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d103      	bne.n	8001f84 <_printf_common+0x70>
 8001f7c:	1a8d      	subs	r5, r1, r2
 8001f7e:	43eb      	mvns	r3, r5
 8001f80:	17db      	asrs	r3, r3, #31
 8001f82:	401d      	ands	r5, r3
 8001f84:	68a3      	ldr	r3, [r4, #8]
 8001f86:	6922      	ldr	r2, [r4, #16]
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	dd01      	ble.n	8001f90 <_printf_common+0x7c>
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	18ed      	adds	r5, r5, r3
 8001f90:	2700      	movs	r7, #0
 8001f92:	42bd      	cmp	r5, r7
 8001f94:	d120      	bne.n	8001fd8 <_printf_common+0xc4>
 8001f96:	2000      	movs	r0, #0
 8001f98:	e010      	b.n	8001fbc <_printf_common+0xa8>
 8001f9a:	3701      	adds	r7, #1
 8001f9c:	68e3      	ldr	r3, [r4, #12]
 8001f9e:	682a      	ldr	r2, [r5, #0]
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	429f      	cmp	r7, r3
 8001fa4:	dad2      	bge.n	8001f4c <_printf_common+0x38>
 8001fa6:	0022      	movs	r2, r4
 8001fa8:	2301      	movs	r3, #1
 8001faa:	3219      	adds	r2, #25
 8001fac:	9901      	ldr	r1, [sp, #4]
 8001fae:	9800      	ldr	r0, [sp, #0]
 8001fb0:	9e08      	ldr	r6, [sp, #32]
 8001fb2:	47b0      	blx	r6
 8001fb4:	1c43      	adds	r3, r0, #1
 8001fb6:	d1f0      	bne.n	8001f9a <_printf_common+0x86>
 8001fb8:	2001      	movs	r0, #1
 8001fba:	4240      	negs	r0, r0
 8001fbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001fbe:	2030      	movs	r0, #48	; 0x30
 8001fc0:	18e1      	adds	r1, r4, r3
 8001fc2:	3143      	adds	r1, #67	; 0x43
 8001fc4:	7008      	strb	r0, [r1, #0]
 8001fc6:	0021      	movs	r1, r4
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	3145      	adds	r1, #69	; 0x45
 8001fcc:	7809      	ldrb	r1, [r1, #0]
 8001fce:	18a2      	adds	r2, r4, r2
 8001fd0:	3243      	adds	r2, #67	; 0x43
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	7011      	strb	r1, [r2, #0]
 8001fd6:	e7c1      	b.n	8001f5c <_printf_common+0x48>
 8001fd8:	0022      	movs	r2, r4
 8001fda:	2301      	movs	r3, #1
 8001fdc:	321a      	adds	r2, #26
 8001fde:	9901      	ldr	r1, [sp, #4]
 8001fe0:	9800      	ldr	r0, [sp, #0]
 8001fe2:	9e08      	ldr	r6, [sp, #32]
 8001fe4:	47b0      	blx	r6
 8001fe6:	1c43      	adds	r3, r0, #1
 8001fe8:	d0e6      	beq.n	8001fb8 <_printf_common+0xa4>
 8001fea:	3701      	adds	r7, #1
 8001fec:	e7d1      	b.n	8001f92 <_printf_common+0x7e>
	...

08001ff0 <_printf_i>:
 8001ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff2:	b08b      	sub	sp, #44	; 0x2c
 8001ff4:	9206      	str	r2, [sp, #24]
 8001ff6:	000a      	movs	r2, r1
 8001ff8:	3243      	adds	r2, #67	; 0x43
 8001ffa:	9307      	str	r3, [sp, #28]
 8001ffc:	9005      	str	r0, [sp, #20]
 8001ffe:	9204      	str	r2, [sp, #16]
 8002000:	7e0a      	ldrb	r2, [r1, #24]
 8002002:	000c      	movs	r4, r1
 8002004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002006:	2a6e      	cmp	r2, #110	; 0x6e
 8002008:	d100      	bne.n	800200c <_printf_i+0x1c>
 800200a:	e08f      	b.n	800212c <_printf_i+0x13c>
 800200c:	d817      	bhi.n	800203e <_printf_i+0x4e>
 800200e:	2a63      	cmp	r2, #99	; 0x63
 8002010:	d02c      	beq.n	800206c <_printf_i+0x7c>
 8002012:	d808      	bhi.n	8002026 <_printf_i+0x36>
 8002014:	2a00      	cmp	r2, #0
 8002016:	d100      	bne.n	800201a <_printf_i+0x2a>
 8002018:	e099      	b.n	800214e <_printf_i+0x15e>
 800201a:	2a58      	cmp	r2, #88	; 0x58
 800201c:	d054      	beq.n	80020c8 <_printf_i+0xd8>
 800201e:	0026      	movs	r6, r4
 8002020:	3642      	adds	r6, #66	; 0x42
 8002022:	7032      	strb	r2, [r6, #0]
 8002024:	e029      	b.n	800207a <_printf_i+0x8a>
 8002026:	2a64      	cmp	r2, #100	; 0x64
 8002028:	d001      	beq.n	800202e <_printf_i+0x3e>
 800202a:	2a69      	cmp	r2, #105	; 0x69
 800202c:	d1f7      	bne.n	800201e <_printf_i+0x2e>
 800202e:	6821      	ldr	r1, [r4, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	0608      	lsls	r0, r1, #24
 8002034:	d523      	bpl.n	800207e <_printf_i+0x8e>
 8002036:	1d11      	adds	r1, r2, #4
 8002038:	6019      	str	r1, [r3, #0]
 800203a:	6815      	ldr	r5, [r2, #0]
 800203c:	e025      	b.n	800208a <_printf_i+0x9a>
 800203e:	2a73      	cmp	r2, #115	; 0x73
 8002040:	d100      	bne.n	8002044 <_printf_i+0x54>
 8002042:	e088      	b.n	8002156 <_printf_i+0x166>
 8002044:	d808      	bhi.n	8002058 <_printf_i+0x68>
 8002046:	2a6f      	cmp	r2, #111	; 0x6f
 8002048:	d029      	beq.n	800209e <_printf_i+0xae>
 800204a:	2a70      	cmp	r2, #112	; 0x70
 800204c:	d1e7      	bne.n	800201e <_printf_i+0x2e>
 800204e:	2220      	movs	r2, #32
 8002050:	6809      	ldr	r1, [r1, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	6022      	str	r2, [r4, #0]
 8002056:	e003      	b.n	8002060 <_printf_i+0x70>
 8002058:	2a75      	cmp	r2, #117	; 0x75
 800205a:	d020      	beq.n	800209e <_printf_i+0xae>
 800205c:	2a78      	cmp	r2, #120	; 0x78
 800205e:	d1de      	bne.n	800201e <_printf_i+0x2e>
 8002060:	0022      	movs	r2, r4
 8002062:	2178      	movs	r1, #120	; 0x78
 8002064:	3245      	adds	r2, #69	; 0x45
 8002066:	7011      	strb	r1, [r2, #0]
 8002068:	4a6c      	ldr	r2, [pc, #432]	; (800221c <_printf_i+0x22c>)
 800206a:	e030      	b.n	80020ce <_printf_i+0xde>
 800206c:	000e      	movs	r6, r1
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	3642      	adds	r6, #66	; 0x42
 8002072:	1d11      	adds	r1, r2, #4
 8002074:	6019      	str	r1, [r3, #0]
 8002076:	6813      	ldr	r3, [r2, #0]
 8002078:	7033      	strb	r3, [r6, #0]
 800207a:	2301      	movs	r3, #1
 800207c:	e079      	b.n	8002172 <_printf_i+0x182>
 800207e:	0649      	lsls	r1, r1, #25
 8002080:	d5d9      	bpl.n	8002036 <_printf_i+0x46>
 8002082:	1d11      	adds	r1, r2, #4
 8002084:	6019      	str	r1, [r3, #0]
 8002086:	2300      	movs	r3, #0
 8002088:	5ed5      	ldrsh	r5, [r2, r3]
 800208a:	2d00      	cmp	r5, #0
 800208c:	da03      	bge.n	8002096 <_printf_i+0xa6>
 800208e:	232d      	movs	r3, #45	; 0x2d
 8002090:	9a04      	ldr	r2, [sp, #16]
 8002092:	426d      	negs	r5, r5
 8002094:	7013      	strb	r3, [r2, #0]
 8002096:	4b62      	ldr	r3, [pc, #392]	; (8002220 <_printf_i+0x230>)
 8002098:	270a      	movs	r7, #10
 800209a:	9303      	str	r3, [sp, #12]
 800209c:	e02f      	b.n	80020fe <_printf_i+0x10e>
 800209e:	6820      	ldr	r0, [r4, #0]
 80020a0:	6819      	ldr	r1, [r3, #0]
 80020a2:	0605      	lsls	r5, r0, #24
 80020a4:	d503      	bpl.n	80020ae <_printf_i+0xbe>
 80020a6:	1d08      	adds	r0, r1, #4
 80020a8:	6018      	str	r0, [r3, #0]
 80020aa:	680d      	ldr	r5, [r1, #0]
 80020ac:	e005      	b.n	80020ba <_printf_i+0xca>
 80020ae:	0640      	lsls	r0, r0, #25
 80020b0:	d5f9      	bpl.n	80020a6 <_printf_i+0xb6>
 80020b2:	680d      	ldr	r5, [r1, #0]
 80020b4:	1d08      	adds	r0, r1, #4
 80020b6:	6018      	str	r0, [r3, #0]
 80020b8:	b2ad      	uxth	r5, r5
 80020ba:	4b59      	ldr	r3, [pc, #356]	; (8002220 <_printf_i+0x230>)
 80020bc:	2708      	movs	r7, #8
 80020be:	9303      	str	r3, [sp, #12]
 80020c0:	2a6f      	cmp	r2, #111	; 0x6f
 80020c2:	d018      	beq.n	80020f6 <_printf_i+0x106>
 80020c4:	270a      	movs	r7, #10
 80020c6:	e016      	b.n	80020f6 <_printf_i+0x106>
 80020c8:	3145      	adds	r1, #69	; 0x45
 80020ca:	700a      	strb	r2, [r1, #0]
 80020cc:	4a54      	ldr	r2, [pc, #336]	; (8002220 <_printf_i+0x230>)
 80020ce:	9203      	str	r2, [sp, #12]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	6821      	ldr	r1, [r4, #0]
 80020d4:	1d10      	adds	r0, r2, #4
 80020d6:	6018      	str	r0, [r3, #0]
 80020d8:	6815      	ldr	r5, [r2, #0]
 80020da:	0608      	lsls	r0, r1, #24
 80020dc:	d522      	bpl.n	8002124 <_printf_i+0x134>
 80020de:	07cb      	lsls	r3, r1, #31
 80020e0:	d502      	bpl.n	80020e8 <_printf_i+0xf8>
 80020e2:	2320      	movs	r3, #32
 80020e4:	4319      	orrs	r1, r3
 80020e6:	6021      	str	r1, [r4, #0]
 80020e8:	2710      	movs	r7, #16
 80020ea:	2d00      	cmp	r5, #0
 80020ec:	d103      	bne.n	80020f6 <_printf_i+0x106>
 80020ee:	2320      	movs	r3, #32
 80020f0:	6822      	ldr	r2, [r4, #0]
 80020f2:	439a      	bics	r2, r3
 80020f4:	6022      	str	r2, [r4, #0]
 80020f6:	0023      	movs	r3, r4
 80020f8:	2200      	movs	r2, #0
 80020fa:	3343      	adds	r3, #67	; 0x43
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	6863      	ldr	r3, [r4, #4]
 8002100:	60a3      	str	r3, [r4, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db5c      	blt.n	80021c0 <_printf_i+0x1d0>
 8002106:	2204      	movs	r2, #4
 8002108:	6821      	ldr	r1, [r4, #0]
 800210a:	4391      	bics	r1, r2
 800210c:	6021      	str	r1, [r4, #0]
 800210e:	2d00      	cmp	r5, #0
 8002110:	d158      	bne.n	80021c4 <_printf_i+0x1d4>
 8002112:	9e04      	ldr	r6, [sp, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d064      	beq.n	80021e2 <_printf_i+0x1f2>
 8002118:	0026      	movs	r6, r4
 800211a:	9b03      	ldr	r3, [sp, #12]
 800211c:	3642      	adds	r6, #66	; 0x42
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	7033      	strb	r3, [r6, #0]
 8002122:	e05e      	b.n	80021e2 <_printf_i+0x1f2>
 8002124:	0648      	lsls	r0, r1, #25
 8002126:	d5da      	bpl.n	80020de <_printf_i+0xee>
 8002128:	b2ad      	uxth	r5, r5
 800212a:	e7d8      	b.n	80020de <_printf_i+0xee>
 800212c:	6809      	ldr	r1, [r1, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	0608      	lsls	r0, r1, #24
 8002132:	d505      	bpl.n	8002140 <_printf_i+0x150>
 8002134:	1d11      	adds	r1, r2, #4
 8002136:	6019      	str	r1, [r3, #0]
 8002138:	6813      	ldr	r3, [r2, #0]
 800213a:	6962      	ldr	r2, [r4, #20]
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	e006      	b.n	800214e <_printf_i+0x15e>
 8002140:	0649      	lsls	r1, r1, #25
 8002142:	d5f7      	bpl.n	8002134 <_printf_i+0x144>
 8002144:	1d11      	adds	r1, r2, #4
 8002146:	6019      	str	r1, [r3, #0]
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	8aa2      	ldrh	r2, [r4, #20]
 800214c:	801a      	strh	r2, [r3, #0]
 800214e:	2300      	movs	r3, #0
 8002150:	9e04      	ldr	r6, [sp, #16]
 8002152:	6123      	str	r3, [r4, #16]
 8002154:	e054      	b.n	8002200 <_printf_i+0x210>
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	1d11      	adds	r1, r2, #4
 800215a:	6019      	str	r1, [r3, #0]
 800215c:	6816      	ldr	r6, [r2, #0]
 800215e:	2100      	movs	r1, #0
 8002160:	6862      	ldr	r2, [r4, #4]
 8002162:	0030      	movs	r0, r6
 8002164:	f000 f85e 	bl	8002224 <memchr>
 8002168:	2800      	cmp	r0, #0
 800216a:	d001      	beq.n	8002170 <_printf_i+0x180>
 800216c:	1b80      	subs	r0, r0, r6
 800216e:	6060      	str	r0, [r4, #4]
 8002170:	6863      	ldr	r3, [r4, #4]
 8002172:	6123      	str	r3, [r4, #16]
 8002174:	2300      	movs	r3, #0
 8002176:	9a04      	ldr	r2, [sp, #16]
 8002178:	7013      	strb	r3, [r2, #0]
 800217a:	e041      	b.n	8002200 <_printf_i+0x210>
 800217c:	6923      	ldr	r3, [r4, #16]
 800217e:	0032      	movs	r2, r6
 8002180:	9906      	ldr	r1, [sp, #24]
 8002182:	9805      	ldr	r0, [sp, #20]
 8002184:	9d07      	ldr	r5, [sp, #28]
 8002186:	47a8      	blx	r5
 8002188:	1c43      	adds	r3, r0, #1
 800218a:	d043      	beq.n	8002214 <_printf_i+0x224>
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	2500      	movs	r5, #0
 8002190:	079b      	lsls	r3, r3, #30
 8002192:	d40f      	bmi.n	80021b4 <_printf_i+0x1c4>
 8002194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002196:	68e0      	ldr	r0, [r4, #12]
 8002198:	4298      	cmp	r0, r3
 800219a:	da3d      	bge.n	8002218 <_printf_i+0x228>
 800219c:	0018      	movs	r0, r3
 800219e:	e03b      	b.n	8002218 <_printf_i+0x228>
 80021a0:	0022      	movs	r2, r4
 80021a2:	2301      	movs	r3, #1
 80021a4:	3219      	adds	r2, #25
 80021a6:	9906      	ldr	r1, [sp, #24]
 80021a8:	9805      	ldr	r0, [sp, #20]
 80021aa:	9e07      	ldr	r6, [sp, #28]
 80021ac:	47b0      	blx	r6
 80021ae:	1c43      	adds	r3, r0, #1
 80021b0:	d030      	beq.n	8002214 <_printf_i+0x224>
 80021b2:	3501      	adds	r5, #1
 80021b4:	68e3      	ldr	r3, [r4, #12]
 80021b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	429d      	cmp	r5, r3
 80021bc:	dbf0      	blt.n	80021a0 <_printf_i+0x1b0>
 80021be:	e7e9      	b.n	8002194 <_printf_i+0x1a4>
 80021c0:	2d00      	cmp	r5, #0
 80021c2:	d0a9      	beq.n	8002118 <_printf_i+0x128>
 80021c4:	9e04      	ldr	r6, [sp, #16]
 80021c6:	0028      	movs	r0, r5
 80021c8:	0039      	movs	r1, r7
 80021ca:	f7fe f83f 	bl	800024c <__aeabi_uidivmod>
 80021ce:	9b03      	ldr	r3, [sp, #12]
 80021d0:	3e01      	subs	r6, #1
 80021d2:	5c5b      	ldrb	r3, [r3, r1]
 80021d4:	0028      	movs	r0, r5
 80021d6:	7033      	strb	r3, [r6, #0]
 80021d8:	0039      	movs	r1, r7
 80021da:	f7fd ffb1 	bl	8000140 <__udivsi3>
 80021de:	1e05      	subs	r5, r0, #0
 80021e0:	d1f1      	bne.n	80021c6 <_printf_i+0x1d6>
 80021e2:	2f08      	cmp	r7, #8
 80021e4:	d109      	bne.n	80021fa <_printf_i+0x20a>
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	07db      	lsls	r3, r3, #31
 80021ea:	d506      	bpl.n	80021fa <_printf_i+0x20a>
 80021ec:	6863      	ldr	r3, [r4, #4]
 80021ee:	6922      	ldr	r2, [r4, #16]
 80021f0:	4293      	cmp	r3, r2
 80021f2:	dc02      	bgt.n	80021fa <_printf_i+0x20a>
 80021f4:	2330      	movs	r3, #48	; 0x30
 80021f6:	3e01      	subs	r6, #1
 80021f8:	7033      	strb	r3, [r6, #0]
 80021fa:	9b04      	ldr	r3, [sp, #16]
 80021fc:	1b9b      	subs	r3, r3, r6
 80021fe:	6123      	str	r3, [r4, #16]
 8002200:	9b07      	ldr	r3, [sp, #28]
 8002202:	aa09      	add	r2, sp, #36	; 0x24
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	0021      	movs	r1, r4
 8002208:	9b06      	ldr	r3, [sp, #24]
 800220a:	9805      	ldr	r0, [sp, #20]
 800220c:	f7ff fe82 	bl	8001f14 <_printf_common>
 8002210:	1c43      	adds	r3, r0, #1
 8002212:	d1b3      	bne.n	800217c <_printf_i+0x18c>
 8002214:	2001      	movs	r0, #1
 8002216:	4240      	negs	r0, r0
 8002218:	b00b      	add	sp, #44	; 0x2c
 800221a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800221c:	08002384 	.word	0x08002384
 8002220:	08002373 	.word	0x08002373

08002224 <memchr>:
 8002224:	b2c9      	uxtb	r1, r1
 8002226:	1882      	adds	r2, r0, r2
 8002228:	4290      	cmp	r0, r2
 800222a:	d101      	bne.n	8002230 <memchr+0xc>
 800222c:	2000      	movs	r0, #0
 800222e:	4770      	bx	lr
 8002230:	7803      	ldrb	r3, [r0, #0]
 8002232:	428b      	cmp	r3, r1
 8002234:	d0fb      	beq.n	800222e <memchr+0xa>
 8002236:	3001      	adds	r0, #1
 8002238:	e7f6      	b.n	8002228 <memchr+0x4>

0800223a <memmove>:
 800223a:	b510      	push	{r4, lr}
 800223c:	4288      	cmp	r0, r1
 800223e:	d902      	bls.n	8002246 <memmove+0xc>
 8002240:	188b      	adds	r3, r1, r2
 8002242:	4298      	cmp	r0, r3
 8002244:	d308      	bcc.n	8002258 <memmove+0x1e>
 8002246:	2300      	movs	r3, #0
 8002248:	429a      	cmp	r2, r3
 800224a:	d007      	beq.n	800225c <memmove+0x22>
 800224c:	5ccc      	ldrb	r4, [r1, r3]
 800224e:	54c4      	strb	r4, [r0, r3]
 8002250:	3301      	adds	r3, #1
 8002252:	e7f9      	b.n	8002248 <memmove+0xe>
 8002254:	5c8b      	ldrb	r3, [r1, r2]
 8002256:	5483      	strb	r3, [r0, r2]
 8002258:	3a01      	subs	r2, #1
 800225a:	d2fb      	bcs.n	8002254 <memmove+0x1a>
 800225c:	bd10      	pop	{r4, pc}

0800225e <_realloc_r>:
 800225e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002260:	0007      	movs	r7, r0
 8002262:	000d      	movs	r5, r1
 8002264:	0016      	movs	r6, r2
 8002266:	2900      	cmp	r1, #0
 8002268:	d105      	bne.n	8002276 <_realloc_r+0x18>
 800226a:	0011      	movs	r1, r2
 800226c:	f7ff fc50 	bl	8001b10 <_malloc_r>
 8002270:	0004      	movs	r4, r0
 8002272:	0020      	movs	r0, r4
 8002274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002276:	2a00      	cmp	r2, #0
 8002278:	d103      	bne.n	8002282 <_realloc_r+0x24>
 800227a:	f7ff fbff 	bl	8001a7c <_free_r>
 800227e:	0034      	movs	r4, r6
 8002280:	e7f7      	b.n	8002272 <_realloc_r+0x14>
 8002282:	f000 f812 	bl	80022aa <_malloc_usable_size_r>
 8002286:	002c      	movs	r4, r5
 8002288:	4286      	cmp	r6, r0
 800228a:	d9f2      	bls.n	8002272 <_realloc_r+0x14>
 800228c:	0031      	movs	r1, r6
 800228e:	0038      	movs	r0, r7
 8002290:	f7ff fc3e 	bl	8001b10 <_malloc_r>
 8002294:	1e04      	subs	r4, r0, #0
 8002296:	d0ec      	beq.n	8002272 <_realloc_r+0x14>
 8002298:	0029      	movs	r1, r5
 800229a:	0032      	movs	r2, r6
 800229c:	f7ff fbe4 	bl	8001a68 <memcpy>
 80022a0:	0029      	movs	r1, r5
 80022a2:	0038      	movs	r0, r7
 80022a4:	f7ff fbea 	bl	8001a7c <_free_r>
 80022a8:	e7e3      	b.n	8002272 <_realloc_r+0x14>

080022aa <_malloc_usable_size_r>:
 80022aa:	1f0b      	subs	r3, r1, #4
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	1f18      	subs	r0, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	da01      	bge.n	80022b8 <_malloc_usable_size_r+0xe>
 80022b4:	580b      	ldr	r3, [r1, r0]
 80022b6:	18c0      	adds	r0, r0, r3
 80022b8:	4770      	bx	lr
	...

080022bc <_sbrk>:
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <_sbrk+0x18>)
 80022be:	0002      	movs	r2, r0
 80022c0:	6819      	ldr	r1, [r3, #0]
 80022c2:	2900      	cmp	r1, #0
 80022c4:	d101      	bne.n	80022ca <_sbrk+0xe>
 80022c6:	4904      	ldr	r1, [pc, #16]	; (80022d8 <_sbrk+0x1c>)
 80022c8:	6019      	str	r1, [r3, #0]
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	1882      	adds	r2, r0, r2
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	4770      	bx	lr
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	2000008c 	.word	0x2000008c
 80022d8:	20000154 	.word	0x20000154

080022dc <_init>:
 80022dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022e2:	bc08      	pop	{r3}
 80022e4:	469e      	mov	lr, r3
 80022e6:	4770      	bx	lr

080022e8 <_fini>:
 80022e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ee:	bc08      	pop	{r3}
 80022f0:	469e      	mov	lr, r3
 80022f2:	4770      	bx	lr
