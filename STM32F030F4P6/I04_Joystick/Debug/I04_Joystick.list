
I04_Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001890  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001950  08001950  00011950  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080019a0  080019a0  000119a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080019a4  080019a4  000119a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080019a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e8  20000004  080019ac  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000ec  080019ac  000200ec  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c5f5  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d65  00000000  00000000  0002c621  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ede  00000000  00000000  0002e386  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000580  00000000  00000000  00031268  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000718  00000000  00000000  000317e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000039b3  00000000  00000000  00031f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000021b7  00000000  00000000  000358b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00037a6a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000ee8  00000000  00000000  00037ae8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001938 	.word	0x08001938

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001938 	.word	0x08001938

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000244:	b510      	push	{r4, lr}
 8000246:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000248:	f000 fee8 	bl	800101c <HAL_RCC_GetHCLKFreq>
 800024c:	21fa      	movs	r1, #250	; 0xfa
 800024e:	0089      	lsls	r1, r1, #2
 8000250:	f7ff ff6c 	bl	800012c <__udivsi3>
 8000254:	f000 fb5a 	bl	800090c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000258:	2001      	movs	r0, #1
 800025a:	2200      	movs	r2, #0
 800025c:	0021      	movs	r1, r4
 800025e:	4240      	negs	r0, r0
 8000260:	f000 fb1a 	bl	8000898 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000264:	2000      	movs	r0, #0
 8000266:	bd10      	pop	{r4, pc}

08000268 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000268:	2310      	movs	r3, #16
 800026a:	4a06      	ldr	r2, [pc, #24]	; (8000284 <HAL_Init+0x1c>)
{
 800026c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000270:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000272:	430b      	orrs	r3, r1
 8000274:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000276:	f7ff ffe5 	bl	8000244 <HAL_InitTick>
  HAL_MspInit();
 800027a:	f001 fa4f 	bl	800171c <HAL_MspInit>
}
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	40022000 	.word	0x40022000

08000288 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000288:	4a02      	ldr	r2, [pc, #8]	; (8000294 <HAL_IncTick+0xc>)
 800028a:	6813      	ldr	r3, [r2, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	4770      	bx	lr
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	20000020 	.word	0x20000020

08000298 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_GetTick+0x8>)
 800029a:	6818      	ldr	r0, [r3, #0]
}
 800029c:	4770      	bx	lr
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	20000020 	.word	0x20000020

080002a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80002a6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002a8:	f7ff fff6 	bl	8000298 <HAL_GetTick>
  uint32_t wait = Delay;
 80002ac:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002ae:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002b0:	1c63      	adds	r3, r4, #1
 80002b2:	1e5a      	subs	r2, r3, #1
 80002b4:	4193      	sbcs	r3, r2
 80002b6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002b8:	f7ff ffee 	bl	8000298 <HAL_GetTick>
 80002bc:	1b40      	subs	r0, r0, r5
 80002be:	42a0      	cmp	r0, r4
 80002c0:	d3fa      	bcc.n	80002b8 <HAL_Delay+0x14>
  {
  }
}
 80002c2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002c4 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002c4:	2103      	movs	r1, #3
 80002c6:	6803      	ldr	r3, [r0, #0]
{
 80002c8:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002ca:	689a      	ldr	r2, [r3, #8]
{
 80002cc:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002ce:	400a      	ands	r2, r1
 80002d0:	2a01      	cmp	r2, #1
 80002d2:	d001      	beq.n	80002d8 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80002d4:	2000      	movs	r0, #0
}
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002d8:	6819      	ldr	r1, [r3, #0]
 80002da:	4211      	tst	r1, r2
 80002dc:	d102      	bne.n	80002e4 <ADC_Disable+0x20>
 80002de:	68da      	ldr	r2, [r3, #12]
 80002e0:	0412      	lsls	r2, r2, #16
 80002e2:	d5f7      	bpl.n	80002d4 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80002e4:	2205      	movs	r2, #5
 80002e6:	689d      	ldr	r5, [r3, #8]
 80002e8:	4015      	ands	r5, r2
 80002ea:	2d01      	cmp	r5, #1
 80002ec:	d11a      	bne.n	8000324 <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 80002ee:	2202      	movs	r2, #2
 80002f0:	6899      	ldr	r1, [r3, #8]
 80002f2:	430a      	orrs	r2, r1
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	2203      	movs	r2, #3
 80002f8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80002fa:	f7ff ffcd 	bl	8000298 <HAL_GetTick>
 80002fe:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000300:	6823      	ldr	r3, [r4, #0]
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	422b      	tst	r3, r5
 8000306:	d0e5      	beq.n	80002d4 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000308:	f7ff ffc6 	bl	8000298 <HAL_GetTick>
 800030c:	1b80      	subs	r0, r0, r6
 800030e:	2802      	cmp	r0, #2
 8000310:	d9f6      	bls.n	8000300 <ADC_Disable+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000312:	2310      	movs	r3, #16
 8000314:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000316:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000318:	4313      	orrs	r3, r2
 800031a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800031c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800031e:	431d      	orrs	r5, r3
 8000320:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000322:	e7d8      	b.n	80002d6 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000324:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000326:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000328:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800032a:	4313      	orrs	r3, r2
 800032c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800032e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000330:	4303      	orrs	r3, r0
 8000332:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000334:	e7cf      	b.n	80002d6 <ADC_Disable+0x12>
	...

08000338 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000338:	2300      	movs	r3, #0
{
 800033a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800033c:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 800033e:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000340:	6803      	ldr	r3, [r0, #0]
{
 8000342:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000344:	689a      	ldr	r2, [r3, #8]
 8000346:	400a      	ands	r2, r1
 8000348:	2a01      	cmp	r2, #1
 800034a:	d107      	bne.n	800035c <ADC_Enable+0x24>
 800034c:	6819      	ldr	r1, [r3, #0]
 800034e:	4211      	tst	r1, r2
 8000350:	d001      	beq.n	8000356 <ADC_Enable+0x1e>
  return HAL_OK;
 8000352:	2000      	movs	r0, #0
}
 8000354:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000356:	68da      	ldr	r2, [r3, #12]
 8000358:	0412      	lsls	r2, r2, #16
 800035a:	d4fa      	bmi.n	8000352 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800035c:	6899      	ldr	r1, [r3, #8]
 800035e:	4a19      	ldr	r2, [pc, #100]	; (80003c4 <ADC_Enable+0x8c>)
 8000360:	4211      	tst	r1, r2
 8000362:	d008      	beq.n	8000376 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000364:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000366:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000368:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800036a:	4313      	orrs	r3, r2
 800036c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800036e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000370:	4303      	orrs	r3, r0
 8000372:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000374:	e7ee      	b.n	8000354 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8000376:	2201      	movs	r2, #1
 8000378:	6899      	ldr	r1, [r3, #8]
 800037a:	430a      	orrs	r2, r1
 800037c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <ADC_Enable+0x90>)
 8000380:	4912      	ldr	r1, [pc, #72]	; (80003cc <ADC_Enable+0x94>)
 8000382:	6818      	ldr	r0, [r3, #0]
 8000384:	f7ff fed2 	bl	800012c <__udivsi3>
 8000388:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800038a:	9b01      	ldr	r3, [sp, #4]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d115      	bne.n	80003bc <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8000390:	f7ff ff82 	bl	8000298 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000394:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8000396:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000398:	6823      	ldr	r3, [r4, #0]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	422b      	tst	r3, r5
 800039e:	d1d8      	bne.n	8000352 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80003a0:	f7ff ff7a 	bl	8000298 <HAL_GetTick>
 80003a4:	1b80      	subs	r0, r0, r6
 80003a6:	2802      	cmp	r0, #2
 80003a8:	d9f6      	bls.n	8000398 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003aa:	2310      	movs	r3, #16
 80003ac:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 80003ae:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003b0:	4313      	orrs	r3, r2
 80003b2:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80003b6:	432b      	orrs	r3, r5
 80003b8:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80003ba:	e7cb      	b.n	8000354 <ADC_Enable+0x1c>
      wait_loop_index--;
 80003bc:	9b01      	ldr	r3, [sp, #4]
 80003be:	3b01      	subs	r3, #1
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	e7e2      	b.n	800038a <ADC_Enable+0x52>
 80003c4:	80000017 	.word	0x80000017
 80003c8:	20000000 	.word	0x20000000
 80003cc:	000f4240 	.word	0x000f4240

080003d0 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80003d0:	2204      	movs	r2, #4
 80003d2:	6803      	ldr	r3, [r0, #0]
{
 80003d4:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80003d6:	6899      	ldr	r1, [r3, #8]
{
 80003d8:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80003da:	4211      	tst	r1, r2
 80003dc:	d101      	bne.n	80003e2 <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80003de:	2000      	movs	r0, #0
}
 80003e0:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80003e2:	6899      	ldr	r1, [r3, #8]
 80003e4:	4211      	tst	r1, r2
 80003e6:	d006      	beq.n	80003f6 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80003e8:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80003ea:	0792      	lsls	r2, r2, #30
 80003ec:	d403      	bmi.n	80003f6 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80003ee:	2210      	movs	r2, #16
 80003f0:	6899      	ldr	r1, [r3, #8]
 80003f2:	430a      	orrs	r2, r1
 80003f4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80003f6:	f7ff ff4f 	bl	8000298 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80003fa:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 80003fc:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80003fe:	6823      	ldr	r3, [r4, #0]
 8000400:	689b      	ldr	r3, [r3, #8]
 8000402:	422b      	tst	r3, r5
 8000404:	d0eb      	beq.n	80003de <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000406:	f7ff ff47 	bl	8000298 <HAL_GetTick>
 800040a:	1b80      	subs	r0, r0, r6
 800040c:	2802      	cmp	r0, #2
 800040e:	d9f6      	bls.n	80003fe <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000410:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000412:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000414:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000416:	4313      	orrs	r3, r2
 8000418:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800041a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800041c:	4303      	orrs	r3, r0
 800041e:	64a3      	str	r3, [r4, #72]	; 0x48
 8000420:	e7de      	b.n	80003e0 <ADC_ConversionStop+0x10>
	...

08000424 <HAL_ADC_Init>:
{
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000428:	2001      	movs	r0, #1
  if(hadc == NULL)
 800042a:	2c00      	cmp	r4, #0
 800042c:	d072      	beq.n	8000514 <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800042e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000430:	2b00      	cmp	r3, #0
 8000432:	d106      	bne.n	8000442 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8000434:	0022      	movs	r2, r4
 8000436:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8000438:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 800043a:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 800043c:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800043e:	f001 f98b 	bl	8001758 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000442:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000444:	06db      	lsls	r3, r3, #27
 8000446:	d500      	bpl.n	800044a <HAL_ADC_Init+0x26>
 8000448:	e079      	b.n	800053e <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800044a:	2204      	movs	r2, #4
 800044c:	6823      	ldr	r3, [r4, #0]
 800044e:	6898      	ldr	r0, [r3, #8]
 8000450:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000452:	d000      	beq.n	8000456 <HAL_ADC_Init+0x32>
 8000454:	e073      	b.n	800053e <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 8000456:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000458:	4942      	ldr	r1, [pc, #264]	; (8000564 <HAL_ADC_Init+0x140>)
 800045a:	4011      	ands	r1, r2
 800045c:	2202      	movs	r2, #2
 800045e:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000460:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8000462:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000464:	689a      	ldr	r2, [r3, #8]
 8000466:	400a      	ands	r2, r1
 8000468:	2a01      	cmp	r2, #1
 800046a:	d000      	beq.n	800046e <HAL_ADC_Init+0x4a>
 800046c:	e06d      	b.n	800054a <HAL_ADC_Init+0x126>
 800046e:	6819      	ldr	r1, [r3, #0]
 8000470:	4211      	tst	r1, r2
 8000472:	d102      	bne.n	800047a <HAL_ADC_Init+0x56>
 8000474:	68da      	ldr	r2, [r3, #12]
 8000476:	0412      	lsls	r2, r2, #16
 8000478:	d567      	bpl.n	800054a <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800047a:	68da      	ldr	r2, [r3, #12]
 800047c:	493a      	ldr	r1, [pc, #232]	; (8000568 <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800047e:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000480:	400a      	ands	r2, r1
 8000482:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000484:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000486:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000488:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800048a:	69e2      	ldr	r2, [r4, #28]
 800048c:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800048e:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000490:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000492:	3a01      	subs	r2, #1
 8000494:	1e56      	subs	r6, r2, #1
 8000496:	41b2      	sbcs	r2, r6
 8000498:	0316      	lsls	r6, r2, #12
 800049a:	68e2      	ldr	r2, [r4, #12]
 800049c:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800049e:	6922      	ldr	r2, [r4, #16]
 80004a0:	430f      	orrs	r7, r1
 80004a2:	2a02      	cmp	r2, #2
 80004a4:	d100      	bne.n	80004a8 <HAL_ADC_Init+0x84>
 80004a6:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80004a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80004ac:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80004ae:	433a      	orrs	r2, r7
 80004b0:	4332      	orrs	r2, r6
 80004b2:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004b4:	2901      	cmp	r1, #1
 80004b6:	d104      	bne.n	80004c2 <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	d12c      	bne.n	8000516 <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	0249      	lsls	r1, r1, #9
 80004c0:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80004c2:	20c2      	movs	r0, #194	; 0xc2
 80004c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80004c6:	30ff      	adds	r0, #255	; 0xff
 80004c8:	4281      	cmp	r1, r0
 80004ca:	d002      	beq.n	80004d2 <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80004cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80004ce:	4301      	orrs	r1, r0
 80004d0:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80004d2:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80004d4:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80004d6:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80004d8:	4311      	orrs	r1, r2
 80004da:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80004dc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80004de:	4281      	cmp	r1, r0
 80004e0:	d002      	beq.n	80004e8 <HAL_ADC_Init+0xc4>
 80004e2:	1e48      	subs	r0, r1, #1
 80004e4:	2806      	cmp	r0, #6
 80004e6:	d807      	bhi.n	80004f8 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80004e8:	2507      	movs	r5, #7
 80004ea:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80004ec:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80004ee:	43a8      	bics	r0, r5
 80004f0:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80004f2:	6958      	ldr	r0, [r3, #20]
 80004f4:	4301      	orrs	r1, r0
 80004f6:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	491c      	ldr	r1, [pc, #112]	; (800056c <HAL_ADC_Init+0x148>)
 80004fc:	400b      	ands	r3, r1
 80004fe:	429a      	cmp	r2, r3
 8000500:	d111      	bne.n	8000526 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 8000502:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000504:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000506:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000508:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800050a:	4393      	bics	r3, r2
 800050c:	001a      	movs	r2, r3
 800050e:	2301      	movs	r3, #1
 8000510:	4313      	orrs	r3, r2
 8000512:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000516:	2020      	movs	r0, #32
 8000518:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800051a:	4328      	orrs	r0, r5
 800051c:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800051e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000520:	4301      	orrs	r1, r0
 8000522:	64a1      	str	r1, [r4, #72]	; 0x48
 8000524:	e7cd      	b.n	80004c2 <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 8000526:	2212      	movs	r2, #18
 8000528:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800052a:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800052c:	4393      	bics	r3, r2
 800052e:	001a      	movs	r2, r3
 8000530:	2310      	movs	r3, #16
 8000532:	4313      	orrs	r3, r2
 8000534:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000536:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000538:	4303      	orrs	r3, r0
 800053a:	64a3      	str	r3, [r4, #72]	; 0x48
 800053c:	e7ea      	b.n	8000514 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800053e:	2310      	movs	r3, #16
 8000540:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000542:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000544:	4313      	orrs	r3, r2
 8000546:	6463      	str	r3, [r4, #68]	; 0x44
 8000548:	e7e4      	b.n	8000514 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 800054a:	2118      	movs	r1, #24
 800054c:	68da      	ldr	r2, [r3, #12]
 800054e:	438a      	bics	r2, r1
 8000550:	68a1      	ldr	r1, [r4, #8]
 8000552:	430a      	orrs	r2, r1
 8000554:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000556:	6919      	ldr	r1, [r3, #16]
 8000558:	6862      	ldr	r2, [r4, #4]
 800055a:	0089      	lsls	r1, r1, #2
 800055c:	0889      	lsrs	r1, r1, #2
 800055e:	4311      	orrs	r1, r2
 8000560:	6119      	str	r1, [r3, #16]
 8000562:	e78a      	b.n	800047a <HAL_ADC_Init+0x56>
 8000564:	fffffefd 	.word	0xfffffefd
 8000568:	fffe0219 	.word	0xfffe0219
 800056c:	833fffe7 	.word	0x833fffe7

08000570 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000570:	6803      	ldr	r3, [r0, #0]
{
 8000572:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000574:	689b      	ldr	r3, [r3, #8]
{
 8000576:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8000578:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800057a:	075b      	lsls	r3, r3, #29
 800057c:	d41a      	bmi.n	80005b4 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 800057e:	0025      	movs	r5, r4
 8000580:	3540      	adds	r5, #64	; 0x40
 8000582:	782b      	ldrb	r3, [r5, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d015      	beq.n	80005b4 <HAL_ADC_Start+0x44>
 8000588:	2301      	movs	r3, #1
 800058a:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800058c:	69e3      	ldr	r3, [r4, #28]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d111      	bne.n	80005b6 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8000592:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8000596:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000598:	401a      	ands	r2, r3
 800059a:	2380      	movs	r3, #128	; 0x80
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005a0:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80005a2:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005a4:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 80005a6:	64a0      	str	r0, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80005a8:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005aa:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80005ac:	6899      	ldr	r1, [r3, #8]
 80005ae:	3a18      	subs	r2, #24
 80005b0:	430a      	orrs	r2, r1
 80005b2:	609a      	str	r2, [r3, #8]
}
 80005b4:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80005b6:	0020      	movs	r0, r4
 80005b8:	f7ff febe 	bl	8000338 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80005bc:	2800      	cmp	r0, #0
 80005be:	d1f9      	bne.n	80005b4 <HAL_ADC_Start+0x44>
 80005c0:	e7e7      	b.n	8000592 <HAL_ADC_Start+0x22>
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	fffff0fe 	.word	0xfffff0fe

080005c8 <HAL_ADC_Stop>:
{ 
 80005c8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80005ca:	0006      	movs	r6, r0
 80005cc:	3640      	adds	r6, #64	; 0x40
 80005ce:	7833      	ldrb	r3, [r6, #0]
{ 
 80005d0:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80005d2:	2002      	movs	r0, #2
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d012      	beq.n	80005fe <HAL_ADC_Stop+0x36>
 80005d8:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 80005da:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 80005dc:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80005de:	f7ff fef7 	bl	80003d0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80005e2:	2800      	cmp	r0, #0
 80005e4:	d109      	bne.n	80005fa <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 80005e6:	0020      	movs	r0, r4
 80005e8:	f7ff fe6c 	bl	80002c4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d104      	bne.n	80005fa <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 80005f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005f2:	4a03      	ldr	r2, [pc, #12]	; (8000600 <HAL_ADC_Stop+0x38>)
 80005f4:	4013      	ands	r3, r2
 80005f6:	431d      	orrs	r5, r3
 80005f8:	6465      	str	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80005fa:	2300      	movs	r3, #0
 80005fc:	7033      	strb	r3, [r6, #0]
}
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	fffffefe 	.word	0xfffffefe

08000604 <HAL_ADC_PollForConversion>:
{
 8000604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000606:	6945      	ldr	r5, [r0, #20]
{
 8000608:	0004      	movs	r4, r0
 800060a:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800060c:	2d08      	cmp	r5, #8
 800060e:	d00d      	beq.n	800062c <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000610:	6803      	ldr	r3, [r0, #0]
 8000612:	2001      	movs	r0, #1
 8000614:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000616:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000618:	4203      	tst	r3, r0
 800061a:	d007      	beq.n	800062c <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800061c:	2320      	movs	r3, #32
 800061e:	6c62      	ldr	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8000620:	3440      	adds	r4, #64	; 0x40
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000622:	4313      	orrs	r3, r2
 8000624:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8000626:	2300      	movs	r3, #0
 8000628:	7023      	strb	r3, [r4, #0]
}
 800062a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 800062c:	f7ff fe34 	bl	8000298 <HAL_GetTick>
 8000630:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000632:	6823      	ldr	r3, [r4, #0]
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	422a      	tst	r2, r5
 8000638:	d023      	beq.n	8000682 <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800063a:	2280      	movs	r2, #128	; 0x80
 800063c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800063e:	0092      	lsls	r2, r2, #2
 8000640:	430a      	orrs	r2, r1
 8000642:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000644:	22c0      	movs	r2, #192	; 0xc0
 8000646:	68d9      	ldr	r1, [r3, #12]
 8000648:	0112      	lsls	r2, r2, #4
 800064a:	4211      	tst	r1, r2
 800064c:	d112      	bne.n	8000674 <HAL_ADC_PollForConversion+0x70>
 800064e:	6a22      	ldr	r2, [r4, #32]
 8000650:	2a00      	cmp	r2, #0
 8000652:	d10f      	bne.n	8000674 <HAL_ADC_PollForConversion+0x70>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	0712      	lsls	r2, r2, #28
 8000658:	d50c      	bpl.n	8000674 <HAL_ADC_PollForConversion+0x70>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	0752      	lsls	r2, r2, #29
 800065e:	d423      	bmi.n	80006a8 <HAL_ADC_PollForConversion+0xa4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000660:	210c      	movs	r1, #12
 8000662:	685a      	ldr	r2, [r3, #4]
 8000664:	438a      	bics	r2, r1
 8000666:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8000668:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800066a:	4914      	ldr	r1, [pc, #80]	; (80006bc <HAL_ADC_PollForConversion+0xb8>)
 800066c:	4011      	ands	r1, r2
 800066e:	2201      	movs	r2, #1
 8000670:	430a      	orrs	r2, r1
 8000672:	6462      	str	r2, [r4, #68]	; 0x44
  return HAL_OK;
 8000674:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000676:	69a2      	ldr	r2, [r4, #24]
 8000678:	4282      	cmp	r2, r0
 800067a:	d1d6      	bne.n	800062a <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800067c:	220c      	movs	r2, #12
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	e7d3      	b.n	800062a <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8000682:	1c72      	adds	r2, r6, #1
 8000684:	d0d6      	beq.n	8000634 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000686:	2e00      	cmp	r6, #0
 8000688:	d108      	bne.n	800069c <HAL_ADC_PollForConversion+0x98>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800068a:	2304      	movs	r3, #4
 800068c:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800068e:	3440      	adds	r4, #64	; 0x40
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000690:	4313      	orrs	r3, r2
 8000692:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8000694:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8000696:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8000698:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800069a:	e7c6      	b.n	800062a <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800069c:	f7ff fdfc 	bl	8000298 <HAL_GetTick>
 80006a0:	1bc0      	subs	r0, r0, r7
 80006a2:	4286      	cmp	r6, r0
 80006a4:	d2c5      	bcs.n	8000632 <HAL_ADC_PollForConversion+0x2e>
 80006a6:	e7f0      	b.n	800068a <HAL_ADC_PollForConversion+0x86>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006a8:	2220      	movs	r2, #32
 80006aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80006ac:	430a      	orrs	r2, r1
 80006ae:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006b0:	2201      	movs	r2, #1
 80006b2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80006b4:	430a      	orrs	r2, r1
 80006b6:	64a2      	str	r2, [r4, #72]	; 0x48
 80006b8:	e7dc      	b.n	8000674 <HAL_ADC_PollForConversion+0x70>
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	fffffefe 	.word	0xfffffefe

080006c0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80006c0:	6803      	ldr	r3, [r0, #0]
 80006c2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80006c4:	4770      	bx	lr

080006c6 <HAL_ADC_ConvCpltCallback>:
 80006c6:	4770      	bx	lr

080006c8 <HAL_ADC_LevelOutOfWindowCallback>:
 80006c8:	4770      	bx	lr

080006ca <HAL_ADC_ErrorCallback>:
}
 80006ca:	4770      	bx	lr

080006cc <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80006cc:	2204      	movs	r2, #4
 80006ce:	6803      	ldr	r3, [r0, #0]
{
 80006d0:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80006d2:	6819      	ldr	r1, [r3, #0]
{
 80006d4:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80006d6:	4211      	tst	r1, r2
 80006d8:	d002      	beq.n	80006e0 <HAL_ADC_IRQHandler+0x14>
 80006da:	6859      	ldr	r1, [r3, #4]
 80006dc:	4211      	tst	r1, r2
 80006de:	d106      	bne.n	80006ee <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80006e0:	2208      	movs	r2, #8
 80006e2:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80006e4:	4211      	tst	r1, r2
 80006e6:	d028      	beq.n	800073a <HAL_ADC_IRQHandler+0x6e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80006e8:	6859      	ldr	r1, [r3, #4]
 80006ea:	4211      	tst	r1, r2
 80006ec:	d025      	beq.n	800073a <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006ee:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80006f0:	06d2      	lsls	r2, r2, #27
 80006f2:	d404      	bmi.n	80006fe <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80006f8:	0092      	lsls	r2, r2, #2
 80006fa:	430a      	orrs	r2, r1
 80006fc:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006fe:	22c0      	movs	r2, #192	; 0xc0
 8000700:	68d9      	ldr	r1, [r3, #12]
 8000702:	0112      	lsls	r2, r2, #4
 8000704:	4211      	tst	r1, r2
 8000706:	d112      	bne.n	800072e <HAL_ADC_IRQHandler+0x62>
 8000708:	6a22      	ldr	r2, [r4, #32]
 800070a:	2a00      	cmp	r2, #0
 800070c:	d10f      	bne.n	800072e <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	0712      	lsls	r2, r2, #28
 8000712:	d50c      	bpl.n	800072e <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000714:	689a      	ldr	r2, [r3, #8]
 8000716:	0752      	lsls	r2, r2, #29
 8000718:	d43c      	bmi.n	8000794 <HAL_ADC_IRQHandler+0xc8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800071a:	210c      	movs	r1, #12
 800071c:	685a      	ldr	r2, [r3, #4]
 800071e:	438a      	bics	r2, r1
 8000720:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8000722:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000724:	4a20      	ldr	r2, [pc, #128]	; (80007a8 <HAL_ADC_IRQHandler+0xdc>)
 8000726:	401a      	ands	r2, r3
 8000728:	2301      	movs	r3, #1
 800072a:	4313      	orrs	r3, r2
 800072c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 800072e:	0020      	movs	r0, r4
 8000730:	f7ff ffc9 	bl	80006c6 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000734:	220c      	movs	r2, #12
 8000736:	6823      	ldr	r3, [r4, #0]
 8000738:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800073a:	2580      	movs	r5, #128	; 0x80
 800073c:	6823      	ldr	r3, [r4, #0]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	422a      	tst	r2, r5
 8000742:	d00c      	beq.n	800075e <HAL_ADC_IRQHandler+0x92>
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	422b      	tst	r3, r5
 8000748:	d009      	beq.n	800075e <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800074e:	025b      	lsls	r3, r3, #9
 8000750:	4313      	orrs	r3, r2
 8000752:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000754:	0020      	movs	r0, r4
 8000756:	f7ff ffb7 	bl	80006c8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800075a:	6823      	ldr	r3, [r4, #0]
 800075c:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800075e:	2210      	movs	r2, #16
 8000760:	6823      	ldr	r3, [r4, #0]
 8000762:	6819      	ldr	r1, [r3, #0]
 8000764:	4211      	tst	r1, r2
 8000766:	d014      	beq.n	8000792 <HAL_ADC_IRQHandler+0xc6>
 8000768:	6859      	ldr	r1, [r3, #4]
 800076a:	4211      	tst	r1, r2
 800076c:	d011      	beq.n	8000792 <HAL_ADC_IRQHandler+0xc6>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800076e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000770:	2a01      	cmp	r2, #1
 8000772:	d002      	beq.n	800077a <HAL_ADC_IRQHandler+0xae>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8000774:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000776:	07d2      	lsls	r2, r2, #31
 8000778:	d508      	bpl.n	800078c <HAL_ADC_IRQHandler+0xc0>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800077a:	2202      	movs	r2, #2
 800077c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 800077e:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000780:	430a      	orrs	r2, r1
 8000782:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000784:	2210      	movs	r2, #16
 8000786:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8000788:	f7ff ff9f 	bl	80006ca <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800078c:	2210      	movs	r2, #16
 800078e:	6823      	ldr	r3, [r4, #0]
 8000790:	601a      	str	r2, [r3, #0]
}
 8000792:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000794:	2320      	movs	r3, #32
 8000796:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000798:	4313      	orrs	r3, r2
 800079a:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800079c:	2301      	movs	r3, #1
 800079e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80007a0:	4313      	orrs	r3, r2
 80007a2:	64a3      	str	r3, [r4, #72]	; 0x48
 80007a4:	e7c3      	b.n	800072e <HAL_ADC_IRQHandler+0x62>
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	fffffefe 	.word	0xfffffefe

080007ac <HAL_ADC_ConfigChannel>:
{
 80007ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 80007ae:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 80007b0:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80007b2:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80007b4:	3440      	adds	r4, #64	; 0x40
 80007b6:	7823      	ldrb	r3, [r4, #0]
{
 80007b8:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 80007ba:	2002      	movs	r0, #2
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d02b      	beq.n	8000818 <HAL_ADC_ConfigChannel+0x6c>
 80007c0:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007c2:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80007c4:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007c6:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 80007c8:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007ca:	0740      	lsls	r0, r0, #29
 80007cc:	d452      	bmi.n	8000874 <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank != ADC_RANK_NONE)
 80007ce:	482c      	ldr	r0, [pc, #176]	; (8000880 <HAL_ADC_ConfigChannel+0xd4>)
 80007d0:	684f      	ldr	r7, [r1, #4]
 80007d2:	680d      	ldr	r5, [r1, #0]
 80007d4:	4287      	cmp	r7, r0
 80007d6:	d03b      	beq.n	8000850 <HAL_ADC_ConfigChannel+0xa4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80007d8:	40ab      	lsls	r3, r5
 80007da:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80007dc:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80007de:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80007e0:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80007e2:	4338      	orrs	r0, r7
 80007e4:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80007e6:	429e      	cmp	r6, r3
 80007e8:	d00f      	beq.n	800080a <HAL_ADC_ConfigChannel+0x5e>
 80007ea:	3e01      	subs	r6, #1
 80007ec:	2e06      	cmp	r6, #6
 80007ee:	d90c      	bls.n	800080a <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80007f0:	688b      	ldr	r3, [r1, #8]
 80007f2:	2107      	movs	r1, #7
 80007f4:	6950      	ldr	r0, [r2, #20]
 80007f6:	4008      	ands	r0, r1
 80007f8:	4283      	cmp	r3, r0
 80007fa:	d006      	beq.n	800080a <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80007fc:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80007fe:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000800:	4388      	bics	r0, r1
 8000802:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000804:	6950      	ldr	r0, [r2, #20]
 8000806:	4303      	orrs	r3, r0
 8000808:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800080a:	002b      	movs	r3, r5
 800080c:	3b10      	subs	r3, #16
 800080e:	2b01      	cmp	r3, #1
 8000810:	d903      	bls.n	800081a <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000812:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000814:	2300      	movs	r3, #0
 8000816:	7023      	strb	r3, [r4, #0]
}
 8000818:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <HAL_ADC_ConfigChannel+0xd8>)
 800081c:	2280      	movs	r2, #128	; 0x80
 800081e:	6819      	ldr	r1, [r3, #0]
 8000820:	2d10      	cmp	r5, #16
 8000822:	d013      	beq.n	800084c <HAL_ADC_ConfigChannel+0xa0>
 8000824:	03d2      	lsls	r2, r2, #15
 8000826:	430a      	orrs	r2, r1
 8000828:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800082a:	2d10      	cmp	r5, #16
 800082c:	d1f1      	bne.n	8000812 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <HAL_ADC_ConfigChannel+0xdc>)
 8000830:	4916      	ldr	r1, [pc, #88]	; (800088c <HAL_ADC_ConfigChannel+0xe0>)
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	f7ff fc7a 	bl	800012c <__udivsi3>
 8000838:	230a      	movs	r3, #10
 800083a:	4358      	muls	r0, r3
 800083c:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 800083e:	9b01      	ldr	r3, [sp, #4]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d0e6      	beq.n	8000812 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8000844:	9b01      	ldr	r3, [sp, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	9301      	str	r3, [sp, #4]
 800084a:	e7f8      	b.n	800083e <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800084c:	0412      	lsls	r2, r2, #16
 800084e:	e7ea      	b.n	8000826 <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000850:	40ab      	lsls	r3, r5
 8000852:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000854:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000856:	002b      	movs	r3, r5
 8000858:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800085a:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800085c:	2b01      	cmp	r3, #1
 800085e:	d8d8      	bhi.n	8000812 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_ADC_ConfigChannel+0xd8>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	2d10      	cmp	r5, #16
 8000866:	d003      	beq.n	8000870 <HAL_ADC_ConfigChannel+0xc4>
 8000868:	4909      	ldr	r1, [pc, #36]	; (8000890 <HAL_ADC_ConfigChannel+0xe4>)
 800086a:	400a      	ands	r2, r1
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	e7d0      	b.n	8000812 <HAL_ADC_ConfigChannel+0x66>
 8000870:	4908      	ldr	r1, [pc, #32]	; (8000894 <HAL_ADC_ConfigChannel+0xe8>)
 8000872:	e7fa      	b.n	800086a <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000874:	2220      	movs	r2, #32
 8000876:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000878:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800087a:	430a      	orrs	r2, r1
 800087c:	646a      	str	r2, [r5, #68]	; 0x44
 800087e:	e7c9      	b.n	8000814 <HAL_ADC_ConfigChannel+0x68>
 8000880:	00001001 	.word	0x00001001
 8000884:	40012708 	.word	0x40012708
 8000888:	20000000 	.word	0x20000000
 800088c:	000f4240 	.word	0x000f4240
 8000890:	ffbfffff 	.word	0xffbfffff
 8000894:	ff7fffff 	.word	0xff7fffff

08000898 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000898:	b570      	push	{r4, r5, r6, lr}
 800089a:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800089c:	2800      	cmp	r0, #0
 800089e:	da14      	bge.n	80008ca <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a0:	230f      	movs	r3, #15
 80008a2:	b2c0      	uxtb	r0, r0
 80008a4:	4003      	ands	r3, r0
 80008a6:	3b08      	subs	r3, #8
 80008a8:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <HAL_NVIC_SetPriority+0x58>)
 80008aa:	089b      	lsrs	r3, r3, #2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	189b      	adds	r3, r3, r2
 80008b0:	2203      	movs	r2, #3
 80008b2:	4010      	ands	r0, r2
 80008b4:	4090      	lsls	r0, r2
 80008b6:	32fc      	adds	r2, #252	; 0xfc
 80008b8:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ba:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008bc:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008be:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c0:	69dc      	ldr	r4, [r3, #28]
 80008c2:	43ac      	bics	r4, r5
 80008c4:	4321      	orrs	r1, r4
 80008c6:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80008c8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ca:	2503      	movs	r5, #3
 80008cc:	0883      	lsrs	r3, r0, #2
 80008ce:	4028      	ands	r0, r5
 80008d0:	40a8      	lsls	r0, r5
 80008d2:	35fc      	adds	r5, #252	; 0xfc
 80008d4:	002e      	movs	r6, r5
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_NVIC_SetPriority+0x5c>)
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	189b      	adds	r3, r3, r2
 80008dc:	22c0      	movs	r2, #192	; 0xc0
 80008de:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008e0:	4029      	ands	r1, r5
 80008e2:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e4:	0092      	lsls	r2, r2, #2
 80008e6:	589c      	ldr	r4, [r3, r2]
 80008e8:	43b4      	bics	r4, r6
 80008ea:	4321      	orrs	r1, r4
 80008ec:	5099      	str	r1, [r3, r2]
 80008ee:	e7eb      	b.n	80008c8 <HAL_NVIC_SetPriority+0x30>
 80008f0:	e000ed00 	.word	0xe000ed00
 80008f4:	e000e100 	.word	0xe000e100

080008f8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008f8:	231f      	movs	r3, #31
 80008fa:	4018      	ands	r0, r3
 80008fc:	3b1e      	subs	r3, #30
 80008fe:	4083      	lsls	r3, r0
 8000900:	4a01      	ldr	r2, [pc, #4]	; (8000908 <HAL_NVIC_EnableIRQ+0x10>)
 8000902:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000904:	4770      	bx	lr
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	e000e100 	.word	0xe000e100

0800090c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	4a09      	ldr	r2, [pc, #36]	; (8000934 <HAL_SYSTICK_Config+0x28>)
 800090e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000910:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000912:	4293      	cmp	r3, r2
 8000914:	d80d      	bhi.n	8000932 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000916:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091a:	4808      	ldr	r0, [pc, #32]	; (800093c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091e:	6a03      	ldr	r3, [r0, #32]
 8000920:	0609      	lsls	r1, r1, #24
 8000922:	021b      	lsls	r3, r3, #8
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	430b      	orrs	r3, r1
 8000928:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000930:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000932:	4770      	bx	lr
 8000934:	00ffffff 	.word	0x00ffffff
 8000938:	e000e010 	.word	0xe000e010
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000942:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000944:	2804      	cmp	r0, #4
 8000946:	d102      	bne.n	800094e <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000948:	4310      	orrs	r0, r2
 800094a:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800094c:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800094e:	2104      	movs	r1, #4
 8000950:	438a      	bics	r2, r1
 8000952:	601a      	str	r2, [r3, #0]
}
 8000954:	e7fa      	b.n	800094c <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800095c:	4770      	bx	lr

0800095e <HAL_SYSTICK_IRQHandler>:
{
 800095e:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000960:	f7ff fffc 	bl	800095c <HAL_SYSTICK_Callback>
}
 8000964:	bd10      	pop	{r4, pc}
	...

08000968 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000968:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800096a:	680b      	ldr	r3, [r1, #0]
{ 
 800096c:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 800096e:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000970:	2300      	movs	r3, #0
{ 
 8000972:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000974:	9a02      	ldr	r2, [sp, #8]
 8000976:	40da      	lsrs	r2, r3
 8000978:	d101      	bne.n	800097e <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800097a:	b007      	add	sp, #28
 800097c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800097e:	2201      	movs	r2, #1
 8000980:	409a      	lsls	r2, r3
 8000982:	9203      	str	r2, [sp, #12]
 8000984:	9903      	ldr	r1, [sp, #12]
 8000986:	9a02      	ldr	r2, [sp, #8]
 8000988:	400a      	ands	r2, r1
 800098a:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800098c:	d100      	bne.n	8000990 <HAL_GPIO_Init+0x28>
 800098e:	e08c      	b.n	8000aaa <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000990:	9a01      	ldr	r2, [sp, #4]
 8000992:	2110      	movs	r1, #16
 8000994:	6852      	ldr	r2, [r2, #4]
 8000996:	0016      	movs	r6, r2
 8000998:	438e      	bics	r6, r1
 800099a:	2e02      	cmp	r6, #2
 800099c:	d10e      	bne.n	80009bc <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800099e:	2507      	movs	r5, #7
 80009a0:	401d      	ands	r5, r3
 80009a2:	00ad      	lsls	r5, r5, #2
 80009a4:	3901      	subs	r1, #1
 80009a6:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 80009a8:	08dc      	lsrs	r4, r3, #3
 80009aa:	00a4      	lsls	r4, r4, #2
 80009ac:	1904      	adds	r4, r0, r4
 80009ae:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80009b0:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80009b2:	9901      	ldr	r1, [sp, #4]
 80009b4:	6909      	ldr	r1, [r1, #16]
 80009b6:	40a9      	lsls	r1, r5
 80009b8:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80009ba:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80009bc:	2403      	movs	r4, #3
 80009be:	005f      	lsls	r7, r3, #1
 80009c0:	40bc      	lsls	r4, r7
 80009c2:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80009c4:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c6:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80009c8:	4025      	ands	r5, r4
 80009ca:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009cc:	2503      	movs	r5, #3
 80009ce:	4015      	ands	r5, r2
 80009d0:	40bd      	lsls	r5, r7
 80009d2:	4661      	mov	r1, ip
 80009d4:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80009d6:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d8:	2e01      	cmp	r6, #1
 80009da:	d80f      	bhi.n	80009fc <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80009dc:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80009de:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80009e0:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009e2:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80009e4:	40bd      	lsls	r5, r7
 80009e6:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80009e8:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80009ea:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80009ec:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009ee:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80009f0:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009f2:	2101      	movs	r1, #1
 80009f4:	400d      	ands	r5, r1
 80009f6:	409d      	lsls	r5, r3
 80009f8:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80009fa:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80009fc:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80009fe:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a00:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000a02:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000a04:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000a06:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000a08:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000a0a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000a0c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000a0e:	420a      	tst	r2, r1
 8000a10:	d04b      	beq.n	8000aaa <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2101      	movs	r1, #1
 8000a14:	4c26      	ldr	r4, [pc, #152]	; (8000ab0 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a16:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a18:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a1a:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1c:	430d      	orrs	r5, r1
 8000a1e:	61a5      	str	r5, [r4, #24]
 8000a20:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000a22:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a24:	400c      	ands	r4, r1
 8000a26:	9405      	str	r4, [sp, #20]
 8000a28:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a2a:	240f      	movs	r4, #15
 8000a2c:	4921      	ldr	r1, [pc, #132]	; (8000ab4 <HAL_GPIO_Init+0x14c>)
 8000a2e:	00ad      	lsls	r5, r5, #2
 8000a30:	00b6      	lsls	r6, r6, #2
 8000a32:	186d      	adds	r5, r5, r1
 8000a34:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a36:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000a38:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a3a:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a3c:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a3e:	2400      	movs	r4, #0
 8000a40:	4288      	cmp	r0, r1
 8000a42:	d00c      	beq.n	8000a5e <HAL_GPIO_Init+0xf6>
 8000a44:	491c      	ldr	r1, [pc, #112]	; (8000ab8 <HAL_GPIO_Init+0x150>)
 8000a46:	3401      	adds	r4, #1
 8000a48:	4288      	cmp	r0, r1
 8000a4a:	d008      	beq.n	8000a5e <HAL_GPIO_Init+0xf6>
 8000a4c:	491b      	ldr	r1, [pc, #108]	; (8000abc <HAL_GPIO_Init+0x154>)
 8000a4e:	3401      	adds	r4, #1
 8000a50:	4288      	cmp	r0, r1
 8000a52:	d004      	beq.n	8000a5e <HAL_GPIO_Init+0xf6>
 8000a54:	491a      	ldr	r1, [pc, #104]	; (8000ac0 <HAL_GPIO_Init+0x158>)
 8000a56:	3403      	adds	r4, #3
 8000a58:	4288      	cmp	r0, r1
 8000a5a:	d100      	bne.n	8000a5e <HAL_GPIO_Init+0xf6>
 8000a5c:	3c02      	subs	r4, #2
 8000a5e:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000a60:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a62:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000a64:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a66:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000a68:	4c16      	ldr	r4, [pc, #88]	; (8000ac4 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000a6a:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000a6c:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8000a6e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a70:	03d1      	lsls	r1, r2, #15
 8000a72:	d401      	bmi.n	8000a78 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000a74:	003e      	movs	r6, r7
 8000a76:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000a78:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000a7a:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000a7c:	9e00      	ldr	r6, [sp, #0]
 8000a7e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a80:	0391      	lsls	r1, r2, #14
 8000a82:	d401      	bmi.n	8000a88 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000a84:	003e      	movs	r6, r7
 8000a86:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000a88:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000a8a:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000a8c:	9e00      	ldr	r6, [sp, #0]
 8000a8e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a90:	02d1      	lsls	r1, r2, #11
 8000a92:	d401      	bmi.n	8000a98 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000a94:	003e      	movs	r6, r7
 8000a96:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000a98:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000a9a:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000a9c:	9f00      	ldr	r7, [sp, #0]
 8000a9e:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aa0:	0292      	lsls	r2, r2, #10
 8000aa2:	d401      	bmi.n	8000aa8 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000aa4:	402e      	ands	r6, r5
 8000aa6:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000aa8:	60e7      	str	r7, [r4, #12]
    position++;
 8000aaa:	3301      	adds	r3, #1
 8000aac:	e762      	b.n	8000974 <HAL_GPIO_Init+0xc>
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010000 	.word	0x40010000
 8000ab8:	48000400 	.word	0x48000400
 8000abc:	48000800 	.word	0x48000800
 8000ac0:	48000c00 	.word	0x48000c00
 8000ac4:	40010400 	.word	0x40010400

08000ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aca:	6803      	ldr	r3, [r0, #0]
{
 8000acc:	b085      	sub	sp, #20
 8000ace:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ad0:	07db      	lsls	r3, r3, #31
 8000ad2:	d42f      	bmi.n	8000b34 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	079b      	lsls	r3, r3, #30
 8000ad8:	d500      	bpl.n	8000adc <HAL_RCC_OscConfig+0x14>
 8000ada:	e081      	b.n	8000be0 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	071b      	lsls	r3, r3, #28
 8000ae0:	d500      	bpl.n	8000ae4 <HAL_RCC_OscConfig+0x1c>
 8000ae2:	e0bc      	b.n	8000c5e <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ae4:	682b      	ldr	r3, [r5, #0]
 8000ae6:	075b      	lsls	r3, r3, #29
 8000ae8:	d500      	bpl.n	8000aec <HAL_RCC_OscConfig+0x24>
 8000aea:	e0df      	b.n	8000cac <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000aec:	682b      	ldr	r3, [r5, #0]
 8000aee:	06db      	lsls	r3, r3, #27
 8000af0:	d51a      	bpl.n	8000b28 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000af2:	696a      	ldr	r2, [r5, #20]
 8000af4:	4cb5      	ldr	r4, [pc, #724]	; (8000dcc <HAL_RCC_OscConfig+0x304>)
 8000af6:	2304      	movs	r3, #4
 8000af8:	2a01      	cmp	r2, #1
 8000afa:	d000      	beq.n	8000afe <HAL_RCC_OscConfig+0x36>
 8000afc:	e14b      	b.n	8000d96 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000afe:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b00:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b02:	430b      	orrs	r3, r1
 8000b04:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000b06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000b0c:	f7ff fbc4 	bl	8000298 <HAL_GetTick>
 8000b10:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b14:	4233      	tst	r3, r6
 8000b16:	d100      	bne.n	8000b1a <HAL_RCC_OscConfig+0x52>
 8000b18:	e136      	b.n	8000d88 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b1a:	21f8      	movs	r1, #248	; 0xf8
 8000b1c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000b1e:	69ab      	ldr	r3, [r5, #24]
 8000b20:	438a      	bics	r2, r1
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b28:	6a29      	ldr	r1, [r5, #32]
 8000b2a:	2900      	cmp	r1, #0
 8000b2c:	d000      	beq.n	8000b30 <HAL_RCC_OscConfig+0x68>
 8000b2e:	e159      	b.n	8000de4 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000b30:	2000      	movs	r0, #0
 8000b32:	e013      	b.n	8000b5c <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b34:	210c      	movs	r1, #12
 8000b36:	4ca5      	ldr	r4, [pc, #660]	; (8000dcc <HAL_RCC_OscConfig+0x304>)
 8000b38:	6862      	ldr	r2, [r4, #4]
 8000b3a:	400a      	ands	r2, r1
 8000b3c:	2a04      	cmp	r2, #4
 8000b3e:	d006      	beq.n	8000b4e <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b40:	6863      	ldr	r3, [r4, #4]
 8000b42:	400b      	ands	r3, r1
 8000b44:	2b08      	cmp	r3, #8
 8000b46:	d10b      	bne.n	8000b60 <HAL_RCC_OscConfig+0x98>
 8000b48:	6863      	ldr	r3, [r4, #4]
 8000b4a:	03db      	lsls	r3, r3, #15
 8000b4c:	d508      	bpl.n	8000b60 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b4e:	6823      	ldr	r3, [r4, #0]
 8000b50:	039b      	lsls	r3, r3, #14
 8000b52:	d5bf      	bpl.n	8000ad4 <HAL_RCC_OscConfig+0xc>
 8000b54:	686b      	ldr	r3, [r5, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1bc      	bne.n	8000ad4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000b5a:	2001      	movs	r0, #1
}
 8000b5c:	b005      	add	sp, #20
 8000b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b60:	686b      	ldr	r3, [r5, #4]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d113      	bne.n	8000b8e <HAL_RCC_OscConfig+0xc6>
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	6822      	ldr	r2, [r4, #0]
 8000b6a:	025b      	lsls	r3, r3, #9
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b70:	f7ff fb92 	bl	8000298 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b74:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000b76:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b78:	02b6      	lsls	r6, r6, #10
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	4233      	tst	r3, r6
 8000b7e:	d1a9      	bne.n	8000ad4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b80:	f7ff fb8a 	bl	8000298 <HAL_GetTick>
 8000b84:	1bc0      	subs	r0, r0, r7
 8000b86:	2864      	cmp	r0, #100	; 0x64
 8000b88:	d9f7      	bls.n	8000b7a <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	e7e6      	b.n	8000b5c <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d116      	bne.n	8000bc0 <HAL_RCC_OscConfig+0xf8>
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	4a8e      	ldr	r2, [pc, #568]	; (8000dd0 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b96:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b98:	4013      	ands	r3, r2
 8000b9a:	6023      	str	r3, [r4, #0]
 8000b9c:	6823      	ldr	r3, [r4, #0]
 8000b9e:	4a8d      	ldr	r2, [pc, #564]	; (8000dd4 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ba0:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ba6:	f7ff fb77 	bl	8000298 <HAL_GetTick>
 8000baa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bac:	6823      	ldr	r3, [r4, #0]
 8000bae:	4233      	tst	r3, r6
 8000bb0:	d100      	bne.n	8000bb4 <HAL_RCC_OscConfig+0xec>
 8000bb2:	e78f      	b.n	8000ad4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bb4:	f7ff fb70 	bl	8000298 <HAL_GetTick>
 8000bb8:	1bc0      	subs	r0, r0, r7
 8000bba:	2864      	cmp	r0, #100	; 0x64
 8000bbc:	d9f6      	bls.n	8000bac <HAL_RCC_OscConfig+0xe4>
 8000bbe:	e7e4      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc0:	2b05      	cmp	r3, #5
 8000bc2:	d105      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x108>
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	6822      	ldr	r2, [r4, #0]
 8000bc8:	02db      	lsls	r3, r3, #11
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	6023      	str	r3, [r4, #0]
 8000bce:	e7ca      	b.n	8000b66 <HAL_RCC_OscConfig+0x9e>
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	4a7f      	ldr	r2, [pc, #508]	; (8000dd0 <HAL_RCC_OscConfig+0x308>)
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	6023      	str	r3, [r4, #0]
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	4a7e      	ldr	r2, [pc, #504]	; (8000dd4 <HAL_RCC_OscConfig+0x30c>)
 8000bdc:	4013      	ands	r3, r2
 8000bde:	e7c6      	b.n	8000b6e <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000be0:	220c      	movs	r2, #12
 8000be2:	4c7a      	ldr	r4, [pc, #488]	; (8000dcc <HAL_RCC_OscConfig+0x304>)
 8000be4:	6863      	ldr	r3, [r4, #4]
 8000be6:	4213      	tst	r3, r2
 8000be8:	d006      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bea:	6863      	ldr	r3, [r4, #4]
 8000bec:	4013      	ands	r3, r2
 8000bee:	2b08      	cmp	r3, #8
 8000bf0:	d110      	bne.n	8000c14 <HAL_RCC_OscConfig+0x14c>
 8000bf2:	6863      	ldr	r3, [r4, #4]
 8000bf4:	03db      	lsls	r3, r3, #15
 8000bf6:	d40d      	bmi.n	8000c14 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bf8:	6823      	ldr	r3, [r4, #0]
 8000bfa:	079b      	lsls	r3, r3, #30
 8000bfc:	d502      	bpl.n	8000c04 <HAL_RCC_OscConfig+0x13c>
 8000bfe:	68eb      	ldr	r3, [r5, #12]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d1aa      	bne.n	8000b5a <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c04:	21f8      	movs	r1, #248	; 0xf8
 8000c06:	6822      	ldr	r2, [r4, #0]
 8000c08:	692b      	ldr	r3, [r5, #16]
 8000c0a:	438a      	bics	r2, r1
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	6023      	str	r3, [r4, #0]
 8000c12:	e763      	b.n	8000adc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c14:	68ea      	ldr	r2, [r5, #12]
 8000c16:	2301      	movs	r3, #1
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	d00f      	beq.n	8000c3c <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000c1c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c1e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000c20:	4313      	orrs	r3, r2
 8000c22:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c24:	f7ff fb38 	bl	8000298 <HAL_GetTick>
 8000c28:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	4233      	tst	r3, r6
 8000c2e:	d1e9      	bne.n	8000c04 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c30:	f7ff fb32 	bl	8000298 <HAL_GetTick>
 8000c34:	1bc0      	subs	r0, r0, r7
 8000c36:	2802      	cmp	r0, #2
 8000c38:	d9f7      	bls.n	8000c2a <HAL_RCC_OscConfig+0x162>
 8000c3a:	e7a6      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000c3c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c3e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000c40:	439a      	bics	r2, r3
 8000c42:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000c44:	f7ff fb28 	bl	8000298 <HAL_GetTick>
 8000c48:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c4a:	6823      	ldr	r3, [r4, #0]
 8000c4c:	4233      	tst	r3, r6
 8000c4e:	d100      	bne.n	8000c52 <HAL_RCC_OscConfig+0x18a>
 8000c50:	e744      	b.n	8000adc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c52:	f7ff fb21 	bl	8000298 <HAL_GetTick>
 8000c56:	1bc0      	subs	r0, r0, r7
 8000c58:	2802      	cmp	r0, #2
 8000c5a:	d9f6      	bls.n	8000c4a <HAL_RCC_OscConfig+0x182>
 8000c5c:	e795      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c5e:	69ea      	ldr	r2, [r5, #28]
 8000c60:	2301      	movs	r3, #1
 8000c62:	4c5a      	ldr	r4, [pc, #360]	; (8000dcc <HAL_RCC_OscConfig+0x304>)
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	d010      	beq.n	8000c8a <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000c68:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c6a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c70:	f7ff fb12 	bl	8000298 <HAL_GetTick>
 8000c74:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c78:	4233      	tst	r3, r6
 8000c7a:	d000      	beq.n	8000c7e <HAL_RCC_OscConfig+0x1b6>
 8000c7c:	e732      	b.n	8000ae4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c7e:	f7ff fb0b 	bl	8000298 <HAL_GetTick>
 8000c82:	1bc0      	subs	r0, r0, r7
 8000c84:	2802      	cmp	r0, #2
 8000c86:	d9f6      	bls.n	8000c76 <HAL_RCC_OscConfig+0x1ae>
 8000c88:	e77f      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000c8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c8c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000c8e:	439a      	bics	r2, r3
 8000c90:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c92:	f7ff fb01 	bl	8000298 <HAL_GetTick>
 8000c96:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c9a:	4233      	tst	r3, r6
 8000c9c:	d100      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x1d8>
 8000c9e:	e721      	b.n	8000ae4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ca0:	f7ff fafa 	bl	8000298 <HAL_GetTick>
 8000ca4:	1bc0      	subs	r0, r0, r7
 8000ca6:	2802      	cmp	r0, #2
 8000ca8:	d9f6      	bls.n	8000c98 <HAL_RCC_OscConfig+0x1d0>
 8000caa:	e76e      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cac:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000cae:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cb0:	4c46      	ldr	r4, [pc, #280]	; (8000dcc <HAL_RCC_OscConfig+0x304>)
 8000cb2:	0552      	lsls	r2, r2, #21
 8000cb4:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000cb6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cb8:	4213      	tst	r3, r2
 8000cba:	d108      	bne.n	8000cce <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cbc:	69e3      	ldr	r3, [r4, #28]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61e3      	str	r3, [r4, #28]
 8000cc2:	69e3      	ldr	r3, [r4, #28]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	9303      	str	r3, [sp, #12]
 8000cc8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cce:	2780      	movs	r7, #128	; 0x80
 8000cd0:	4e41      	ldr	r6, [pc, #260]	; (8000dd8 <HAL_RCC_OscConfig+0x310>)
 8000cd2:	007f      	lsls	r7, r7, #1
 8000cd4:	6833      	ldr	r3, [r6, #0]
 8000cd6:	423b      	tst	r3, r7
 8000cd8:	d006      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cda:	68ab      	ldr	r3, [r5, #8]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d113      	bne.n	8000d08 <HAL_RCC_OscConfig+0x240>
 8000ce0:	6a22      	ldr	r2, [r4, #32]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	6223      	str	r3, [r4, #32]
 8000ce6:	e030      	b.n	8000d4a <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ce8:	6833      	ldr	r3, [r6, #0]
 8000cea:	433b      	orrs	r3, r7
 8000cec:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000cee:	f7ff fad3 	bl	8000298 <HAL_GetTick>
 8000cf2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf4:	6833      	ldr	r3, [r6, #0]
 8000cf6:	423b      	tst	r3, r7
 8000cf8:	d1ef      	bne.n	8000cda <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cfa:	f7ff facd 	bl	8000298 <HAL_GetTick>
 8000cfe:	9b01      	ldr	r3, [sp, #4]
 8000d00:	1ac0      	subs	r0, r0, r3
 8000d02:	2864      	cmp	r0, #100	; 0x64
 8000d04:	d9f6      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x22c>
 8000d06:	e740      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
 8000d08:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d114      	bne.n	8000d38 <HAL_RCC_OscConfig+0x270>
 8000d0e:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d10:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d12:	4393      	bics	r3, r2
 8000d14:	6223      	str	r3, [r4, #32]
 8000d16:	6a23      	ldr	r3, [r4, #32]
 8000d18:	3203      	adds	r2, #3
 8000d1a:	4393      	bics	r3, r2
 8000d1c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000d1e:	f7ff fabb 	bl	8000298 <HAL_GetTick>
 8000d22:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d24:	6a23      	ldr	r3, [r4, #32]
 8000d26:	423b      	tst	r3, r7
 8000d28:	d025      	beq.n	8000d76 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d2a:	f7ff fab5 	bl	8000298 <HAL_GetTick>
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <HAL_RCC_OscConfig+0x314>)
 8000d30:	1b80      	subs	r0, r0, r6
 8000d32:	4298      	cmp	r0, r3
 8000d34:	d9f6      	bls.n	8000d24 <HAL_RCC_OscConfig+0x25c>
 8000d36:	e728      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d38:	2b05      	cmp	r3, #5
 8000d3a:	d10b      	bne.n	8000d54 <HAL_RCC_OscConfig+0x28c>
 8000d3c:	6a21      	ldr	r1, [r4, #32]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	430b      	orrs	r3, r1
 8000d42:	6223      	str	r3, [r4, #32]
 8000d44:	6a23      	ldr	r3, [r4, #32]
 8000d46:	431a      	orrs	r2, r3
 8000d48:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000d4a:	f7ff faa5 	bl	8000298 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d4e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000d50:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d52:	e00d      	b.n	8000d70 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d54:	6a23      	ldr	r3, [r4, #32]
 8000d56:	4393      	bics	r3, r2
 8000d58:	2204      	movs	r2, #4
 8000d5a:	6223      	str	r3, [r4, #32]
 8000d5c:	6a23      	ldr	r3, [r4, #32]
 8000d5e:	4393      	bics	r3, r2
 8000d60:	e7c0      	b.n	8000ce4 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d62:	f7ff fa99 	bl	8000298 <HAL_GetTick>
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <HAL_RCC_OscConfig+0x314>)
 8000d68:	1b80      	subs	r0, r0, r6
 8000d6a:	4298      	cmp	r0, r3
 8000d6c:	d900      	bls.n	8000d70 <HAL_RCC_OscConfig+0x2a8>
 8000d6e:	e70c      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d70:	6a23      	ldr	r3, [r4, #32]
 8000d72:	423b      	tst	r3, r7
 8000d74:	d0f5      	beq.n	8000d62 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000d76:	9b00      	ldr	r3, [sp, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d000      	beq.n	8000d7e <HAL_RCC_OscConfig+0x2b6>
 8000d7c:	e6b6      	b.n	8000aec <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d7e:	69e3      	ldr	r3, [r4, #28]
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_RCC_OscConfig+0x318>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	61e3      	str	r3, [r4, #28]
 8000d86:	e6b1      	b.n	8000aec <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d88:	f7ff fa86 	bl	8000298 <HAL_GetTick>
 8000d8c:	1bc0      	subs	r0, r0, r7
 8000d8e:	2802      	cmp	r0, #2
 8000d90:	d800      	bhi.n	8000d94 <HAL_RCC_OscConfig+0x2cc>
 8000d92:	e6be      	b.n	8000b12 <HAL_RCC_OscConfig+0x4a>
 8000d94:	e6f9      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000d96:	3205      	adds	r2, #5
 8000d98:	d103      	bne.n	8000da2 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000d9a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000d9c:	439a      	bics	r2, r3
 8000d9e:	6362      	str	r2, [r4, #52]	; 0x34
 8000da0:	e6bb      	b.n	8000b1a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000da2:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000da4:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000da6:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000da8:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000daa:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000dac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dae:	4393      	bics	r3, r2
 8000db0:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000db2:	f7ff fa71 	bl	8000298 <HAL_GetTick>
 8000db6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000db8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dba:	4233      	tst	r3, r6
 8000dbc:	d100      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x2f8>
 8000dbe:	e6b3      	b.n	8000b28 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000dc0:	f7ff fa6a 	bl	8000298 <HAL_GetTick>
 8000dc4:	1bc0      	subs	r0, r0, r7
 8000dc6:	2802      	cmp	r0, #2
 8000dc8:	d9f6      	bls.n	8000db8 <HAL_RCC_OscConfig+0x2f0>
 8000dca:	e6de      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	fffeffff 	.word	0xfffeffff
 8000dd4:	fffbffff 	.word	0xfffbffff
 8000dd8:	40007000 	.word	0x40007000
 8000ddc:	00001388 	.word	0x00001388
 8000de0:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000de4:	220c      	movs	r2, #12
 8000de6:	4c26      	ldr	r4, [pc, #152]	; (8000e80 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000de8:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dea:	6863      	ldr	r3, [r4, #4]
 8000dec:	4013      	ands	r3, r2
 8000dee:	2b08      	cmp	r3, #8
 8000df0:	d100      	bne.n	8000df4 <HAL_RCC_OscConfig+0x32c>
 8000df2:	e6b3      	b.n	8000b5c <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	4a23      	ldr	r2, [pc, #140]	; (8000e84 <HAL_RCC_OscConfig+0x3bc>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dfc:	2902      	cmp	r1, #2
 8000dfe:	d12f      	bne.n	8000e60 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000e00:	f7ff fa4a 	bl	8000298 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e04:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e06:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e08:	04b6      	lsls	r6, r6, #18
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	4233      	tst	r3, r6
 8000e0e:	d121      	bne.n	8000e54 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e10:	220f      	movs	r2, #15
 8000e12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e14:	4393      	bics	r3, r2
 8000e16:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e1c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000e1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000e20:	6862      	ldr	r2, [r4, #4]
 8000e22:	430b      	orrs	r3, r1
 8000e24:	4918      	ldr	r1, [pc, #96]	; (8000e88 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e26:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e28:	400a      	ands	r2, r1
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	6822      	ldr	r2, [r4, #0]
 8000e32:	045b      	lsls	r3, r3, #17
 8000e34:	4313      	orrs	r3, r2
 8000e36:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e38:	f7ff fa2e 	bl	8000298 <HAL_GetTick>
 8000e3c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e3e:	04ad      	lsls	r5, r5, #18
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	422b      	tst	r3, r5
 8000e44:	d000      	beq.n	8000e48 <HAL_RCC_OscConfig+0x380>
 8000e46:	e673      	b.n	8000b30 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e48:	f7ff fa26 	bl	8000298 <HAL_GetTick>
 8000e4c:	1b80      	subs	r0, r0, r6
 8000e4e:	2802      	cmp	r0, #2
 8000e50:	d9f6      	bls.n	8000e40 <HAL_RCC_OscConfig+0x378>
 8000e52:	e69a      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e54:	f7ff fa20 	bl	8000298 <HAL_GetTick>
 8000e58:	1bc0      	subs	r0, r0, r7
 8000e5a:	2802      	cmp	r0, #2
 8000e5c:	d9d5      	bls.n	8000e0a <HAL_RCC_OscConfig+0x342>
 8000e5e:	e694      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000e60:	f7ff fa1a 	bl	8000298 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e64:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e66:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e68:	04ad      	lsls	r5, r5, #18
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	422b      	tst	r3, r5
 8000e6e:	d100      	bne.n	8000e72 <HAL_RCC_OscConfig+0x3aa>
 8000e70:	e65e      	b.n	8000b30 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e72:	f7ff fa11 	bl	8000298 <HAL_GetTick>
 8000e76:	1b80      	subs	r0, r0, r6
 8000e78:	2802      	cmp	r0, #2
 8000e7a:	d9f6      	bls.n	8000e6a <HAL_RCC_OscConfig+0x3a2>
 8000e7c:	e685      	b.n	8000b8a <HAL_RCC_OscConfig+0xc2>
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	40021000 	.word	0x40021000
 8000e84:	feffffff 	.word	0xfeffffff
 8000e88:	ffc2ffff 	.word	0xffc2ffff

08000e8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e8c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000e8e:	4c14      	ldr	r4, [pc, #80]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000e90:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000e92:	2210      	movs	r2, #16
 8000e94:	0021      	movs	r1, r4
 8000e96:	4668      	mov	r0, sp
 8000e98:	f000 fd3c 	bl	8001914 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000e9c:	0021      	movs	r1, r4
 8000e9e:	ad04      	add	r5, sp, #16
 8000ea0:	2210      	movs	r2, #16
 8000ea2:	3110      	adds	r1, #16
 8000ea4:	0028      	movs	r0, r5
 8000ea6:	f000 fd35 	bl	8001914 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000eaa:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000eac:	4e0d      	ldr	r6, [pc, #52]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0x58>)
 8000eae:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	2a08      	cmp	r2, #8
 8000eb4:	d111      	bne.n	8000eda <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	466a      	mov	r2, sp
 8000eba:	0c99      	lsrs	r1, r3, #18
 8000ebc:	4001      	ands	r1, r0
 8000ebe:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000ec0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000ec2:	4002      	ands	r2, r0
 8000ec4:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000ec6:	03db      	lsls	r3, r3, #15
 8000ec8:	d505      	bpl.n	8000ed6 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000eca:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000ecc:	f7ff f92e 	bl	800012c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000ed0:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ed2:	b008      	add	sp, #32
 8000ed4:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <HAL_RCC_GetSysClockFreq+0x60>)
 8000ed8:	e7fa      	b.n	8000ed0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000eda:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000edc:	e7f9      	b.n	8000ed2 <HAL_RCC_GetSysClockFreq+0x46>
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	08001950 	.word	0x08001950
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	007a1200 	.word	0x007a1200
 8000eec:	003d0900 	.word	0x003d0900

08000ef0 <HAL_RCC_ClockConfig>:
{
 8000ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4c43      	ldr	r4, [pc, #268]	; (8001004 <HAL_RCC_ClockConfig+0x114>)
{
 8000ef6:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ef8:	6823      	ldr	r3, [r4, #0]
{
 8000efa:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000efc:	4013      	ands	r3, r2
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d31c      	bcc.n	8000f3c <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f02:	6832      	ldr	r2, [r6, #0]
 8000f04:	0793      	lsls	r3, r2, #30
 8000f06:	d423      	bmi.n	8000f50 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f08:	07d3      	lsls	r3, r2, #31
 8000f0a:	d429      	bmi.n	8000f60 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	6822      	ldr	r2, [r4, #0]
 8000f10:	401a      	ands	r2, r3
 8000f12:	4297      	cmp	r7, r2
 8000f14:	d367      	bcc.n	8000fe6 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f16:	6833      	ldr	r3, [r6, #0]
 8000f18:	4c3b      	ldr	r4, [pc, #236]	; (8001008 <HAL_RCC_ClockConfig+0x118>)
 8000f1a:	075b      	lsls	r3, r3, #29
 8000f1c:	d46a      	bmi.n	8000ff4 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f1e:	f7ff ffb5 	bl	8000e8c <HAL_RCC_GetSysClockFreq>
 8000f22:	6863      	ldr	r3, [r4, #4]
 8000f24:	4a39      	ldr	r2, [pc, #228]	; (800100c <HAL_RCC_ClockConfig+0x11c>)
 8000f26:	061b      	lsls	r3, r3, #24
 8000f28:	0f1b      	lsrs	r3, r3, #28
 8000f2a:	5cd3      	ldrb	r3, [r2, r3]
 8000f2c:	40d8      	lsrs	r0, r3
 8000f2e:	4b38      	ldr	r3, [pc, #224]	; (8001010 <HAL_RCC_ClockConfig+0x120>)
 8000f30:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f7ff f986 	bl	8000244 <HAL_InitTick>
  return HAL_OK;
 8000f38:	2000      	movs	r0, #0
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	4393      	bics	r3, r2
 8000f40:	430b      	orrs	r3, r1
 8000f42:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	4013      	ands	r3, r2
 8000f48:	4299      	cmp	r1, r3
 8000f4a:	d0da      	beq.n	8000f02 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000f4c:	2001      	movs	r0, #1
}
 8000f4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f50:	20f0      	movs	r0, #240	; 0xf0
 8000f52:	492d      	ldr	r1, [pc, #180]	; (8001008 <HAL_RCC_ClockConfig+0x118>)
 8000f54:	684b      	ldr	r3, [r1, #4]
 8000f56:	4383      	bics	r3, r0
 8000f58:	68b0      	ldr	r0, [r6, #8]
 8000f5a:	4303      	orrs	r3, r0
 8000f5c:	604b      	str	r3, [r1, #4]
 8000f5e:	e7d3      	b.n	8000f08 <HAL_RCC_ClockConfig+0x18>
 8000f60:	4d29      	ldr	r5, [pc, #164]	; (8001008 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f62:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f64:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f66:	2a01      	cmp	r2, #1
 8000f68:	d11a      	bne.n	8000fa0 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6a:	039b      	lsls	r3, r3, #14
 8000f6c:	d5ee      	bpl.n	8000f4c <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f6e:	2103      	movs	r1, #3
 8000f70:	686b      	ldr	r3, [r5, #4]
 8000f72:	438b      	bics	r3, r1
 8000f74:	4313      	orrs	r3, r2
 8000f76:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000f78:	f7ff f98e 	bl	8000298 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f7c:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000f7e:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d115      	bne.n	8000fb0 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f84:	220c      	movs	r2, #12
 8000f86:	686b      	ldr	r3, [r5, #4]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d0be      	beq.n	8000f0c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f8e:	f7ff f983 	bl	8000298 <HAL_GetTick>
 8000f92:	9b01      	ldr	r3, [sp, #4]
 8000f94:	1ac0      	subs	r0, r0, r3
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <HAL_RCC_ClockConfig+0x124>)
 8000f98:	4298      	cmp	r0, r3
 8000f9a:	d9f3      	bls.n	8000f84 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	e7d6      	b.n	8000f4e <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fa0:	2a02      	cmp	r2, #2
 8000fa2:	d102      	bne.n	8000faa <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa4:	019b      	lsls	r3, r3, #6
 8000fa6:	d4e2      	bmi.n	8000f6e <HAL_RCC_ClockConfig+0x7e>
 8000fa8:	e7d0      	b.n	8000f4c <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000faa:	079b      	lsls	r3, r3, #30
 8000fac:	d4df      	bmi.n	8000f6e <HAL_RCC_ClockConfig+0x7e>
 8000fae:	e7cd      	b.n	8000f4c <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d012      	beq.n	8000fda <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fb4:	220c      	movs	r2, #12
 8000fb6:	686b      	ldr	r3, [r5, #4]
 8000fb8:	4213      	tst	r3, r2
 8000fba:	d0a7      	beq.n	8000f0c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fbc:	f7ff f96c 	bl	8000298 <HAL_GetTick>
 8000fc0:	9b01      	ldr	r3, [sp, #4]
 8000fc2:	1ac0      	subs	r0, r0, r3
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <HAL_RCC_ClockConfig+0x124>)
 8000fc6:	4298      	cmp	r0, r3
 8000fc8:	d9f4      	bls.n	8000fb4 <HAL_RCC_ClockConfig+0xc4>
 8000fca:	e7e7      	b.n	8000f9c <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fcc:	f7ff f964 	bl	8000298 <HAL_GetTick>
 8000fd0:	9b01      	ldr	r3, [sp, #4]
 8000fd2:	1ac0      	subs	r0, r0, r3
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <HAL_RCC_ClockConfig+0x124>)
 8000fd6:	4298      	cmp	r0, r3
 8000fd8:	d8e0      	bhi.n	8000f9c <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	686b      	ldr	r3, [r5, #4]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d1f3      	bne.n	8000fcc <HAL_RCC_ClockConfig+0xdc>
 8000fe4:	e792      	b.n	8000f0c <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe6:	6822      	ldr	r2, [r4, #0]
 8000fe8:	439a      	bics	r2, r3
 8000fea:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fec:	6822      	ldr	r2, [r4, #0]
 8000fee:	421a      	tst	r2, r3
 8000ff0:	d1ac      	bne.n	8000f4c <HAL_RCC_ClockConfig+0x5c>
 8000ff2:	e790      	b.n	8000f16 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000ff4:	6863      	ldr	r3, [r4, #4]
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_RCC_ClockConfig+0x128>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	68f2      	ldr	r2, [r6, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	6063      	str	r3, [r4, #4]
 8001000:	e78d      	b.n	8000f1e <HAL_RCC_ClockConfig+0x2e>
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	40022000 	.word	0x40022000
 8001008:	40021000 	.word	0x40021000
 800100c:	08001987 	.word	0x08001987
 8001010:	20000000 	.word	0x20000000
 8001014:	00001388 	.word	0x00001388
 8001018:	fffff8ff 	.word	0xfffff8ff

0800101c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800101c:	4b01      	ldr	r3, [pc, #4]	; (8001024 <HAL_RCC_GetHCLKFreq+0x8>)
 800101e:	6818      	ldr	r0, [r3, #0]
}
 8001020:	4770      	bx	lr
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	20000000 	.word	0x20000000

08001028 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <HAL_RCC_GetPCLK1Freq+0x14>)
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <HAL_RCC_GetPCLK1Freq+0x18>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	055b      	lsls	r3, r3, #21
 8001030:	0f5b      	lsrs	r3, r3, #29
 8001032:	5cd3      	ldrb	r3, [r2, r3]
 8001034:	4a03      	ldr	r2, [pc, #12]	; (8001044 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001036:	6810      	ldr	r0, [r2, #0]
 8001038:	40d8      	lsrs	r0, r3
}    
 800103a:	4770      	bx	lr
 800103c:	40021000 	.word	0x40021000
 8001040:	08001997 	.word	0x08001997
 8001044:	20000000 	.word	0x20000000

08001048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800104a:	6803      	ldr	r3, [r0, #0]
{
 800104c:	b085      	sub	sp, #20
 800104e:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001050:	03db      	lsls	r3, r3, #15
 8001052:	d528      	bpl.n	80010a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001054:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001056:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001058:	4c37      	ldr	r4, [pc, #220]	; (8001138 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 800105a:	0552      	lsls	r2, r2, #21
 800105c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800105e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001060:	4213      	tst	r3, r2
 8001062:	d108      	bne.n	8001076 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	69e3      	ldr	r3, [r4, #28]
 8001066:	4313      	orrs	r3, r2
 8001068:	61e3      	str	r3, [r4, #28]
 800106a:	69e3      	ldr	r3, [r4, #28]
 800106c:	4013      	ands	r3, r2
 800106e:	9303      	str	r3, [sp, #12]
 8001070:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001072:	2301      	movs	r3, #1
 8001074:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001076:	2780      	movs	r7, #128	; 0x80
 8001078:	4e30      	ldr	r6, [pc, #192]	; (800113c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800107a:	007f      	lsls	r7, r7, #1
 800107c:	6833      	ldr	r3, [r6, #0]
 800107e:	423b      	tst	r3, r7
 8001080:	d026      	beq.n	80010d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001082:	22c0      	movs	r2, #192	; 0xc0
 8001084:	6a23      	ldr	r3, [r4, #32]
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	4013      	ands	r3, r2
 800108a:	4e2d      	ldr	r6, [pc, #180]	; (8001140 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800108c:	d132      	bne.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800108e:	6a23      	ldr	r3, [r4, #32]
 8001090:	401e      	ands	r6, r3
 8001092:	686b      	ldr	r3, [r5, #4]
 8001094:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001096:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001098:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800109a:	2b01      	cmp	r3, #1
 800109c:	d103      	bne.n	80010a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800109e:	69e3      	ldr	r3, [r4, #28]
 80010a0:	4a28      	ldr	r2, [pc, #160]	; (8001144 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80010a6:	682a      	ldr	r2, [r5, #0]
 80010a8:	07d3      	lsls	r3, r2, #31
 80010aa:	d506      	bpl.n	80010ba <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80010ac:	2003      	movs	r0, #3
 80010ae:	4922      	ldr	r1, [pc, #136]	; (8001138 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 80010b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80010b2:	4383      	bics	r3, r0
 80010b4:	68a8      	ldr	r0, [r5, #8]
 80010b6:	4303      	orrs	r3, r0
 80010b8:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80010ba:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80010bc:	0693      	lsls	r3, r2, #26
 80010be:	d517      	bpl.n	80010f0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80010c0:	2110      	movs	r1, #16
 80010c2:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 80010c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010c6:	438b      	bics	r3, r1
 80010c8:	68e9      	ldr	r1, [r5, #12]
 80010ca:	430b      	orrs	r3, r1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	e00f      	b.n	80010f0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010d0:	6833      	ldr	r3, [r6, #0]
 80010d2:	433b      	orrs	r3, r7
 80010d4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010d6:	f7ff f8df 	bl	8000298 <HAL_GetTick>
 80010da:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010dc:	6833      	ldr	r3, [r6, #0]
 80010de:	423b      	tst	r3, r7
 80010e0:	d1cf      	bne.n	8001082 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010e2:	f7ff f8d9 	bl	8000298 <HAL_GetTick>
 80010e6:	9b01      	ldr	r3, [sp, #4]
 80010e8:	1ac0      	subs	r0, r0, r3
 80010ea:	2864      	cmp	r0, #100	; 0x64
 80010ec:	d9f6      	bls.n	80010dc <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 80010ee:	2003      	movs	r0, #3
}
 80010f0:	b005      	add	sp, #20
 80010f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010f4:	6869      	ldr	r1, [r5, #4]
 80010f6:	400a      	ands	r2, r1
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d0c8      	beq.n	800108e <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 80010fc:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010fe:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001100:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001102:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8001104:	025b      	lsls	r3, r3, #9
 8001106:	4303      	orrs	r3, r0
 8001108:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800110a:	6a23      	ldr	r3, [r4, #32]
 800110c:	480e      	ldr	r0, [pc, #56]	; (8001148 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800110e:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001110:	4003      	ands	r3, r0
 8001112:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8001114:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001116:	07d3      	lsls	r3, r2, #31
 8001118:	d5b9      	bpl.n	800108e <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 800111a:	f7ff f8bd 	bl	8000298 <HAL_GetTick>
 800111e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001120:	2202      	movs	r2, #2
 8001122:	6a23      	ldr	r3, [r4, #32]
 8001124:	4213      	tst	r3, r2
 8001126:	d1b2      	bne.n	800108e <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001128:	f7ff f8b6 	bl	8000298 <HAL_GetTick>
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 800112e:	1bc0      	subs	r0, r0, r7
 8001130:	4298      	cmp	r0, r3
 8001132:	d9f5      	bls.n	8001120 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001134:	e7db      	b.n	80010ee <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	40021000 	.word	0x40021000
 800113c:	40007000 	.word	0x40007000
 8001140:	fffffcff 	.word	0xfffffcff
 8001144:	efffffff 	.word	0xefffffff
 8001148:	fffeffff 	.word	0xfffeffff
 800114c:	00001388 	.word	0x00001388

08001150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001150:	b570      	push	{r4, r5, r6, lr}
 8001152:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001154:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001156:	69c2      	ldr	r2, [r0, #28]
 8001158:	6883      	ldr	r3, [r0, #8]
 800115a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800115c:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800115e:	4303      	orrs	r3, r0
 8001160:	6960      	ldr	r0, [r4, #20]
 8001162:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001164:	4835      	ldr	r0, [pc, #212]	; (800123c <UART_SetConfig+0xec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001166:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001168:	4001      	ands	r1, r0
 800116a:	430b      	orrs	r3, r1
 800116c:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800116e:	686b      	ldr	r3, [r5, #4]
 8001170:	4933      	ldr	r1, [pc, #204]	; (8001240 <UART_SetConfig+0xf0>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001172:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001174:	400b      	ands	r3, r1
 8001176:	68e1      	ldr	r1, [r4, #12]
 8001178:	430b      	orrs	r3, r1
 800117a:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800117c:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800117e:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001180:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001182:	4830      	ldr	r0, [pc, #192]	; (8001244 <UART_SetConfig+0xf4>)
 8001184:	4001      	ands	r1, r0
 8001186:	430b      	orrs	r3, r1

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001188:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800118a:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800118c:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <UART_SetConfig+0xf8>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	400b      	ands	r3, r1
 8001192:	492e      	ldr	r1, [pc, #184]	; (800124c <UART_SetConfig+0xfc>)
 8001194:	5cc8      	ldrb	r0, [r1, r3]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	429a      	cmp	r2, r3
 800119c:	d12c      	bne.n	80011f8 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 800119e:	2808      	cmp	r0, #8
 80011a0:	d827      	bhi.n	80011f2 <UART_SetConfig+0xa2>
 80011a2:	f7fe ffb9 	bl	8000118 <__gnu_thumb1_case_uqi>
 80011a6:	2605      	.short	0x2605
 80011a8:	261e260b 	.word	0x261e260b
 80011ac:	2626      	.short	0x2626
 80011ae:	21          	.byte	0x21
 80011af:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80011b0:	f7ff ff3a 	bl	8001028 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80011b4:	6863      	ldr	r3, [r4, #4]
 80011b6:	0040      	lsls	r0, r0, #1
 80011b8:	085b      	lsrs	r3, r3, #1
 80011ba:	e002      	b.n	80011c2 <UART_SetConfig+0x72>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80011bc:	6863      	ldr	r3, [r4, #4]
 80011be:	0858      	lsrs	r0, r3, #1
 80011c0:	4b23      	ldr	r3, [pc, #140]	; (8001250 <UART_SetConfig+0x100>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80011c2:	18c0      	adds	r0, r0, r3
 80011c4:	6861      	ldr	r1, [r4, #4]
 80011c6:	f7fe ffb1 	bl	800012c <__udivsi3>
 80011ca:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80011cc:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80011ce:	220f      	movs	r2, #15
 80011d0:	0019      	movs	r1, r3
 80011d2:	4391      	bics	r1, r2
 80011d4:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80011d6:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 80011d8:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80011da:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80011dc:	4313      	orrs	r3, r2
 80011de:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 80011e0:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80011e2:	f7ff fe53 	bl	8000e8c <HAL_RCC_GetSysClockFreq>
 80011e6:	e7e5      	b.n	80011b4 <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80011e8:	6863      	ldr	r3, [r4, #4]
 80011ea:	0858      	lsrs	r0, r3, #1
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	025b      	lsls	r3, r3, #9
 80011f0:	e7e7      	b.n	80011c2 <UART_SetConfig+0x72>
        ret = HAL_ERROR;
 80011f2:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e7ea      	b.n	80011ce <UART_SetConfig+0x7e>
    switch (clocksource)
 80011f8:	2808      	cmp	r0, #8
 80011fa:	d81d      	bhi.n	8001238 <UART_SetConfig+0xe8>
 80011fc:	f7fe ff8c 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001200:	1c0a1c05 	.word	0x1c0a1c05
 8001204:	1c1c1c14 	.word	0x1c1c1c14
 8001208:	17          	.byte	0x17
 8001209:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800120a:	f7ff ff0d 	bl	8001028 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800120e:	6861      	ldr	r1, [r4, #4]
 8001210:	084b      	lsrs	r3, r1, #1
 8001212:	e002      	b.n	800121a <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001214:	6861      	ldr	r1, [r4, #4]
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <UART_SetConfig+0x104>)
 8001218:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800121a:	18c0      	adds	r0, r0, r3
 800121c:	f7fe ff86 	bl	800012c <__udivsi3>
 8001220:	b280      	uxth	r0, r0
 8001222:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001224:	2000      	movs	r0, #0
        break;
 8001226:	e7db      	b.n	80011e0 <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001228:	f7ff fe30 	bl	8000e8c <HAL_RCC_GetSysClockFreq>
 800122c:	e7ef      	b.n	800120e <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	6861      	ldr	r1, [r4, #4]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	0848      	lsrs	r0, r1, #1
 8001236:	e7f0      	b.n	800121a <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8001238:	2001      	movs	r0, #1
 800123a:	e7d1      	b.n	80011e0 <UART_SetConfig+0x90>
 800123c:	ffff69f3 	.word	0xffff69f3
 8001240:	ffffcfff 	.word	0xffffcfff
 8001244:	fffff4ff 	.word	0xfffff4ff
 8001248:	40021000 	.word	0x40021000
 800124c:	08001970 	.word	0x08001970
 8001250:	00f42400 	.word	0x00f42400
 8001254:	007a1200 	.word	0x007a1200

08001258 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001258:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800125a:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800125c:	07da      	lsls	r2, r3, #31
 800125e:	d506      	bpl.n	800126e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001260:	6801      	ldr	r1, [r0, #0]
 8001262:	4c28      	ldr	r4, [pc, #160]	; (8001304 <UART_AdvFeatureConfig+0xac>)
 8001264:	684a      	ldr	r2, [r1, #4]
 8001266:	4022      	ands	r2, r4
 8001268:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800126a:	4322      	orrs	r2, r4
 800126c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800126e:	079a      	lsls	r2, r3, #30
 8001270:	d506      	bpl.n	8001280 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001272:	6801      	ldr	r1, [r0, #0]
 8001274:	4c24      	ldr	r4, [pc, #144]	; (8001308 <UART_AdvFeatureConfig+0xb0>)
 8001276:	684a      	ldr	r2, [r1, #4]
 8001278:	4022      	ands	r2, r4
 800127a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800127c:	4322      	orrs	r2, r4
 800127e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001280:	075a      	lsls	r2, r3, #29
 8001282:	d506      	bpl.n	8001292 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001284:	6801      	ldr	r1, [r0, #0]
 8001286:	4c21      	ldr	r4, [pc, #132]	; (800130c <UART_AdvFeatureConfig+0xb4>)
 8001288:	684a      	ldr	r2, [r1, #4]
 800128a:	4022      	ands	r2, r4
 800128c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800128e:	4322      	orrs	r2, r4
 8001290:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001292:	071a      	lsls	r2, r3, #28
 8001294:	d506      	bpl.n	80012a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001296:	6801      	ldr	r1, [r0, #0]
 8001298:	4c1d      	ldr	r4, [pc, #116]	; (8001310 <UART_AdvFeatureConfig+0xb8>)
 800129a:	684a      	ldr	r2, [r1, #4]
 800129c:	4022      	ands	r2, r4
 800129e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80012a0:	4322      	orrs	r2, r4
 80012a2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80012a4:	06da      	lsls	r2, r3, #27
 80012a6:	d506      	bpl.n	80012b6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80012a8:	6801      	ldr	r1, [r0, #0]
 80012aa:	4c1a      	ldr	r4, [pc, #104]	; (8001314 <UART_AdvFeatureConfig+0xbc>)
 80012ac:	688a      	ldr	r2, [r1, #8]
 80012ae:	4022      	ands	r2, r4
 80012b0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80012b2:	4322      	orrs	r2, r4
 80012b4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80012b6:	069a      	lsls	r2, r3, #26
 80012b8:	d506      	bpl.n	80012c8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80012ba:	6801      	ldr	r1, [r0, #0]
 80012bc:	4c16      	ldr	r4, [pc, #88]	; (8001318 <UART_AdvFeatureConfig+0xc0>)
 80012be:	688a      	ldr	r2, [r1, #8]
 80012c0:	4022      	ands	r2, r4
 80012c2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80012c4:	4322      	orrs	r2, r4
 80012c6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80012c8:	065a      	lsls	r2, r3, #25
 80012ca:	d510      	bpl.n	80012ee <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80012cc:	6801      	ldr	r1, [r0, #0]
 80012ce:	4d13      	ldr	r5, [pc, #76]	; (800131c <UART_AdvFeatureConfig+0xc4>)
 80012d0:	684a      	ldr	r2, [r1, #4]
 80012d2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80012d4:	402a      	ands	r2, r5
 80012d6:	4322      	orrs	r2, r4
 80012d8:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	0352      	lsls	r2, r2, #13
 80012de:	4294      	cmp	r4, r2
 80012e0:	d105      	bne.n	80012ee <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80012e2:	684a      	ldr	r2, [r1, #4]
 80012e4:	4c0e      	ldr	r4, [pc, #56]	; (8001320 <UART_AdvFeatureConfig+0xc8>)
 80012e6:	4022      	ands	r2, r4
 80012e8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80012ea:	4322      	orrs	r2, r4
 80012ec:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80012ee:	061b      	lsls	r3, r3, #24
 80012f0:	d506      	bpl.n	8001300 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80012f2:	6802      	ldr	r2, [r0, #0]
 80012f4:	490b      	ldr	r1, [pc, #44]	; (8001324 <UART_AdvFeatureConfig+0xcc>)
 80012f6:	6853      	ldr	r3, [r2, #4]
 80012f8:	400b      	ands	r3, r1
 80012fa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6053      	str	r3, [r2, #4]
  }
}
 8001300:	bd30      	pop	{r4, r5, pc}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	fffdffff 	.word	0xfffdffff
 8001308:	fffeffff 	.word	0xfffeffff
 800130c:	fffbffff 	.word	0xfffbffff
 8001310:	ffff7fff 	.word	0xffff7fff
 8001314:	ffffefff 	.word	0xffffefff
 8001318:	ffffdfff 	.word	0xffffdfff
 800131c:	ffefffff 	.word	0xffefffff
 8001320:	ff9fffff 	.word	0xff9fffff
 8001324:	fff7ffff 	.word	0xfff7ffff

08001328 <HAL_HalfDuplex_Init>:
{
 8001328:	b570      	push	{r4, r5, r6, lr}
 800132a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 800132c:	d101      	bne.n	8001332 <HAL_HalfDuplex_Init+0xa>
    return HAL_ERROR;
 800132e:	2001      	movs	r0, #1
}
 8001330:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001332:	0005      	movs	r5, r0
 8001334:	3569      	adds	r5, #105	; 0x69
 8001336:	782b      	ldrb	r3, [r5, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d104      	bne.n	8001348 <HAL_HalfDuplex_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800133e:	0002      	movs	r2, r0
 8001340:	3268      	adds	r2, #104	; 0x68
 8001342:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001344:	f000 fa32 	bl	80017ac <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001348:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800134a:	2101      	movs	r1, #1
 800134c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800134e:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001350:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001352:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001354:	438b      	bics	r3, r1
 8001356:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001358:	f7ff fefa 	bl	8001150 <UART_SetConfig>
 800135c:	2801      	cmp	r0, #1
 800135e:	d0e6      	beq.n	800132e <HAL_HalfDuplex_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <HAL_HalfDuplex_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8001366:	0020      	movs	r0, r4
 8001368:	f7ff ff76 	bl	8001258 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	490b      	ldr	r1, [pc, #44]	; (800139c <HAL_HalfDuplex_Init+0x74>)
 8001370:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001372:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001374:	400a      	ands	r2, r1
 8001376:	605a      	str	r2, [r3, #4]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001378:	2208      	movs	r2, #8
 800137a:	6899      	ldr	r1, [r3, #8]
 800137c:	430a      	orrs	r2, r1
 800137e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001380:	2201      	movs	r2, #1
 8001382:	6819      	ldr	r1, [r3, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8001388:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 800138a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800138c:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 800138e:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001390:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001392:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001394:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8001396:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001398:	e7ca      	b.n	8001330 <HAL_HalfDuplex_Init+0x8>
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	fffff7ff 	.word	0xfffff7ff

080013a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80013a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a2:	0004      	movs	r4, r0
 80013a4:	000e      	movs	r6, r1
 80013a6:	0015      	movs	r5, r2
 80013a8:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80013aa:	6822      	ldr	r2, [r4, #0]
 80013ac:	69d3      	ldr	r3, [r2, #28]
 80013ae:	4033      	ands	r3, r6
 80013b0:	1b9b      	subs	r3, r3, r6
 80013b2:	4259      	negs	r1, r3
 80013b4:	414b      	adcs	r3, r1
 80013b6:	42ab      	cmp	r3, r5
 80013b8:	d001      	beq.n	80013be <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80013ba:	2000      	movs	r0, #0
 80013bc:	e018      	b.n	80013f0 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 80013be:	9b06      	ldr	r3, [sp, #24]
 80013c0:	3301      	adds	r3, #1
 80013c2:	d0f3      	beq.n	80013ac <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013c4:	9b06      	ldr	r3, [sp, #24]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d113      	bne.n	80013f2 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <UART_WaitOnFlagUntilTimeout+0x60>)
 80013ce:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 80013d0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80013d2:	400a      	ands	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	31a3      	adds	r1, #163	; 0xa3
 80013da:	31ff      	adds	r1, #255	; 0xff
 80013dc:	438a      	bics	r2, r1
 80013de:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80013e0:	0022      	movs	r2, r4
 80013e2:	2320      	movs	r3, #32
 80013e4:	3269      	adds	r2, #105	; 0x69
 80013e6:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 80013e8:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 80013ea:	2300      	movs	r3, #0
 80013ec:	3468      	adds	r4, #104	; 0x68
 80013ee:	7023      	strb	r3, [r4, #0]
}
 80013f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013f2:	f7fe ff51 	bl	8000298 <HAL_GetTick>
 80013f6:	9b06      	ldr	r3, [sp, #24]
 80013f8:	1bc0      	subs	r0, r0, r7
 80013fa:	4283      	cmp	r3, r0
 80013fc:	d2d5      	bcs.n	80013aa <UART_WaitOnFlagUntilTimeout+0xa>
 80013fe:	e7e4      	b.n	80013ca <UART_WaitOnFlagUntilTimeout+0x2a>
 8001400:	fffffe5f 	.word	0xfffffe5f

08001404 <HAL_UART_Transmit>:
{
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8001406:	0007      	movs	r7, r0
{
 8001408:	b085      	sub	sp, #20
 800140a:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 800140c:	3769      	adds	r7, #105	; 0x69
 800140e:	783b      	ldrb	r3, [r7, #0]
{
 8001410:	0004      	movs	r4, r0
 8001412:	000d      	movs	r5, r1
 8001414:	0016      	movs	r6, r2
    return HAL_BUSY;
 8001416:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8001418:	2b20      	cmp	r3, #32
 800141a:	d146      	bne.n	80014aa <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 800141c:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800141e:	2900      	cmp	r1, #0
 8001420:	d043      	beq.n	80014aa <HAL_UART_Transmit+0xa6>
 8001422:	2a00      	cmp	r2, #0
 8001424:	d041      	beq.n	80014aa <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	68a2      	ldr	r2, [r4, #8]
 800142a:	015b      	lsls	r3, r3, #5
 800142c:	429a      	cmp	r2, r3
 800142e:	d104      	bne.n	800143a <HAL_UART_Transmit+0x36>
 8001430:	6923      	ldr	r3, [r4, #16]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 8001436:	4201      	tst	r1, r0
 8001438:	d137      	bne.n	80014aa <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800143a:	0023      	movs	r3, r4
 800143c:	3368      	adds	r3, #104	; 0x68
 800143e:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001440:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001442:	2a01      	cmp	r2, #1
 8001444:	d031      	beq.n	80014aa <HAL_UART_Transmit+0xa6>
 8001446:	2201      	movs	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800144a:	2300      	movs	r3, #0
 800144c:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800144e:	3321      	adds	r3, #33	; 0x21
 8001450:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001452:	f7fe ff21 	bl	8000298 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001456:	0023      	movs	r3, r4
 8001458:	3350      	adds	r3, #80	; 0x50
 800145a:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 800145c:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800145e:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8001460:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001462:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8001464:	0021      	movs	r1, r4
 8001466:	3152      	adds	r1, #82	; 0x52
 8001468:	880a      	ldrh	r2, [r1, #0]
 800146a:	b292      	uxth	r2, r2
 800146c:	2a00      	cmp	r2, #0
 800146e:	d10d      	bne.n	800148c <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001470:	9b03      	ldr	r3, [sp, #12]
 8001472:	2140      	movs	r1, #64	; 0x40
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	0020      	movs	r0, r4
 8001478:	9b02      	ldr	r3, [sp, #8]
 800147a:	f7ff ff91 	bl	80013a0 <UART_WaitOnFlagUntilTimeout>
 800147e:	2800      	cmp	r0, #0
 8001480:	d112      	bne.n	80014a8 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 8001482:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001484:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8001486:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 8001488:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800148a:	e00e      	b.n	80014aa <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 800148c:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800148e:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8001490:	3b01      	subs	r3, #1
 8001492:	b29b      	uxth	r3, r3
 8001494:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001496:	9b03      	ldr	r3, [sp, #12]
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	0020      	movs	r0, r4
 800149e:	9b02      	ldr	r3, [sp, #8]
 80014a0:	f7ff ff7e 	bl	80013a0 <UART_WaitOnFlagUntilTimeout>
 80014a4:	2800      	cmp	r0, #0
 80014a6:	d002      	beq.n	80014ae <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 80014a8:	2003      	movs	r0, #3
}
 80014aa:	b005      	add	sp, #20
 80014ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014ae:	68a3      	ldr	r3, [r4, #8]
 80014b0:	6822      	ldr	r2, [r4, #0]
 80014b2:	42b3      	cmp	r3, r6
 80014b4:	d108      	bne.n	80014c8 <HAL_UART_Transmit+0xc4>
 80014b6:	6923      	ldr	r3, [r4, #16]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d105      	bne.n	80014c8 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80014bc:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 80014be:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80014c0:	05db      	lsls	r3, r3, #23
 80014c2:	0ddb      	lsrs	r3, r3, #23
 80014c4:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80014c6:	e7cd      	b.n	8001464 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80014c8:	782b      	ldrb	r3, [r5, #0]
 80014ca:	3501      	adds	r5, #1
 80014cc:	8513      	strh	r3, [r2, #40]	; 0x28
 80014ce:	e7c9      	b.n	8001464 <HAL_UART_Transmit+0x60>

080014d0 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80014d0:	2312      	movs	r3, #18
{
 80014d2:	b530      	push	{r4, r5, lr}
 80014d4:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80014d6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80014d8:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80014da:	3b02      	subs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014dc:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80014de:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80014e0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e2:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e4:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80014e6:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ea:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80014ec:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ee:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014f0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80014f2:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80014f4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f6:	f7ff fae7 	bl	8000ac8 <HAL_RCC_OscConfig>
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d000      	beq.n	8001500 <SystemClock_Config+0x30>
 80014fe:	e7fe      	b.n	80014fe <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001500:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001502:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001504:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001506:	0021      	movs	r1, r4
 8001508:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150a:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150c:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800150e:	f7ff fcef 	bl	8000ef0 <HAL_RCC_ClockConfig>
 8001512:	2800      	cmp	r0, #0
 8001514:	d000      	beq.n	8001518 <SystemClock_Config+0x48>
 8001516:	e7fe      	b.n	8001516 <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001518:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800151a:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800151c:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800151e:	f7ff fd93 	bl	8001048 <HAL_RCCEx_PeriphCLKConfig>
 8001522:	1e04      	subs	r4, r0, #0
 8001524:	d000      	beq.n	8001528 <SystemClock_Config+0x58>
 8001526:	e7fe      	b.n	8001526 <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001528:	f7ff fd78 	bl	800101c <HAL_RCC_GetHCLKFreq>
 800152c:	21fa      	movs	r1, #250	; 0xfa
 800152e:	0089      	lsls	r1, r1, #2
 8001530:	f7fe fdfc 	bl	800012c <__udivsi3>
 8001534:	f7ff f9ea 	bl	800090c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001538:	2004      	movs	r0, #4
 800153a:	f7ff fa01 	bl	8000940 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800153e:	2001      	movs	r0, #1
 8001540:	0022      	movs	r2, r4
 8001542:	0021      	movs	r1, r4
 8001544:	4240      	negs	r0, r0
 8001546:	f7ff f9a7 	bl	8000898 <HAL_NVIC_SetPriority>
}
 800154a:	b015      	add	sp, #84	; 0x54
 800154c:	bd30      	pop	{r4, r5, pc}
	...

08001550 <main>:
{
 8001550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001552:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8001554:	f7fe fe88 	bl	8000268 <HAL_Init>
  SystemClock_Config();
 8001558:	f7ff ffba 	bl	80014d0 <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	2080      	movs	r0, #128	; 0x80
 800155e:	4a63      	ldr	r2, [pc, #396]	; (80016ec <main+0x19c>)
 8001560:	0280      	lsls	r0, r0, #10
 8001562:	6951      	ldr	r1, [r2, #20]
  huart1.Instance = USART1;
 8001564:	4e62      	ldr	r6, [pc, #392]	; (80016f0 <main+0x1a0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	4301      	orrs	r1, r0
 8001568:	6151      	str	r1, [r2, #20]
 800156a:	6953      	ldr	r3, [r2, #20]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800156c:	220c      	movs	r2, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	4003      	ands	r3, r0
 8001570:	9305      	str	r3, [sp, #20]
 8001572:	9b05      	ldr	r3, [sp, #20]
  huart1.Instance = USART1;
 8001574:	4b5f      	ldr	r3, [pc, #380]	; (80016f4 <main+0x1a4>)
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001576:	0030      	movs	r0, r6
  huart1.Instance = USART1;
 8001578:	6033      	str	r3, [r6, #0]
  huart1.Init.BaudRate = 38400;
 800157a:	2396      	movs	r3, #150	; 0x96
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	6073      	str	r3, [r6, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001580:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001582:	6172      	str	r2, [r6, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001584:	60b3      	str	r3, [r6, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001586:	60f3      	str	r3, [r6, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001588:	6133      	str	r3, [r6, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	61b3      	str	r3, [r6, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	61f3      	str	r3, [r6, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158e:	6233      	str	r3, [r6, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001590:	6273      	str	r3, [r6, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001592:	f7ff fec9 	bl	8001328 <HAL_HalfDuplex_Init>
 8001596:	2800      	cmp	r0, #0
 8001598:	d000      	beq.n	800159c <main+0x4c>
 800159a:	e7fe      	b.n	800159a <main+0x4a>
  hadc.Instance = ADC1;
 800159c:	4c56      	ldr	r4, [pc, #344]	; (80016f8 <main+0x1a8>)
 800159e:	4b57      	ldr	r3, [pc, #348]	; (80016fc <main+0x1ac>)
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a0:	22c2      	movs	r2, #194	; 0xc2
  hadc.Instance = ADC1;
 80015a2:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015a4:	2704      	movs	r7, #4
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80015a6:	2301      	movs	r3, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015a8:	6060      	str	r0, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80015aa:	60a0      	str	r0, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ac:	60e0      	str	r0, [r4, #12]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80015ae:	61a0      	str	r0, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80015b0:	61e0      	str	r0, [r4, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80015b2:	6260      	str	r0, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015b4:	32ff      	adds	r2, #255	; 0xff
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015b6:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 80015b8:	6320      	str	r0, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015ba:	0020      	movs	r0, r4
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80015bc:	6123      	str	r3, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015be:	6167      	str	r7, [r4, #20]
  hadc.Init.ContinuousConvMode = ENABLE;
 80015c0:	6223      	str	r3, [r4, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c2:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015c4:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015c6:	f7fe ff2d 	bl	8000424 <HAL_ADC_Init>
 80015ca:	2800      	cmp	r0, #0
 80015cc:	d000      	beq.n	80015d0 <main+0x80>
 80015ce:	e7fe      	b.n	80015ce <main+0x7e>
  sConfig.Channel = ADC_CHANNEL_3;
 80015d0:	2303      	movs	r3, #3
 80015d2:	4d4b      	ldr	r5, [pc, #300]	; (8001700 <main+0x1b0>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015d4:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 80015d6:	602b      	str	r3, [r5, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	015b      	lsls	r3, r3, #5
 80015dc:	606b      	str	r3, [r5, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80015de:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015e0:	0029      	movs	r1, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80015e2:	60ab      	str	r3, [r5, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015e4:	f7ff f8e2 	bl	80007ac <HAL_ADC_ConfigChannel>
 80015e8:	2800      	cmp	r0, #0
 80015ea:	d000      	beq.n	80015ee <main+0x9e>
 80015ec:	e7fe      	b.n	80015ec <main+0x9c>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015ee:	0029      	movs	r1, r5
 80015f0:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 80015f2:	602f      	str	r7, [r5, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015f4:	f7ff f8da 	bl	80007ac <HAL_ADC_ConfigChannel>
 80015f8:	2800      	cmp	r0, #0
 80015fa:	d176      	bne.n	80016ea <main+0x19a>
	  sConfig.Channel = ADC_CHANNEL_3;
 80015fc:	2303      	movs	r3, #3
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80015fe:	2701      	movs	r7, #1
	  sConfig.Channel = ADC_CHANNEL_3;
 8001600:	9303      	str	r3, [sp, #12]
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001602:	427f      	negs	r7, r7
	  sConfig.Channel = ADC_CHANNEL_3;
 8001604:	4d3e      	ldr	r5, [pc, #248]	; (8001700 <main+0x1b0>)
 8001606:	9b03      	ldr	r3, [sp, #12]
	  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8001608:	4c3b      	ldr	r4, [pc, #236]	; (80016f8 <main+0x1a8>)
	  sConfig.Channel = ADC_CHANNEL_3;
 800160a:	602b      	str	r3, [r5, #0]
	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	015b      	lsls	r3, r3, #5
 8001610:	606b      	str	r3, [r5, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001612:	2307      	movs	r3, #7
	  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8001614:	0029      	movs	r1, r5
 8001616:	0020      	movs	r0, r4
	  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001618:	60ab      	str	r3, [r5, #8]
	  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800161a:	f7ff f8c7 	bl	80007ac <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc);
 800161e:	0020      	movs	r0, r4
 8001620:	f7fe ffa6 	bl	8000570 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001624:	0039      	movs	r1, r7
 8001626:	0020      	movs	r0, r4
 8001628:	f7fe ffec 	bl	8000604 <HAL_ADC_PollForConversion>
	  adcValue1 = HAL_ADC_GetValue(&hadc);
 800162c:	0020      	movs	r0, r4
 800162e:	f7ff f847 	bl	80006c0 <HAL_ADC_GetValue>
 8001632:	b283      	uxth	r3, r0
	  HAL_ADC_Stop(&hadc);
 8001634:	0020      	movs	r0, r4
	  adcValue1 = HAL_ADC_GetValue(&hadc);
 8001636:	9301      	str	r3, [sp, #4]
	  HAL_ADC_Stop(&hadc);
 8001638:	f7fe ffc6 	bl	80005c8 <HAL_ADC_Stop>
	  sConfig.Rank = ADC_RANK_NONE;
 800163c:	4b31      	ldr	r3, [pc, #196]	; (8001704 <main+0x1b4>)
	  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800163e:	0029      	movs	r1, r5
 8001640:	0020      	movs	r0, r4
	  sConfig.Rank = ADC_RANK_NONE;
 8001642:	606b      	str	r3, [r5, #4]
	  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8001644:	f7ff f8b2 	bl	80007ac <HAL_ADC_ConfigChannel>
	  HAL_Delay(1);
 8001648:	2001      	movs	r0, #1
 800164a:	f7fe fe2b 	bl	80002a4 <HAL_Delay>
	  sConfig.Channel = ADC_CHANNEL_4;
 800164e:	2304      	movs	r3, #4
 8001650:	602b      	str	r3, [r5, #0]
	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	015b      	lsls	r3, r3, #5
 8001656:	606b      	str	r3, [r5, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001658:	2307      	movs	r3, #7
	  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800165a:	0029      	movs	r1, r5
 800165c:	0020      	movs	r0, r4
	  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800165e:	60ab      	str	r3, [r5, #8]
	  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8001660:	f7ff f8a4 	bl	80007ac <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc);
 8001664:	0020      	movs	r0, r4
 8001666:	f7fe ff83 	bl	8000570 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800166a:	0039      	movs	r1, r7
 800166c:	0020      	movs	r0, r4
 800166e:	f7fe ffc9 	bl	8000604 <HAL_ADC_PollForConversion>
	  adcValue2 = HAL_ADC_GetValue(&hadc);
 8001672:	0020      	movs	r0, r4
 8001674:	f7ff f824 	bl	80006c0 <HAL_ADC_GetValue>
 8001678:	b283      	uxth	r3, r0
	  HAL_ADC_Stop(&hadc);
 800167a:	0020      	movs	r0, r4
	  adcValue2 = HAL_ADC_GetValue(&hadc);
 800167c:	9302      	str	r3, [sp, #8]
	  HAL_ADC_Stop(&hadc);
 800167e:	f7fe ffa3 	bl	80005c8 <HAL_ADC_Stop>
	  sConfig.Rank = ADC_RANK_NONE;
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <main+0x1b4>)
	  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8001684:	0029      	movs	r1, r5
 8001686:	0020      	movs	r0, r4
	  sConfig.Rank = ADC_RANK_NONE;
 8001688:	606b      	str	r3, [r5, #4]
	  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800168a:	f7ff f88f 	bl	80007ac <HAL_ADC_ConfigChannel>
	   if(adcValue1 == 0)
 800168e:	9b01      	ldr	r3, [sp, #4]
		   sprintf(msg, "Down");
 8001690:	491d      	ldr	r1, [pc, #116]	; (8001708 <main+0x1b8>)
	   if(adcValue1 == 0)
 8001692:	2b00      	cmp	r3, #0
 8001694:	d004      	beq.n	80016a0 <main+0x150>
	   else if (adcValue1 > 3000)
 8001696:	4b1d      	ldr	r3, [pc, #116]	; (800170c <main+0x1bc>)
 8001698:	9a01      	ldr	r2, [sp, #4]
 800169a:	429a      	cmp	r2, r3
 800169c:	d90c      	bls.n	80016b8 <main+0x168>
		   sprintf(msg, "Up");
 800169e:	491c      	ldr	r1, [pc, #112]	; (8001710 <main+0x1c0>)
 80016a0:	a806      	add	r0, sp, #24
 80016a2:	f000 f940 	bl	8001926 <strcpy>
		   HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80016a6:	a806      	add	r0, sp, #24
 80016a8:	f7fe fd2e 	bl	8000108 <strlen>
 80016ac:	003b      	movs	r3, r7
 80016ae:	b282      	uxth	r2, r0
 80016b0:	a906      	add	r1, sp, #24
 80016b2:	0030      	movs	r0, r6
 80016b4:	f7ff fea6 	bl	8001404 <HAL_UART_Transmit>
	   if (adcValue2 == 0)
 80016b8:	9b02      	ldr	r3, [sp, #8]
		   sprintf(msg, "Right");
 80016ba:	4916      	ldr	r1, [pc, #88]	; (8001714 <main+0x1c4>)
	   if (adcValue2 == 0)
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d004      	beq.n	80016ca <main+0x17a>
	   else if (adcValue2 > 3000)
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <main+0x1bc>)
 80016c2:	9a02      	ldr	r2, [sp, #8]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d90c      	bls.n	80016e2 <main+0x192>
		   sprintf(msg, "Left");
 80016c8:	4913      	ldr	r1, [pc, #76]	; (8001718 <main+0x1c8>)
 80016ca:	a806      	add	r0, sp, #24
 80016cc:	f000 f92b 	bl	8001926 <strcpy>
		   HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80016d0:	a806      	add	r0, sp, #24
 80016d2:	f7fe fd19 	bl	8000108 <strlen>
 80016d6:	003b      	movs	r3, r7
 80016d8:	b282      	uxth	r2, r0
 80016da:	a906      	add	r1, sp, #24
 80016dc:	0030      	movs	r0, r6
 80016de:	f7ff fe91 	bl	8001404 <HAL_UART_Transmit>
	   HAL_Delay(10);
 80016e2:	200a      	movs	r0, #10
 80016e4:	f7fe fdde 	bl	80002a4 <HAL_Delay>
	  sConfig.Channel = ADC_CHANNEL_3;
 80016e8:	e78c      	b.n	8001604 <main+0xb4>
 80016ea:	e7fe      	b.n	80016ea <main+0x19a>
 80016ec:	40021000 	.word	0x40021000
 80016f0:	20000024 	.word	0x20000024
 80016f4:	40013800 	.word	0x40013800
 80016f8:	200000a0 	.word	0x200000a0
 80016fc:	40012400 	.word	0x40012400
 8001700:	20000094 	.word	0x20000094
 8001704:	00001001 	.word	0x00001001
 8001708:	08001974 	.word	0x08001974
 800170c:	00000bb8 	.word	0x00000bb8
 8001710:	08001979 	.word	0x08001979
 8001714:	0800197c 	.word	0x0800197c
 8001718:	08001982 	.word	0x08001982

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	2001      	movs	r0, #1
 8001720:	4a0c      	ldr	r2, [pc, #48]	; (8001754 <HAL_MspInit+0x38>)
 8001722:	6991      	ldr	r1, [r2, #24]
 8001724:	4301      	orrs	r1, r0
 8001726:	6191      	str	r1, [r2, #24]
 8001728:	6993      	ldr	r3, [r2, #24]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172c:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800172e:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001730:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001732:	3806      	subs	r0, #6
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001734:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001736:	f7ff f8af 	bl	8000898 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2002      	movs	r0, #2
 800173e:	0011      	movs	r1, r2
 8001740:	4240      	negs	r0, r0
 8001742:	f7ff f8a9 	bl	8000898 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2001      	movs	r0, #1
 800174a:	0011      	movs	r1, r2
 800174c:	4240      	negs	r0, r0
 800174e:	f7ff f8a3 	bl	8000898 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bd07      	pop	{r0, r1, r2, pc}
 8001754:	40021000 	.word	0x40021000

08001758 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001758:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_ADC_MspInit+0x4c>)
 800175c:	6802      	ldr	r2, [r0, #0]
{
 800175e:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 8001760:	429a      	cmp	r2, r3
 8001762:	d11c      	bne.n	800179e <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001764:	2080      	movs	r0, #128	; 0x80
 8001766:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <HAL_ADC_MspInit+0x50>)
 8001768:	0080      	lsls	r0, r0, #2
 800176a:	6991      	ldr	r1, [r2, #24]
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2400      	movs	r4, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800176e:	4301      	orrs	r1, r0
 8001770:	6191      	str	r1, [r2, #24]
 8001772:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001776:	4003      	ands	r3, r0
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800177e:	2318      	movs	r3, #24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001782:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001784:	3b15      	subs	r3, #21
 8001786:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f7ff f8ed 	bl	8000968 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800178e:	200c      	movs	r0, #12
 8001790:	0022      	movs	r2, r4
 8001792:	0021      	movs	r1, r4
 8001794:	f7ff f880 	bl	8000898 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001798:	200c      	movs	r0, #12
 800179a:	f7ff f8ad 	bl	80008f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800179e:	b006      	add	sp, #24
 80017a0:	bd10      	pop	{r4, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	40012400 	.word	0x40012400
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_UART_MspInit+0x40>)
 80017b0:	6802      	ldr	r2, [r0, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d117      	bne.n	80017e6 <HAL_UART_MspInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017b6:	2080      	movs	r0, #128	; 0x80
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <HAL_UART_MspInit+0x44>)
 80017ba:	01c0      	lsls	r0, r0, #7
 80017bc:	6991      	ldr	r1, [r2, #24]
 80017be:	4301      	orrs	r1, r0
 80017c0:	6191      	str	r1, [r2, #24]
 80017c2:	6993      	ldr	r3, [r2, #24]
    PA2     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c4:	2203      	movs	r2, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 80017c6:	4003      	ands	r3, r0
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017cc:	2304      	movs	r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017d0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d2:	330e      	adds	r3, #14
 80017d4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d8:	3b11      	subs	r3, #17
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017de:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80017e0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f7ff f8c1 	bl	8000968 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017e6:	b007      	add	sp, #28
 80017e8:	bd00      	pop	{pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	40013800 	.word	0x40013800
 80017f0:	40021000 	.word	0x40021000

080017f4 <NMI_Handler>:
 80017f4:	4770      	bx	lr

080017f6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80017f6:	e7fe      	b.n	80017f6 <HardFault_Handler>

080017f8 <SVC_Handler>:
 80017f8:	4770      	bx	lr

080017fa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fa:	4770      	bx	lr

080017fc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80017fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fe:	f7fe fd43 	bl	8000288 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001802:	f7ff f8ac 	bl	800095e <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001806:	bd10      	pop	{r4, pc}

08001808 <ADC1_IRQHandler>:

/**
* @brief This function handles ADC interrupt.
*/
void ADC1_IRQHandler(void)
{
 8001808:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800180a:	4802      	ldr	r0, [pc, #8]	; (8001814 <ADC1_IRQHandler+0xc>)
 800180c:	f7fe ff5e 	bl	80006cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001810:	bd10      	pop	{r4, pc}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	200000a0 	.word	0x200000a0

08001818 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001818:	2101      	movs	r1, #1
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800181c:	4811      	ldr	r0, [pc, #68]	; (8001864 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	4002      	ands	r2, r0
 8001828:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	480e      	ldr	r0, [pc, #56]	; (8001868 <SystemInit+0x50>)
 800182e:	4002      	ands	r2, r0
 8001830:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	480d      	ldr	r0, [pc, #52]	; (800186c <SystemInit+0x54>)
 8001836:	4002      	ands	r2, r0
 8001838:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	480c      	ldr	r0, [pc, #48]	; (8001870 <SystemInit+0x58>)
 800183e:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001840:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001842:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001846:	4382      	bics	r2, r0
 8001848:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800184a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800184c:	4809      	ldr	r0, [pc, #36]	; (8001874 <SystemInit+0x5c>)
 800184e:	4002      	ands	r2, r0
 8001850:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001854:	438a      	bics	r2, r1
 8001856:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]

}
 800185c:	4770      	bx	lr
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	40021000 	.word	0x40021000
 8001864:	08ffb80c 	.word	0x08ffb80c
 8001868:	fef6ffff 	.word	0xfef6ffff
 800186c:	fffbffff 	.word	0xfffbffff
 8001870:	ffc0ffff 	.word	0xffc0ffff
 8001874:	fffffeec 	.word	0xfffffeec

08001878 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800187a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800187c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800187e:	e003      	b.n	8001888 <LoopCopyDataInit>

08001880 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001882:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001884:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001886:	3104      	adds	r1, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001888:	480b      	ldr	r0, [pc, #44]	; (80018b8 <LoopForever+0xa>)
  ldr r3, =_edata
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <LoopForever+0xe>)
  adds r2, r0, r1
 800188c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800188e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001890:	d3f6      	bcc.n	8001880 <CopyDataInit>
  ldr r2, =_sbss
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <LoopForever+0x12>)
  b LoopFillZerobss
 8001894:	e002      	b.n	800189c <LoopFillZerobss>

08001896 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  str  r3, [r2]
 8001898:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189a:	3204      	adds	r2, #4

0800189c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <LoopForever+0x16>)
  cmp r2, r3
 800189e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018a0:	d3f9      	bcc.n	8001896 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018a2:	f7ff ffb9 	bl	8001818 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80018a6:	f000 f811 	bl	80018cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018aa:	f7ff fe51 	bl	8001550 <main>

080018ae <LoopForever>:

LoopForever:
    b LoopForever
 80018ae:	e7fe      	b.n	80018ae <LoopForever>
  ldr   r0, =_estack
 80018b0:	20001000 	.word	0x20001000
  ldr r3, =_sidata
 80018b4:	080019a8 	.word	0x080019a8
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018bc:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80018c0:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80018c4:	200000ec 	.word	0x200000ec

080018c8 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <DMA1_Channel1_IRQHandler>
	...

080018cc <__libc_init_array>:
 80018cc:	b570      	push	{r4, r5, r6, lr}
 80018ce:	2600      	movs	r6, #0
 80018d0:	4d0c      	ldr	r5, [pc, #48]	; (8001904 <__libc_init_array+0x38>)
 80018d2:	4c0d      	ldr	r4, [pc, #52]	; (8001908 <__libc_init_array+0x3c>)
 80018d4:	1b64      	subs	r4, r4, r5
 80018d6:	10a4      	asrs	r4, r4, #2
 80018d8:	42a6      	cmp	r6, r4
 80018da:	d109      	bne.n	80018f0 <__libc_init_array+0x24>
 80018dc:	2600      	movs	r6, #0
 80018de:	f000 f82b 	bl	8001938 <_init>
 80018e2:	4d0a      	ldr	r5, [pc, #40]	; (800190c <__libc_init_array+0x40>)
 80018e4:	4c0a      	ldr	r4, [pc, #40]	; (8001910 <__libc_init_array+0x44>)
 80018e6:	1b64      	subs	r4, r4, r5
 80018e8:	10a4      	asrs	r4, r4, #2
 80018ea:	42a6      	cmp	r6, r4
 80018ec:	d105      	bne.n	80018fa <__libc_init_array+0x2e>
 80018ee:	bd70      	pop	{r4, r5, r6, pc}
 80018f0:	00b3      	lsls	r3, r6, #2
 80018f2:	58eb      	ldr	r3, [r5, r3]
 80018f4:	4798      	blx	r3
 80018f6:	3601      	adds	r6, #1
 80018f8:	e7ee      	b.n	80018d8 <__libc_init_array+0xc>
 80018fa:	00b3      	lsls	r3, r6, #2
 80018fc:	58eb      	ldr	r3, [r5, r3]
 80018fe:	4798      	blx	r3
 8001900:	3601      	adds	r6, #1
 8001902:	e7f2      	b.n	80018ea <__libc_init_array+0x1e>
 8001904:	080019a0 	.word	0x080019a0
 8001908:	080019a0 	.word	0x080019a0
 800190c:	080019a0 	.word	0x080019a0
 8001910:	080019a4 	.word	0x080019a4

08001914 <memcpy>:
 8001914:	2300      	movs	r3, #0
 8001916:	b510      	push	{r4, lr}
 8001918:	429a      	cmp	r2, r3
 800191a:	d100      	bne.n	800191e <memcpy+0xa>
 800191c:	bd10      	pop	{r4, pc}
 800191e:	5ccc      	ldrb	r4, [r1, r3]
 8001920:	54c4      	strb	r4, [r0, r3]
 8001922:	3301      	adds	r3, #1
 8001924:	e7f8      	b.n	8001918 <memcpy+0x4>

08001926 <strcpy>:
 8001926:	1c03      	adds	r3, r0, #0
 8001928:	780a      	ldrb	r2, [r1, #0]
 800192a:	3101      	adds	r1, #1
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	3301      	adds	r3, #1
 8001930:	2a00      	cmp	r2, #0
 8001932:	d1f9      	bne.n	8001928 <strcpy+0x2>
 8001934:	4770      	bx	lr
	...

08001938 <_init>:
 8001938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800193e:	bc08      	pop	{r3}
 8001940:	469e      	mov	lr, r3
 8001942:	4770      	bx	lr

08001944 <_fini>:
 8001944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800194a:	bc08      	pop	{r3}
 800194c:	469e      	mov	lr, r3
 800194e:	4770      	bx	lr
