
I05_ACS712.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002760  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002960  08002960  00012960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002964  08002964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000114  20000070  080029d8  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000184  080029d8  00020184  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c100  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d5e  00000000  00000000  0002c198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f6c  00000000  00000000  0002def6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000578  00000000  00000000  00030e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000708  00000000  00000000  000313e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003953  00000000  00000000  00031ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000223e  00000000  00000000  0003543b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00037679  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001280  00000000  00000000  000376f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002808 	.word	0x08002808

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002808 	.word	0x08002808

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_fdiv>:
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	4657      	mov	r7, sl
 8000248:	464e      	mov	r6, r9
 800024a:	46de      	mov	lr, fp
 800024c:	4645      	mov	r5, r8
 800024e:	b5e0      	push	{r5, r6, r7, lr}
 8000250:	0244      	lsls	r4, r0, #9
 8000252:	0043      	lsls	r3, r0, #1
 8000254:	0fc6      	lsrs	r6, r0, #31
 8000256:	b083      	sub	sp, #12
 8000258:	1c0f      	adds	r7, r1, #0
 800025a:	0a64      	lsrs	r4, r4, #9
 800025c:	0e1b      	lsrs	r3, r3, #24
 800025e:	46b2      	mov	sl, r6
 8000260:	d053      	beq.n	800030a <__aeabi_fdiv+0xc6>
 8000262:	2bff      	cmp	r3, #255	; 0xff
 8000264:	d027      	beq.n	80002b6 <__aeabi_fdiv+0x72>
 8000266:	2280      	movs	r2, #128	; 0x80
 8000268:	00e4      	lsls	r4, r4, #3
 800026a:	04d2      	lsls	r2, r2, #19
 800026c:	4314      	orrs	r4, r2
 800026e:	227f      	movs	r2, #127	; 0x7f
 8000270:	4252      	negs	r2, r2
 8000272:	4690      	mov	r8, r2
 8000274:	4498      	add	r8, r3
 8000276:	2300      	movs	r3, #0
 8000278:	4699      	mov	r9, r3
 800027a:	469b      	mov	fp, r3
 800027c:	027d      	lsls	r5, r7, #9
 800027e:	0078      	lsls	r0, r7, #1
 8000280:	0ffb      	lsrs	r3, r7, #31
 8000282:	0a6d      	lsrs	r5, r5, #9
 8000284:	0e00      	lsrs	r0, r0, #24
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	d024      	beq.n	80002d4 <__aeabi_fdiv+0x90>
 800028a:	28ff      	cmp	r0, #255	; 0xff
 800028c:	d046      	beq.n	800031c <__aeabi_fdiv+0xd8>
 800028e:	2380      	movs	r3, #128	; 0x80
 8000290:	2100      	movs	r1, #0
 8000292:	00ed      	lsls	r5, r5, #3
 8000294:	04db      	lsls	r3, r3, #19
 8000296:	431d      	orrs	r5, r3
 8000298:	387f      	subs	r0, #127	; 0x7f
 800029a:	4647      	mov	r7, r8
 800029c:	1a38      	subs	r0, r7, r0
 800029e:	464f      	mov	r7, r9
 80002a0:	430f      	orrs	r7, r1
 80002a2:	00bf      	lsls	r7, r7, #2
 80002a4:	46b9      	mov	r9, r7
 80002a6:	0033      	movs	r3, r6
 80002a8:	9a00      	ldr	r2, [sp, #0]
 80002aa:	4f87      	ldr	r7, [pc, #540]	; (80004c8 <__aeabi_fdiv+0x284>)
 80002ac:	4053      	eors	r3, r2
 80002ae:	464a      	mov	r2, r9
 80002b0:	58ba      	ldr	r2, [r7, r2]
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	4697      	mov	pc, r2
 80002b6:	2c00      	cmp	r4, #0
 80002b8:	d14e      	bne.n	8000358 <__aeabi_fdiv+0x114>
 80002ba:	2308      	movs	r3, #8
 80002bc:	4699      	mov	r9, r3
 80002be:	33f7      	adds	r3, #247	; 0xf7
 80002c0:	4698      	mov	r8, r3
 80002c2:	3bfd      	subs	r3, #253	; 0xfd
 80002c4:	469b      	mov	fp, r3
 80002c6:	027d      	lsls	r5, r7, #9
 80002c8:	0078      	lsls	r0, r7, #1
 80002ca:	0ffb      	lsrs	r3, r7, #31
 80002cc:	0a6d      	lsrs	r5, r5, #9
 80002ce:	0e00      	lsrs	r0, r0, #24
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	d1da      	bne.n	800028a <__aeabi_fdiv+0x46>
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d126      	bne.n	8000326 <__aeabi_fdiv+0xe2>
 80002d8:	2000      	movs	r0, #0
 80002da:	2101      	movs	r1, #1
 80002dc:	0033      	movs	r3, r6
 80002de:	9a00      	ldr	r2, [sp, #0]
 80002e0:	4f7a      	ldr	r7, [pc, #488]	; (80004cc <__aeabi_fdiv+0x288>)
 80002e2:	4053      	eors	r3, r2
 80002e4:	4642      	mov	r2, r8
 80002e6:	1a10      	subs	r0, r2, r0
 80002e8:	464a      	mov	r2, r9
 80002ea:	430a      	orrs	r2, r1
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	58ba      	ldr	r2, [r7, r2]
 80002f0:	001d      	movs	r5, r3
 80002f2:	4697      	mov	pc, r2
 80002f4:	9b00      	ldr	r3, [sp, #0]
 80002f6:	002c      	movs	r4, r5
 80002f8:	469a      	mov	sl, r3
 80002fa:	468b      	mov	fp, r1
 80002fc:	465b      	mov	r3, fp
 80002fe:	2b02      	cmp	r3, #2
 8000300:	d131      	bne.n	8000366 <__aeabi_fdiv+0x122>
 8000302:	4653      	mov	r3, sl
 8000304:	21ff      	movs	r1, #255	; 0xff
 8000306:	2400      	movs	r4, #0
 8000308:	e038      	b.n	800037c <__aeabi_fdiv+0x138>
 800030a:	2c00      	cmp	r4, #0
 800030c:	d117      	bne.n	800033e <__aeabi_fdiv+0xfa>
 800030e:	2304      	movs	r3, #4
 8000310:	4699      	mov	r9, r3
 8000312:	2300      	movs	r3, #0
 8000314:	4698      	mov	r8, r3
 8000316:	3301      	adds	r3, #1
 8000318:	469b      	mov	fp, r3
 800031a:	e7af      	b.n	800027c <__aeabi_fdiv+0x38>
 800031c:	20ff      	movs	r0, #255	; 0xff
 800031e:	2d00      	cmp	r5, #0
 8000320:	d10b      	bne.n	800033a <__aeabi_fdiv+0xf6>
 8000322:	2102      	movs	r1, #2
 8000324:	e7da      	b.n	80002dc <__aeabi_fdiv+0x98>
 8000326:	0028      	movs	r0, r5
 8000328:	f000 fc00 	bl	8000b2c <__clzsi2>
 800032c:	1f43      	subs	r3, r0, #5
 800032e:	409d      	lsls	r5, r3
 8000330:	2376      	movs	r3, #118	; 0x76
 8000332:	425b      	negs	r3, r3
 8000334:	1a18      	subs	r0, r3, r0
 8000336:	2100      	movs	r1, #0
 8000338:	e7af      	b.n	800029a <__aeabi_fdiv+0x56>
 800033a:	2103      	movs	r1, #3
 800033c:	e7ad      	b.n	800029a <__aeabi_fdiv+0x56>
 800033e:	0020      	movs	r0, r4
 8000340:	f000 fbf4 	bl	8000b2c <__clzsi2>
 8000344:	1f43      	subs	r3, r0, #5
 8000346:	409c      	lsls	r4, r3
 8000348:	2376      	movs	r3, #118	; 0x76
 800034a:	425b      	negs	r3, r3
 800034c:	1a1b      	subs	r3, r3, r0
 800034e:	4698      	mov	r8, r3
 8000350:	2300      	movs	r3, #0
 8000352:	4699      	mov	r9, r3
 8000354:	469b      	mov	fp, r3
 8000356:	e791      	b.n	800027c <__aeabi_fdiv+0x38>
 8000358:	230c      	movs	r3, #12
 800035a:	4699      	mov	r9, r3
 800035c:	33f3      	adds	r3, #243	; 0xf3
 800035e:	4698      	mov	r8, r3
 8000360:	3bfc      	subs	r3, #252	; 0xfc
 8000362:	469b      	mov	fp, r3
 8000364:	e78a      	b.n	800027c <__aeabi_fdiv+0x38>
 8000366:	2b03      	cmp	r3, #3
 8000368:	d100      	bne.n	800036c <__aeabi_fdiv+0x128>
 800036a:	e0a5      	b.n	80004b8 <__aeabi_fdiv+0x274>
 800036c:	4655      	mov	r5, sl
 800036e:	2b01      	cmp	r3, #1
 8000370:	d000      	beq.n	8000374 <__aeabi_fdiv+0x130>
 8000372:	e081      	b.n	8000478 <__aeabi_fdiv+0x234>
 8000374:	2301      	movs	r3, #1
 8000376:	2100      	movs	r1, #0
 8000378:	2400      	movs	r4, #0
 800037a:	402b      	ands	r3, r5
 800037c:	0264      	lsls	r4, r4, #9
 800037e:	05c9      	lsls	r1, r1, #23
 8000380:	0a60      	lsrs	r0, r4, #9
 8000382:	07db      	lsls	r3, r3, #31
 8000384:	4308      	orrs	r0, r1
 8000386:	4318      	orrs	r0, r3
 8000388:	b003      	add	sp, #12
 800038a:	bc3c      	pop	{r2, r3, r4, r5}
 800038c:	4690      	mov	r8, r2
 800038e:	4699      	mov	r9, r3
 8000390:	46a2      	mov	sl, r4
 8000392:	46ab      	mov	fp, r5
 8000394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000396:	2480      	movs	r4, #128	; 0x80
 8000398:	2300      	movs	r3, #0
 800039a:	03e4      	lsls	r4, r4, #15
 800039c:	21ff      	movs	r1, #255	; 0xff
 800039e:	e7ed      	b.n	800037c <__aeabi_fdiv+0x138>
 80003a0:	21ff      	movs	r1, #255	; 0xff
 80003a2:	2400      	movs	r4, #0
 80003a4:	e7ea      	b.n	800037c <__aeabi_fdiv+0x138>
 80003a6:	2301      	movs	r3, #1
 80003a8:	1a59      	subs	r1, r3, r1
 80003aa:	291b      	cmp	r1, #27
 80003ac:	dd66      	ble.n	800047c <__aeabi_fdiv+0x238>
 80003ae:	9a01      	ldr	r2, [sp, #4]
 80003b0:	4013      	ands	r3, r2
 80003b2:	2100      	movs	r1, #0
 80003b4:	2400      	movs	r4, #0
 80003b6:	e7e1      	b.n	800037c <__aeabi_fdiv+0x138>
 80003b8:	2380      	movs	r3, #128	; 0x80
 80003ba:	03db      	lsls	r3, r3, #15
 80003bc:	421c      	tst	r4, r3
 80003be:	d038      	beq.n	8000432 <__aeabi_fdiv+0x1ee>
 80003c0:	421d      	tst	r5, r3
 80003c2:	d051      	beq.n	8000468 <__aeabi_fdiv+0x224>
 80003c4:	431c      	orrs	r4, r3
 80003c6:	0264      	lsls	r4, r4, #9
 80003c8:	0a64      	lsrs	r4, r4, #9
 80003ca:	0033      	movs	r3, r6
 80003cc:	21ff      	movs	r1, #255	; 0xff
 80003ce:	e7d5      	b.n	800037c <__aeabi_fdiv+0x138>
 80003d0:	0163      	lsls	r3, r4, #5
 80003d2:	016c      	lsls	r4, r5, #5
 80003d4:	42a3      	cmp	r3, r4
 80003d6:	d23b      	bcs.n	8000450 <__aeabi_fdiv+0x20c>
 80003d8:	261b      	movs	r6, #27
 80003da:	2100      	movs	r1, #0
 80003dc:	3801      	subs	r0, #1
 80003de:	2501      	movs	r5, #1
 80003e0:	001f      	movs	r7, r3
 80003e2:	0049      	lsls	r1, r1, #1
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	2f00      	cmp	r7, #0
 80003e8:	db01      	blt.n	80003ee <__aeabi_fdiv+0x1aa>
 80003ea:	429c      	cmp	r4, r3
 80003ec:	d801      	bhi.n	80003f2 <__aeabi_fdiv+0x1ae>
 80003ee:	1b1b      	subs	r3, r3, r4
 80003f0:	4329      	orrs	r1, r5
 80003f2:	3e01      	subs	r6, #1
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d1f3      	bne.n	80003e0 <__aeabi_fdiv+0x19c>
 80003f8:	001c      	movs	r4, r3
 80003fa:	1e63      	subs	r3, r4, #1
 80003fc:	419c      	sbcs	r4, r3
 80003fe:	430c      	orrs	r4, r1
 8000400:	0001      	movs	r1, r0
 8000402:	317f      	adds	r1, #127	; 0x7f
 8000404:	2900      	cmp	r1, #0
 8000406:	ddce      	ble.n	80003a6 <__aeabi_fdiv+0x162>
 8000408:	0763      	lsls	r3, r4, #29
 800040a:	d004      	beq.n	8000416 <__aeabi_fdiv+0x1d2>
 800040c:	230f      	movs	r3, #15
 800040e:	4023      	ands	r3, r4
 8000410:	2b04      	cmp	r3, #4
 8000412:	d000      	beq.n	8000416 <__aeabi_fdiv+0x1d2>
 8000414:	3404      	adds	r4, #4
 8000416:	0123      	lsls	r3, r4, #4
 8000418:	d503      	bpl.n	8000422 <__aeabi_fdiv+0x1de>
 800041a:	0001      	movs	r1, r0
 800041c:	4b2c      	ldr	r3, [pc, #176]	; (80004d0 <__aeabi_fdiv+0x28c>)
 800041e:	3180      	adds	r1, #128	; 0x80
 8000420:	401c      	ands	r4, r3
 8000422:	29fe      	cmp	r1, #254	; 0xfe
 8000424:	dd0d      	ble.n	8000442 <__aeabi_fdiv+0x1fe>
 8000426:	2301      	movs	r3, #1
 8000428:	9a01      	ldr	r2, [sp, #4]
 800042a:	21ff      	movs	r1, #255	; 0xff
 800042c:	4013      	ands	r3, r2
 800042e:	2400      	movs	r4, #0
 8000430:	e7a4      	b.n	800037c <__aeabi_fdiv+0x138>
 8000432:	2380      	movs	r3, #128	; 0x80
 8000434:	03db      	lsls	r3, r3, #15
 8000436:	431c      	orrs	r4, r3
 8000438:	0264      	lsls	r4, r4, #9
 800043a:	0a64      	lsrs	r4, r4, #9
 800043c:	0033      	movs	r3, r6
 800043e:	21ff      	movs	r1, #255	; 0xff
 8000440:	e79c      	b.n	800037c <__aeabi_fdiv+0x138>
 8000442:	2301      	movs	r3, #1
 8000444:	9a01      	ldr	r2, [sp, #4]
 8000446:	01a4      	lsls	r4, r4, #6
 8000448:	0a64      	lsrs	r4, r4, #9
 800044a:	b2c9      	uxtb	r1, r1
 800044c:	4013      	ands	r3, r2
 800044e:	e795      	b.n	800037c <__aeabi_fdiv+0x138>
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	261a      	movs	r6, #26
 8000454:	2101      	movs	r1, #1
 8000456:	e7c2      	b.n	80003de <__aeabi_fdiv+0x19a>
 8000458:	9b00      	ldr	r3, [sp, #0]
 800045a:	468b      	mov	fp, r1
 800045c:	469a      	mov	sl, r3
 800045e:	2400      	movs	r4, #0
 8000460:	e74c      	b.n	80002fc <__aeabi_fdiv+0xb8>
 8000462:	0263      	lsls	r3, r4, #9
 8000464:	d5e5      	bpl.n	8000432 <__aeabi_fdiv+0x1ee>
 8000466:	2500      	movs	r5, #0
 8000468:	2480      	movs	r4, #128	; 0x80
 800046a:	03e4      	lsls	r4, r4, #15
 800046c:	432c      	orrs	r4, r5
 800046e:	0264      	lsls	r4, r4, #9
 8000470:	0a64      	lsrs	r4, r4, #9
 8000472:	9b00      	ldr	r3, [sp, #0]
 8000474:	21ff      	movs	r1, #255	; 0xff
 8000476:	e781      	b.n	800037c <__aeabi_fdiv+0x138>
 8000478:	9501      	str	r5, [sp, #4]
 800047a:	e7c1      	b.n	8000400 <__aeabi_fdiv+0x1bc>
 800047c:	0023      	movs	r3, r4
 800047e:	2020      	movs	r0, #32
 8000480:	40cb      	lsrs	r3, r1
 8000482:	1a41      	subs	r1, r0, r1
 8000484:	408c      	lsls	r4, r1
 8000486:	1e61      	subs	r1, r4, #1
 8000488:	418c      	sbcs	r4, r1
 800048a:	431c      	orrs	r4, r3
 800048c:	0763      	lsls	r3, r4, #29
 800048e:	d004      	beq.n	800049a <__aeabi_fdiv+0x256>
 8000490:	230f      	movs	r3, #15
 8000492:	4023      	ands	r3, r4
 8000494:	2b04      	cmp	r3, #4
 8000496:	d000      	beq.n	800049a <__aeabi_fdiv+0x256>
 8000498:	3404      	adds	r4, #4
 800049a:	0163      	lsls	r3, r4, #5
 800049c:	d505      	bpl.n	80004aa <__aeabi_fdiv+0x266>
 800049e:	2301      	movs	r3, #1
 80004a0:	9a01      	ldr	r2, [sp, #4]
 80004a2:	2101      	movs	r1, #1
 80004a4:	4013      	ands	r3, r2
 80004a6:	2400      	movs	r4, #0
 80004a8:	e768      	b.n	800037c <__aeabi_fdiv+0x138>
 80004aa:	2301      	movs	r3, #1
 80004ac:	9a01      	ldr	r2, [sp, #4]
 80004ae:	01a4      	lsls	r4, r4, #6
 80004b0:	0a64      	lsrs	r4, r4, #9
 80004b2:	4013      	ands	r3, r2
 80004b4:	2100      	movs	r1, #0
 80004b6:	e761      	b.n	800037c <__aeabi_fdiv+0x138>
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	03db      	lsls	r3, r3, #15
 80004bc:	431c      	orrs	r4, r3
 80004be:	0264      	lsls	r4, r4, #9
 80004c0:	0a64      	lsrs	r4, r4, #9
 80004c2:	4653      	mov	r3, sl
 80004c4:	21ff      	movs	r1, #255	; 0xff
 80004c6:	e759      	b.n	800037c <__aeabi_fdiv+0x138>
 80004c8:	08002840 	.word	0x08002840
 80004cc:	08002880 	.word	0x08002880
 80004d0:	f7ffffff 	.word	0xf7ffffff

080004d4 <__aeabi_fmul>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	4657      	mov	r7, sl
 80004d8:	464e      	mov	r6, r9
 80004da:	4645      	mov	r5, r8
 80004dc:	46de      	mov	lr, fp
 80004de:	b5e0      	push	{r5, r6, r7, lr}
 80004e0:	0247      	lsls	r7, r0, #9
 80004e2:	0046      	lsls	r6, r0, #1
 80004e4:	4688      	mov	r8, r1
 80004e6:	0a7f      	lsrs	r7, r7, #9
 80004e8:	0e36      	lsrs	r6, r6, #24
 80004ea:	0fc4      	lsrs	r4, r0, #31
 80004ec:	2e00      	cmp	r6, #0
 80004ee:	d047      	beq.n	8000580 <__aeabi_fmul+0xac>
 80004f0:	2eff      	cmp	r6, #255	; 0xff
 80004f2:	d024      	beq.n	800053e <__aeabi_fmul+0x6a>
 80004f4:	00fb      	lsls	r3, r7, #3
 80004f6:	2780      	movs	r7, #128	; 0x80
 80004f8:	04ff      	lsls	r7, r7, #19
 80004fa:	431f      	orrs	r7, r3
 80004fc:	2300      	movs	r3, #0
 80004fe:	4699      	mov	r9, r3
 8000500:	469a      	mov	sl, r3
 8000502:	3e7f      	subs	r6, #127	; 0x7f
 8000504:	4643      	mov	r3, r8
 8000506:	025d      	lsls	r5, r3, #9
 8000508:	0058      	lsls	r0, r3, #1
 800050a:	0fdb      	lsrs	r3, r3, #31
 800050c:	0a6d      	lsrs	r5, r5, #9
 800050e:	0e00      	lsrs	r0, r0, #24
 8000510:	4698      	mov	r8, r3
 8000512:	d043      	beq.n	800059c <__aeabi_fmul+0xc8>
 8000514:	28ff      	cmp	r0, #255	; 0xff
 8000516:	d03b      	beq.n	8000590 <__aeabi_fmul+0xbc>
 8000518:	00eb      	lsls	r3, r5, #3
 800051a:	2580      	movs	r5, #128	; 0x80
 800051c:	2200      	movs	r2, #0
 800051e:	04ed      	lsls	r5, r5, #19
 8000520:	431d      	orrs	r5, r3
 8000522:	387f      	subs	r0, #127	; 0x7f
 8000524:	1836      	adds	r6, r6, r0
 8000526:	1c73      	adds	r3, r6, #1
 8000528:	4641      	mov	r1, r8
 800052a:	469b      	mov	fp, r3
 800052c:	464b      	mov	r3, r9
 800052e:	4061      	eors	r1, r4
 8000530:	4313      	orrs	r3, r2
 8000532:	2b0f      	cmp	r3, #15
 8000534:	d864      	bhi.n	8000600 <__aeabi_fmul+0x12c>
 8000536:	4875      	ldr	r0, [pc, #468]	; (800070c <__aeabi_fmul+0x238>)
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	58c3      	ldr	r3, [r0, r3]
 800053c:	469f      	mov	pc, r3
 800053e:	2f00      	cmp	r7, #0
 8000540:	d142      	bne.n	80005c8 <__aeabi_fmul+0xf4>
 8000542:	2308      	movs	r3, #8
 8000544:	4699      	mov	r9, r3
 8000546:	3b06      	subs	r3, #6
 8000548:	26ff      	movs	r6, #255	; 0xff
 800054a:	469a      	mov	sl, r3
 800054c:	e7da      	b.n	8000504 <__aeabi_fmul+0x30>
 800054e:	4641      	mov	r1, r8
 8000550:	2a02      	cmp	r2, #2
 8000552:	d028      	beq.n	80005a6 <__aeabi_fmul+0xd2>
 8000554:	2a03      	cmp	r2, #3
 8000556:	d100      	bne.n	800055a <__aeabi_fmul+0x86>
 8000558:	e0ce      	b.n	80006f8 <__aeabi_fmul+0x224>
 800055a:	2a01      	cmp	r2, #1
 800055c:	d000      	beq.n	8000560 <__aeabi_fmul+0x8c>
 800055e:	e0ac      	b.n	80006ba <__aeabi_fmul+0x1e6>
 8000560:	4011      	ands	r1, r2
 8000562:	2000      	movs	r0, #0
 8000564:	2200      	movs	r2, #0
 8000566:	b2cc      	uxtb	r4, r1
 8000568:	0240      	lsls	r0, r0, #9
 800056a:	05d2      	lsls	r2, r2, #23
 800056c:	0a40      	lsrs	r0, r0, #9
 800056e:	07e4      	lsls	r4, r4, #31
 8000570:	4310      	orrs	r0, r2
 8000572:	4320      	orrs	r0, r4
 8000574:	bc3c      	pop	{r2, r3, r4, r5}
 8000576:	4690      	mov	r8, r2
 8000578:	4699      	mov	r9, r3
 800057a:	46a2      	mov	sl, r4
 800057c:	46ab      	mov	fp, r5
 800057e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000580:	2f00      	cmp	r7, #0
 8000582:	d115      	bne.n	80005b0 <__aeabi_fmul+0xdc>
 8000584:	2304      	movs	r3, #4
 8000586:	4699      	mov	r9, r3
 8000588:	3b03      	subs	r3, #3
 800058a:	2600      	movs	r6, #0
 800058c:	469a      	mov	sl, r3
 800058e:	e7b9      	b.n	8000504 <__aeabi_fmul+0x30>
 8000590:	20ff      	movs	r0, #255	; 0xff
 8000592:	2202      	movs	r2, #2
 8000594:	2d00      	cmp	r5, #0
 8000596:	d0c5      	beq.n	8000524 <__aeabi_fmul+0x50>
 8000598:	2203      	movs	r2, #3
 800059a:	e7c3      	b.n	8000524 <__aeabi_fmul+0x50>
 800059c:	2d00      	cmp	r5, #0
 800059e:	d119      	bne.n	80005d4 <__aeabi_fmul+0x100>
 80005a0:	2000      	movs	r0, #0
 80005a2:	2201      	movs	r2, #1
 80005a4:	e7be      	b.n	8000524 <__aeabi_fmul+0x50>
 80005a6:	2401      	movs	r4, #1
 80005a8:	22ff      	movs	r2, #255	; 0xff
 80005aa:	400c      	ands	r4, r1
 80005ac:	2000      	movs	r0, #0
 80005ae:	e7db      	b.n	8000568 <__aeabi_fmul+0x94>
 80005b0:	0038      	movs	r0, r7
 80005b2:	f000 fabb 	bl	8000b2c <__clzsi2>
 80005b6:	2676      	movs	r6, #118	; 0x76
 80005b8:	1f43      	subs	r3, r0, #5
 80005ba:	409f      	lsls	r7, r3
 80005bc:	2300      	movs	r3, #0
 80005be:	4276      	negs	r6, r6
 80005c0:	1a36      	subs	r6, r6, r0
 80005c2:	4699      	mov	r9, r3
 80005c4:	469a      	mov	sl, r3
 80005c6:	e79d      	b.n	8000504 <__aeabi_fmul+0x30>
 80005c8:	230c      	movs	r3, #12
 80005ca:	4699      	mov	r9, r3
 80005cc:	3b09      	subs	r3, #9
 80005ce:	26ff      	movs	r6, #255	; 0xff
 80005d0:	469a      	mov	sl, r3
 80005d2:	e797      	b.n	8000504 <__aeabi_fmul+0x30>
 80005d4:	0028      	movs	r0, r5
 80005d6:	f000 faa9 	bl	8000b2c <__clzsi2>
 80005da:	1f43      	subs	r3, r0, #5
 80005dc:	409d      	lsls	r5, r3
 80005de:	2376      	movs	r3, #118	; 0x76
 80005e0:	425b      	negs	r3, r3
 80005e2:	1a18      	subs	r0, r3, r0
 80005e4:	2200      	movs	r2, #0
 80005e6:	e79d      	b.n	8000524 <__aeabi_fmul+0x50>
 80005e8:	2080      	movs	r0, #128	; 0x80
 80005ea:	2400      	movs	r4, #0
 80005ec:	03c0      	lsls	r0, r0, #15
 80005ee:	22ff      	movs	r2, #255	; 0xff
 80005f0:	e7ba      	b.n	8000568 <__aeabi_fmul+0x94>
 80005f2:	003d      	movs	r5, r7
 80005f4:	4652      	mov	r2, sl
 80005f6:	e7ab      	b.n	8000550 <__aeabi_fmul+0x7c>
 80005f8:	003d      	movs	r5, r7
 80005fa:	0021      	movs	r1, r4
 80005fc:	4652      	mov	r2, sl
 80005fe:	e7a7      	b.n	8000550 <__aeabi_fmul+0x7c>
 8000600:	0c3b      	lsrs	r3, r7, #16
 8000602:	469c      	mov	ip, r3
 8000604:	042a      	lsls	r2, r5, #16
 8000606:	0c12      	lsrs	r2, r2, #16
 8000608:	0c2b      	lsrs	r3, r5, #16
 800060a:	0014      	movs	r4, r2
 800060c:	4660      	mov	r0, ip
 800060e:	4665      	mov	r5, ip
 8000610:	043f      	lsls	r7, r7, #16
 8000612:	0c3f      	lsrs	r7, r7, #16
 8000614:	437c      	muls	r4, r7
 8000616:	4342      	muls	r2, r0
 8000618:	435d      	muls	r5, r3
 800061a:	437b      	muls	r3, r7
 800061c:	0c27      	lsrs	r7, r4, #16
 800061e:	189b      	adds	r3, r3, r2
 8000620:	18ff      	adds	r7, r7, r3
 8000622:	42ba      	cmp	r2, r7
 8000624:	d903      	bls.n	800062e <__aeabi_fmul+0x15a>
 8000626:	2380      	movs	r3, #128	; 0x80
 8000628:	025b      	lsls	r3, r3, #9
 800062a:	469c      	mov	ip, r3
 800062c:	4465      	add	r5, ip
 800062e:	0424      	lsls	r4, r4, #16
 8000630:	043a      	lsls	r2, r7, #16
 8000632:	0c24      	lsrs	r4, r4, #16
 8000634:	1912      	adds	r2, r2, r4
 8000636:	0193      	lsls	r3, r2, #6
 8000638:	1e5c      	subs	r4, r3, #1
 800063a:	41a3      	sbcs	r3, r4
 800063c:	0c3f      	lsrs	r7, r7, #16
 800063e:	0e92      	lsrs	r2, r2, #26
 8000640:	197d      	adds	r5, r7, r5
 8000642:	431a      	orrs	r2, r3
 8000644:	01ad      	lsls	r5, r5, #6
 8000646:	4315      	orrs	r5, r2
 8000648:	012b      	lsls	r3, r5, #4
 800064a:	d504      	bpl.n	8000656 <__aeabi_fmul+0x182>
 800064c:	2301      	movs	r3, #1
 800064e:	465e      	mov	r6, fp
 8000650:	086a      	lsrs	r2, r5, #1
 8000652:	401d      	ands	r5, r3
 8000654:	4315      	orrs	r5, r2
 8000656:	0032      	movs	r2, r6
 8000658:	327f      	adds	r2, #127	; 0x7f
 800065a:	2a00      	cmp	r2, #0
 800065c:	dd25      	ble.n	80006aa <__aeabi_fmul+0x1d6>
 800065e:	076b      	lsls	r3, r5, #29
 8000660:	d004      	beq.n	800066c <__aeabi_fmul+0x198>
 8000662:	230f      	movs	r3, #15
 8000664:	402b      	ands	r3, r5
 8000666:	2b04      	cmp	r3, #4
 8000668:	d000      	beq.n	800066c <__aeabi_fmul+0x198>
 800066a:	3504      	adds	r5, #4
 800066c:	012b      	lsls	r3, r5, #4
 800066e:	d503      	bpl.n	8000678 <__aeabi_fmul+0x1a4>
 8000670:	0032      	movs	r2, r6
 8000672:	4b27      	ldr	r3, [pc, #156]	; (8000710 <__aeabi_fmul+0x23c>)
 8000674:	3280      	adds	r2, #128	; 0x80
 8000676:	401d      	ands	r5, r3
 8000678:	2afe      	cmp	r2, #254	; 0xfe
 800067a:	dc94      	bgt.n	80005a6 <__aeabi_fmul+0xd2>
 800067c:	2401      	movs	r4, #1
 800067e:	01a8      	lsls	r0, r5, #6
 8000680:	0a40      	lsrs	r0, r0, #9
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	400c      	ands	r4, r1
 8000686:	e76f      	b.n	8000568 <__aeabi_fmul+0x94>
 8000688:	2080      	movs	r0, #128	; 0x80
 800068a:	03c0      	lsls	r0, r0, #15
 800068c:	4207      	tst	r7, r0
 800068e:	d007      	beq.n	80006a0 <__aeabi_fmul+0x1cc>
 8000690:	4205      	tst	r5, r0
 8000692:	d105      	bne.n	80006a0 <__aeabi_fmul+0x1cc>
 8000694:	4328      	orrs	r0, r5
 8000696:	0240      	lsls	r0, r0, #9
 8000698:	0a40      	lsrs	r0, r0, #9
 800069a:	4644      	mov	r4, r8
 800069c:	22ff      	movs	r2, #255	; 0xff
 800069e:	e763      	b.n	8000568 <__aeabi_fmul+0x94>
 80006a0:	4338      	orrs	r0, r7
 80006a2:	0240      	lsls	r0, r0, #9
 80006a4:	0a40      	lsrs	r0, r0, #9
 80006a6:	22ff      	movs	r2, #255	; 0xff
 80006a8:	e75e      	b.n	8000568 <__aeabi_fmul+0x94>
 80006aa:	2401      	movs	r4, #1
 80006ac:	1aa3      	subs	r3, r4, r2
 80006ae:	2b1b      	cmp	r3, #27
 80006b0:	dd05      	ble.n	80006be <__aeabi_fmul+0x1ea>
 80006b2:	400c      	ands	r4, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	2000      	movs	r0, #0
 80006b8:	e756      	b.n	8000568 <__aeabi_fmul+0x94>
 80006ba:	465e      	mov	r6, fp
 80006bc:	e7cb      	b.n	8000656 <__aeabi_fmul+0x182>
 80006be:	002a      	movs	r2, r5
 80006c0:	2020      	movs	r0, #32
 80006c2:	40da      	lsrs	r2, r3
 80006c4:	1ac3      	subs	r3, r0, r3
 80006c6:	409d      	lsls	r5, r3
 80006c8:	002b      	movs	r3, r5
 80006ca:	1e5d      	subs	r5, r3, #1
 80006cc:	41ab      	sbcs	r3, r5
 80006ce:	4313      	orrs	r3, r2
 80006d0:	075a      	lsls	r2, r3, #29
 80006d2:	d004      	beq.n	80006de <__aeabi_fmul+0x20a>
 80006d4:	220f      	movs	r2, #15
 80006d6:	401a      	ands	r2, r3
 80006d8:	2a04      	cmp	r2, #4
 80006da:	d000      	beq.n	80006de <__aeabi_fmul+0x20a>
 80006dc:	3304      	adds	r3, #4
 80006de:	015a      	lsls	r2, r3, #5
 80006e0:	d504      	bpl.n	80006ec <__aeabi_fmul+0x218>
 80006e2:	2401      	movs	r4, #1
 80006e4:	2201      	movs	r2, #1
 80006e6:	400c      	ands	r4, r1
 80006e8:	2000      	movs	r0, #0
 80006ea:	e73d      	b.n	8000568 <__aeabi_fmul+0x94>
 80006ec:	2401      	movs	r4, #1
 80006ee:	019b      	lsls	r3, r3, #6
 80006f0:	0a58      	lsrs	r0, r3, #9
 80006f2:	400c      	ands	r4, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	e737      	b.n	8000568 <__aeabi_fmul+0x94>
 80006f8:	2080      	movs	r0, #128	; 0x80
 80006fa:	2401      	movs	r4, #1
 80006fc:	03c0      	lsls	r0, r0, #15
 80006fe:	4328      	orrs	r0, r5
 8000700:	0240      	lsls	r0, r0, #9
 8000702:	0a40      	lsrs	r0, r0, #9
 8000704:	400c      	ands	r4, r1
 8000706:	22ff      	movs	r2, #255	; 0xff
 8000708:	e72e      	b.n	8000568 <__aeabi_fmul+0x94>
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	080028c0 	.word	0x080028c0
 8000710:	f7ffffff 	.word	0xf7ffffff

08000714 <__aeabi_fsub>:
 8000714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000716:	464f      	mov	r7, r9
 8000718:	46d6      	mov	lr, sl
 800071a:	4646      	mov	r6, r8
 800071c:	0044      	lsls	r4, r0, #1
 800071e:	b5c0      	push	{r6, r7, lr}
 8000720:	0fc2      	lsrs	r2, r0, #31
 8000722:	0247      	lsls	r7, r0, #9
 8000724:	0248      	lsls	r0, r1, #9
 8000726:	0a40      	lsrs	r0, r0, #9
 8000728:	4684      	mov	ip, r0
 800072a:	4666      	mov	r6, ip
 800072c:	0a7b      	lsrs	r3, r7, #9
 800072e:	0048      	lsls	r0, r1, #1
 8000730:	0fc9      	lsrs	r1, r1, #31
 8000732:	469a      	mov	sl, r3
 8000734:	0e24      	lsrs	r4, r4, #24
 8000736:	0015      	movs	r5, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	0e00      	lsrs	r0, r0, #24
 800073c:	4689      	mov	r9, r1
 800073e:	00f6      	lsls	r6, r6, #3
 8000740:	28ff      	cmp	r0, #255	; 0xff
 8000742:	d100      	bne.n	8000746 <__aeabi_fsub+0x32>
 8000744:	e08f      	b.n	8000866 <__aeabi_fsub+0x152>
 8000746:	2101      	movs	r1, #1
 8000748:	464f      	mov	r7, r9
 800074a:	404f      	eors	r7, r1
 800074c:	0039      	movs	r1, r7
 800074e:	4291      	cmp	r1, r2
 8000750:	d066      	beq.n	8000820 <__aeabi_fsub+0x10c>
 8000752:	1a22      	subs	r2, r4, r0
 8000754:	2a00      	cmp	r2, #0
 8000756:	dc00      	bgt.n	800075a <__aeabi_fsub+0x46>
 8000758:	e09d      	b.n	8000896 <__aeabi_fsub+0x182>
 800075a:	2800      	cmp	r0, #0
 800075c:	d13d      	bne.n	80007da <__aeabi_fsub+0xc6>
 800075e:	2e00      	cmp	r6, #0
 8000760:	d100      	bne.n	8000764 <__aeabi_fsub+0x50>
 8000762:	e08b      	b.n	800087c <__aeabi_fsub+0x168>
 8000764:	1e51      	subs	r1, r2, #1
 8000766:	2900      	cmp	r1, #0
 8000768:	d000      	beq.n	800076c <__aeabi_fsub+0x58>
 800076a:	e0b5      	b.n	80008d8 <__aeabi_fsub+0x1c4>
 800076c:	2401      	movs	r4, #1
 800076e:	1b9b      	subs	r3, r3, r6
 8000770:	015a      	lsls	r2, r3, #5
 8000772:	d544      	bpl.n	80007fe <__aeabi_fsub+0xea>
 8000774:	019b      	lsls	r3, r3, #6
 8000776:	099f      	lsrs	r7, r3, #6
 8000778:	0038      	movs	r0, r7
 800077a:	f000 f9d7 	bl	8000b2c <__clzsi2>
 800077e:	3805      	subs	r0, #5
 8000780:	4087      	lsls	r7, r0
 8000782:	4284      	cmp	r4, r0
 8000784:	dd00      	ble.n	8000788 <__aeabi_fsub+0x74>
 8000786:	e096      	b.n	80008b6 <__aeabi_fsub+0x1a2>
 8000788:	1b04      	subs	r4, r0, r4
 800078a:	003a      	movs	r2, r7
 800078c:	2020      	movs	r0, #32
 800078e:	3401      	adds	r4, #1
 8000790:	40e2      	lsrs	r2, r4
 8000792:	1b04      	subs	r4, r0, r4
 8000794:	40a7      	lsls	r7, r4
 8000796:	003b      	movs	r3, r7
 8000798:	1e5f      	subs	r7, r3, #1
 800079a:	41bb      	sbcs	r3, r7
 800079c:	2400      	movs	r4, #0
 800079e:	4313      	orrs	r3, r2
 80007a0:	075a      	lsls	r2, r3, #29
 80007a2:	d004      	beq.n	80007ae <__aeabi_fsub+0x9a>
 80007a4:	220f      	movs	r2, #15
 80007a6:	401a      	ands	r2, r3
 80007a8:	2a04      	cmp	r2, #4
 80007aa:	d000      	beq.n	80007ae <__aeabi_fsub+0x9a>
 80007ac:	3304      	adds	r3, #4
 80007ae:	015a      	lsls	r2, r3, #5
 80007b0:	d527      	bpl.n	8000802 <__aeabi_fsub+0xee>
 80007b2:	3401      	adds	r4, #1
 80007b4:	2cff      	cmp	r4, #255	; 0xff
 80007b6:	d100      	bne.n	80007ba <__aeabi_fsub+0xa6>
 80007b8:	e079      	b.n	80008ae <__aeabi_fsub+0x19a>
 80007ba:	2201      	movs	r2, #1
 80007bc:	019b      	lsls	r3, r3, #6
 80007be:	0a5b      	lsrs	r3, r3, #9
 80007c0:	b2e4      	uxtb	r4, r4
 80007c2:	402a      	ands	r2, r5
 80007c4:	025b      	lsls	r3, r3, #9
 80007c6:	05e4      	lsls	r4, r4, #23
 80007c8:	0a58      	lsrs	r0, r3, #9
 80007ca:	07d2      	lsls	r2, r2, #31
 80007cc:	4320      	orrs	r0, r4
 80007ce:	4310      	orrs	r0, r2
 80007d0:	bc1c      	pop	{r2, r3, r4}
 80007d2:	4690      	mov	r8, r2
 80007d4:	4699      	mov	r9, r3
 80007d6:	46a2      	mov	sl, r4
 80007d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007da:	2cff      	cmp	r4, #255	; 0xff
 80007dc:	d0e0      	beq.n	80007a0 <__aeabi_fsub+0x8c>
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	04c9      	lsls	r1, r1, #19
 80007e2:	430e      	orrs	r6, r1
 80007e4:	2a1b      	cmp	r2, #27
 80007e6:	dc7b      	bgt.n	80008e0 <__aeabi_fsub+0x1cc>
 80007e8:	0031      	movs	r1, r6
 80007ea:	2020      	movs	r0, #32
 80007ec:	40d1      	lsrs	r1, r2
 80007ee:	1a82      	subs	r2, r0, r2
 80007f0:	4096      	lsls	r6, r2
 80007f2:	1e72      	subs	r2, r6, #1
 80007f4:	4196      	sbcs	r6, r2
 80007f6:	430e      	orrs	r6, r1
 80007f8:	1b9b      	subs	r3, r3, r6
 80007fa:	015a      	lsls	r2, r3, #5
 80007fc:	d4ba      	bmi.n	8000774 <__aeabi_fsub+0x60>
 80007fe:	075a      	lsls	r2, r3, #29
 8000800:	d1d0      	bne.n	80007a4 <__aeabi_fsub+0x90>
 8000802:	2201      	movs	r2, #1
 8000804:	08df      	lsrs	r7, r3, #3
 8000806:	402a      	ands	r2, r5
 8000808:	2cff      	cmp	r4, #255	; 0xff
 800080a:	d133      	bne.n	8000874 <__aeabi_fsub+0x160>
 800080c:	2f00      	cmp	r7, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fsub+0xfe>
 8000810:	e0a8      	b.n	8000964 <__aeabi_fsub+0x250>
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	03db      	lsls	r3, r3, #15
 8000816:	433b      	orrs	r3, r7
 8000818:	025b      	lsls	r3, r3, #9
 800081a:	0a5b      	lsrs	r3, r3, #9
 800081c:	24ff      	movs	r4, #255	; 0xff
 800081e:	e7d1      	b.n	80007c4 <__aeabi_fsub+0xb0>
 8000820:	1a21      	subs	r1, r4, r0
 8000822:	2900      	cmp	r1, #0
 8000824:	dd4c      	ble.n	80008c0 <__aeabi_fsub+0x1ac>
 8000826:	2800      	cmp	r0, #0
 8000828:	d02a      	beq.n	8000880 <__aeabi_fsub+0x16c>
 800082a:	2cff      	cmp	r4, #255	; 0xff
 800082c:	d0b8      	beq.n	80007a0 <__aeabi_fsub+0x8c>
 800082e:	2080      	movs	r0, #128	; 0x80
 8000830:	04c0      	lsls	r0, r0, #19
 8000832:	4306      	orrs	r6, r0
 8000834:	291b      	cmp	r1, #27
 8000836:	dd00      	ble.n	800083a <__aeabi_fsub+0x126>
 8000838:	e0af      	b.n	800099a <__aeabi_fsub+0x286>
 800083a:	0030      	movs	r0, r6
 800083c:	2720      	movs	r7, #32
 800083e:	40c8      	lsrs	r0, r1
 8000840:	1a79      	subs	r1, r7, r1
 8000842:	408e      	lsls	r6, r1
 8000844:	1e71      	subs	r1, r6, #1
 8000846:	418e      	sbcs	r6, r1
 8000848:	4306      	orrs	r6, r0
 800084a:	199b      	adds	r3, r3, r6
 800084c:	0159      	lsls	r1, r3, #5
 800084e:	d5d6      	bpl.n	80007fe <__aeabi_fsub+0xea>
 8000850:	3401      	adds	r4, #1
 8000852:	2cff      	cmp	r4, #255	; 0xff
 8000854:	d100      	bne.n	8000858 <__aeabi_fsub+0x144>
 8000856:	e085      	b.n	8000964 <__aeabi_fsub+0x250>
 8000858:	2201      	movs	r2, #1
 800085a:	497a      	ldr	r1, [pc, #488]	; (8000a44 <__aeabi_fsub+0x330>)
 800085c:	401a      	ands	r2, r3
 800085e:	085b      	lsrs	r3, r3, #1
 8000860:	400b      	ands	r3, r1
 8000862:	4313      	orrs	r3, r2
 8000864:	e79c      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000866:	2e00      	cmp	r6, #0
 8000868:	d000      	beq.n	800086c <__aeabi_fsub+0x158>
 800086a:	e770      	b.n	800074e <__aeabi_fsub+0x3a>
 800086c:	e76b      	b.n	8000746 <__aeabi_fsub+0x32>
 800086e:	1e3b      	subs	r3, r7, #0
 8000870:	d1c5      	bne.n	80007fe <__aeabi_fsub+0xea>
 8000872:	2200      	movs	r2, #0
 8000874:	027b      	lsls	r3, r7, #9
 8000876:	0a5b      	lsrs	r3, r3, #9
 8000878:	b2e4      	uxtb	r4, r4
 800087a:	e7a3      	b.n	80007c4 <__aeabi_fsub+0xb0>
 800087c:	0014      	movs	r4, r2
 800087e:	e78f      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000880:	2e00      	cmp	r6, #0
 8000882:	d04d      	beq.n	8000920 <__aeabi_fsub+0x20c>
 8000884:	1e48      	subs	r0, r1, #1
 8000886:	2800      	cmp	r0, #0
 8000888:	d157      	bne.n	800093a <__aeabi_fsub+0x226>
 800088a:	199b      	adds	r3, r3, r6
 800088c:	2401      	movs	r4, #1
 800088e:	015a      	lsls	r2, r3, #5
 8000890:	d5b5      	bpl.n	80007fe <__aeabi_fsub+0xea>
 8000892:	2402      	movs	r4, #2
 8000894:	e7e0      	b.n	8000858 <__aeabi_fsub+0x144>
 8000896:	2a00      	cmp	r2, #0
 8000898:	d125      	bne.n	80008e6 <__aeabi_fsub+0x1d2>
 800089a:	1c62      	adds	r2, r4, #1
 800089c:	b2d2      	uxtb	r2, r2
 800089e:	2a01      	cmp	r2, #1
 80008a0:	dd72      	ble.n	8000988 <__aeabi_fsub+0x274>
 80008a2:	1b9f      	subs	r7, r3, r6
 80008a4:	017a      	lsls	r2, r7, #5
 80008a6:	d535      	bpl.n	8000914 <__aeabi_fsub+0x200>
 80008a8:	1af7      	subs	r7, r6, r3
 80008aa:	000d      	movs	r5, r1
 80008ac:	e764      	b.n	8000778 <__aeabi_fsub+0x64>
 80008ae:	2201      	movs	r2, #1
 80008b0:	2300      	movs	r3, #0
 80008b2:	402a      	ands	r2, r5
 80008b4:	e786      	b.n	80007c4 <__aeabi_fsub+0xb0>
 80008b6:	003b      	movs	r3, r7
 80008b8:	4a63      	ldr	r2, [pc, #396]	; (8000a48 <__aeabi_fsub+0x334>)
 80008ba:	1a24      	subs	r4, r4, r0
 80008bc:	4013      	ands	r3, r2
 80008be:	e76f      	b.n	80007a0 <__aeabi_fsub+0x8c>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	d16c      	bne.n	800099e <__aeabi_fsub+0x28a>
 80008c4:	1c61      	adds	r1, r4, #1
 80008c6:	b2c8      	uxtb	r0, r1
 80008c8:	2801      	cmp	r0, #1
 80008ca:	dd4e      	ble.n	800096a <__aeabi_fsub+0x256>
 80008cc:	29ff      	cmp	r1, #255	; 0xff
 80008ce:	d049      	beq.n	8000964 <__aeabi_fsub+0x250>
 80008d0:	199b      	adds	r3, r3, r6
 80008d2:	085b      	lsrs	r3, r3, #1
 80008d4:	000c      	movs	r4, r1
 80008d6:	e763      	b.n	80007a0 <__aeabi_fsub+0x8c>
 80008d8:	2aff      	cmp	r2, #255	; 0xff
 80008da:	d041      	beq.n	8000960 <__aeabi_fsub+0x24c>
 80008dc:	000a      	movs	r2, r1
 80008de:	e781      	b.n	80007e4 <__aeabi_fsub+0xd0>
 80008e0:	2601      	movs	r6, #1
 80008e2:	1b9b      	subs	r3, r3, r6
 80008e4:	e789      	b.n	80007fa <__aeabi_fsub+0xe6>
 80008e6:	2c00      	cmp	r4, #0
 80008e8:	d01c      	beq.n	8000924 <__aeabi_fsub+0x210>
 80008ea:	28ff      	cmp	r0, #255	; 0xff
 80008ec:	d021      	beq.n	8000932 <__aeabi_fsub+0x21e>
 80008ee:	2480      	movs	r4, #128	; 0x80
 80008f0:	04e4      	lsls	r4, r4, #19
 80008f2:	4252      	negs	r2, r2
 80008f4:	4323      	orrs	r3, r4
 80008f6:	2a1b      	cmp	r2, #27
 80008f8:	dd00      	ble.n	80008fc <__aeabi_fsub+0x1e8>
 80008fa:	e096      	b.n	8000a2a <__aeabi_fsub+0x316>
 80008fc:	001c      	movs	r4, r3
 80008fe:	2520      	movs	r5, #32
 8000900:	40d4      	lsrs	r4, r2
 8000902:	1aaa      	subs	r2, r5, r2
 8000904:	4093      	lsls	r3, r2
 8000906:	1e5a      	subs	r2, r3, #1
 8000908:	4193      	sbcs	r3, r2
 800090a:	4323      	orrs	r3, r4
 800090c:	1af3      	subs	r3, r6, r3
 800090e:	0004      	movs	r4, r0
 8000910:	000d      	movs	r5, r1
 8000912:	e72d      	b.n	8000770 <__aeabi_fsub+0x5c>
 8000914:	2f00      	cmp	r7, #0
 8000916:	d000      	beq.n	800091a <__aeabi_fsub+0x206>
 8000918:	e72e      	b.n	8000778 <__aeabi_fsub+0x64>
 800091a:	2200      	movs	r2, #0
 800091c:	2400      	movs	r4, #0
 800091e:	e7a9      	b.n	8000874 <__aeabi_fsub+0x160>
 8000920:	000c      	movs	r4, r1
 8000922:	e73d      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000924:	2b00      	cmp	r3, #0
 8000926:	d058      	beq.n	80009da <__aeabi_fsub+0x2c6>
 8000928:	43d2      	mvns	r2, r2
 800092a:	2a00      	cmp	r2, #0
 800092c:	d0ee      	beq.n	800090c <__aeabi_fsub+0x1f8>
 800092e:	28ff      	cmp	r0, #255	; 0xff
 8000930:	d1e1      	bne.n	80008f6 <__aeabi_fsub+0x1e2>
 8000932:	0033      	movs	r3, r6
 8000934:	24ff      	movs	r4, #255	; 0xff
 8000936:	000d      	movs	r5, r1
 8000938:	e732      	b.n	80007a0 <__aeabi_fsub+0x8c>
 800093a:	29ff      	cmp	r1, #255	; 0xff
 800093c:	d010      	beq.n	8000960 <__aeabi_fsub+0x24c>
 800093e:	0001      	movs	r1, r0
 8000940:	e778      	b.n	8000834 <__aeabi_fsub+0x120>
 8000942:	2b00      	cmp	r3, #0
 8000944:	d06e      	beq.n	8000a24 <__aeabi_fsub+0x310>
 8000946:	24ff      	movs	r4, #255	; 0xff
 8000948:	2e00      	cmp	r6, #0
 800094a:	d100      	bne.n	800094e <__aeabi_fsub+0x23a>
 800094c:	e728      	b.n	80007a0 <__aeabi_fsub+0x8c>
 800094e:	2280      	movs	r2, #128	; 0x80
 8000950:	4651      	mov	r1, sl
 8000952:	03d2      	lsls	r2, r2, #15
 8000954:	4211      	tst	r1, r2
 8000956:	d003      	beq.n	8000960 <__aeabi_fsub+0x24c>
 8000958:	4661      	mov	r1, ip
 800095a:	4211      	tst	r1, r2
 800095c:	d100      	bne.n	8000960 <__aeabi_fsub+0x24c>
 800095e:	0033      	movs	r3, r6
 8000960:	24ff      	movs	r4, #255	; 0xff
 8000962:	e71d      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000964:	24ff      	movs	r4, #255	; 0xff
 8000966:	2300      	movs	r3, #0
 8000968:	e72c      	b.n	80007c4 <__aeabi_fsub+0xb0>
 800096a:	2c00      	cmp	r4, #0
 800096c:	d1e9      	bne.n	8000942 <__aeabi_fsub+0x22e>
 800096e:	2b00      	cmp	r3, #0
 8000970:	d063      	beq.n	8000a3a <__aeabi_fsub+0x326>
 8000972:	2e00      	cmp	r6, #0
 8000974:	d100      	bne.n	8000978 <__aeabi_fsub+0x264>
 8000976:	e713      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000978:	199b      	adds	r3, r3, r6
 800097a:	015a      	lsls	r2, r3, #5
 800097c:	d400      	bmi.n	8000980 <__aeabi_fsub+0x26c>
 800097e:	e73e      	b.n	80007fe <__aeabi_fsub+0xea>
 8000980:	4a31      	ldr	r2, [pc, #196]	; (8000a48 <__aeabi_fsub+0x334>)
 8000982:	000c      	movs	r4, r1
 8000984:	4013      	ands	r3, r2
 8000986:	e70b      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000988:	2c00      	cmp	r4, #0
 800098a:	d11e      	bne.n	80009ca <__aeabi_fsub+0x2b6>
 800098c:	2b00      	cmp	r3, #0
 800098e:	d12f      	bne.n	80009f0 <__aeabi_fsub+0x2dc>
 8000990:	2e00      	cmp	r6, #0
 8000992:	d04f      	beq.n	8000a34 <__aeabi_fsub+0x320>
 8000994:	0033      	movs	r3, r6
 8000996:	000d      	movs	r5, r1
 8000998:	e702      	b.n	80007a0 <__aeabi_fsub+0x8c>
 800099a:	2601      	movs	r6, #1
 800099c:	e755      	b.n	800084a <__aeabi_fsub+0x136>
 800099e:	2c00      	cmp	r4, #0
 80009a0:	d11f      	bne.n	80009e2 <__aeabi_fsub+0x2ce>
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d043      	beq.n	8000a2e <__aeabi_fsub+0x31a>
 80009a6:	43c9      	mvns	r1, r1
 80009a8:	2900      	cmp	r1, #0
 80009aa:	d00b      	beq.n	80009c4 <__aeabi_fsub+0x2b0>
 80009ac:	28ff      	cmp	r0, #255	; 0xff
 80009ae:	d039      	beq.n	8000a24 <__aeabi_fsub+0x310>
 80009b0:	291b      	cmp	r1, #27
 80009b2:	dc44      	bgt.n	8000a3e <__aeabi_fsub+0x32a>
 80009b4:	001c      	movs	r4, r3
 80009b6:	2720      	movs	r7, #32
 80009b8:	40cc      	lsrs	r4, r1
 80009ba:	1a79      	subs	r1, r7, r1
 80009bc:	408b      	lsls	r3, r1
 80009be:	1e59      	subs	r1, r3, #1
 80009c0:	418b      	sbcs	r3, r1
 80009c2:	4323      	orrs	r3, r4
 80009c4:	199b      	adds	r3, r3, r6
 80009c6:	0004      	movs	r4, r0
 80009c8:	e740      	b.n	800084c <__aeabi_fsub+0x138>
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d11a      	bne.n	8000a04 <__aeabi_fsub+0x2f0>
 80009ce:	2e00      	cmp	r6, #0
 80009d0:	d124      	bne.n	8000a1c <__aeabi_fsub+0x308>
 80009d2:	2780      	movs	r7, #128	; 0x80
 80009d4:	2200      	movs	r2, #0
 80009d6:	03ff      	lsls	r7, r7, #15
 80009d8:	e71b      	b.n	8000812 <__aeabi_fsub+0xfe>
 80009da:	0033      	movs	r3, r6
 80009dc:	0004      	movs	r4, r0
 80009de:	000d      	movs	r5, r1
 80009e0:	e6de      	b.n	80007a0 <__aeabi_fsub+0x8c>
 80009e2:	28ff      	cmp	r0, #255	; 0xff
 80009e4:	d01e      	beq.n	8000a24 <__aeabi_fsub+0x310>
 80009e6:	2480      	movs	r4, #128	; 0x80
 80009e8:	04e4      	lsls	r4, r4, #19
 80009ea:	4249      	negs	r1, r1
 80009ec:	4323      	orrs	r3, r4
 80009ee:	e7df      	b.n	80009b0 <__aeabi_fsub+0x29c>
 80009f0:	2e00      	cmp	r6, #0
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fsub+0x2e2>
 80009f4:	e6d4      	b.n	80007a0 <__aeabi_fsub+0x8c>
 80009f6:	1b9f      	subs	r7, r3, r6
 80009f8:	017a      	lsls	r2, r7, #5
 80009fa:	d400      	bmi.n	80009fe <__aeabi_fsub+0x2ea>
 80009fc:	e737      	b.n	800086e <__aeabi_fsub+0x15a>
 80009fe:	1af3      	subs	r3, r6, r3
 8000a00:	000d      	movs	r5, r1
 8000a02:	e6cd      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000a04:	24ff      	movs	r4, #255	; 0xff
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fsub+0x2f8>
 8000a0a:	e6c9      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	4650      	mov	r0, sl
 8000a10:	03d2      	lsls	r2, r2, #15
 8000a12:	4210      	tst	r0, r2
 8000a14:	d0a4      	beq.n	8000960 <__aeabi_fsub+0x24c>
 8000a16:	4660      	mov	r0, ip
 8000a18:	4210      	tst	r0, r2
 8000a1a:	d1a1      	bne.n	8000960 <__aeabi_fsub+0x24c>
 8000a1c:	0033      	movs	r3, r6
 8000a1e:	000d      	movs	r5, r1
 8000a20:	24ff      	movs	r4, #255	; 0xff
 8000a22:	e6bd      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000a24:	0033      	movs	r3, r6
 8000a26:	24ff      	movs	r4, #255	; 0xff
 8000a28:	e6ba      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e76e      	b.n	800090c <__aeabi_fsub+0x1f8>
 8000a2e:	0033      	movs	r3, r6
 8000a30:	0004      	movs	r4, r0
 8000a32:	e6b5      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000a34:	2700      	movs	r7, #0
 8000a36:	2200      	movs	r2, #0
 8000a38:	e71c      	b.n	8000874 <__aeabi_fsub+0x160>
 8000a3a:	0033      	movs	r3, r6
 8000a3c:	e6b0      	b.n	80007a0 <__aeabi_fsub+0x8c>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e7c0      	b.n	80009c4 <__aeabi_fsub+0x2b0>
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	7dffffff 	.word	0x7dffffff
 8000a48:	fbffffff 	.word	0xfbffffff

08000a4c <__aeabi_f2iz>:
 8000a4c:	0241      	lsls	r1, r0, #9
 8000a4e:	0043      	lsls	r3, r0, #1
 8000a50:	0fc2      	lsrs	r2, r0, #31
 8000a52:	0a49      	lsrs	r1, r1, #9
 8000a54:	0e1b      	lsrs	r3, r3, #24
 8000a56:	2000      	movs	r0, #0
 8000a58:	2b7e      	cmp	r3, #126	; 0x7e
 8000a5a:	dd0d      	ble.n	8000a78 <__aeabi_f2iz+0x2c>
 8000a5c:	2b9d      	cmp	r3, #157	; 0x9d
 8000a5e:	dc0c      	bgt.n	8000a7a <__aeabi_f2iz+0x2e>
 8000a60:	2080      	movs	r0, #128	; 0x80
 8000a62:	0400      	lsls	r0, r0, #16
 8000a64:	4301      	orrs	r1, r0
 8000a66:	2b95      	cmp	r3, #149	; 0x95
 8000a68:	dc0a      	bgt.n	8000a80 <__aeabi_f2iz+0x34>
 8000a6a:	2096      	movs	r0, #150	; 0x96
 8000a6c:	1ac3      	subs	r3, r0, r3
 8000a6e:	40d9      	lsrs	r1, r3
 8000a70:	4248      	negs	r0, r1
 8000a72:	2a00      	cmp	r2, #0
 8000a74:	d100      	bne.n	8000a78 <__aeabi_f2iz+0x2c>
 8000a76:	0008      	movs	r0, r1
 8000a78:	4770      	bx	lr
 8000a7a:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <__aeabi_f2iz+0x3c>)
 8000a7c:	18d0      	adds	r0, r2, r3
 8000a7e:	e7fb      	b.n	8000a78 <__aeabi_f2iz+0x2c>
 8000a80:	3b96      	subs	r3, #150	; 0x96
 8000a82:	4099      	lsls	r1, r3
 8000a84:	e7f4      	b.n	8000a70 <__aeabi_f2iz+0x24>
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	7fffffff 	.word	0x7fffffff

08000a8c <__aeabi_i2f>:
 8000a8c:	b570      	push	{r4, r5, r6, lr}
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	d030      	beq.n	8000af4 <__aeabi_i2f+0x68>
 8000a92:	17c3      	asrs	r3, r0, #31
 8000a94:	18c4      	adds	r4, r0, r3
 8000a96:	405c      	eors	r4, r3
 8000a98:	0fc5      	lsrs	r5, r0, #31
 8000a9a:	0020      	movs	r0, r4
 8000a9c:	f000 f846 	bl	8000b2c <__clzsi2>
 8000aa0:	239e      	movs	r3, #158	; 0x9e
 8000aa2:	1a1b      	subs	r3, r3, r0
 8000aa4:	2b96      	cmp	r3, #150	; 0x96
 8000aa6:	dc0d      	bgt.n	8000ac4 <__aeabi_i2f+0x38>
 8000aa8:	2296      	movs	r2, #150	; 0x96
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	4094      	lsls	r4, r2
 8000aae:	002a      	movs	r2, r5
 8000ab0:	0264      	lsls	r4, r4, #9
 8000ab2:	0a64      	lsrs	r4, r4, #9
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	0264      	lsls	r4, r4, #9
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	0a60      	lsrs	r0, r4, #9
 8000abc:	07d2      	lsls	r2, r2, #31
 8000abe:	4318      	orrs	r0, r3
 8000ac0:	4310      	orrs	r0, r2
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	2b99      	cmp	r3, #153	; 0x99
 8000ac6:	dc19      	bgt.n	8000afc <__aeabi_i2f+0x70>
 8000ac8:	2299      	movs	r2, #153	; 0x99
 8000aca:	1ad2      	subs	r2, r2, r3
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	dd29      	ble.n	8000b24 <__aeabi_i2f+0x98>
 8000ad0:	4094      	lsls	r4, r2
 8000ad2:	0022      	movs	r2, r4
 8000ad4:	4c14      	ldr	r4, [pc, #80]	; (8000b28 <__aeabi_i2f+0x9c>)
 8000ad6:	4014      	ands	r4, r2
 8000ad8:	0751      	lsls	r1, r2, #29
 8000ada:	d004      	beq.n	8000ae6 <__aeabi_i2f+0x5a>
 8000adc:	210f      	movs	r1, #15
 8000ade:	400a      	ands	r2, r1
 8000ae0:	2a04      	cmp	r2, #4
 8000ae2:	d000      	beq.n	8000ae6 <__aeabi_i2f+0x5a>
 8000ae4:	3404      	adds	r4, #4
 8000ae6:	0162      	lsls	r2, r4, #5
 8000ae8:	d413      	bmi.n	8000b12 <__aeabi_i2f+0x86>
 8000aea:	01a4      	lsls	r4, r4, #6
 8000aec:	0a64      	lsrs	r4, r4, #9
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	002a      	movs	r2, r5
 8000af2:	e7e0      	b.n	8000ab6 <__aeabi_i2f+0x2a>
 8000af4:	2200      	movs	r2, #0
 8000af6:	2300      	movs	r3, #0
 8000af8:	2400      	movs	r4, #0
 8000afa:	e7dc      	b.n	8000ab6 <__aeabi_i2f+0x2a>
 8000afc:	2205      	movs	r2, #5
 8000afe:	0021      	movs	r1, r4
 8000b00:	1a12      	subs	r2, r2, r0
 8000b02:	40d1      	lsrs	r1, r2
 8000b04:	22b9      	movs	r2, #185	; 0xb9
 8000b06:	1ad2      	subs	r2, r2, r3
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	1e62      	subs	r2, r4, #1
 8000b0c:	4194      	sbcs	r4, r2
 8000b0e:	430c      	orrs	r4, r1
 8000b10:	e7da      	b.n	8000ac8 <__aeabi_i2f+0x3c>
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <__aeabi_i2f+0x9c>)
 8000b14:	002a      	movs	r2, r5
 8000b16:	401c      	ands	r4, r3
 8000b18:	239f      	movs	r3, #159	; 0x9f
 8000b1a:	01a4      	lsls	r4, r4, #6
 8000b1c:	1a1b      	subs	r3, r3, r0
 8000b1e:	0a64      	lsrs	r4, r4, #9
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	e7c8      	b.n	8000ab6 <__aeabi_i2f+0x2a>
 8000b24:	0022      	movs	r2, r4
 8000b26:	e7d5      	b.n	8000ad4 <__aeabi_i2f+0x48>
 8000b28:	fbffffff 	.word	0xfbffffff

08000b2c <__clzsi2>:
 8000b2c:	211c      	movs	r1, #28
 8000b2e:	2301      	movs	r3, #1
 8000b30:	041b      	lsls	r3, r3, #16
 8000b32:	4298      	cmp	r0, r3
 8000b34:	d301      	bcc.n	8000b3a <__clzsi2+0xe>
 8000b36:	0c00      	lsrs	r0, r0, #16
 8000b38:	3910      	subs	r1, #16
 8000b3a:	0a1b      	lsrs	r3, r3, #8
 8000b3c:	4298      	cmp	r0, r3
 8000b3e:	d301      	bcc.n	8000b44 <__clzsi2+0x18>
 8000b40:	0a00      	lsrs	r0, r0, #8
 8000b42:	3908      	subs	r1, #8
 8000b44:	091b      	lsrs	r3, r3, #4
 8000b46:	4298      	cmp	r0, r3
 8000b48:	d301      	bcc.n	8000b4e <__clzsi2+0x22>
 8000b4a:	0900      	lsrs	r0, r0, #4
 8000b4c:	3904      	subs	r1, #4
 8000b4e:	a202      	add	r2, pc, #8	; (adr r2, 8000b58 <__clzsi2+0x2c>)
 8000b50:	5c10      	ldrb	r0, [r2, r0]
 8000b52:	1840      	adds	r0, r0, r1
 8000b54:	4770      	bx	lr
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	02020304 	.word	0x02020304
 8000b5c:	01010101 	.word	0x01010101
	...

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000b6c:	f000 fdea 	bl	8001744 <HAL_RCC_GetHCLKFreq>
 8000b70:	21fa      	movs	r1, #250	; 0xfa
 8000b72:	0089      	lsls	r1, r1, #2
 8000b74:	f7ff fada 	bl	800012c <__udivsi3>
 8000b78:	f000 fa5c 	bl	8001034 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	2200      	movs	r2, #0
 8000b80:	0021      	movs	r1, r4
 8000b82:	4240      	negs	r0, r0
 8000b84:	f000 fa26 	bl	8000fd4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000b88:	2000      	movs	r0, #0
 8000b8a:	bd10      	pop	{r4, pc}

08000b8c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_Init+0x1c>)
{
 8000b90:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b92:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b94:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b96:	430b      	orrs	r3, r1
 8000b98:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9a:	f7ff ffe5 	bl	8000b68 <HAL_InitTick>
  HAL_MspInit();
 8000b9e:	f001 f915 	bl	8001dcc <HAL_MspInit>
}
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	bd10      	pop	{r4, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	40022000 	.word	0x40022000

08000bac <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000bac:	4a02      	ldr	r2, [pc, #8]	; (8000bb8 <HAL_IncTick+0xc>)
 8000bae:	6813      	ldr	r3, [r2, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	4770      	bx	lr
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	2000009c 	.word	0x2000009c

08000bbc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bbc:	4b01      	ldr	r3, [pc, #4]	; (8000bc4 <HAL_GetTick+0x8>)
 8000bbe:	6818      	ldr	r0, [r3, #0]
}
 8000bc0:	4770      	bx	lr
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	2000009c 	.word	0x2000009c

08000bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000bca:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff fff6 	bl	8000bbc <HAL_GetTick>
  uint32_t wait = Delay;
 8000bd0:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd2:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 8000bd4:	1c63      	adds	r3, r4, #1
 8000bd6:	1e5a      	subs	r2, r3, #1
 8000bd8:	4193      	sbcs	r3, r2
 8000bda:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bdc:	f7ff ffee 	bl	8000bbc <HAL_GetTick>
 8000be0:	1b40      	subs	r0, r0, r5
 8000be2:	42a0      	cmp	r0, r4
 8000be4:	d3fa      	bcc.n	8000bdc <HAL_Delay+0x14>
  {
  }
}
 8000be6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000be8 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000be8:	2300      	movs	r3, #0
{
 8000bea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bec:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8000bee:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bf0:	6803      	ldr	r3, [r0, #0]
{
 8000bf2:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	400a      	ands	r2, r1
 8000bf8:	2a01      	cmp	r2, #1
 8000bfa:	d107      	bne.n	8000c0c <ADC_Enable+0x24>
 8000bfc:	6819      	ldr	r1, [r3, #0]
 8000bfe:	4211      	tst	r1, r2
 8000c00:	d001      	beq.n	8000c06 <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000c02:	2000      	movs	r0, #0
}
 8000c04:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	0412      	lsls	r2, r2, #16
 8000c0a:	d4fa      	bmi.n	8000c02 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000c0c:	6899      	ldr	r1, [r3, #8]
 8000c0e:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <ADC_Enable+0x8c>)
 8000c10:	4211      	tst	r1, r2
 8000c12:	d008      	beq.n	8000c26 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c14:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c16:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c18:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c20:	4303      	orrs	r3, r0
 8000c22:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000c24:	e7ee      	b.n	8000c04 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8000c26:	2201      	movs	r2, #1
 8000c28:	6899      	ldr	r1, [r3, #8]
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <ADC_Enable+0x90>)
 8000c30:	4912      	ldr	r1, [pc, #72]	; (8000c7c <ADC_Enable+0x94>)
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	f7ff fa7a 	bl	800012c <__udivsi3>
 8000c38:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8000c3a:	9b01      	ldr	r3, [sp, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d115      	bne.n	8000c6c <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8000c40:	f7ff ffbc 	bl	8000bbc <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c44:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8000c46:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	422b      	tst	r3, r5
 8000c4e:	d1d8      	bne.n	8000c02 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c50:	f7ff ffb4 	bl	8000bbc <HAL_GetTick>
 8000c54:	1b80      	subs	r0, r0, r6
 8000c56:	2802      	cmp	r0, #2
 8000c58:	d9f6      	bls.n	8000c48 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c5a:	2310      	movs	r3, #16
 8000c5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000c5e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c60:	4313      	orrs	r3, r2
 8000c62:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c66:	432b      	orrs	r3, r5
 8000c68:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000c6a:	e7cb      	b.n	8000c04 <ADC_Enable+0x1c>
      wait_loop_index--;
 8000c6c:	9b01      	ldr	r3, [sp, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	e7e2      	b.n	8000c3a <ADC_Enable+0x52>
 8000c74:	80000017 	.word	0x80000017
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	000f4240 	.word	0x000f4240

08000c80 <HAL_ADC_Init>:
{
 8000c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c82:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000c84:	2001      	movs	r0, #1
  if(hadc == NULL)
 8000c86:	2c00      	cmp	r4, #0
 8000c88:	d072      	beq.n	8000d70 <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d106      	bne.n	8000c9e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8000c90:	0022      	movs	r2, r4
 8000c92:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8000c94:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 8000c96:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000c98:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000c9a:	f001 f8b5 	bl	8001e08 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ca0:	06db      	lsls	r3, r3, #27
 8000ca2:	d500      	bpl.n	8000ca6 <HAL_ADC_Init+0x26>
 8000ca4:	e079      	b.n	8000d9a <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	6823      	ldr	r3, [r4, #0]
 8000caa:	6898      	ldr	r0, [r3, #8]
 8000cac:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000cae:	d000      	beq.n	8000cb2 <HAL_ADC_Init+0x32>
 8000cb0:	e073      	b.n	8000d9a <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 8000cb2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000cb4:	4942      	ldr	r1, [pc, #264]	; (8000dc0 <HAL_ADC_Init+0x140>)
 8000cb6:	4011      	ands	r1, r2
 8000cb8:	2202      	movs	r2, #2
 8000cba:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000cbc:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8000cbe:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	400a      	ands	r2, r1
 8000cc4:	2a01      	cmp	r2, #1
 8000cc6:	d000      	beq.n	8000cca <HAL_ADC_Init+0x4a>
 8000cc8:	e06d      	b.n	8000da6 <HAL_ADC_Init+0x126>
 8000cca:	6819      	ldr	r1, [r3, #0]
 8000ccc:	4211      	tst	r1, r2
 8000cce:	d102      	bne.n	8000cd6 <HAL_ADC_Init+0x56>
 8000cd0:	68da      	ldr	r2, [r3, #12]
 8000cd2:	0412      	lsls	r2, r2, #16
 8000cd4:	d567      	bpl.n	8000da6 <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	493a      	ldr	r1, [pc, #232]	; (8000dc4 <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000cda:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000cdc:	400a      	ands	r2, r1
 8000cde:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000ce0:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000ce2:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000ce4:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8000ce6:	69e2      	ldr	r2, [r4, #28]
 8000ce8:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000cea:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000cec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000cee:	3a01      	subs	r2, #1
 8000cf0:	1e56      	subs	r6, r2, #1
 8000cf2:	41b2      	sbcs	r2, r6
 8000cf4:	0316      	lsls	r6, r2, #12
 8000cf6:	68e2      	ldr	r2, [r4, #12]
 8000cf8:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000cfa:	6922      	ldr	r2, [r4, #16]
 8000cfc:	430f      	orrs	r7, r1
 8000cfe:	2a02      	cmp	r2, #2
 8000d00:	d100      	bne.n	8000d04 <HAL_ADC_Init+0x84>
 8000d02:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000d04:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d06:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000d08:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000d0a:	433a      	orrs	r2, r7
 8000d0c:	4332      	orrs	r2, r6
 8000d0e:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d10:	2901      	cmp	r1, #1
 8000d12:	d104      	bne.n	8000d1e <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d14:	2d00      	cmp	r5, #0
 8000d16:	d12c      	bne.n	8000d72 <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d18:	2180      	movs	r1, #128	; 0x80
 8000d1a:	0249      	lsls	r1, r1, #9
 8000d1c:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d1e:	20c2      	movs	r0, #194	; 0xc2
 8000d20:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000d22:	30ff      	adds	r0, #255	; 0xff
 8000d24:	4281      	cmp	r1, r0
 8000d26:	d002      	beq.n	8000d2e <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d28:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000d2a:	4301      	orrs	r1, r0
 8000d2c:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d2e:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d30:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d32:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d34:	4311      	orrs	r1, r2
 8000d36:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d38:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000d3a:	4281      	cmp	r1, r0
 8000d3c:	d002      	beq.n	8000d44 <HAL_ADC_Init+0xc4>
 8000d3e:	1e48      	subs	r0, r1, #1
 8000d40:	2806      	cmp	r0, #6
 8000d42:	d807      	bhi.n	8000d54 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d44:	2507      	movs	r5, #7
 8000d46:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000d48:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d4a:	43a8      	bics	r0, r5
 8000d4c:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000d4e:	6958      	ldr	r0, [r3, #20]
 8000d50:	4301      	orrs	r1, r0
 8000d52:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	491c      	ldr	r1, [pc, #112]	; (8000dc8 <HAL_ADC_Init+0x148>)
 8000d58:	400b      	ands	r3, r1
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d111      	bne.n	8000d82 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 8000d5e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000d60:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000d62:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000d64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d66:	4393      	bics	r3, r2
 8000d68:	001a      	movs	r2, r3
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d72:	2020      	movs	r0, #32
 8000d74:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8000d76:	4328      	orrs	r0, r5
 8000d78:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d7a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000d7c:	4301      	orrs	r1, r0
 8000d7e:	64a1      	str	r1, [r4, #72]	; 0x48
 8000d80:	e7cd      	b.n	8000d1e <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 8000d82:	2212      	movs	r2, #18
 8000d84:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d86:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000d88:	4393      	bics	r3, r2
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	2310      	movs	r3, #16
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d92:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d94:	4303      	orrs	r3, r0
 8000d96:	64a3      	str	r3, [r4, #72]	; 0x48
 8000d98:	e7ea      	b.n	8000d70 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d9a:	2310      	movs	r3, #16
 8000d9c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000d9e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000da0:	4313      	orrs	r3, r2
 8000da2:	6463      	str	r3, [r4, #68]	; 0x44
 8000da4:	e7e4      	b.n	8000d70 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000da6:	2118      	movs	r1, #24
 8000da8:	68da      	ldr	r2, [r3, #12]
 8000daa:	438a      	bics	r2, r1
 8000dac:	68a1      	ldr	r1, [r4, #8]
 8000dae:	430a      	orrs	r2, r1
 8000db0:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000db2:	6919      	ldr	r1, [r3, #16]
 8000db4:	6862      	ldr	r2, [r4, #4]
 8000db6:	0089      	lsls	r1, r1, #2
 8000db8:	0889      	lsrs	r1, r1, #2
 8000dba:	4311      	orrs	r1, r2
 8000dbc:	6119      	str	r1, [r3, #16]
 8000dbe:	e78a      	b.n	8000cd6 <HAL_ADC_Init+0x56>
 8000dc0:	fffffefd 	.word	0xfffffefd
 8000dc4:	fffe0219 	.word	0xfffe0219
 8000dc8:	833fffe7 	.word	0x833fffe7

08000dcc <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000dcc:	6803      	ldr	r3, [r0, #0]
{
 8000dce:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000dd0:	689b      	ldr	r3, [r3, #8]
{
 8000dd2:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8000dd4:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000dd6:	075b      	lsls	r3, r3, #29
 8000dd8:	d41a      	bmi.n	8000e10 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8000dda:	0025      	movs	r5, r4
 8000ddc:	3540      	adds	r5, #64	; 0x40
 8000dde:	782b      	ldrb	r3, [r5, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d015      	beq.n	8000e10 <HAL_ADC_Start+0x44>
 8000de4:	2301      	movs	r3, #1
 8000de6:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000de8:	69e3      	ldr	r3, [r4, #28]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d111      	bne.n	8000e12 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8000dee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000df0:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8000df2:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000df4:	401a      	ands	r2, r3
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000dfc:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8000dfe:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e00:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 8000e02:	64a0      	str	r0, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8000e04:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e06:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000e08:	6899      	ldr	r1, [r3, #8]
 8000e0a:	3a18      	subs	r2, #24
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	609a      	str	r2, [r3, #8]
}
 8000e10:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8000e12:	0020      	movs	r0, r4
 8000e14:	f7ff fee8 	bl	8000be8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000e18:	2800      	cmp	r0, #0
 8000e1a:	d1f9      	bne.n	8000e10 <HAL_ADC_Start+0x44>
 8000e1c:	e7e7      	b.n	8000dee <HAL_ADC_Start+0x22>
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	fffff0fe 	.word	0xfffff0fe

08000e24 <HAL_ADC_PollForConversion>:
{
 8000e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e26:	6945      	ldr	r5, [r0, #20]
{
 8000e28:	0004      	movs	r4, r0
 8000e2a:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e2c:	2d08      	cmp	r5, #8
 8000e2e:	d00d      	beq.n	8000e4c <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000e30:	6803      	ldr	r3, [r0, #0]
 8000e32:	2001      	movs	r0, #1
 8000e34:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000e36:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000e38:	4203      	tst	r3, r0
 8000e3a:	d007      	beq.n	8000e4c <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e3c:	2320      	movs	r3, #32
 8000e3e:	6c62      	ldr	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8000e40:	3440      	adds	r4, #64	; 0x40
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e42:	4313      	orrs	r3, r2
 8000e44:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8000e46:	2300      	movs	r3, #0
 8000e48:	7023      	strb	r3, [r4, #0]
}
 8000e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8000e4c:	f7ff feb6 	bl	8000bbc <HAL_GetTick>
 8000e50:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000e52:	6823      	ldr	r3, [r4, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	422a      	tst	r2, r5
 8000e58:	d023      	beq.n	8000ea2 <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000e5e:	0092      	lsls	r2, r2, #2
 8000e60:	430a      	orrs	r2, r1
 8000e62:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e64:	22c0      	movs	r2, #192	; 0xc0
 8000e66:	68d9      	ldr	r1, [r3, #12]
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	4211      	tst	r1, r2
 8000e6c:	d112      	bne.n	8000e94 <HAL_ADC_PollForConversion+0x70>
 8000e6e:	6a22      	ldr	r2, [r4, #32]
 8000e70:	2a00      	cmp	r2, #0
 8000e72:	d10f      	bne.n	8000e94 <HAL_ADC_PollForConversion+0x70>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	0712      	lsls	r2, r2, #28
 8000e78:	d50c      	bpl.n	8000e94 <HAL_ADC_PollForConversion+0x70>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	0752      	lsls	r2, r2, #29
 8000e7e:	d423      	bmi.n	8000ec8 <HAL_ADC_PollForConversion+0xa4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000e80:	210c      	movs	r1, #12
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	438a      	bics	r2, r1
 8000e86:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8000e88:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000e8a:	4914      	ldr	r1, [pc, #80]	; (8000edc <HAL_ADC_PollForConversion+0xb8>)
 8000e8c:	4011      	ands	r1, r2
 8000e8e:	2201      	movs	r2, #1
 8000e90:	430a      	orrs	r2, r1
 8000e92:	6462      	str	r2, [r4, #68]	; 0x44
  return HAL_OK;
 8000e94:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000e96:	69a2      	ldr	r2, [r4, #24]
 8000e98:	4282      	cmp	r2, r0
 8000e9a:	d1d6      	bne.n	8000e4a <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000e9c:	220c      	movs	r2, #12
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	e7d3      	b.n	8000e4a <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8000ea2:	1c72      	adds	r2, r6, #1
 8000ea4:	d0d6      	beq.n	8000e54 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d108      	bne.n	8000ebc <HAL_ADC_PollForConversion+0x98>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000eaa:	2304      	movs	r3, #4
 8000eac:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8000eae:	3440      	adds	r4, #64	; 0x40
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8000eb4:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8000eb6:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8000eb8:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8000eba:	e7c6      	b.n	8000e4a <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ebc:	f7ff fe7e 	bl	8000bbc <HAL_GetTick>
 8000ec0:	1bc0      	subs	r0, r0, r7
 8000ec2:	4286      	cmp	r6, r0
 8000ec4:	d2c5      	bcs.n	8000e52 <HAL_ADC_PollForConversion+0x2e>
 8000ec6:	e7f0      	b.n	8000eaa <HAL_ADC_PollForConversion+0x86>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ec8:	2220      	movs	r2, #32
 8000eca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	64a2      	str	r2, [r4, #72]	; 0x48
 8000ed8:	e7dc      	b.n	8000e94 <HAL_ADC_PollForConversion+0x70>
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	fffffefe 	.word	0xfffffefe

08000ee0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000ee0:	6803      	ldr	r3, [r0, #0]
 8000ee2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000ee4:	4770      	bx	lr
	...

08000ee8 <HAL_ADC_ConfigChannel>:
{
 8000ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000eea:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8000eec:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8000eee:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000ef0:	3440      	adds	r4, #64	; 0x40
 8000ef2:	7823      	ldrb	r3, [r4, #0]
{
 8000ef4:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d02b      	beq.n	8000f54 <HAL_ADC_ConfigChannel+0x6c>
 8000efc:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000efe:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f00:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f02:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 8000f04:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f06:	0740      	lsls	r0, r0, #29
 8000f08:	d452      	bmi.n	8000fb0 <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank != ADC_RANK_NONE)
 8000f0a:	482c      	ldr	r0, [pc, #176]	; (8000fbc <HAL_ADC_ConfigChannel+0xd4>)
 8000f0c:	684f      	ldr	r7, [r1, #4]
 8000f0e:	680d      	ldr	r5, [r1, #0]
 8000f10:	4287      	cmp	r7, r0
 8000f12:	d03b      	beq.n	8000f8c <HAL_ADC_ConfigChannel+0xa4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f14:	40ab      	lsls	r3, r5
 8000f16:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f18:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f1a:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f1c:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f22:	429e      	cmp	r6, r3
 8000f24:	d00f      	beq.n	8000f46 <HAL_ADC_ConfigChannel+0x5e>
 8000f26:	3e01      	subs	r6, #1
 8000f28:	2e06      	cmp	r6, #6
 8000f2a:	d90c      	bls.n	8000f46 <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000f2c:	688b      	ldr	r3, [r1, #8]
 8000f2e:	2107      	movs	r1, #7
 8000f30:	6950      	ldr	r0, [r2, #20]
 8000f32:	4008      	ands	r0, r1
 8000f34:	4283      	cmp	r3, r0
 8000f36:	d006      	beq.n	8000f46 <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f38:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000f3a:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f3c:	4388      	bics	r0, r1
 8000f3e:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000f40:	6950      	ldr	r0, [r2, #20]
 8000f42:	4303      	orrs	r3, r0
 8000f44:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f46:	002b      	movs	r3, r5
 8000f48:	3b10      	subs	r3, #16
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d903      	bls.n	8000f56 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f4e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000f50:	2300      	movs	r3, #0
 8000f52:	7023      	strb	r3, [r4, #0]
}
 8000f54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <HAL_ADC_ConfigChannel+0xd8>)
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	6819      	ldr	r1, [r3, #0]
 8000f5c:	2d10      	cmp	r5, #16
 8000f5e:	d013      	beq.n	8000f88 <HAL_ADC_ConfigChannel+0xa0>
 8000f60:	03d2      	lsls	r2, r2, #15
 8000f62:	430a      	orrs	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f66:	2d10      	cmp	r5, #16
 8000f68:	d1f1      	bne.n	8000f4e <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_ADC_ConfigChannel+0xdc>)
 8000f6c:	4916      	ldr	r1, [pc, #88]	; (8000fc8 <HAL_ADC_ConfigChannel+0xe0>)
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	f7ff f8dc 	bl	800012c <__udivsi3>
 8000f74:	230a      	movs	r3, #10
 8000f76:	4358      	muls	r0, r3
 8000f78:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000f7a:	9b01      	ldr	r3, [sp, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0e6      	beq.n	8000f4e <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8000f80:	9b01      	ldr	r3, [sp, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	e7f8      	b.n	8000f7a <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f88:	0412      	lsls	r2, r2, #16
 8000f8a:	e7ea      	b.n	8000f62 <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f8c:	40ab      	lsls	r3, r5
 8000f8e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000f90:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f92:	002b      	movs	r3, r5
 8000f94:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f96:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d8d8      	bhi.n	8000f4e <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_ADC_ConfigChannel+0xd8>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	2d10      	cmp	r5, #16
 8000fa2:	d003      	beq.n	8000fac <HAL_ADC_ConfigChannel+0xc4>
 8000fa4:	4909      	ldr	r1, [pc, #36]	; (8000fcc <HAL_ADC_ConfigChannel+0xe4>)
 8000fa6:	400a      	ands	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	e7d0      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x66>
 8000fac:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <HAL_ADC_ConfigChannel+0xe8>)
 8000fae:	e7fa      	b.n	8000fa6 <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb0:	2220      	movs	r2, #32
 8000fb2:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000fb4:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	646a      	str	r2, [r5, #68]	; 0x44
 8000fba:	e7c9      	b.n	8000f50 <HAL_ADC_ConfigChannel+0x68>
 8000fbc:	00001001 	.word	0x00001001
 8000fc0:	40012708 	.word	0x40012708
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	000f4240 	.word	0x000f4240
 8000fcc:	ffbfffff 	.word	0xffbfffff
 8000fd0:	ff7fffff 	.word	0xff7fffff

08000fd4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd4:	b570      	push	{r4, r5, r6, lr}
 8000fd6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	da14      	bge.n	8001006 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fdc:	230f      	movs	r3, #15
 8000fde:	b2c0      	uxtb	r0, r0
 8000fe0:	4003      	ands	r3, r0
 8000fe2:	3b08      	subs	r3, #8
 8000fe4:	4a11      	ldr	r2, [pc, #68]	; (800102c <HAL_NVIC_SetPriority+0x58>)
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	189b      	adds	r3, r3, r2
 8000fec:	2203      	movs	r2, #3
 8000fee:	4010      	ands	r0, r2
 8000ff0:	4090      	lsls	r0, r2
 8000ff2:	32fc      	adds	r2, #252	; 0xfc
 8000ff4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ff6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ffa:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffc:	69dc      	ldr	r4, [r3, #28]
 8000ffe:	43ac      	bics	r4, r5
 8001000:	4321      	orrs	r1, r4
 8001002:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001004:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001006:	2503      	movs	r5, #3
 8001008:	0883      	lsrs	r3, r0, #2
 800100a:	4028      	ands	r0, r5
 800100c:	40a8      	lsls	r0, r5
 800100e:	35fc      	adds	r5, #252	; 0xfc
 8001010:	002e      	movs	r6, r5
 8001012:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_NVIC_SetPriority+0x5c>)
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	189b      	adds	r3, r3, r2
 8001018:	22c0      	movs	r2, #192	; 0xc0
 800101a:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800101c:	4029      	ands	r1, r5
 800101e:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	589c      	ldr	r4, [r3, r2]
 8001024:	43b4      	bics	r4, r6
 8001026:	4321      	orrs	r1, r4
 8001028:	5099      	str	r1, [r3, r2]
 800102a:	e7eb      	b.n	8001004 <HAL_NVIC_SetPriority+0x30>
 800102c:	e000ed00 	.word	0xe000ed00
 8001030:	e000e100 	.word	0xe000e100

08001034 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	4a09      	ldr	r2, [pc, #36]	; (800105c <HAL_SYSTICK_Config+0x28>)
 8001036:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001038:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103a:	4293      	cmp	r3, r2
 800103c:	d80d      	bhi.n	800105a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800103e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001044:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001046:	6a03      	ldr	r3, [r0, #32]
 8001048:	0609      	lsls	r1, r1, #24
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	430b      	orrs	r3, r1
 8001050:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001052:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001054:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001056:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001058:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800105a:	4770      	bx	lr
 800105c:	00ffffff 	.word	0x00ffffff
 8001060:	e000e010 	.word	0xe000e010
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800106a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800106c:	2804      	cmp	r0, #4
 800106e:	d102      	bne.n	8001076 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001070:	4310      	orrs	r0, r2
 8001072:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001074:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001076:	2104      	movs	r1, #4
 8001078:	438a      	bics	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
}
 800107c:	e7fa      	b.n	8001074 <HAL_SYSTICK_CLKSourceConfig+0xc>
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001084:	4770      	bx	lr

08001086 <HAL_SYSTICK_IRQHandler>:
{
 8001086:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8001088:	f7ff fffc 	bl	8001084 <HAL_SYSTICK_Callback>
}
 800108c:	bd10      	pop	{r4, pc}
	...

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001090:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001092:	680b      	ldr	r3, [r1, #0]
{ 
 8001094:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001096:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8001098:	2300      	movs	r3, #0
{ 
 800109a:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800109c:	9a02      	ldr	r2, [sp, #8]
 800109e:	40da      	lsrs	r2, r3
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 80010a2:	b007      	add	sp, #28
 80010a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010a6:	2201      	movs	r2, #1
 80010a8:	409a      	lsls	r2, r3
 80010aa:	9203      	str	r2, [sp, #12]
 80010ac:	9903      	ldr	r1, [sp, #12]
 80010ae:	9a02      	ldr	r2, [sp, #8]
 80010b0:	400a      	ands	r2, r1
 80010b2:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80010b4:	d100      	bne.n	80010b8 <HAL_GPIO_Init+0x28>
 80010b6:	e08c      	b.n	80011d2 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80010b8:	9a01      	ldr	r2, [sp, #4]
 80010ba:	2110      	movs	r1, #16
 80010bc:	6852      	ldr	r2, [r2, #4]
 80010be:	0016      	movs	r6, r2
 80010c0:	438e      	bics	r6, r1
 80010c2:	2e02      	cmp	r6, #2
 80010c4:	d10e      	bne.n	80010e4 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80010c6:	2507      	movs	r5, #7
 80010c8:	401d      	ands	r5, r3
 80010ca:	00ad      	lsls	r5, r5, #2
 80010cc:	3901      	subs	r1, #1
 80010ce:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 80010d0:	08dc      	lsrs	r4, r3, #3
 80010d2:	00a4      	lsls	r4, r4, #2
 80010d4:	1904      	adds	r4, r0, r4
 80010d6:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80010d8:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80010da:	9901      	ldr	r1, [sp, #4]
 80010dc:	6909      	ldr	r1, [r1, #16]
 80010de:	40a9      	lsls	r1, r5
 80010e0:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80010e2:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80010e4:	2403      	movs	r4, #3
 80010e6:	005f      	lsls	r7, r3, #1
 80010e8:	40bc      	lsls	r4, r7
 80010ea:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80010ec:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ee:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80010f0:	4025      	ands	r5, r4
 80010f2:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f4:	2503      	movs	r5, #3
 80010f6:	4015      	ands	r5, r2
 80010f8:	40bd      	lsls	r5, r7
 80010fa:	4661      	mov	r1, ip
 80010fc:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80010fe:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001100:	2e01      	cmp	r6, #1
 8001102:	d80f      	bhi.n	8001124 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001104:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8001106:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001108:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800110a:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800110c:	40bd      	lsls	r5, r7
 800110e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001110:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001112:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001114:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001116:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001118:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800111a:	2101      	movs	r1, #1
 800111c:	400d      	ands	r5, r1
 800111e:	409d      	lsls	r5, r3
 8001120:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001122:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8001124:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001126:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001128:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800112a:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800112c:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800112e:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001130:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001132:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001134:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001136:	420a      	tst	r2, r1
 8001138:	d04b      	beq.n	80011d2 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	2101      	movs	r1, #1
 800113c:	4c26      	ldr	r4, [pc, #152]	; (80011d8 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800113e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001140:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001142:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001144:	430d      	orrs	r5, r1
 8001146:	61a5      	str	r5, [r4, #24]
 8001148:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 800114a:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114c:	400c      	ands	r4, r1
 800114e:	9405      	str	r4, [sp, #20]
 8001150:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001152:	240f      	movs	r4, #15
 8001154:	4921      	ldr	r1, [pc, #132]	; (80011dc <HAL_GPIO_Init+0x14c>)
 8001156:	00ad      	lsls	r5, r5, #2
 8001158:	00b6      	lsls	r6, r6, #2
 800115a:	186d      	adds	r5, r5, r1
 800115c:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115e:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8001160:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001162:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001164:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001166:	2400      	movs	r4, #0
 8001168:	4288      	cmp	r0, r1
 800116a:	d00c      	beq.n	8001186 <HAL_GPIO_Init+0xf6>
 800116c:	491c      	ldr	r1, [pc, #112]	; (80011e0 <HAL_GPIO_Init+0x150>)
 800116e:	3401      	adds	r4, #1
 8001170:	4288      	cmp	r0, r1
 8001172:	d008      	beq.n	8001186 <HAL_GPIO_Init+0xf6>
 8001174:	491b      	ldr	r1, [pc, #108]	; (80011e4 <HAL_GPIO_Init+0x154>)
 8001176:	3401      	adds	r4, #1
 8001178:	4288      	cmp	r0, r1
 800117a:	d004      	beq.n	8001186 <HAL_GPIO_Init+0xf6>
 800117c:	491a      	ldr	r1, [pc, #104]	; (80011e8 <HAL_GPIO_Init+0x158>)
 800117e:	3403      	adds	r4, #3
 8001180:	4288      	cmp	r0, r1
 8001182:	d100      	bne.n	8001186 <HAL_GPIO_Init+0xf6>
 8001184:	3c02      	subs	r4, #2
 8001186:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001188:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118a:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 800118c:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 800118e:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8001190:	4c16      	ldr	r4, [pc, #88]	; (80011ec <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001192:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8001194:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8001196:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001198:	03d1      	lsls	r1, r2, #15
 800119a:	d401      	bmi.n	80011a0 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800119c:	003e      	movs	r6, r7
 800119e:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80011a0:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80011a2:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 80011a4:	9e00      	ldr	r6, [sp, #0]
 80011a6:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a8:	0391      	lsls	r1, r2, #14
 80011aa:	d401      	bmi.n	80011b0 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80011ac:	003e      	movs	r6, r7
 80011ae:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80011b0:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80011b2:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 80011b4:	9e00      	ldr	r6, [sp, #0]
 80011b6:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b8:	02d1      	lsls	r1, r2, #11
 80011ba:	d401      	bmi.n	80011c0 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80011bc:	003e      	movs	r6, r7
 80011be:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80011c0:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80011c2:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80011c4:	9f00      	ldr	r7, [sp, #0]
 80011c6:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c8:	0292      	lsls	r2, r2, #10
 80011ca:	d401      	bmi.n	80011d0 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80011cc:	402e      	ands	r6, r5
 80011ce:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80011d0:	60e7      	str	r7, [r4, #12]
    position++;
 80011d2:	3301      	adds	r3, #1
 80011d4:	e762      	b.n	800109c <HAL_GPIO_Init+0xc>
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000
 80011e0:	48000400 	.word	0x48000400
 80011e4:	48000800 	.word	0x48000800
 80011e8:	48000c00 	.word	0x48000c00
 80011ec:	40010400 	.word	0x40010400

080011f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f2:	6803      	ldr	r3, [r0, #0]
{
 80011f4:	b085      	sub	sp, #20
 80011f6:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f8:	07db      	lsls	r3, r3, #31
 80011fa:	d42f      	bmi.n	800125c <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fc:	682b      	ldr	r3, [r5, #0]
 80011fe:	079b      	lsls	r3, r3, #30
 8001200:	d500      	bpl.n	8001204 <HAL_RCC_OscConfig+0x14>
 8001202:	e081      	b.n	8001308 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001204:	682b      	ldr	r3, [r5, #0]
 8001206:	071b      	lsls	r3, r3, #28
 8001208:	d500      	bpl.n	800120c <HAL_RCC_OscConfig+0x1c>
 800120a:	e0bc      	b.n	8001386 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800120c:	682b      	ldr	r3, [r5, #0]
 800120e:	075b      	lsls	r3, r3, #29
 8001210:	d500      	bpl.n	8001214 <HAL_RCC_OscConfig+0x24>
 8001212:	e0df      	b.n	80013d4 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001214:	682b      	ldr	r3, [r5, #0]
 8001216:	06db      	lsls	r3, r3, #27
 8001218:	d51a      	bpl.n	8001250 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800121a:	696a      	ldr	r2, [r5, #20]
 800121c:	4cb5      	ldr	r4, [pc, #724]	; (80014f4 <HAL_RCC_OscConfig+0x304>)
 800121e:	2304      	movs	r3, #4
 8001220:	2a01      	cmp	r2, #1
 8001222:	d000      	beq.n	8001226 <HAL_RCC_OscConfig+0x36>
 8001224:	e14b      	b.n	80014be <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001226:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001228:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800122a:	430b      	orrs	r3, r1
 800122c:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800122e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001230:	431a      	orrs	r2, r3
 8001232:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001234:	f7ff fcc2 	bl	8000bbc <HAL_GetTick>
 8001238:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800123a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800123c:	4233      	tst	r3, r6
 800123e:	d100      	bne.n	8001242 <HAL_RCC_OscConfig+0x52>
 8001240:	e136      	b.n	80014b0 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001242:	21f8      	movs	r1, #248	; 0xf8
 8001244:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001246:	69ab      	ldr	r3, [r5, #24]
 8001248:	438a      	bics	r2, r1
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4313      	orrs	r3, r2
 800124e:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001250:	6a29      	ldr	r1, [r5, #32]
 8001252:	2900      	cmp	r1, #0
 8001254:	d000      	beq.n	8001258 <HAL_RCC_OscConfig+0x68>
 8001256:	e159      	b.n	800150c <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001258:	2000      	movs	r0, #0
 800125a:	e013      	b.n	8001284 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800125c:	210c      	movs	r1, #12
 800125e:	4ca5      	ldr	r4, [pc, #660]	; (80014f4 <HAL_RCC_OscConfig+0x304>)
 8001260:	6862      	ldr	r2, [r4, #4]
 8001262:	400a      	ands	r2, r1
 8001264:	2a04      	cmp	r2, #4
 8001266:	d006      	beq.n	8001276 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001268:	6863      	ldr	r3, [r4, #4]
 800126a:	400b      	ands	r3, r1
 800126c:	2b08      	cmp	r3, #8
 800126e:	d10b      	bne.n	8001288 <HAL_RCC_OscConfig+0x98>
 8001270:	6863      	ldr	r3, [r4, #4]
 8001272:	03db      	lsls	r3, r3, #15
 8001274:	d508      	bpl.n	8001288 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	039b      	lsls	r3, r3, #14
 800127a:	d5bf      	bpl.n	80011fc <HAL_RCC_OscConfig+0xc>
 800127c:	686b      	ldr	r3, [r5, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1bc      	bne.n	80011fc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001282:	2001      	movs	r0, #1
}
 8001284:	b005      	add	sp, #20
 8001286:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001288:	686b      	ldr	r3, [r5, #4]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d113      	bne.n	80012b6 <HAL_RCC_OscConfig+0xc6>
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	6822      	ldr	r2, [r4, #0]
 8001292:	025b      	lsls	r3, r3, #9
 8001294:	4313      	orrs	r3, r2
 8001296:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001298:	f7ff fc90 	bl	8000bbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800129e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a0:	02b6      	lsls	r6, r6, #10
 80012a2:	6823      	ldr	r3, [r4, #0]
 80012a4:	4233      	tst	r3, r6
 80012a6:	d1a9      	bne.n	80011fc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a8:	f7ff fc88 	bl	8000bbc <HAL_GetTick>
 80012ac:	1bc0      	subs	r0, r0, r7
 80012ae:	2864      	cmp	r0, #100	; 0x64
 80012b0:	d9f7      	bls.n	80012a2 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80012b2:	2003      	movs	r0, #3
 80012b4:	e7e6      	b.n	8001284 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d116      	bne.n	80012e8 <HAL_RCC_OscConfig+0xf8>
 80012ba:	6823      	ldr	r3, [r4, #0]
 80012bc:	4a8e      	ldr	r2, [pc, #568]	; (80014f8 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012be:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c0:	4013      	ands	r3, r2
 80012c2:	6023      	str	r3, [r4, #0]
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	4a8d      	ldr	r2, [pc, #564]	; (80014fc <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c8:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ca:	4013      	ands	r3, r2
 80012cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012ce:	f7ff fc75 	bl	8000bbc <HAL_GetTick>
 80012d2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	4233      	tst	r3, r6
 80012d8:	d100      	bne.n	80012dc <HAL_RCC_OscConfig+0xec>
 80012da:	e78f      	b.n	80011fc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fc6e 	bl	8000bbc <HAL_GetTick>
 80012e0:	1bc0      	subs	r0, r0, r7
 80012e2:	2864      	cmp	r0, #100	; 0x64
 80012e4:	d9f6      	bls.n	80012d4 <HAL_RCC_OscConfig+0xe4>
 80012e6:	e7e4      	b.n	80012b2 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e8:	2b05      	cmp	r3, #5
 80012ea:	d105      	bne.n	80012f8 <HAL_RCC_OscConfig+0x108>
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	6822      	ldr	r2, [r4, #0]
 80012f0:	02db      	lsls	r3, r3, #11
 80012f2:	4313      	orrs	r3, r2
 80012f4:	6023      	str	r3, [r4, #0]
 80012f6:	e7ca      	b.n	800128e <HAL_RCC_OscConfig+0x9e>
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	4a7f      	ldr	r2, [pc, #508]	; (80014f8 <HAL_RCC_OscConfig+0x308>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	6023      	str	r3, [r4, #0]
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	4a7e      	ldr	r2, [pc, #504]	; (80014fc <HAL_RCC_OscConfig+0x30c>)
 8001304:	4013      	ands	r3, r2
 8001306:	e7c6      	b.n	8001296 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001308:	220c      	movs	r2, #12
 800130a:	4c7a      	ldr	r4, [pc, #488]	; (80014f4 <HAL_RCC_OscConfig+0x304>)
 800130c:	6863      	ldr	r3, [r4, #4]
 800130e:	4213      	tst	r3, r2
 8001310:	d006      	beq.n	8001320 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001312:	6863      	ldr	r3, [r4, #4]
 8001314:	4013      	ands	r3, r2
 8001316:	2b08      	cmp	r3, #8
 8001318:	d110      	bne.n	800133c <HAL_RCC_OscConfig+0x14c>
 800131a:	6863      	ldr	r3, [r4, #4]
 800131c:	03db      	lsls	r3, r3, #15
 800131e:	d40d      	bmi.n	800133c <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	079b      	lsls	r3, r3, #30
 8001324:	d502      	bpl.n	800132c <HAL_RCC_OscConfig+0x13c>
 8001326:	68eb      	ldr	r3, [r5, #12]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d1aa      	bne.n	8001282 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132c:	21f8      	movs	r1, #248	; 0xf8
 800132e:	6822      	ldr	r2, [r4, #0]
 8001330:	692b      	ldr	r3, [r5, #16]
 8001332:	438a      	bics	r2, r1
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4313      	orrs	r3, r2
 8001338:	6023      	str	r3, [r4, #0]
 800133a:	e763      	b.n	8001204 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800133c:	68ea      	ldr	r2, [r5, #12]
 800133e:	2301      	movs	r3, #1
 8001340:	2a00      	cmp	r2, #0
 8001342:	d00f      	beq.n	8001364 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8001344:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001346:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8001348:	4313      	orrs	r3, r2
 800134a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800134c:	f7ff fc36 	bl	8000bbc <HAL_GetTick>
 8001350:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001352:	6823      	ldr	r3, [r4, #0]
 8001354:	4233      	tst	r3, r6
 8001356:	d1e9      	bne.n	800132c <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff fc30 	bl	8000bbc <HAL_GetTick>
 800135c:	1bc0      	subs	r0, r0, r7
 800135e:	2802      	cmp	r0, #2
 8001360:	d9f7      	bls.n	8001352 <HAL_RCC_OscConfig+0x162>
 8001362:	e7a6      	b.n	80012b2 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8001364:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001366:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8001368:	439a      	bics	r2, r3
 800136a:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 800136c:	f7ff fc26 	bl	8000bbc <HAL_GetTick>
 8001370:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	4233      	tst	r3, r6
 8001376:	d100      	bne.n	800137a <HAL_RCC_OscConfig+0x18a>
 8001378:	e744      	b.n	8001204 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137a:	f7ff fc1f 	bl	8000bbc <HAL_GetTick>
 800137e:	1bc0      	subs	r0, r0, r7
 8001380:	2802      	cmp	r0, #2
 8001382:	d9f6      	bls.n	8001372 <HAL_RCC_OscConfig+0x182>
 8001384:	e795      	b.n	80012b2 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001386:	69ea      	ldr	r2, [r5, #28]
 8001388:	2301      	movs	r3, #1
 800138a:	4c5a      	ldr	r4, [pc, #360]	; (80014f4 <HAL_RCC_OscConfig+0x304>)
 800138c:	2a00      	cmp	r2, #0
 800138e:	d010      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8001390:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8001394:	4313      	orrs	r3, r2
 8001396:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001398:	f7ff fc10 	bl	8000bbc <HAL_GetTick>
 800139c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013a0:	4233      	tst	r3, r6
 80013a2:	d000      	beq.n	80013a6 <HAL_RCC_OscConfig+0x1b6>
 80013a4:	e732      	b.n	800120c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a6:	f7ff fc09 	bl	8000bbc <HAL_GetTick>
 80013aa:	1bc0      	subs	r0, r0, r7
 80013ac:	2802      	cmp	r0, #2
 80013ae:	d9f6      	bls.n	800139e <HAL_RCC_OscConfig+0x1ae>
 80013b0:	e77f      	b.n	80012b2 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 80013b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b4:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80013b6:	439a      	bics	r2, r3
 80013b8:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80013ba:	f7ff fbff 	bl	8000bbc <HAL_GetTick>
 80013be:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013c2:	4233      	tst	r3, r6
 80013c4:	d100      	bne.n	80013c8 <HAL_RCC_OscConfig+0x1d8>
 80013c6:	e721      	b.n	800120c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fbf8 	bl	8000bbc <HAL_GetTick>
 80013cc:	1bc0      	subs	r0, r0, r7
 80013ce:	2802      	cmp	r0, #2
 80013d0:	d9f6      	bls.n	80013c0 <HAL_RCC_OscConfig+0x1d0>
 80013d2:	e76e      	b.n	80012b2 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80013d6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d8:	4c46      	ldr	r4, [pc, #280]	; (80014f4 <HAL_RCC_OscConfig+0x304>)
 80013da:	0552      	lsls	r2, r2, #21
 80013dc:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80013de:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e0:	4213      	tst	r3, r2
 80013e2:	d108      	bne.n	80013f6 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e4:	69e3      	ldr	r3, [r4, #28]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61e3      	str	r3, [r4, #28]
 80013ea:	69e3      	ldr	r3, [r4, #28]
 80013ec:	4013      	ands	r3, r2
 80013ee:	9303      	str	r3, [sp, #12]
 80013f0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80013f2:	2301      	movs	r3, #1
 80013f4:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f6:	2780      	movs	r7, #128	; 0x80
 80013f8:	4e41      	ldr	r6, [pc, #260]	; (8001500 <HAL_RCC_OscConfig+0x310>)
 80013fa:	007f      	lsls	r7, r7, #1
 80013fc:	6833      	ldr	r3, [r6, #0]
 80013fe:	423b      	tst	r3, r7
 8001400:	d006      	beq.n	8001410 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001402:	68ab      	ldr	r3, [r5, #8]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d113      	bne.n	8001430 <HAL_RCC_OscConfig+0x240>
 8001408:	6a22      	ldr	r2, [r4, #32]
 800140a:	4313      	orrs	r3, r2
 800140c:	6223      	str	r3, [r4, #32]
 800140e:	e030      	b.n	8001472 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001410:	6833      	ldr	r3, [r6, #0]
 8001412:	433b      	orrs	r3, r7
 8001414:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001416:	f7ff fbd1 	bl	8000bbc <HAL_GetTick>
 800141a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141c:	6833      	ldr	r3, [r6, #0]
 800141e:	423b      	tst	r3, r7
 8001420:	d1ef      	bne.n	8001402 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001422:	f7ff fbcb 	bl	8000bbc <HAL_GetTick>
 8001426:	9b01      	ldr	r3, [sp, #4]
 8001428:	1ac0      	subs	r0, r0, r3
 800142a:	2864      	cmp	r0, #100	; 0x64
 800142c:	d9f6      	bls.n	800141c <HAL_RCC_OscConfig+0x22c>
 800142e:	e740      	b.n	80012b2 <HAL_RCC_OscConfig+0xc2>
 8001430:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001432:	2b00      	cmp	r3, #0
 8001434:	d114      	bne.n	8001460 <HAL_RCC_OscConfig+0x270>
 8001436:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001438:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143a:	4393      	bics	r3, r2
 800143c:	6223      	str	r3, [r4, #32]
 800143e:	6a23      	ldr	r3, [r4, #32]
 8001440:	3203      	adds	r2, #3
 8001442:	4393      	bics	r3, r2
 8001444:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001446:	f7ff fbb9 	bl	8000bbc <HAL_GetTick>
 800144a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144c:	6a23      	ldr	r3, [r4, #32]
 800144e:	423b      	tst	r3, r7
 8001450:	d025      	beq.n	800149e <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001452:	f7ff fbb3 	bl	8000bbc <HAL_GetTick>
 8001456:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_RCC_OscConfig+0x314>)
 8001458:	1b80      	subs	r0, r0, r6
 800145a:	4298      	cmp	r0, r3
 800145c:	d9f6      	bls.n	800144c <HAL_RCC_OscConfig+0x25c>
 800145e:	e728      	b.n	80012b2 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001460:	2b05      	cmp	r3, #5
 8001462:	d10b      	bne.n	800147c <HAL_RCC_OscConfig+0x28c>
 8001464:	6a21      	ldr	r1, [r4, #32]
 8001466:	3b01      	subs	r3, #1
 8001468:	430b      	orrs	r3, r1
 800146a:	6223      	str	r3, [r4, #32]
 800146c:	6a23      	ldr	r3, [r4, #32]
 800146e:	431a      	orrs	r2, r3
 8001470:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8001472:	f7ff fba3 	bl	8000bbc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001476:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001478:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147a:	e00d      	b.n	8001498 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	6a23      	ldr	r3, [r4, #32]
 800147e:	4393      	bics	r3, r2
 8001480:	2204      	movs	r2, #4
 8001482:	6223      	str	r3, [r4, #32]
 8001484:	6a23      	ldr	r3, [r4, #32]
 8001486:	4393      	bics	r3, r2
 8001488:	e7c0      	b.n	800140c <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fb97 	bl	8000bbc <HAL_GetTick>
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_RCC_OscConfig+0x314>)
 8001490:	1b80      	subs	r0, r0, r6
 8001492:	4298      	cmp	r0, r3
 8001494:	d900      	bls.n	8001498 <HAL_RCC_OscConfig+0x2a8>
 8001496:	e70c      	b.n	80012b2 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001498:	6a23      	ldr	r3, [r4, #32]
 800149a:	423b      	tst	r3, r7
 800149c:	d0f5      	beq.n	800148a <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 800149e:	9b00      	ldr	r3, [sp, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d000      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2b6>
 80014a4:	e6b6      	b.n	8001214 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a6:	69e3      	ldr	r3, [r4, #28]
 80014a8:	4a17      	ldr	r2, [pc, #92]	; (8001508 <HAL_RCC_OscConfig+0x318>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	61e3      	str	r3, [r4, #28]
 80014ae:	e6b1      	b.n	8001214 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014b0:	f7ff fb84 	bl	8000bbc <HAL_GetTick>
 80014b4:	1bc0      	subs	r0, r0, r7
 80014b6:	2802      	cmp	r0, #2
 80014b8:	d800      	bhi.n	80014bc <HAL_RCC_OscConfig+0x2cc>
 80014ba:	e6be      	b.n	800123a <HAL_RCC_OscConfig+0x4a>
 80014bc:	e6f9      	b.n	80012b2 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014be:	3205      	adds	r2, #5
 80014c0:	d103      	bne.n	80014ca <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 80014c2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80014c4:	439a      	bics	r2, r3
 80014c6:	6362      	str	r2, [r4, #52]	; 0x34
 80014c8:	e6bb      	b.n	8001242 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 80014ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014cc:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80014ce:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80014d0:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80014d2:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80014d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014d6:	4393      	bics	r3, r2
 80014d8:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80014da:	f7ff fb6f 	bl	8000bbc <HAL_GetTick>
 80014de:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014e2:	4233      	tst	r3, r6
 80014e4:	d100      	bne.n	80014e8 <HAL_RCC_OscConfig+0x2f8>
 80014e6:	e6b3      	b.n	8001250 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014e8:	f7ff fb68 	bl	8000bbc <HAL_GetTick>
 80014ec:	1bc0      	subs	r0, r0, r7
 80014ee:	2802      	cmp	r0, #2
 80014f0:	d9f6      	bls.n	80014e0 <HAL_RCC_OscConfig+0x2f0>
 80014f2:	e6de      	b.n	80012b2 <HAL_RCC_OscConfig+0xc2>
 80014f4:	40021000 	.word	0x40021000
 80014f8:	fffeffff 	.word	0xfffeffff
 80014fc:	fffbffff 	.word	0xfffbffff
 8001500:	40007000 	.word	0x40007000
 8001504:	00001388 	.word	0x00001388
 8001508:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800150c:	220c      	movs	r2, #12
 800150e:	4c26      	ldr	r4, [pc, #152]	; (80015a8 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8001510:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001512:	6863      	ldr	r3, [r4, #4]
 8001514:	4013      	ands	r3, r2
 8001516:	2b08      	cmp	r3, #8
 8001518:	d100      	bne.n	800151c <HAL_RCC_OscConfig+0x32c>
 800151a:	e6b3      	b.n	8001284 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	4a23      	ldr	r2, [pc, #140]	; (80015ac <HAL_RCC_OscConfig+0x3bc>)
 8001520:	4013      	ands	r3, r2
 8001522:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001524:	2902      	cmp	r1, #2
 8001526:	d12f      	bne.n	8001588 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8001528:	f7ff fb48 	bl	8000bbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800152e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001530:	04b6      	lsls	r6, r6, #18
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	4233      	tst	r3, r6
 8001536:	d121      	bne.n	800157c <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001538:	220f      	movs	r2, #15
 800153a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800153c:	4393      	bics	r3, r2
 800153e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001540:	4313      	orrs	r3, r2
 8001542:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001544:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001546:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001548:	6862      	ldr	r2, [r4, #4]
 800154a:	430b      	orrs	r3, r1
 800154c:	4918      	ldr	r1, [pc, #96]	; (80015b0 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800154e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001550:	400a      	ands	r2, r1
 8001552:	4313      	orrs	r3, r2
 8001554:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	6822      	ldr	r2, [r4, #0]
 800155a:	045b      	lsls	r3, r3, #17
 800155c:	4313      	orrs	r3, r2
 800155e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001560:	f7ff fb2c 	bl	8000bbc <HAL_GetTick>
 8001564:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001566:	04ad      	lsls	r5, r5, #18
 8001568:	6823      	ldr	r3, [r4, #0]
 800156a:	422b      	tst	r3, r5
 800156c:	d000      	beq.n	8001570 <HAL_RCC_OscConfig+0x380>
 800156e:	e673      	b.n	8001258 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff fb24 	bl	8000bbc <HAL_GetTick>
 8001574:	1b80      	subs	r0, r0, r6
 8001576:	2802      	cmp	r0, #2
 8001578:	d9f6      	bls.n	8001568 <HAL_RCC_OscConfig+0x378>
 800157a:	e69a      	b.n	80012b2 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157c:	f7ff fb1e 	bl	8000bbc <HAL_GetTick>
 8001580:	1bc0      	subs	r0, r0, r7
 8001582:	2802      	cmp	r0, #2
 8001584:	d9d5      	bls.n	8001532 <HAL_RCC_OscConfig+0x342>
 8001586:	e694      	b.n	80012b2 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001588:	f7ff fb18 	bl	8000bbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800158e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001590:	04ad      	lsls	r5, r5, #18
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	422b      	tst	r3, r5
 8001596:	d100      	bne.n	800159a <HAL_RCC_OscConfig+0x3aa>
 8001598:	e65e      	b.n	8001258 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159a:	f7ff fb0f 	bl	8000bbc <HAL_GetTick>
 800159e:	1b80      	subs	r0, r0, r6
 80015a0:	2802      	cmp	r0, #2
 80015a2:	d9f6      	bls.n	8001592 <HAL_RCC_OscConfig+0x3a2>
 80015a4:	e685      	b.n	80012b2 <HAL_RCC_OscConfig+0xc2>
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	40021000 	.word	0x40021000
 80015ac:	feffffff 	.word	0xfeffffff
 80015b0:	ffc2ffff 	.word	0xffc2ffff

080015b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b4:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80015b6:	4c14      	ldr	r4, [pc, #80]	; (8001608 <HAL_RCC_GetSysClockFreq+0x54>)
{
 80015b8:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80015ba:	2210      	movs	r2, #16
 80015bc:	0021      	movs	r1, r4
 80015be:	4668      	mov	r0, sp
 80015c0:	f000 fcf0 	bl	8001fa4 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80015c4:	0021      	movs	r1, r4
 80015c6:	ad04      	add	r5, sp, #16
 80015c8:	2210      	movs	r2, #16
 80015ca:	3110      	adds	r1, #16
 80015cc:	0028      	movs	r0, r5
 80015ce:	f000 fce9 	bl	8001fa4 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015d2:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80015d4:	4e0d      	ldr	r6, [pc, #52]	; (800160c <HAL_RCC_GetSysClockFreq+0x58>)
 80015d6:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80015d8:	401a      	ands	r2, r3
 80015da:	2a08      	cmp	r2, #8
 80015dc:	d111      	bne.n	8001602 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015de:	200f      	movs	r0, #15
 80015e0:	466a      	mov	r2, sp
 80015e2:	0c99      	lsrs	r1, r3, #18
 80015e4:	4001      	ands	r1, r0
 80015e6:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015e8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80015ea:	4002      	ands	r2, r0
 80015ec:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015ee:	03db      	lsls	r3, r3, #15
 80015f0:	d505      	bpl.n	80015fe <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80015f2:	4807      	ldr	r0, [pc, #28]	; (8001610 <HAL_RCC_GetSysClockFreq+0x5c>)
 80015f4:	f7fe fd9a 	bl	800012c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80015f8:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80015fa:	b008      	add	sp, #32
 80015fc:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <HAL_RCC_GetSysClockFreq+0x60>)
 8001600:	e7fa      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8001602:	4803      	ldr	r0, [pc, #12]	; (8001610 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8001604:	e7f9      	b.n	80015fa <HAL_RCC_GetSysClockFreq+0x46>
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	08002820 	.word	0x08002820
 800160c:	40021000 	.word	0x40021000
 8001610:	007a1200 	.word	0x007a1200
 8001614:	003d0900 	.word	0x003d0900

08001618 <HAL_RCC_ClockConfig>:
{
 8001618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800161a:	2201      	movs	r2, #1
 800161c:	4c43      	ldr	r4, [pc, #268]	; (800172c <HAL_RCC_ClockConfig+0x114>)
{
 800161e:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001620:	6823      	ldr	r3, [r4, #0]
{
 8001622:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001624:	4013      	ands	r3, r2
 8001626:	428b      	cmp	r3, r1
 8001628:	d31c      	bcc.n	8001664 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162a:	6832      	ldr	r2, [r6, #0]
 800162c:	0793      	lsls	r3, r2, #30
 800162e:	d423      	bmi.n	8001678 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001630:	07d3      	lsls	r3, r2, #31
 8001632:	d429      	bmi.n	8001688 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001634:	2301      	movs	r3, #1
 8001636:	6822      	ldr	r2, [r4, #0]
 8001638:	401a      	ands	r2, r3
 800163a:	4297      	cmp	r7, r2
 800163c:	d367      	bcc.n	800170e <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163e:	6833      	ldr	r3, [r6, #0]
 8001640:	4c3b      	ldr	r4, [pc, #236]	; (8001730 <HAL_RCC_ClockConfig+0x118>)
 8001642:	075b      	lsls	r3, r3, #29
 8001644:	d46a      	bmi.n	800171c <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001646:	f7ff ffb5 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 800164a:	6863      	ldr	r3, [r4, #4]
 800164c:	4a39      	ldr	r2, [pc, #228]	; (8001734 <HAL_RCC_ClockConfig+0x11c>)
 800164e:	061b      	lsls	r3, r3, #24
 8001650:	0f1b      	lsrs	r3, r3, #28
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	40d8      	lsrs	r0, r3
 8001656:	4b38      	ldr	r3, [pc, #224]	; (8001738 <HAL_RCC_ClockConfig+0x120>)
 8001658:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff fa84 	bl	8000b68 <HAL_InitTick>
  return HAL_OK;
 8001660:	2000      	movs	r0, #0
 8001662:	e008      	b.n	8001676 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	4393      	bics	r3, r2
 8001668:	430b      	orrs	r3, r1
 800166a:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	4013      	ands	r3, r2
 8001670:	4299      	cmp	r1, r3
 8001672:	d0da      	beq.n	800162a <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8001674:	2001      	movs	r0, #1
}
 8001676:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001678:	20f0      	movs	r0, #240	; 0xf0
 800167a:	492d      	ldr	r1, [pc, #180]	; (8001730 <HAL_RCC_ClockConfig+0x118>)
 800167c:	684b      	ldr	r3, [r1, #4]
 800167e:	4383      	bics	r3, r0
 8001680:	68b0      	ldr	r0, [r6, #8]
 8001682:	4303      	orrs	r3, r0
 8001684:	604b      	str	r3, [r1, #4]
 8001686:	e7d3      	b.n	8001630 <HAL_RCC_ClockConfig+0x18>
 8001688:	4d29      	ldr	r5, [pc, #164]	; (8001730 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168a:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168e:	2a01      	cmp	r2, #1
 8001690:	d11a      	bne.n	80016c8 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	039b      	lsls	r3, r3, #14
 8001694:	d5ee      	bpl.n	8001674 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001696:	2103      	movs	r1, #3
 8001698:	686b      	ldr	r3, [r5, #4]
 800169a:	438b      	bics	r3, r1
 800169c:	4313      	orrs	r3, r2
 800169e:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80016a0:	f7ff fa8c 	bl	8000bbc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a4:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80016a6:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d115      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ac:	220c      	movs	r2, #12
 80016ae:	686b      	ldr	r3, [r5, #4]
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d0be      	beq.n	8001634 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b6:	f7ff fa81 	bl	8000bbc <HAL_GetTick>
 80016ba:	9b01      	ldr	r3, [sp, #4]
 80016bc:	1ac0      	subs	r0, r0, r3
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <HAL_RCC_ClockConfig+0x124>)
 80016c0:	4298      	cmp	r0, r3
 80016c2:	d9f3      	bls.n	80016ac <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 80016c4:	2003      	movs	r0, #3
 80016c6:	e7d6      	b.n	8001676 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016c8:	2a02      	cmp	r2, #2
 80016ca:	d102      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016cc:	019b      	lsls	r3, r3, #6
 80016ce:	d4e2      	bmi.n	8001696 <HAL_RCC_ClockConfig+0x7e>
 80016d0:	e7d0      	b.n	8001674 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d2:	079b      	lsls	r3, r3, #30
 80016d4:	d4df      	bmi.n	8001696 <HAL_RCC_ClockConfig+0x7e>
 80016d6:	e7cd      	b.n	8001674 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d012      	beq.n	8001702 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016dc:	220c      	movs	r2, #12
 80016de:	686b      	ldr	r3, [r5, #4]
 80016e0:	4213      	tst	r3, r2
 80016e2:	d0a7      	beq.n	8001634 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7ff fa6a 	bl	8000bbc <HAL_GetTick>
 80016e8:	9b01      	ldr	r3, [sp, #4]
 80016ea:	1ac0      	subs	r0, r0, r3
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_RCC_ClockConfig+0x124>)
 80016ee:	4298      	cmp	r0, r3
 80016f0:	d9f4      	bls.n	80016dc <HAL_RCC_ClockConfig+0xc4>
 80016f2:	e7e7      	b.n	80016c4 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f4:	f7ff fa62 	bl	8000bbc <HAL_GetTick>
 80016f8:	9b01      	ldr	r3, [sp, #4]
 80016fa:	1ac0      	subs	r0, r0, r3
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_RCC_ClockConfig+0x124>)
 80016fe:	4298      	cmp	r0, r3
 8001700:	d8e0      	bhi.n	80016c4 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001702:	220c      	movs	r2, #12
 8001704:	686b      	ldr	r3, [r5, #4]
 8001706:	4013      	ands	r3, r2
 8001708:	2b08      	cmp	r3, #8
 800170a:	d1f3      	bne.n	80016f4 <HAL_RCC_ClockConfig+0xdc>
 800170c:	e792      	b.n	8001634 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	6822      	ldr	r2, [r4, #0]
 8001710:	439a      	bics	r2, r3
 8001712:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001714:	6822      	ldr	r2, [r4, #0]
 8001716:	421a      	tst	r2, r3
 8001718:	d1ac      	bne.n	8001674 <HAL_RCC_ClockConfig+0x5c>
 800171a:	e790      	b.n	800163e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800171c:	6863      	ldr	r3, [r4, #4]
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <HAL_RCC_ClockConfig+0x128>)
 8001720:	4013      	ands	r3, r2
 8001722:	68f2      	ldr	r2, [r6, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	6063      	str	r3, [r4, #4]
 8001728:	e78d      	b.n	8001646 <HAL_RCC_ClockConfig+0x2e>
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	40022000 	.word	0x40022000
 8001730:	40021000 	.word	0x40021000
 8001734:	08002913 	.word	0x08002913
 8001738:	20000008 	.word	0x20000008
 800173c:	00001388 	.word	0x00001388
 8001740:	fffff8ff 	.word	0xfffff8ff

08001744 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001744:	4b01      	ldr	r3, [pc, #4]	; (800174c <HAL_RCC_GetHCLKFreq+0x8>)
 8001746:	6818      	ldr	r0, [r3, #0]
}
 8001748:	4770      	bx	lr
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	20000008 	.word	0x20000008

08001750 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	055b      	lsls	r3, r3, #21
 8001758:	0f5b      	lsrs	r3, r3, #29
 800175a:	5cd3      	ldrb	r3, [r2, r3]
 800175c:	4a03      	ldr	r2, [pc, #12]	; (800176c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800175e:	6810      	ldr	r0, [r2, #0]
 8001760:	40d8      	lsrs	r0, r3
}    
 8001762:	4770      	bx	lr
 8001764:	40021000 	.word	0x40021000
 8001768:	08002923 	.word	0x08002923
 800176c:	20000008 	.word	0x20000008

08001770 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001770:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001772:	6803      	ldr	r3, [r0, #0]
{
 8001774:	b085      	sub	sp, #20
 8001776:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001778:	03db      	lsls	r3, r3, #15
 800177a:	d528      	bpl.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800177c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800177e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001780:	4c37      	ldr	r4, [pc, #220]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8001782:	0552      	lsls	r2, r2, #21
 8001784:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001786:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001788:	4213      	tst	r3, r2
 800178a:	d108      	bne.n	800179e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800178c:	69e3      	ldr	r3, [r4, #28]
 800178e:	4313      	orrs	r3, r2
 8001790:	61e3      	str	r3, [r4, #28]
 8001792:	69e3      	ldr	r3, [r4, #28]
 8001794:	4013      	ands	r3, r2
 8001796:	9303      	str	r3, [sp, #12]
 8001798:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800179a:	2301      	movs	r3, #1
 800179c:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179e:	2780      	movs	r7, #128	; 0x80
 80017a0:	4e30      	ldr	r6, [pc, #192]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80017a2:	007f      	lsls	r7, r7, #1
 80017a4:	6833      	ldr	r3, [r6, #0]
 80017a6:	423b      	tst	r3, r7
 80017a8:	d026      	beq.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017aa:	22c0      	movs	r2, #192	; 0xc0
 80017ac:	6a23      	ldr	r3, [r4, #32]
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	4013      	ands	r3, r2
 80017b2:	4e2d      	ldr	r6, [pc, #180]	; (8001868 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017b4:	d132      	bne.n	800181c <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017b6:	6a23      	ldr	r3, [r4, #32]
 80017b8:	401e      	ands	r6, r3
 80017ba:	686b      	ldr	r3, [r5, #4]
 80017bc:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017be:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017c0:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d103      	bne.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c6:	69e3      	ldr	r3, [r4, #28]
 80017c8:	4a28      	ldr	r2, [pc, #160]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017ce:	682a      	ldr	r2, [r5, #0]
 80017d0:	07d3      	lsls	r3, r2, #31
 80017d2:	d506      	bpl.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017d4:	2003      	movs	r0, #3
 80017d6:	4922      	ldr	r1, [pc, #136]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 80017d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80017da:	4383      	bics	r3, r0
 80017dc:	68a8      	ldr	r0, [r5, #8]
 80017de:	4303      	orrs	r3, r0
 80017e0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80017e2:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017e4:	0693      	lsls	r3, r2, #26
 80017e6:	d517      	bpl.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017e8:	2110      	movs	r1, #16
 80017ea:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 80017ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80017ee:	438b      	bics	r3, r1
 80017f0:	68e9      	ldr	r1, [r5, #12]
 80017f2:	430b      	orrs	r3, r1
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	e00f      	b.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f8:	6833      	ldr	r3, [r6, #0]
 80017fa:	433b      	orrs	r3, r7
 80017fc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80017fe:	f7ff f9dd 	bl	8000bbc <HAL_GetTick>
 8001802:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	6833      	ldr	r3, [r6, #0]
 8001806:	423b      	tst	r3, r7
 8001808:	d1cf      	bne.n	80017aa <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180a:	f7ff f9d7 	bl	8000bbc <HAL_GetTick>
 800180e:	9b01      	ldr	r3, [sp, #4]
 8001810:	1ac0      	subs	r0, r0, r3
 8001812:	2864      	cmp	r0, #100	; 0x64
 8001814:	d9f6      	bls.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8001816:	2003      	movs	r0, #3
}
 8001818:	b005      	add	sp, #20
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800181c:	6869      	ldr	r1, [r5, #4]
 800181e:	400a      	ands	r2, r1
 8001820:	4293      	cmp	r3, r2
 8001822:	d0c8      	beq.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001824:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001826:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001828:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800182a:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 800182c:	025b      	lsls	r3, r3, #9
 800182e:	4303      	orrs	r3, r0
 8001830:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001832:	6a23      	ldr	r3, [r4, #32]
 8001834:	480e      	ldr	r0, [pc, #56]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001836:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001838:	4003      	ands	r3, r0
 800183a:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 800183c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800183e:	07d3      	lsls	r3, r2, #31
 8001840:	d5b9      	bpl.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8001842:	f7ff f9bb 	bl	8000bbc <HAL_GetTick>
 8001846:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001848:	2202      	movs	r2, #2
 800184a:	6a23      	ldr	r3, [r4, #32]
 800184c:	4213      	tst	r3, r2
 800184e:	d1b2      	bne.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001850:	f7ff f9b4 	bl	8000bbc <HAL_GetTick>
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001856:	1bc0      	subs	r0, r0, r7
 8001858:	4298      	cmp	r0, r3
 800185a:	d9f5      	bls.n	8001848 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800185c:	e7db      	b.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	40021000 	.word	0x40021000
 8001864:	40007000 	.word	0x40007000
 8001868:	fffffcff 	.word	0xfffffcff
 800186c:	efffffff 	.word	0xefffffff
 8001870:	fffeffff 	.word	0xfffeffff
 8001874:	00001388 	.word	0x00001388

08001878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001878:	b570      	push	{r4, r5, r6, lr}
 800187a:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800187c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800187e:	69c2      	ldr	r2, [r0, #28]
 8001880:	6883      	ldr	r3, [r0, #8]
 8001882:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001884:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001886:	4303      	orrs	r3, r0
 8001888:	6960      	ldr	r0, [r4, #20]
 800188a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800188c:	4835      	ldr	r0, [pc, #212]	; (8001964 <UART_SetConfig+0xec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800188e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001890:	4001      	ands	r1, r0
 8001892:	430b      	orrs	r3, r1
 8001894:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001896:	686b      	ldr	r3, [r5, #4]
 8001898:	4933      	ldr	r1, [pc, #204]	; (8001968 <UART_SetConfig+0xf0>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800189a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800189c:	400b      	ands	r3, r1
 800189e:	68e1      	ldr	r1, [r4, #12]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80018a4:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80018a6:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80018a8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80018aa:	4830      	ldr	r0, [pc, #192]	; (800196c <UART_SetConfig+0xf4>)
 80018ac:	4001      	ands	r1, r0
 80018ae:	430b      	orrs	r3, r1

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018b0:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80018b2:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018b4:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <UART_SetConfig+0xf8>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	400b      	ands	r3, r1
 80018ba:	492e      	ldr	r1, [pc, #184]	; (8001974 <UART_SetConfig+0xfc>)
 80018bc:	5cc8      	ldrb	r0, [r1, r3]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	021b      	lsls	r3, r3, #8
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d12c      	bne.n	8001920 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 80018c6:	2808      	cmp	r0, #8
 80018c8:	d827      	bhi.n	800191a <UART_SetConfig+0xa2>
 80018ca:	f7fe fc25 	bl	8000118 <__gnu_thumb1_case_uqi>
 80018ce:	2605      	.short	0x2605
 80018d0:	261e260b 	.word	0x261e260b
 80018d4:	2626      	.short	0x2626
 80018d6:	21          	.byte	0x21
 80018d7:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80018d8:	f7ff ff3a 	bl	8001750 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80018dc:	6863      	ldr	r3, [r4, #4]
 80018de:	0040      	lsls	r0, r0, #1
 80018e0:	085b      	lsrs	r3, r3, #1
 80018e2:	e002      	b.n	80018ea <UART_SetConfig+0x72>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80018e4:	6863      	ldr	r3, [r4, #4]
 80018e6:	0858      	lsrs	r0, r3, #1
 80018e8:	4b23      	ldr	r3, [pc, #140]	; (8001978 <UART_SetConfig+0x100>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80018ea:	18c0      	adds	r0, r0, r3
 80018ec:	6861      	ldr	r1, [r4, #4]
 80018ee:	f7fe fc1d 	bl	800012c <__udivsi3>
 80018f2:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80018f4:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80018f6:	220f      	movs	r2, #15
 80018f8:	0019      	movs	r1, r3
 80018fa:	4391      	bics	r1, r2
 80018fc:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80018fe:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8001900:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001902:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8001904:	4313      	orrs	r3, r2
 8001906:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 8001908:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800190a:	f7ff fe53 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 800190e:	e7e5      	b.n	80018dc <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001910:	6863      	ldr	r3, [r4, #4]
 8001912:	0858      	lsrs	r0, r3, #1
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	025b      	lsls	r3, r3, #9
 8001918:	e7e7      	b.n	80018ea <UART_SetConfig+0x72>
        ret = HAL_ERROR;
 800191a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800191c:	2300      	movs	r3, #0
 800191e:	e7ea      	b.n	80018f6 <UART_SetConfig+0x7e>
    switch (clocksource)
 8001920:	2808      	cmp	r0, #8
 8001922:	d81d      	bhi.n	8001960 <UART_SetConfig+0xe8>
 8001924:	f7fe fbf8 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001928:	1c0a1c05 	.word	0x1c0a1c05
 800192c:	1c1c1c14 	.word	0x1c1c1c14
 8001930:	17          	.byte	0x17
 8001931:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001932:	f7ff ff0d 	bl	8001750 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001936:	6861      	ldr	r1, [r4, #4]
 8001938:	084b      	lsrs	r3, r1, #1
 800193a:	e002      	b.n	8001942 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800193c:	6861      	ldr	r1, [r4, #4]
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <UART_SetConfig+0x104>)
 8001940:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001942:	18c0      	adds	r0, r0, r3
 8001944:	f7fe fbf2 	bl	800012c <__udivsi3>
 8001948:	b280      	uxth	r0, r0
 800194a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800194c:	2000      	movs	r0, #0
        break;
 800194e:	e7db      	b.n	8001908 <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001950:	f7ff fe30 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 8001954:	e7ef      	b.n	8001936 <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	6861      	ldr	r1, [r4, #4]
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	0848      	lsrs	r0, r1, #1
 800195e:	e7f0      	b.n	8001942 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8001960:	2001      	movs	r0, #1
 8001962:	e7d1      	b.n	8001908 <UART_SetConfig+0x90>
 8001964:	ffff69f3 	.word	0xffff69f3
 8001968:	ffffcfff 	.word	0xffffcfff
 800196c:	fffff4ff 	.word	0xfffff4ff
 8001970:	40021000 	.word	0x40021000
 8001974:	08002900 	.word	0x08002900
 8001978:	00f42400 	.word	0x00f42400
 800197c:	007a1200 	.word	0x007a1200

08001980 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001980:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001982:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001984:	07da      	lsls	r2, r3, #31
 8001986:	d506      	bpl.n	8001996 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001988:	6801      	ldr	r1, [r0, #0]
 800198a:	4c28      	ldr	r4, [pc, #160]	; (8001a2c <UART_AdvFeatureConfig+0xac>)
 800198c:	684a      	ldr	r2, [r1, #4]
 800198e:	4022      	ands	r2, r4
 8001990:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001992:	4322      	orrs	r2, r4
 8001994:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001996:	079a      	lsls	r2, r3, #30
 8001998:	d506      	bpl.n	80019a8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800199a:	6801      	ldr	r1, [r0, #0]
 800199c:	4c24      	ldr	r4, [pc, #144]	; (8001a30 <UART_AdvFeatureConfig+0xb0>)
 800199e:	684a      	ldr	r2, [r1, #4]
 80019a0:	4022      	ands	r2, r4
 80019a2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80019a4:	4322      	orrs	r2, r4
 80019a6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80019a8:	075a      	lsls	r2, r3, #29
 80019aa:	d506      	bpl.n	80019ba <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80019ac:	6801      	ldr	r1, [r0, #0]
 80019ae:	4c21      	ldr	r4, [pc, #132]	; (8001a34 <UART_AdvFeatureConfig+0xb4>)
 80019b0:	684a      	ldr	r2, [r1, #4]
 80019b2:	4022      	ands	r2, r4
 80019b4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80019b6:	4322      	orrs	r2, r4
 80019b8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80019ba:	071a      	lsls	r2, r3, #28
 80019bc:	d506      	bpl.n	80019cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80019be:	6801      	ldr	r1, [r0, #0]
 80019c0:	4c1d      	ldr	r4, [pc, #116]	; (8001a38 <UART_AdvFeatureConfig+0xb8>)
 80019c2:	684a      	ldr	r2, [r1, #4]
 80019c4:	4022      	ands	r2, r4
 80019c6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80019c8:	4322      	orrs	r2, r4
 80019ca:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80019cc:	06da      	lsls	r2, r3, #27
 80019ce:	d506      	bpl.n	80019de <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80019d0:	6801      	ldr	r1, [r0, #0]
 80019d2:	4c1a      	ldr	r4, [pc, #104]	; (8001a3c <UART_AdvFeatureConfig+0xbc>)
 80019d4:	688a      	ldr	r2, [r1, #8]
 80019d6:	4022      	ands	r2, r4
 80019d8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80019da:	4322      	orrs	r2, r4
 80019dc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80019de:	069a      	lsls	r2, r3, #26
 80019e0:	d506      	bpl.n	80019f0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80019e2:	6801      	ldr	r1, [r0, #0]
 80019e4:	4c16      	ldr	r4, [pc, #88]	; (8001a40 <UART_AdvFeatureConfig+0xc0>)
 80019e6:	688a      	ldr	r2, [r1, #8]
 80019e8:	4022      	ands	r2, r4
 80019ea:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80019ec:	4322      	orrs	r2, r4
 80019ee:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80019f0:	065a      	lsls	r2, r3, #25
 80019f2:	d510      	bpl.n	8001a16 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80019f4:	6801      	ldr	r1, [r0, #0]
 80019f6:	4d13      	ldr	r5, [pc, #76]	; (8001a44 <UART_AdvFeatureConfig+0xc4>)
 80019f8:	684a      	ldr	r2, [r1, #4]
 80019fa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80019fc:	402a      	ands	r2, r5
 80019fe:	4322      	orrs	r2, r4
 8001a00:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	0352      	lsls	r2, r2, #13
 8001a06:	4294      	cmp	r4, r2
 8001a08:	d105      	bne.n	8001a16 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a0a:	684a      	ldr	r2, [r1, #4]
 8001a0c:	4c0e      	ldr	r4, [pc, #56]	; (8001a48 <UART_AdvFeatureConfig+0xc8>)
 8001a0e:	4022      	ands	r2, r4
 8001a10:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001a12:	4322      	orrs	r2, r4
 8001a14:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a16:	061b      	lsls	r3, r3, #24
 8001a18:	d506      	bpl.n	8001a28 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a1a:	6802      	ldr	r2, [r0, #0]
 8001a1c:	490b      	ldr	r1, [pc, #44]	; (8001a4c <UART_AdvFeatureConfig+0xcc>)
 8001a1e:	6853      	ldr	r3, [r2, #4]
 8001a20:	400b      	ands	r3, r1
 8001a22:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001a24:	430b      	orrs	r3, r1
 8001a26:	6053      	str	r3, [r2, #4]
  }
}
 8001a28:	bd30      	pop	{r4, r5, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	fffdffff 	.word	0xfffdffff
 8001a30:	fffeffff 	.word	0xfffeffff
 8001a34:	fffbffff 	.word	0xfffbffff
 8001a38:	ffff7fff 	.word	0xffff7fff
 8001a3c:	ffffefff 	.word	0xffffefff
 8001a40:	ffffdfff 	.word	0xffffdfff
 8001a44:	ffefffff 	.word	0xffefffff
 8001a48:	ff9fffff 	.word	0xff9fffff
 8001a4c:	fff7ffff 	.word	0xfff7ffff

08001a50 <HAL_HalfDuplex_Init>:
{
 8001a50:	b570      	push	{r4, r5, r6, lr}
 8001a52:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001a54:	d101      	bne.n	8001a5a <HAL_HalfDuplex_Init+0xa>
    return HAL_ERROR;
 8001a56:	2001      	movs	r0, #1
}
 8001a58:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001a5a:	0005      	movs	r5, r0
 8001a5c:	3569      	adds	r5, #105	; 0x69
 8001a5e:	782b      	ldrb	r3, [r5, #0]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d104      	bne.n	8001a70 <HAL_HalfDuplex_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8001a66:	0002      	movs	r2, r0
 8001a68:	3268      	adds	r2, #104	; 0x68
 8001a6a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001a6c:	f000 f9ec 	bl	8001e48 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001a70:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001a72:	2101      	movs	r1, #1
 8001a74:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a76:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001a78:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a7a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001a7c:	438b      	bics	r3, r1
 8001a7e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a80:	f7ff fefa 	bl	8001878 <UART_SetConfig>
 8001a84:	2801      	cmp	r0, #1
 8001a86:	d0e6      	beq.n	8001a56 <HAL_HalfDuplex_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <HAL_HalfDuplex_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8001a8e:	0020      	movs	r0, r4
 8001a90:	f7ff ff76 	bl	8001980 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	490b      	ldr	r1, [pc, #44]	; (8001ac4 <HAL_HalfDuplex_Init+0x74>)
 8001a98:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a9a:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	605a      	str	r2, [r3, #4]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	6899      	ldr	r1, [r3, #8]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	6819      	ldr	r1, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8001ab0:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 8001ab2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ab4:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8001ab6:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001ab8:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001aba:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001abc:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8001abe:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001ac0:	e7ca      	b.n	8001a58 <HAL_HalfDuplex_Init+0x8>
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	fffff7ff 	.word	0xfffff7ff

08001ac8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aca:	0004      	movs	r4, r0
 8001acc:	000e      	movs	r6, r1
 8001ace:	0015      	movs	r5, r2
 8001ad0:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ad2:	6822      	ldr	r2, [r4, #0]
 8001ad4:	69d3      	ldr	r3, [r2, #28]
 8001ad6:	4033      	ands	r3, r6
 8001ad8:	1b9b      	subs	r3, r3, r6
 8001ada:	4259      	negs	r1, r3
 8001adc:	414b      	adcs	r3, r1
 8001ade:	42ab      	cmp	r3, r5
 8001ae0:	d001      	beq.n	8001ae6 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	e018      	b.n	8001b18 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8001ae6:	9b06      	ldr	r3, [sp, #24]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	d0f3      	beq.n	8001ad4 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001aec:	9b06      	ldr	r3, [sp, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d113      	bne.n	8001b1a <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001af2:	6823      	ldr	r3, [r4, #0]
 8001af4:	490c      	ldr	r1, [pc, #48]	; (8001b28 <UART_WaitOnFlagUntilTimeout+0x60>)
 8001af6:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001af8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001afa:	400a      	ands	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	31a3      	adds	r1, #163	; 0xa3
 8001b02:	31ff      	adds	r1, #255	; 0xff
 8001b04:	438a      	bics	r2, r1
 8001b06:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001b08:	0022      	movs	r2, r4
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	3269      	adds	r2, #105	; 0x69
 8001b0e:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8001b10:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8001b12:	2300      	movs	r3, #0
 8001b14:	3468      	adds	r4, #104	; 0x68
 8001b16:	7023      	strb	r3, [r4, #0]
}
 8001b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b1a:	f7ff f84f 	bl	8000bbc <HAL_GetTick>
 8001b1e:	9b06      	ldr	r3, [sp, #24]
 8001b20:	1bc0      	subs	r0, r0, r7
 8001b22:	4283      	cmp	r3, r0
 8001b24:	d2d5      	bcs.n	8001ad2 <UART_WaitOnFlagUntilTimeout+0xa>
 8001b26:	e7e4      	b.n	8001af2 <UART_WaitOnFlagUntilTimeout+0x2a>
 8001b28:	fffffe5f 	.word	0xfffffe5f

08001b2c <HAL_UART_Transmit>:
{
 8001b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8001b2e:	0007      	movs	r7, r0
{
 8001b30:	b085      	sub	sp, #20
 8001b32:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 8001b34:	3769      	adds	r7, #105	; 0x69
 8001b36:	783b      	ldrb	r3, [r7, #0]
{
 8001b38:	0004      	movs	r4, r0
 8001b3a:	000d      	movs	r5, r1
 8001b3c:	0016      	movs	r6, r2
    return HAL_BUSY;
 8001b3e:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d146      	bne.n	8001bd2 <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 8001b44:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8001b46:	2900      	cmp	r1, #0
 8001b48:	d043      	beq.n	8001bd2 <HAL_UART_Transmit+0xa6>
 8001b4a:	2a00      	cmp	r2, #0
 8001b4c:	d041      	beq.n	8001bd2 <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	68a2      	ldr	r2, [r4, #8]
 8001b52:	015b      	lsls	r3, r3, #5
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d104      	bne.n	8001b62 <HAL_UART_Transmit+0x36>
 8001b58:	6923      	ldr	r3, [r4, #16]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 8001b5e:	4201      	tst	r1, r0
 8001b60:	d137      	bne.n	8001bd2 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001b62:	0023      	movs	r3, r4
 8001b64:	3368      	adds	r3, #104	; 0x68
 8001b66:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001b68:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001b6a:	2a01      	cmp	r2, #1
 8001b6c:	d031      	beq.n	8001bd2 <HAL_UART_Transmit+0xa6>
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b76:	3321      	adds	r3, #33	; 0x21
 8001b78:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001b7a:	f7ff f81f 	bl	8000bbc <HAL_GetTick>
    huart->TxXferSize = Size;
 8001b7e:	0023      	movs	r3, r4
 8001b80:	3350      	adds	r3, #80	; 0x50
 8001b82:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8001b84:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b86:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8001b88:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b8a:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8001b8c:	0021      	movs	r1, r4
 8001b8e:	3152      	adds	r1, #82	; 0x52
 8001b90:	880a      	ldrh	r2, [r1, #0]
 8001b92:	b292      	uxth	r2, r2
 8001b94:	2a00      	cmp	r2, #0
 8001b96:	d10d      	bne.n	8001bb4 <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b98:	9b03      	ldr	r3, [sp, #12]
 8001b9a:	2140      	movs	r1, #64	; 0x40
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	0020      	movs	r0, r4
 8001ba0:	9b02      	ldr	r3, [sp, #8]
 8001ba2:	f7ff ff91 	bl	8001ac8 <UART_WaitOnFlagUntilTimeout>
 8001ba6:	2800      	cmp	r0, #0
 8001ba8:	d112      	bne.n	8001bd0 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 8001baa:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001bac:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8001bae:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 8001bb0:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001bb2:	e00e      	b.n	8001bd2 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8001bb4:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bb6:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bbe:	9b03      	ldr	r3, [sp, #12]
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	0020      	movs	r0, r4
 8001bc6:	9b02      	ldr	r3, [sp, #8]
 8001bc8:	f7ff ff7e 	bl	8001ac8 <UART_WaitOnFlagUntilTimeout>
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 8001bd0:	2003      	movs	r0, #3
}
 8001bd2:	b005      	add	sp, #20
 8001bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bd6:	68a3      	ldr	r3, [r4, #8]
 8001bd8:	6822      	ldr	r2, [r4, #0]
 8001bda:	42b3      	cmp	r3, r6
 8001bdc:	d108      	bne.n	8001bf0 <HAL_UART_Transmit+0xc4>
 8001bde:	6923      	ldr	r3, [r4, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d105      	bne.n	8001bf0 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001be4:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 8001be6:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001be8:	05db      	lsls	r3, r3, #23
 8001bea:	0ddb      	lsrs	r3, r3, #23
 8001bec:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8001bee:	e7cd      	b.n	8001b8c <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001bf0:	782b      	ldrb	r3, [r5, #0]
 8001bf2:	3501      	adds	r5, #1
 8001bf4:	8513      	strh	r3, [r2, #40]	; 0x28
 8001bf6:	e7c9      	b.n	8001b8c <HAL_UART_Transmit+0x60>

08001bf8 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001bf8:	2312      	movs	r3, #18
{
 8001bfa:	b530      	push	{r4, r5, lr}
 8001bfc:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001bfe:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001c00:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001c02:	3b02      	subs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c04:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001c06:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001c08:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c0a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c0c:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001c0e:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c10:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c12:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001c14:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c16:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c18:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001c1a:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001c1c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c1e:	f7ff fae7 	bl	80011f0 <HAL_RCC_OscConfig>
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d000      	beq.n	8001c28 <SystemClock_Config+0x30>
 8001c26:	e7fe      	b.n	8001c26 <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c28:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2a:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c2c:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c2e:	0021      	movs	r1, r4
 8001c30:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c32:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c34:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c36:	f7ff fcef 	bl	8001618 <HAL_RCC_ClockConfig>
 8001c3a:	2800      	cmp	r0, #0
 8001c3c:	d000      	beq.n	8001c40 <SystemClock_Config+0x48>
 8001c3e:	e7fe      	b.n	8001c3e <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001c40:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c42:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c44:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c46:	f7ff fd93 	bl	8001770 <HAL_RCCEx_PeriphCLKConfig>
 8001c4a:	1e04      	subs	r4, r0, #0
 8001c4c:	d000      	beq.n	8001c50 <SystemClock_Config+0x58>
 8001c4e:	e7fe      	b.n	8001c4e <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001c50:	f7ff fd78 	bl	8001744 <HAL_RCC_GetHCLKFreq>
 8001c54:	21fa      	movs	r1, #250	; 0xfa
 8001c56:	0089      	lsls	r1, r1, #2
 8001c58:	f7fe fa68 	bl	800012c <__udivsi3>
 8001c5c:	f7ff f9ea 	bl	8001034 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001c60:	2004      	movs	r0, #4
 8001c62:	f7ff fa01 	bl	8001068 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001c66:	2001      	movs	r0, #1
 8001c68:	0022      	movs	r2, r4
 8001c6a:	0021      	movs	r1, r4
 8001c6c:	4240      	negs	r0, r0
 8001c6e:	f7ff f9b1 	bl	8000fd4 <HAL_NVIC_SetPriority>
}
 8001c72:	b015      	add	sp, #84	; 0x54
 8001c74:	bd30      	pop	{r4, r5, pc}
	...

08001c78 <main>:
{
 8001c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7a:	b085      	sub	sp, #20
  HAL_Init();
 8001c7c:	f7fe ff86 	bl	8000b8c <HAL_Init>
  SystemClock_Config();
 8001c80:	f7ff ffba 	bl	8001bf8 <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	2080      	movs	r0, #128	; 0x80
 8001c86:	4a45      	ldr	r2, [pc, #276]	; (8001d9c <main+0x124>)
 8001c88:	0280      	lsls	r0, r0, #10
 8001c8a:	6951      	ldr	r1, [r2, #20]
  huart1.Instance = USART1;
 8001c8c:	4d44      	ldr	r5, [pc, #272]	; (8001da0 <main+0x128>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	4301      	orrs	r1, r0
 8001c90:	6151      	str	r1, [r2, #20]
 8001c92:	6953      	ldr	r3, [r2, #20]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c94:	220c      	movs	r2, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	4003      	ands	r3, r0
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	9b00      	ldr	r3, [sp, #0]
  huart1.Instance = USART1;
 8001c9c:	4b41      	ldr	r3, [pc, #260]	; (8001da4 <main+0x12c>)
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001c9e:	0028      	movs	r0, r5
  huart1.Instance = USART1;
 8001ca0:	602b      	str	r3, [r5, #0]
  huart1.Init.BaudRate = 38400;
 8001ca2:	2396      	movs	r3, #150	; 0x96
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	606b      	str	r3, [r5, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca8:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001caa:	616a      	str	r2, [r5, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cac:	60ab      	str	r3, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cae:	60eb      	str	r3, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cb0:	612b      	str	r3, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb2:	61ab      	str	r3, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	61eb      	str	r3, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb6:	622b      	str	r3, [r5, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb8:	626b      	str	r3, [r5, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001cba:	f7ff fec9 	bl	8001a50 <HAL_HalfDuplex_Init>
 8001cbe:	2800      	cmp	r0, #0
 8001cc0:	d000      	beq.n	8001cc4 <main+0x4c>
 8001cc2:	e7fe      	b.n	8001cc2 <main+0x4a>
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cc4:	2204      	movs	r2, #4
  hadc.Instance = ADC1;
 8001cc6:	4c38      	ldr	r4, [pc, #224]	; (8001da8 <main+0x130>)
 8001cc8:	4b38      	ldr	r3, [pc, #224]	; (8001dac <main+0x134>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cca:	6162      	str	r2, [r4, #20]
  hadc.Instance = ADC1;
 8001ccc:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cce:	22c2      	movs	r2, #194	; 0xc2
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8001cd0:	2310      	movs	r3, #16
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001cd2:	6060      	str	r0, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8001cd4:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cd6:	60e0      	str	r0, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001cd8:	3b0f      	subs	r3, #15
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001cda:	61a0      	str	r0, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001cdc:	61e0      	str	r0, [r4, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001cde:	6260      	str	r0, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ce0:	32ff      	adds	r2, #255	; 0xff
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ce2:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001ce4:	6320      	str	r0, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001ce6:	0020      	movs	r0, r4
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001ce8:	6123      	str	r3, [r4, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001cea:	6223      	str	r3, [r4, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cec:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001cee:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001cf0:	f7fe ffc6 	bl	8000c80 <HAL_ADC_Init>
 8001cf4:	2800      	cmp	r0, #0
 8001cf6:	d000      	beq.n	8001cfa <main+0x82>
 8001cf8:	e7fe      	b.n	8001cf8 <main+0x80>
  sConfig.Channel = ADC_CHANNEL_3;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	015b      	lsls	r3, r3, #5
 8001d02:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d04:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d06:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d08:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d0a:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d0c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d0e:	f7ff f8eb 	bl	8000ee8 <HAL_ADC_ConfigChannel>
 8001d12:	2800      	cmp	r0, #0
 8001d14:	d000      	beq.n	8001d18 <main+0xa0>
 8001d16:	e7fe      	b.n	8001d16 <main+0x9e>
  HAL_ADC_Start(&hadc);
 8001d18:	0020      	movs	r0, r4
 8001d1a:	f7ff f857 	bl	8000dcc <HAL_ADC_Start>
	 	 HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001d1e:	2101      	movs	r1, #1
 8001d20:	0020      	movs	r0, r4
 8001d22:	4249      	negs	r1, r1
 8001d24:	f7ff f87e 	bl	8000e24 <HAL_ADC_PollForConversion>
	 	 adcValue = HAL_ADC_GetValue(&hadc);
 8001d28:	0020      	movs	r0, r4
 8001d2a:	f7ff f8d9 	bl	8000ee0 <HAL_ADC_GetValue>
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <main+0x138>)
 8001d30:	8018      	strh	r0, [r3, #0]
	 	 voltage = adcValue * voltPerPoint;
 8001d32:	b280      	uxth	r0, r0
 8001d34:	f7fe feaa 	bl	8000a8c <__aeabi_i2f>
 8001d38:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <main+0x13c>)
 8001d3a:	6819      	ldr	r1, [r3, #0]
 8001d3c:	f7fe fbca 	bl	80004d4 <__aeabi_fmul>
	 	 voltage -= 1.5;
 8001d40:	21ff      	movs	r1, #255	; 0xff
 8001d42:	0589      	lsls	r1, r1, #22
 8001d44:	f7fe fce6 	bl	8000714 <__aeabi_fsub>
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <main+0x140>)
 8001d4a:	6018      	str	r0, [r3, #0]
	 	 amperage = voltage / sensitivity;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <main+0x144>)
 8001d4e:	6819      	ldr	r1, [r3, #0]
 8001d50:	f7fe fa78 	bl	8000244 <__aeabi_fdiv>
 8001d54:	1c06      	adds	r6, r0, #0
	 	 tmpInt1 = amperage;
 8001d56:	f7fe fe79 	bl	8000a4c <__aeabi_f2iz>
 8001d5a:	0007      	movs	r7, r0
	 	 tmpFrac = amperage - tmpInt1;
 8001d5c:	f7fe fe96 	bl	8000a8c <__aeabi_i2f>
 8001d60:	1c01      	adds	r1, r0, #0
 8001d62:	1c30      	adds	r0, r6, #0
 8001d64:	f7fe fcd6 	bl	8000714 <__aeabi_fsub>
	 	 tmpInt2 = trunc(tmpFrac * 100);
 8001d68:	4915      	ldr	r1, [pc, #84]	; (8001dc0 <main+0x148>)
 8001d6a:	f7fe fbb3 	bl	80004d4 <__aeabi_fmul>
 8001d6e:	f7fe fe6d 	bl	8000a4c <__aeabi_f2iz>
	 	  sprintf(msg, "Amps: %d.%2d\r\n",tmpInt1, tmpInt2);
 8001d72:	4e14      	ldr	r6, [pc, #80]	; (8001dc4 <main+0x14c>)
	 	 tmpInt2 = trunc(tmpFrac * 100);
 8001d74:	0003      	movs	r3, r0
	 	  sprintf(msg, "Amps: %d.%2d\r\n",tmpInt1, tmpInt2);
 8001d76:	003a      	movs	r2, r7
 8001d78:	4913      	ldr	r1, [pc, #76]	; (8001dc8 <main+0x150>)
 8001d7a:	0030      	movs	r0, r6
 8001d7c:	f000 f91c 	bl	8001fb8 <siprintf>
	 	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001d80:	0030      	movs	r0, r6
 8001d82:	f7fe f9c1 	bl	8000108 <strlen>
 8001d86:	2301      	movs	r3, #1
 8001d88:	b282      	uxth	r2, r0
 8001d8a:	425b      	negs	r3, r3
 8001d8c:	0031      	movs	r1, r6
 8001d8e:	0028      	movs	r0, r5
 8001d90:	f7ff fecc 	bl	8001b2c <HAL_UART_Transmit>
	 	  HAL_Delay(100);
 8001d94:	2064      	movs	r0, #100	; 0x64
 8001d96:	f7fe ff17 	bl	8000bc8 <HAL_Delay>
 8001d9a:	e7c0      	b.n	8001d1e <main+0xa6>
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	200000c0 	.word	0x200000c0
 8001da4:	40013800 	.word	0x40013800
 8001da8:	20000134 	.word	0x20000134
 8001dac:	40012400 	.word	0x40012400
 8001db0:	20000130 	.word	0x20000130
 8001db4:	20000004 	.word	0x20000004
 8001db8:	2000008c 	.word	0x2000008c
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	42c80000 	.word	0x42c80000
 8001dc4:	200000a0 	.word	0x200000a0
 8001dc8:	08002904 	.word	0x08002904

08001dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dcc:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	2001      	movs	r0, #1
 8001dd0:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <HAL_MspInit+0x38>)
 8001dd2:	6991      	ldr	r1, [r2, #24]
 8001dd4:	4301      	orrs	r1, r0
 8001dd6:	6191      	str	r1, [r2, #24]
 8001dd8:	6993      	ldr	r3, [r2, #24]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001dda:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ddc:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001dde:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de0:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001de2:	3806      	subs	r0, #6
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001de6:	f7ff f8f5 	bl	8000fd4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2002      	movs	r0, #2
 8001dee:	0011      	movs	r1, r2
 8001df0:	4240      	negs	r0, r0
 8001df2:	f7ff f8ef 	bl	8000fd4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2001      	movs	r0, #1
 8001dfa:	0011      	movs	r1, r2
 8001dfc:	4240      	negs	r0, r0
 8001dfe:	f7ff f8e9 	bl	8000fd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e02:	bd07      	pop	{r0, r1, r2, pc}
 8001e04:	40021000 	.word	0x40021000

08001e08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_ADC_MspInit+0x38>)
 8001e0c:	6802      	ldr	r2, [r0, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d114      	bne.n	8001e3c <HAL_ADC_MspInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e12:	2080      	movs	r0, #128	; 0x80
 8001e14:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <HAL_ADC_MspInit+0x3c>)
 8001e16:	0080      	lsls	r0, r0, #2
 8001e18:	6991      	ldr	r1, [r2, #24]
 8001e1a:	4301      	orrs	r1, r0
 8001e1c:	6191      	str	r1, [r2, #24]
 8001e1e:	6993      	ldr	r3, [r2, #24]
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e22:	4003      	ands	r3, r0
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e28:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e2c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e2e:	3b05      	subs	r3, #5
 8001e30:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e34:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f7ff f92a 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e3c:	b007      	add	sp, #28
 8001e3e:	bd00      	pop	{pc}
 8001e40:	40012400 	.word	0x40012400
 8001e44:	40021000 	.word	0x40021000

08001e48 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_UART_MspInit+0x44>)
 8001e4c:	6802      	ldr	r2, [r0, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d119      	bne.n	8001e86 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e52:	2080      	movs	r0, #128	; 0x80
 8001e54:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <HAL_UART_MspInit+0x48>)
 8001e56:	01c0      	lsls	r0, r0, #7
 8001e58:	6991      	ldr	r1, [r2, #24]
 8001e5a:	4301      	orrs	r1, r0
 8001e5c:	6191      	str	r1, [r2, #24]
 8001e5e:	6993      	ldr	r3, [r2, #24]
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e60:	2203      	movs	r2, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e62:	4003      	ands	r3, r0
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e68:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e70:	3bef      	subs	r3, #239	; 0xef
 8001e72:	3bff      	subs	r3, #255	; 0xff
 8001e74:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e78:	3b11      	subs	r3, #17
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e7e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001e80:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f7ff f905 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e86:	b007      	add	sp, #28
 8001e88:	bd00      	pop	{pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	40021000 	.word	0x40021000

08001e94 <NMI_Handler>:
 8001e94:	4770      	bx	lr

08001e96 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001e96:	e7fe      	b.n	8001e96 <HardFault_Handler>

08001e98 <SVC_Handler>:
 8001e98:	4770      	bx	lr

08001e9a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9a:	4770      	bx	lr

08001e9c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001e9c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e9e:	f7fe fe85 	bl	8000bac <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001ea2:	f7ff f8f0 	bl	8001086 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea6:	bd10      	pop	{r4, pc}

08001ea8 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001eac:	4811      	ldr	r0, [pc, #68]	; (8001ef4 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	4002      	ands	r2, r0
 8001eb8:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	480e      	ldr	r0, [pc, #56]	; (8001ef8 <SystemInit+0x50>)
 8001ebe:	4002      	ands	r2, r0
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	480d      	ldr	r0, [pc, #52]	; (8001efc <SystemInit+0x54>)
 8001ec6:	4002      	ands	r2, r0
 8001ec8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	480c      	ldr	r0, [pc, #48]	; (8001f00 <SystemInit+0x58>)
 8001ece:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001ed0:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001ed2:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed6:	4382      	bics	r2, r0
 8001ed8:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001edc:	4809      	ldr	r0, [pc, #36]	; (8001f04 <SystemInit+0x5c>)
 8001ede:	4002      	ands	r2, r0
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee4:	438a      	bics	r2, r1
 8001ee6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]

}
 8001eec:	4770      	bx	lr
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	08ffb80c 	.word	0x08ffb80c
 8001ef8:	fef6ffff 	.word	0xfef6ffff
 8001efc:	fffbffff 	.word	0xfffbffff
 8001f00:	ffc0ffff 	.word	0xffc0ffff
 8001f04:	fffffeec 	.word	0xfffffeec

08001f08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f08:	480d      	ldr	r0, [pc, #52]	; (8001f40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f0e:	e003      	b.n	8001f18 <LoopCopyDataInit>

08001f10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001f12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f16:	3104      	adds	r1, #4

08001f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f18:	480b      	ldr	r0, [pc, #44]	; (8001f48 <LoopForever+0xa>)
  ldr r3, =_edata
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <LoopForever+0xe>)
  adds r2, r0, r1
 8001f1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f20:	d3f6      	bcc.n	8001f10 <CopyDataInit>
  ldr r2, =_sbss
 8001f22:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <LoopForever+0x12>)
  b LoopFillZerobss
 8001f24:	e002      	b.n	8001f2c <LoopFillZerobss>

08001f26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  str  r3, [r2]
 8001f28:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f2a:	3204      	adds	r2, #4

08001f2c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <LoopForever+0x16>)
  cmp r2, r3
 8001f2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001f30:	d3f9      	bcc.n	8001f26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f32:	f7ff ffb9 	bl	8001ea8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001f36:	f000 f811 	bl	8001f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f3a:	f7ff fe9d 	bl	8001c78 <main>

08001f3e <LoopForever>:

LoopForever:
    b LoopForever
 8001f3e:	e7fe      	b.n	8001f3e <LoopForever>
  ldr   r0, =_estack
 8001f40:	20001000 	.word	0x20001000
  ldr r3, =_sidata
 8001f44:	08002968 	.word	0x08002968
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f4c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001f50:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001f54:	20000184 	.word	0x20000184

08001f58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f58:	e7fe      	b.n	8001f58 <ADC1_IRQHandler>
	...

08001f5c <__libc_init_array>:
 8001f5c:	b570      	push	{r4, r5, r6, lr}
 8001f5e:	2600      	movs	r6, #0
 8001f60:	4d0c      	ldr	r5, [pc, #48]	; (8001f94 <__libc_init_array+0x38>)
 8001f62:	4c0d      	ldr	r4, [pc, #52]	; (8001f98 <__libc_init_array+0x3c>)
 8001f64:	1b64      	subs	r4, r4, r5
 8001f66:	10a4      	asrs	r4, r4, #2
 8001f68:	42a6      	cmp	r6, r4
 8001f6a:	d109      	bne.n	8001f80 <__libc_init_array+0x24>
 8001f6c:	2600      	movs	r6, #0
 8001f6e:	f000 fc4b 	bl	8002808 <_init>
 8001f72:	4d0a      	ldr	r5, [pc, #40]	; (8001f9c <__libc_init_array+0x40>)
 8001f74:	4c0a      	ldr	r4, [pc, #40]	; (8001fa0 <__libc_init_array+0x44>)
 8001f76:	1b64      	subs	r4, r4, r5
 8001f78:	10a4      	asrs	r4, r4, #2
 8001f7a:	42a6      	cmp	r6, r4
 8001f7c:	d105      	bne.n	8001f8a <__libc_init_array+0x2e>
 8001f7e:	bd70      	pop	{r4, r5, r6, pc}
 8001f80:	00b3      	lsls	r3, r6, #2
 8001f82:	58eb      	ldr	r3, [r5, r3]
 8001f84:	4798      	blx	r3
 8001f86:	3601      	adds	r6, #1
 8001f88:	e7ee      	b.n	8001f68 <__libc_init_array+0xc>
 8001f8a:	00b3      	lsls	r3, r6, #2
 8001f8c:	58eb      	ldr	r3, [r5, r3]
 8001f8e:	4798      	blx	r3
 8001f90:	3601      	adds	r6, #1
 8001f92:	e7f2      	b.n	8001f7a <__libc_init_array+0x1e>
 8001f94:	08002960 	.word	0x08002960
 8001f98:	08002960 	.word	0x08002960
 8001f9c:	08002960 	.word	0x08002960
 8001fa0:	08002964 	.word	0x08002964

08001fa4 <memcpy>:
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	b510      	push	{r4, lr}
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d100      	bne.n	8001fae <memcpy+0xa>
 8001fac:	bd10      	pop	{r4, pc}
 8001fae:	5ccc      	ldrb	r4, [r1, r3]
 8001fb0:	54c4      	strb	r4, [r0, r3]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	e7f8      	b.n	8001fa8 <memcpy+0x4>
	...

08001fb8 <siprintf>:
 8001fb8:	b40e      	push	{r1, r2, r3}
 8001fba:	b510      	push	{r4, lr}
 8001fbc:	b09d      	sub	sp, #116	; 0x74
 8001fbe:	a902      	add	r1, sp, #8
 8001fc0:	9002      	str	r0, [sp, #8]
 8001fc2:	6108      	str	r0, [r1, #16]
 8001fc4:	480b      	ldr	r0, [pc, #44]	; (8001ff4 <siprintf+0x3c>)
 8001fc6:	2482      	movs	r4, #130	; 0x82
 8001fc8:	6088      	str	r0, [r1, #8]
 8001fca:	6148      	str	r0, [r1, #20]
 8001fcc:	2001      	movs	r0, #1
 8001fce:	4240      	negs	r0, r0
 8001fd0:	ab1f      	add	r3, sp, #124	; 0x7c
 8001fd2:	81c8      	strh	r0, [r1, #14]
 8001fd4:	4808      	ldr	r0, [pc, #32]	; (8001ff8 <siprintf+0x40>)
 8001fd6:	cb04      	ldmia	r3!, {r2}
 8001fd8:	00a4      	lsls	r4, r4, #2
 8001fda:	6800      	ldr	r0, [r0, #0]
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	818c      	strh	r4, [r1, #12]
 8001fe0:	f000 f86e 	bl	80020c0 <_svfiprintf_r>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9a02      	ldr	r2, [sp, #8]
 8001fe8:	7013      	strb	r3, [r2, #0]
 8001fea:	b01d      	add	sp, #116	; 0x74
 8001fec:	bc10      	pop	{r4}
 8001fee:	bc08      	pop	{r3}
 8001ff0:	b003      	add	sp, #12
 8001ff2:	4718      	bx	r3
 8001ff4:	7fffffff 	.word	0x7fffffff
 8001ff8:	2000000c 	.word	0x2000000c

08001ffc <__ssputs_r>:
 8001ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffe:	688e      	ldr	r6, [r1, #8]
 8002000:	b085      	sub	sp, #20
 8002002:	0007      	movs	r7, r0
 8002004:	000c      	movs	r4, r1
 8002006:	9203      	str	r2, [sp, #12]
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	429e      	cmp	r6, r3
 800200c:	d839      	bhi.n	8002082 <__ssputs_r+0x86>
 800200e:	2390      	movs	r3, #144	; 0x90
 8002010:	898a      	ldrh	r2, [r1, #12]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	421a      	tst	r2, r3
 8002016:	d034      	beq.n	8002082 <__ssputs_r+0x86>
 8002018:	2503      	movs	r5, #3
 800201a:	6909      	ldr	r1, [r1, #16]
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	1a5b      	subs	r3, r3, r1
 8002020:	9302      	str	r3, [sp, #8]
 8002022:	6963      	ldr	r3, [r4, #20]
 8002024:	9802      	ldr	r0, [sp, #8]
 8002026:	435d      	muls	r5, r3
 8002028:	0feb      	lsrs	r3, r5, #31
 800202a:	195d      	adds	r5, r3, r5
 800202c:	9b01      	ldr	r3, [sp, #4]
 800202e:	106d      	asrs	r5, r5, #1
 8002030:	3301      	adds	r3, #1
 8002032:	181b      	adds	r3, r3, r0
 8002034:	42ab      	cmp	r3, r5
 8002036:	d900      	bls.n	800203a <__ssputs_r+0x3e>
 8002038:	001d      	movs	r5, r3
 800203a:	0553      	lsls	r3, r2, #21
 800203c:	d532      	bpl.n	80020a4 <__ssputs_r+0xa8>
 800203e:	0029      	movs	r1, r5
 8002040:	0038      	movs	r0, r7
 8002042:	f000 fb31 	bl	80026a8 <_malloc_r>
 8002046:	1e06      	subs	r6, r0, #0
 8002048:	d109      	bne.n	800205e <__ssputs_r+0x62>
 800204a:	230c      	movs	r3, #12
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	2340      	movs	r3, #64	; 0x40
 8002050:	2001      	movs	r0, #1
 8002052:	89a2      	ldrh	r2, [r4, #12]
 8002054:	4240      	negs	r0, r0
 8002056:	4313      	orrs	r3, r2
 8002058:	81a3      	strh	r3, [r4, #12]
 800205a:	b005      	add	sp, #20
 800205c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800205e:	9a02      	ldr	r2, [sp, #8]
 8002060:	6921      	ldr	r1, [r4, #16]
 8002062:	f7ff ff9f 	bl	8001fa4 <memcpy>
 8002066:	89a3      	ldrh	r3, [r4, #12]
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <__ssputs_r+0xc0>)
 800206a:	401a      	ands	r2, r3
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	4313      	orrs	r3, r2
 8002070:	81a3      	strh	r3, [r4, #12]
 8002072:	9b02      	ldr	r3, [sp, #8]
 8002074:	6126      	str	r6, [r4, #16]
 8002076:	18f6      	adds	r6, r6, r3
 8002078:	6026      	str	r6, [r4, #0]
 800207a:	6165      	str	r5, [r4, #20]
 800207c:	9e01      	ldr	r6, [sp, #4]
 800207e:	1aed      	subs	r5, r5, r3
 8002080:	60a5      	str	r5, [r4, #8]
 8002082:	9b01      	ldr	r3, [sp, #4]
 8002084:	42b3      	cmp	r3, r6
 8002086:	d200      	bcs.n	800208a <__ssputs_r+0x8e>
 8002088:	001e      	movs	r6, r3
 800208a:	0032      	movs	r2, r6
 800208c:	9903      	ldr	r1, [sp, #12]
 800208e:	6820      	ldr	r0, [r4, #0]
 8002090:	f000 faad 	bl	80025ee <memmove>
 8002094:	68a3      	ldr	r3, [r4, #8]
 8002096:	2000      	movs	r0, #0
 8002098:	1b9b      	subs	r3, r3, r6
 800209a:	60a3      	str	r3, [r4, #8]
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	199e      	adds	r6, r3, r6
 80020a0:	6026      	str	r6, [r4, #0]
 80020a2:	e7da      	b.n	800205a <__ssputs_r+0x5e>
 80020a4:	002a      	movs	r2, r5
 80020a6:	0038      	movs	r0, r7
 80020a8:	f000 fb5c 	bl	8002764 <_realloc_r>
 80020ac:	1e06      	subs	r6, r0, #0
 80020ae:	d1e0      	bne.n	8002072 <__ssputs_r+0x76>
 80020b0:	6921      	ldr	r1, [r4, #16]
 80020b2:	0038      	movs	r0, r7
 80020b4:	f000 faae 	bl	8002614 <_free_r>
 80020b8:	e7c7      	b.n	800204a <__ssputs_r+0x4e>
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	fffffb7f 	.word	0xfffffb7f

080020c0 <_svfiprintf_r>:
 80020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c2:	b09f      	sub	sp, #124	; 0x7c
 80020c4:	9002      	str	r0, [sp, #8]
 80020c6:	9305      	str	r3, [sp, #20]
 80020c8:	898b      	ldrh	r3, [r1, #12]
 80020ca:	000f      	movs	r7, r1
 80020cc:	0016      	movs	r6, r2
 80020ce:	061b      	lsls	r3, r3, #24
 80020d0:	d511      	bpl.n	80020f6 <_svfiprintf_r+0x36>
 80020d2:	690b      	ldr	r3, [r1, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10e      	bne.n	80020f6 <_svfiprintf_r+0x36>
 80020d8:	2140      	movs	r1, #64	; 0x40
 80020da:	f000 fae5 	bl	80026a8 <_malloc_r>
 80020de:	6038      	str	r0, [r7, #0]
 80020e0:	6138      	str	r0, [r7, #16]
 80020e2:	2800      	cmp	r0, #0
 80020e4:	d105      	bne.n	80020f2 <_svfiprintf_r+0x32>
 80020e6:	230c      	movs	r3, #12
 80020e8:	9a02      	ldr	r2, [sp, #8]
 80020ea:	3801      	subs	r0, #1
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	b01f      	add	sp, #124	; 0x7c
 80020f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f2:	2340      	movs	r3, #64	; 0x40
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	2300      	movs	r3, #0
 80020f8:	ad06      	add	r5, sp, #24
 80020fa:	616b      	str	r3, [r5, #20]
 80020fc:	3320      	adds	r3, #32
 80020fe:	766b      	strb	r3, [r5, #25]
 8002100:	3310      	adds	r3, #16
 8002102:	76ab      	strb	r3, [r5, #26]
 8002104:	0034      	movs	r4, r6
 8002106:	7823      	ldrb	r3, [r4, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d147      	bne.n	800219c <_svfiprintf_r+0xdc>
 800210c:	1ba3      	subs	r3, r4, r6
 800210e:	9304      	str	r3, [sp, #16]
 8002110:	d00d      	beq.n	800212e <_svfiprintf_r+0x6e>
 8002112:	1ba3      	subs	r3, r4, r6
 8002114:	0032      	movs	r2, r6
 8002116:	0039      	movs	r1, r7
 8002118:	9802      	ldr	r0, [sp, #8]
 800211a:	f7ff ff6f 	bl	8001ffc <__ssputs_r>
 800211e:	1c43      	adds	r3, r0, #1
 8002120:	d100      	bne.n	8002124 <_svfiprintf_r+0x64>
 8002122:	e0b5      	b.n	8002290 <_svfiprintf_r+0x1d0>
 8002124:	696a      	ldr	r2, [r5, #20]
 8002126:	9b04      	ldr	r3, [sp, #16]
 8002128:	4694      	mov	ip, r2
 800212a:	4463      	add	r3, ip
 800212c:	616b      	str	r3, [r5, #20]
 800212e:	7823      	ldrb	r3, [r4, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d100      	bne.n	8002136 <_svfiprintf_r+0x76>
 8002134:	e0ac      	b.n	8002290 <_svfiprintf_r+0x1d0>
 8002136:	2201      	movs	r2, #1
 8002138:	2300      	movs	r3, #0
 800213a:	4252      	negs	r2, r2
 800213c:	606a      	str	r2, [r5, #4]
 800213e:	a902      	add	r1, sp, #8
 8002140:	3254      	adds	r2, #84	; 0x54
 8002142:	1852      	adds	r2, r2, r1
 8002144:	3401      	adds	r4, #1
 8002146:	602b      	str	r3, [r5, #0]
 8002148:	60eb      	str	r3, [r5, #12]
 800214a:	60ab      	str	r3, [r5, #8]
 800214c:	7013      	strb	r3, [r2, #0]
 800214e:	65ab      	str	r3, [r5, #88]	; 0x58
 8002150:	4e58      	ldr	r6, [pc, #352]	; (80022b4 <_svfiprintf_r+0x1f4>)
 8002152:	2205      	movs	r2, #5
 8002154:	7821      	ldrb	r1, [r4, #0]
 8002156:	0030      	movs	r0, r6
 8002158:	f000 fa3e 	bl	80025d8 <memchr>
 800215c:	1c62      	adds	r2, r4, #1
 800215e:	2800      	cmp	r0, #0
 8002160:	d120      	bne.n	80021a4 <_svfiprintf_r+0xe4>
 8002162:	6829      	ldr	r1, [r5, #0]
 8002164:	06cb      	lsls	r3, r1, #27
 8002166:	d504      	bpl.n	8002172 <_svfiprintf_r+0xb2>
 8002168:	2353      	movs	r3, #83	; 0x53
 800216a:	ae02      	add	r6, sp, #8
 800216c:	3020      	adds	r0, #32
 800216e:	199b      	adds	r3, r3, r6
 8002170:	7018      	strb	r0, [r3, #0]
 8002172:	070b      	lsls	r3, r1, #28
 8002174:	d504      	bpl.n	8002180 <_svfiprintf_r+0xc0>
 8002176:	2353      	movs	r3, #83	; 0x53
 8002178:	202b      	movs	r0, #43	; 0x2b
 800217a:	ae02      	add	r6, sp, #8
 800217c:	199b      	adds	r3, r3, r6
 800217e:	7018      	strb	r0, [r3, #0]
 8002180:	7823      	ldrb	r3, [r4, #0]
 8002182:	2b2a      	cmp	r3, #42	; 0x2a
 8002184:	d016      	beq.n	80021b4 <_svfiprintf_r+0xf4>
 8002186:	2000      	movs	r0, #0
 8002188:	210a      	movs	r1, #10
 800218a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800218c:	7822      	ldrb	r2, [r4, #0]
 800218e:	3a30      	subs	r2, #48	; 0x30
 8002190:	2a09      	cmp	r2, #9
 8002192:	d955      	bls.n	8002240 <_svfiprintf_r+0x180>
 8002194:	2800      	cmp	r0, #0
 8002196:	d015      	beq.n	80021c4 <_svfiprintf_r+0x104>
 8002198:	9309      	str	r3, [sp, #36]	; 0x24
 800219a:	e013      	b.n	80021c4 <_svfiprintf_r+0x104>
 800219c:	2b25      	cmp	r3, #37	; 0x25
 800219e:	d0b5      	beq.n	800210c <_svfiprintf_r+0x4c>
 80021a0:	3401      	adds	r4, #1
 80021a2:	e7b0      	b.n	8002106 <_svfiprintf_r+0x46>
 80021a4:	2301      	movs	r3, #1
 80021a6:	1b80      	subs	r0, r0, r6
 80021a8:	4083      	lsls	r3, r0
 80021aa:	6829      	ldr	r1, [r5, #0]
 80021ac:	0014      	movs	r4, r2
 80021ae:	430b      	orrs	r3, r1
 80021b0:	602b      	str	r3, [r5, #0]
 80021b2:	e7cd      	b.n	8002150 <_svfiprintf_r+0x90>
 80021b4:	9b05      	ldr	r3, [sp, #20]
 80021b6:	1d18      	adds	r0, r3, #4
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	9005      	str	r0, [sp, #20]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	db39      	blt.n	8002234 <_svfiprintf_r+0x174>
 80021c0:	9309      	str	r3, [sp, #36]	; 0x24
 80021c2:	0014      	movs	r4, r2
 80021c4:	7823      	ldrb	r3, [r4, #0]
 80021c6:	2b2e      	cmp	r3, #46	; 0x2e
 80021c8:	d10b      	bne.n	80021e2 <_svfiprintf_r+0x122>
 80021ca:	7863      	ldrb	r3, [r4, #1]
 80021cc:	1c62      	adds	r2, r4, #1
 80021ce:	2b2a      	cmp	r3, #42	; 0x2a
 80021d0:	d13e      	bne.n	8002250 <_svfiprintf_r+0x190>
 80021d2:	9b05      	ldr	r3, [sp, #20]
 80021d4:	3402      	adds	r4, #2
 80021d6:	1d1a      	adds	r2, r3, #4
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	9205      	str	r2, [sp, #20]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	db34      	blt.n	800224a <_svfiprintf_r+0x18a>
 80021e0:	9307      	str	r3, [sp, #28]
 80021e2:	4e35      	ldr	r6, [pc, #212]	; (80022b8 <_svfiprintf_r+0x1f8>)
 80021e4:	7821      	ldrb	r1, [r4, #0]
 80021e6:	2203      	movs	r2, #3
 80021e8:	0030      	movs	r0, r6
 80021ea:	f000 f9f5 	bl	80025d8 <memchr>
 80021ee:	2800      	cmp	r0, #0
 80021f0:	d006      	beq.n	8002200 <_svfiprintf_r+0x140>
 80021f2:	2340      	movs	r3, #64	; 0x40
 80021f4:	1b80      	subs	r0, r0, r6
 80021f6:	4083      	lsls	r3, r0
 80021f8:	682a      	ldr	r2, [r5, #0]
 80021fa:	3401      	adds	r4, #1
 80021fc:	4313      	orrs	r3, r2
 80021fe:	602b      	str	r3, [r5, #0]
 8002200:	7821      	ldrb	r1, [r4, #0]
 8002202:	2206      	movs	r2, #6
 8002204:	482d      	ldr	r0, [pc, #180]	; (80022bc <_svfiprintf_r+0x1fc>)
 8002206:	1c66      	adds	r6, r4, #1
 8002208:	7629      	strb	r1, [r5, #24]
 800220a:	f000 f9e5 	bl	80025d8 <memchr>
 800220e:	2800      	cmp	r0, #0
 8002210:	d046      	beq.n	80022a0 <_svfiprintf_r+0x1e0>
 8002212:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <_svfiprintf_r+0x200>)
 8002214:	2b00      	cmp	r3, #0
 8002216:	d12f      	bne.n	8002278 <_svfiprintf_r+0x1b8>
 8002218:	6829      	ldr	r1, [r5, #0]
 800221a:	9b05      	ldr	r3, [sp, #20]
 800221c:	2207      	movs	r2, #7
 800221e:	05c9      	lsls	r1, r1, #23
 8002220:	d528      	bpl.n	8002274 <_svfiprintf_r+0x1b4>
 8002222:	189b      	adds	r3, r3, r2
 8002224:	4393      	bics	r3, r2
 8002226:	3308      	adds	r3, #8
 8002228:	9305      	str	r3, [sp, #20]
 800222a:	696b      	ldr	r3, [r5, #20]
 800222c:	9a03      	ldr	r2, [sp, #12]
 800222e:	189b      	adds	r3, r3, r2
 8002230:	616b      	str	r3, [r5, #20]
 8002232:	e767      	b.n	8002104 <_svfiprintf_r+0x44>
 8002234:	425b      	negs	r3, r3
 8002236:	60eb      	str	r3, [r5, #12]
 8002238:	2302      	movs	r3, #2
 800223a:	430b      	orrs	r3, r1
 800223c:	602b      	str	r3, [r5, #0]
 800223e:	e7c0      	b.n	80021c2 <_svfiprintf_r+0x102>
 8002240:	434b      	muls	r3, r1
 8002242:	3401      	adds	r4, #1
 8002244:	189b      	adds	r3, r3, r2
 8002246:	2001      	movs	r0, #1
 8002248:	e7a0      	b.n	800218c <_svfiprintf_r+0xcc>
 800224a:	2301      	movs	r3, #1
 800224c:	425b      	negs	r3, r3
 800224e:	e7c7      	b.n	80021e0 <_svfiprintf_r+0x120>
 8002250:	2300      	movs	r3, #0
 8002252:	0014      	movs	r4, r2
 8002254:	200a      	movs	r0, #10
 8002256:	001a      	movs	r2, r3
 8002258:	606b      	str	r3, [r5, #4]
 800225a:	7821      	ldrb	r1, [r4, #0]
 800225c:	3930      	subs	r1, #48	; 0x30
 800225e:	2909      	cmp	r1, #9
 8002260:	d903      	bls.n	800226a <_svfiprintf_r+0x1aa>
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0bd      	beq.n	80021e2 <_svfiprintf_r+0x122>
 8002266:	9207      	str	r2, [sp, #28]
 8002268:	e7bb      	b.n	80021e2 <_svfiprintf_r+0x122>
 800226a:	4342      	muls	r2, r0
 800226c:	3401      	adds	r4, #1
 800226e:	1852      	adds	r2, r2, r1
 8002270:	2301      	movs	r3, #1
 8002272:	e7f2      	b.n	800225a <_svfiprintf_r+0x19a>
 8002274:	3307      	adds	r3, #7
 8002276:	e7d5      	b.n	8002224 <_svfiprintf_r+0x164>
 8002278:	ab05      	add	r3, sp, #20
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	003a      	movs	r2, r7
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <_svfiprintf_r+0x204>)
 8002280:	0029      	movs	r1, r5
 8002282:	9802      	ldr	r0, [sp, #8]
 8002284:	e000      	b.n	8002288 <_svfiprintf_r+0x1c8>
 8002286:	bf00      	nop
 8002288:	9003      	str	r0, [sp, #12]
 800228a:	9b03      	ldr	r3, [sp, #12]
 800228c:	3301      	adds	r3, #1
 800228e:	d1cc      	bne.n	800222a <_svfiprintf_r+0x16a>
 8002290:	89bb      	ldrh	r3, [r7, #12]
 8002292:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002294:	065b      	lsls	r3, r3, #25
 8002296:	d400      	bmi.n	800229a <_svfiprintf_r+0x1da>
 8002298:	e729      	b.n	80020ee <_svfiprintf_r+0x2e>
 800229a:	2001      	movs	r0, #1
 800229c:	4240      	negs	r0, r0
 800229e:	e726      	b.n	80020ee <_svfiprintf_r+0x2e>
 80022a0:	ab05      	add	r3, sp, #20
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	003a      	movs	r2, r7
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <_svfiprintf_r+0x204>)
 80022a8:	0029      	movs	r1, r5
 80022aa:	9802      	ldr	r0, [sp, #8]
 80022ac:	f000 f87a 	bl	80023a4 <_printf_i>
 80022b0:	e7ea      	b.n	8002288 <_svfiprintf_r+0x1c8>
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	0800292b 	.word	0x0800292b
 80022b8:	08002931 	.word	0x08002931
 80022bc:	08002935 	.word	0x08002935
 80022c0:	00000000 	.word	0x00000000
 80022c4:	08001ffd 	.word	0x08001ffd

080022c8 <_printf_common>:
 80022c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022ca:	0015      	movs	r5, r2
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	688a      	ldr	r2, [r1, #8]
 80022d0:	690b      	ldr	r3, [r1, #16]
 80022d2:	9000      	str	r0, [sp, #0]
 80022d4:	000c      	movs	r4, r1
 80022d6:	4293      	cmp	r3, r2
 80022d8:	da00      	bge.n	80022dc <_printf_common+0x14>
 80022da:	0013      	movs	r3, r2
 80022dc:	0022      	movs	r2, r4
 80022de:	602b      	str	r3, [r5, #0]
 80022e0:	3243      	adds	r2, #67	; 0x43
 80022e2:	7812      	ldrb	r2, [r2, #0]
 80022e4:	2a00      	cmp	r2, #0
 80022e6:	d001      	beq.n	80022ec <_printf_common+0x24>
 80022e8:	3301      	adds	r3, #1
 80022ea:	602b      	str	r3, [r5, #0]
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	069b      	lsls	r3, r3, #26
 80022f0:	d502      	bpl.n	80022f8 <_printf_common+0x30>
 80022f2:	682b      	ldr	r3, [r5, #0]
 80022f4:	3302      	adds	r3, #2
 80022f6:	602b      	str	r3, [r5, #0]
 80022f8:	2706      	movs	r7, #6
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	401f      	ands	r7, r3
 80022fe:	d027      	beq.n	8002350 <_printf_common+0x88>
 8002300:	0023      	movs	r3, r4
 8002302:	3343      	adds	r3, #67	; 0x43
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	1e5a      	subs	r2, r3, #1
 8002308:	4193      	sbcs	r3, r2
 800230a:	6822      	ldr	r2, [r4, #0]
 800230c:	0692      	lsls	r2, r2, #26
 800230e:	d430      	bmi.n	8002372 <_printf_common+0xaa>
 8002310:	0022      	movs	r2, r4
 8002312:	9901      	ldr	r1, [sp, #4]
 8002314:	3243      	adds	r2, #67	; 0x43
 8002316:	9800      	ldr	r0, [sp, #0]
 8002318:	9e08      	ldr	r6, [sp, #32]
 800231a:	47b0      	blx	r6
 800231c:	1c43      	adds	r3, r0, #1
 800231e:	d025      	beq.n	800236c <_printf_common+0xa4>
 8002320:	2306      	movs	r3, #6
 8002322:	6820      	ldr	r0, [r4, #0]
 8002324:	682a      	ldr	r2, [r5, #0]
 8002326:	68e1      	ldr	r1, [r4, #12]
 8002328:	4003      	ands	r3, r0
 800232a:	2500      	movs	r5, #0
 800232c:	2b04      	cmp	r3, #4
 800232e:	d103      	bne.n	8002338 <_printf_common+0x70>
 8002330:	1a8d      	subs	r5, r1, r2
 8002332:	43eb      	mvns	r3, r5
 8002334:	17db      	asrs	r3, r3, #31
 8002336:	401d      	ands	r5, r3
 8002338:	68a3      	ldr	r3, [r4, #8]
 800233a:	6922      	ldr	r2, [r4, #16]
 800233c:	4293      	cmp	r3, r2
 800233e:	dd01      	ble.n	8002344 <_printf_common+0x7c>
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	18ed      	adds	r5, r5, r3
 8002344:	2700      	movs	r7, #0
 8002346:	42bd      	cmp	r5, r7
 8002348:	d120      	bne.n	800238c <_printf_common+0xc4>
 800234a:	2000      	movs	r0, #0
 800234c:	e010      	b.n	8002370 <_printf_common+0xa8>
 800234e:	3701      	adds	r7, #1
 8002350:	68e3      	ldr	r3, [r4, #12]
 8002352:	682a      	ldr	r2, [r5, #0]
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	429f      	cmp	r7, r3
 8002358:	dad2      	bge.n	8002300 <_printf_common+0x38>
 800235a:	0022      	movs	r2, r4
 800235c:	2301      	movs	r3, #1
 800235e:	3219      	adds	r2, #25
 8002360:	9901      	ldr	r1, [sp, #4]
 8002362:	9800      	ldr	r0, [sp, #0]
 8002364:	9e08      	ldr	r6, [sp, #32]
 8002366:	47b0      	blx	r6
 8002368:	1c43      	adds	r3, r0, #1
 800236a:	d1f0      	bne.n	800234e <_printf_common+0x86>
 800236c:	2001      	movs	r0, #1
 800236e:	4240      	negs	r0, r0
 8002370:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002372:	2030      	movs	r0, #48	; 0x30
 8002374:	18e1      	adds	r1, r4, r3
 8002376:	3143      	adds	r1, #67	; 0x43
 8002378:	7008      	strb	r0, [r1, #0]
 800237a:	0021      	movs	r1, r4
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	3145      	adds	r1, #69	; 0x45
 8002380:	7809      	ldrb	r1, [r1, #0]
 8002382:	18a2      	adds	r2, r4, r2
 8002384:	3243      	adds	r2, #67	; 0x43
 8002386:	3302      	adds	r3, #2
 8002388:	7011      	strb	r1, [r2, #0]
 800238a:	e7c1      	b.n	8002310 <_printf_common+0x48>
 800238c:	0022      	movs	r2, r4
 800238e:	2301      	movs	r3, #1
 8002390:	321a      	adds	r2, #26
 8002392:	9901      	ldr	r1, [sp, #4]
 8002394:	9800      	ldr	r0, [sp, #0]
 8002396:	9e08      	ldr	r6, [sp, #32]
 8002398:	47b0      	blx	r6
 800239a:	1c43      	adds	r3, r0, #1
 800239c:	d0e6      	beq.n	800236c <_printf_common+0xa4>
 800239e:	3701      	adds	r7, #1
 80023a0:	e7d1      	b.n	8002346 <_printf_common+0x7e>
	...

080023a4 <_printf_i>:
 80023a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a6:	b08b      	sub	sp, #44	; 0x2c
 80023a8:	9206      	str	r2, [sp, #24]
 80023aa:	000a      	movs	r2, r1
 80023ac:	3243      	adds	r2, #67	; 0x43
 80023ae:	9307      	str	r3, [sp, #28]
 80023b0:	9005      	str	r0, [sp, #20]
 80023b2:	9204      	str	r2, [sp, #16]
 80023b4:	7e0a      	ldrb	r2, [r1, #24]
 80023b6:	000c      	movs	r4, r1
 80023b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80023ba:	2a6e      	cmp	r2, #110	; 0x6e
 80023bc:	d100      	bne.n	80023c0 <_printf_i+0x1c>
 80023be:	e08f      	b.n	80024e0 <_printf_i+0x13c>
 80023c0:	d817      	bhi.n	80023f2 <_printf_i+0x4e>
 80023c2:	2a63      	cmp	r2, #99	; 0x63
 80023c4:	d02c      	beq.n	8002420 <_printf_i+0x7c>
 80023c6:	d808      	bhi.n	80023da <_printf_i+0x36>
 80023c8:	2a00      	cmp	r2, #0
 80023ca:	d100      	bne.n	80023ce <_printf_i+0x2a>
 80023cc:	e099      	b.n	8002502 <_printf_i+0x15e>
 80023ce:	2a58      	cmp	r2, #88	; 0x58
 80023d0:	d054      	beq.n	800247c <_printf_i+0xd8>
 80023d2:	0026      	movs	r6, r4
 80023d4:	3642      	adds	r6, #66	; 0x42
 80023d6:	7032      	strb	r2, [r6, #0]
 80023d8:	e029      	b.n	800242e <_printf_i+0x8a>
 80023da:	2a64      	cmp	r2, #100	; 0x64
 80023dc:	d001      	beq.n	80023e2 <_printf_i+0x3e>
 80023de:	2a69      	cmp	r2, #105	; 0x69
 80023e0:	d1f7      	bne.n	80023d2 <_printf_i+0x2e>
 80023e2:	6821      	ldr	r1, [r4, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	0608      	lsls	r0, r1, #24
 80023e8:	d523      	bpl.n	8002432 <_printf_i+0x8e>
 80023ea:	1d11      	adds	r1, r2, #4
 80023ec:	6019      	str	r1, [r3, #0]
 80023ee:	6815      	ldr	r5, [r2, #0]
 80023f0:	e025      	b.n	800243e <_printf_i+0x9a>
 80023f2:	2a73      	cmp	r2, #115	; 0x73
 80023f4:	d100      	bne.n	80023f8 <_printf_i+0x54>
 80023f6:	e088      	b.n	800250a <_printf_i+0x166>
 80023f8:	d808      	bhi.n	800240c <_printf_i+0x68>
 80023fa:	2a6f      	cmp	r2, #111	; 0x6f
 80023fc:	d029      	beq.n	8002452 <_printf_i+0xae>
 80023fe:	2a70      	cmp	r2, #112	; 0x70
 8002400:	d1e7      	bne.n	80023d2 <_printf_i+0x2e>
 8002402:	2220      	movs	r2, #32
 8002404:	6809      	ldr	r1, [r1, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	6022      	str	r2, [r4, #0]
 800240a:	e003      	b.n	8002414 <_printf_i+0x70>
 800240c:	2a75      	cmp	r2, #117	; 0x75
 800240e:	d020      	beq.n	8002452 <_printf_i+0xae>
 8002410:	2a78      	cmp	r2, #120	; 0x78
 8002412:	d1de      	bne.n	80023d2 <_printf_i+0x2e>
 8002414:	0022      	movs	r2, r4
 8002416:	2178      	movs	r1, #120	; 0x78
 8002418:	3245      	adds	r2, #69	; 0x45
 800241a:	7011      	strb	r1, [r2, #0]
 800241c:	4a6c      	ldr	r2, [pc, #432]	; (80025d0 <_printf_i+0x22c>)
 800241e:	e030      	b.n	8002482 <_printf_i+0xde>
 8002420:	000e      	movs	r6, r1
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	3642      	adds	r6, #66	; 0x42
 8002426:	1d11      	adds	r1, r2, #4
 8002428:	6019      	str	r1, [r3, #0]
 800242a:	6813      	ldr	r3, [r2, #0]
 800242c:	7033      	strb	r3, [r6, #0]
 800242e:	2301      	movs	r3, #1
 8002430:	e079      	b.n	8002526 <_printf_i+0x182>
 8002432:	0649      	lsls	r1, r1, #25
 8002434:	d5d9      	bpl.n	80023ea <_printf_i+0x46>
 8002436:	1d11      	adds	r1, r2, #4
 8002438:	6019      	str	r1, [r3, #0]
 800243a:	2300      	movs	r3, #0
 800243c:	5ed5      	ldrsh	r5, [r2, r3]
 800243e:	2d00      	cmp	r5, #0
 8002440:	da03      	bge.n	800244a <_printf_i+0xa6>
 8002442:	232d      	movs	r3, #45	; 0x2d
 8002444:	9a04      	ldr	r2, [sp, #16]
 8002446:	426d      	negs	r5, r5
 8002448:	7013      	strb	r3, [r2, #0]
 800244a:	4b62      	ldr	r3, [pc, #392]	; (80025d4 <_printf_i+0x230>)
 800244c:	270a      	movs	r7, #10
 800244e:	9303      	str	r3, [sp, #12]
 8002450:	e02f      	b.n	80024b2 <_printf_i+0x10e>
 8002452:	6820      	ldr	r0, [r4, #0]
 8002454:	6819      	ldr	r1, [r3, #0]
 8002456:	0605      	lsls	r5, r0, #24
 8002458:	d503      	bpl.n	8002462 <_printf_i+0xbe>
 800245a:	1d08      	adds	r0, r1, #4
 800245c:	6018      	str	r0, [r3, #0]
 800245e:	680d      	ldr	r5, [r1, #0]
 8002460:	e005      	b.n	800246e <_printf_i+0xca>
 8002462:	0640      	lsls	r0, r0, #25
 8002464:	d5f9      	bpl.n	800245a <_printf_i+0xb6>
 8002466:	680d      	ldr	r5, [r1, #0]
 8002468:	1d08      	adds	r0, r1, #4
 800246a:	6018      	str	r0, [r3, #0]
 800246c:	b2ad      	uxth	r5, r5
 800246e:	4b59      	ldr	r3, [pc, #356]	; (80025d4 <_printf_i+0x230>)
 8002470:	2708      	movs	r7, #8
 8002472:	9303      	str	r3, [sp, #12]
 8002474:	2a6f      	cmp	r2, #111	; 0x6f
 8002476:	d018      	beq.n	80024aa <_printf_i+0x106>
 8002478:	270a      	movs	r7, #10
 800247a:	e016      	b.n	80024aa <_printf_i+0x106>
 800247c:	3145      	adds	r1, #69	; 0x45
 800247e:	700a      	strb	r2, [r1, #0]
 8002480:	4a54      	ldr	r2, [pc, #336]	; (80025d4 <_printf_i+0x230>)
 8002482:	9203      	str	r2, [sp, #12]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	6821      	ldr	r1, [r4, #0]
 8002488:	1d10      	adds	r0, r2, #4
 800248a:	6018      	str	r0, [r3, #0]
 800248c:	6815      	ldr	r5, [r2, #0]
 800248e:	0608      	lsls	r0, r1, #24
 8002490:	d522      	bpl.n	80024d8 <_printf_i+0x134>
 8002492:	07cb      	lsls	r3, r1, #31
 8002494:	d502      	bpl.n	800249c <_printf_i+0xf8>
 8002496:	2320      	movs	r3, #32
 8002498:	4319      	orrs	r1, r3
 800249a:	6021      	str	r1, [r4, #0]
 800249c:	2710      	movs	r7, #16
 800249e:	2d00      	cmp	r5, #0
 80024a0:	d103      	bne.n	80024aa <_printf_i+0x106>
 80024a2:	2320      	movs	r3, #32
 80024a4:	6822      	ldr	r2, [r4, #0]
 80024a6:	439a      	bics	r2, r3
 80024a8:	6022      	str	r2, [r4, #0]
 80024aa:	0023      	movs	r3, r4
 80024ac:	2200      	movs	r2, #0
 80024ae:	3343      	adds	r3, #67	; 0x43
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	6863      	ldr	r3, [r4, #4]
 80024b4:	60a3      	str	r3, [r4, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	db5c      	blt.n	8002574 <_printf_i+0x1d0>
 80024ba:	2204      	movs	r2, #4
 80024bc:	6821      	ldr	r1, [r4, #0]
 80024be:	4391      	bics	r1, r2
 80024c0:	6021      	str	r1, [r4, #0]
 80024c2:	2d00      	cmp	r5, #0
 80024c4:	d158      	bne.n	8002578 <_printf_i+0x1d4>
 80024c6:	9e04      	ldr	r6, [sp, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d064      	beq.n	8002596 <_printf_i+0x1f2>
 80024cc:	0026      	movs	r6, r4
 80024ce:	9b03      	ldr	r3, [sp, #12]
 80024d0:	3642      	adds	r6, #66	; 0x42
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	7033      	strb	r3, [r6, #0]
 80024d6:	e05e      	b.n	8002596 <_printf_i+0x1f2>
 80024d8:	0648      	lsls	r0, r1, #25
 80024da:	d5da      	bpl.n	8002492 <_printf_i+0xee>
 80024dc:	b2ad      	uxth	r5, r5
 80024de:	e7d8      	b.n	8002492 <_printf_i+0xee>
 80024e0:	6809      	ldr	r1, [r1, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	0608      	lsls	r0, r1, #24
 80024e6:	d505      	bpl.n	80024f4 <_printf_i+0x150>
 80024e8:	1d11      	adds	r1, r2, #4
 80024ea:	6019      	str	r1, [r3, #0]
 80024ec:	6813      	ldr	r3, [r2, #0]
 80024ee:	6962      	ldr	r2, [r4, #20]
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e006      	b.n	8002502 <_printf_i+0x15e>
 80024f4:	0649      	lsls	r1, r1, #25
 80024f6:	d5f7      	bpl.n	80024e8 <_printf_i+0x144>
 80024f8:	1d11      	adds	r1, r2, #4
 80024fa:	6019      	str	r1, [r3, #0]
 80024fc:	6813      	ldr	r3, [r2, #0]
 80024fe:	8aa2      	ldrh	r2, [r4, #20]
 8002500:	801a      	strh	r2, [r3, #0]
 8002502:	2300      	movs	r3, #0
 8002504:	9e04      	ldr	r6, [sp, #16]
 8002506:	6123      	str	r3, [r4, #16]
 8002508:	e054      	b.n	80025b4 <_printf_i+0x210>
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	1d11      	adds	r1, r2, #4
 800250e:	6019      	str	r1, [r3, #0]
 8002510:	6816      	ldr	r6, [r2, #0]
 8002512:	2100      	movs	r1, #0
 8002514:	6862      	ldr	r2, [r4, #4]
 8002516:	0030      	movs	r0, r6
 8002518:	f000 f85e 	bl	80025d8 <memchr>
 800251c:	2800      	cmp	r0, #0
 800251e:	d001      	beq.n	8002524 <_printf_i+0x180>
 8002520:	1b80      	subs	r0, r0, r6
 8002522:	6060      	str	r0, [r4, #4]
 8002524:	6863      	ldr	r3, [r4, #4]
 8002526:	6123      	str	r3, [r4, #16]
 8002528:	2300      	movs	r3, #0
 800252a:	9a04      	ldr	r2, [sp, #16]
 800252c:	7013      	strb	r3, [r2, #0]
 800252e:	e041      	b.n	80025b4 <_printf_i+0x210>
 8002530:	6923      	ldr	r3, [r4, #16]
 8002532:	0032      	movs	r2, r6
 8002534:	9906      	ldr	r1, [sp, #24]
 8002536:	9805      	ldr	r0, [sp, #20]
 8002538:	9d07      	ldr	r5, [sp, #28]
 800253a:	47a8      	blx	r5
 800253c:	1c43      	adds	r3, r0, #1
 800253e:	d043      	beq.n	80025c8 <_printf_i+0x224>
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	2500      	movs	r5, #0
 8002544:	079b      	lsls	r3, r3, #30
 8002546:	d40f      	bmi.n	8002568 <_printf_i+0x1c4>
 8002548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800254a:	68e0      	ldr	r0, [r4, #12]
 800254c:	4298      	cmp	r0, r3
 800254e:	da3d      	bge.n	80025cc <_printf_i+0x228>
 8002550:	0018      	movs	r0, r3
 8002552:	e03b      	b.n	80025cc <_printf_i+0x228>
 8002554:	0022      	movs	r2, r4
 8002556:	2301      	movs	r3, #1
 8002558:	3219      	adds	r2, #25
 800255a:	9906      	ldr	r1, [sp, #24]
 800255c:	9805      	ldr	r0, [sp, #20]
 800255e:	9e07      	ldr	r6, [sp, #28]
 8002560:	47b0      	blx	r6
 8002562:	1c43      	adds	r3, r0, #1
 8002564:	d030      	beq.n	80025c8 <_printf_i+0x224>
 8002566:	3501      	adds	r5, #1
 8002568:	68e3      	ldr	r3, [r4, #12]
 800256a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	429d      	cmp	r5, r3
 8002570:	dbf0      	blt.n	8002554 <_printf_i+0x1b0>
 8002572:	e7e9      	b.n	8002548 <_printf_i+0x1a4>
 8002574:	2d00      	cmp	r5, #0
 8002576:	d0a9      	beq.n	80024cc <_printf_i+0x128>
 8002578:	9e04      	ldr	r6, [sp, #16]
 800257a:	0028      	movs	r0, r5
 800257c:	0039      	movs	r1, r7
 800257e:	f7fd fe5b 	bl	8000238 <__aeabi_uidivmod>
 8002582:	9b03      	ldr	r3, [sp, #12]
 8002584:	3e01      	subs	r6, #1
 8002586:	5c5b      	ldrb	r3, [r3, r1]
 8002588:	0028      	movs	r0, r5
 800258a:	7033      	strb	r3, [r6, #0]
 800258c:	0039      	movs	r1, r7
 800258e:	f7fd fdcd 	bl	800012c <__udivsi3>
 8002592:	1e05      	subs	r5, r0, #0
 8002594:	d1f1      	bne.n	800257a <_printf_i+0x1d6>
 8002596:	2f08      	cmp	r7, #8
 8002598:	d109      	bne.n	80025ae <_printf_i+0x20a>
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	07db      	lsls	r3, r3, #31
 800259e:	d506      	bpl.n	80025ae <_printf_i+0x20a>
 80025a0:	6863      	ldr	r3, [r4, #4]
 80025a2:	6922      	ldr	r2, [r4, #16]
 80025a4:	4293      	cmp	r3, r2
 80025a6:	dc02      	bgt.n	80025ae <_printf_i+0x20a>
 80025a8:	2330      	movs	r3, #48	; 0x30
 80025aa:	3e01      	subs	r6, #1
 80025ac:	7033      	strb	r3, [r6, #0]
 80025ae:	9b04      	ldr	r3, [sp, #16]
 80025b0:	1b9b      	subs	r3, r3, r6
 80025b2:	6123      	str	r3, [r4, #16]
 80025b4:	9b07      	ldr	r3, [sp, #28]
 80025b6:	aa09      	add	r2, sp, #36	; 0x24
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	0021      	movs	r1, r4
 80025bc:	9b06      	ldr	r3, [sp, #24]
 80025be:	9805      	ldr	r0, [sp, #20]
 80025c0:	f7ff fe82 	bl	80022c8 <_printf_common>
 80025c4:	1c43      	adds	r3, r0, #1
 80025c6:	d1b3      	bne.n	8002530 <_printf_i+0x18c>
 80025c8:	2001      	movs	r0, #1
 80025ca:	4240      	negs	r0, r0
 80025cc:	b00b      	add	sp, #44	; 0x2c
 80025ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025d0:	0800294d 	.word	0x0800294d
 80025d4:	0800293c 	.word	0x0800293c

080025d8 <memchr>:
 80025d8:	b2c9      	uxtb	r1, r1
 80025da:	1882      	adds	r2, r0, r2
 80025dc:	4290      	cmp	r0, r2
 80025de:	d101      	bne.n	80025e4 <memchr+0xc>
 80025e0:	2000      	movs	r0, #0
 80025e2:	4770      	bx	lr
 80025e4:	7803      	ldrb	r3, [r0, #0]
 80025e6:	428b      	cmp	r3, r1
 80025e8:	d0fb      	beq.n	80025e2 <memchr+0xa>
 80025ea:	3001      	adds	r0, #1
 80025ec:	e7f6      	b.n	80025dc <memchr+0x4>

080025ee <memmove>:
 80025ee:	b510      	push	{r4, lr}
 80025f0:	4288      	cmp	r0, r1
 80025f2:	d902      	bls.n	80025fa <memmove+0xc>
 80025f4:	188b      	adds	r3, r1, r2
 80025f6:	4298      	cmp	r0, r3
 80025f8:	d308      	bcc.n	800260c <memmove+0x1e>
 80025fa:	2300      	movs	r3, #0
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d007      	beq.n	8002610 <memmove+0x22>
 8002600:	5ccc      	ldrb	r4, [r1, r3]
 8002602:	54c4      	strb	r4, [r0, r3]
 8002604:	3301      	adds	r3, #1
 8002606:	e7f9      	b.n	80025fc <memmove+0xe>
 8002608:	5c8b      	ldrb	r3, [r1, r2]
 800260a:	5483      	strb	r3, [r0, r2]
 800260c:	3a01      	subs	r2, #1
 800260e:	d2fb      	bcs.n	8002608 <memmove+0x1a>
 8002610:	bd10      	pop	{r4, pc}
	...

08002614 <_free_r>:
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	0005      	movs	r5, r0
 8002618:	2900      	cmp	r1, #0
 800261a:	d010      	beq.n	800263e <_free_r+0x2a>
 800261c:	1f0c      	subs	r4, r1, #4
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	da00      	bge.n	8002626 <_free_r+0x12>
 8002624:	18e4      	adds	r4, r4, r3
 8002626:	0028      	movs	r0, r5
 8002628:	f000 f8d4 	bl	80027d4 <__malloc_lock>
 800262c:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <_free_r+0x90>)
 800262e:	6813      	ldr	r3, [r2, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d105      	bne.n	8002640 <_free_r+0x2c>
 8002634:	6063      	str	r3, [r4, #4]
 8002636:	6014      	str	r4, [r2, #0]
 8002638:	0028      	movs	r0, r5
 800263a:	f000 f8cc 	bl	80027d6 <__malloc_unlock>
 800263e:	bd70      	pop	{r4, r5, r6, pc}
 8002640:	42a3      	cmp	r3, r4
 8002642:	d909      	bls.n	8002658 <_free_r+0x44>
 8002644:	6821      	ldr	r1, [r4, #0]
 8002646:	1860      	adds	r0, r4, r1
 8002648:	4283      	cmp	r3, r0
 800264a:	d1f3      	bne.n	8002634 <_free_r+0x20>
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	1841      	adds	r1, r0, r1
 8002652:	6021      	str	r1, [r4, #0]
 8002654:	e7ee      	b.n	8002634 <_free_r+0x20>
 8002656:	0013      	movs	r3, r2
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	2a00      	cmp	r2, #0
 800265c:	d001      	beq.n	8002662 <_free_r+0x4e>
 800265e:	42a2      	cmp	r2, r4
 8002660:	d9f9      	bls.n	8002656 <_free_r+0x42>
 8002662:	6819      	ldr	r1, [r3, #0]
 8002664:	1858      	adds	r0, r3, r1
 8002666:	42a0      	cmp	r0, r4
 8002668:	d10b      	bne.n	8002682 <_free_r+0x6e>
 800266a:	6820      	ldr	r0, [r4, #0]
 800266c:	1809      	adds	r1, r1, r0
 800266e:	1858      	adds	r0, r3, r1
 8002670:	6019      	str	r1, [r3, #0]
 8002672:	4282      	cmp	r2, r0
 8002674:	d1e0      	bne.n	8002638 <_free_r+0x24>
 8002676:	6810      	ldr	r0, [r2, #0]
 8002678:	6852      	ldr	r2, [r2, #4]
 800267a:	1841      	adds	r1, r0, r1
 800267c:	6019      	str	r1, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	e7da      	b.n	8002638 <_free_r+0x24>
 8002682:	42a0      	cmp	r0, r4
 8002684:	d902      	bls.n	800268c <_free_r+0x78>
 8002686:	230c      	movs	r3, #12
 8002688:	602b      	str	r3, [r5, #0]
 800268a:	e7d5      	b.n	8002638 <_free_r+0x24>
 800268c:	6821      	ldr	r1, [r4, #0]
 800268e:	1860      	adds	r0, r4, r1
 8002690:	4282      	cmp	r2, r0
 8002692:	d103      	bne.n	800269c <_free_r+0x88>
 8002694:	6810      	ldr	r0, [r2, #0]
 8002696:	6852      	ldr	r2, [r2, #4]
 8002698:	1841      	adds	r1, r0, r1
 800269a:	6021      	str	r1, [r4, #0]
 800269c:	6062      	str	r2, [r4, #4]
 800269e:	605c      	str	r4, [r3, #4]
 80026a0:	e7ca      	b.n	8002638 <_free_r+0x24>
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	20000090 	.word	0x20000090

080026a8 <_malloc_r>:
 80026a8:	2303      	movs	r3, #3
 80026aa:	b570      	push	{r4, r5, r6, lr}
 80026ac:	1ccd      	adds	r5, r1, #3
 80026ae:	439d      	bics	r5, r3
 80026b0:	3508      	adds	r5, #8
 80026b2:	0006      	movs	r6, r0
 80026b4:	2d0c      	cmp	r5, #12
 80026b6:	d21e      	bcs.n	80026f6 <_malloc_r+0x4e>
 80026b8:	250c      	movs	r5, #12
 80026ba:	42a9      	cmp	r1, r5
 80026bc:	d81d      	bhi.n	80026fa <_malloc_r+0x52>
 80026be:	0030      	movs	r0, r6
 80026c0:	f000 f888 	bl	80027d4 <__malloc_lock>
 80026c4:	4a25      	ldr	r2, [pc, #148]	; (800275c <_malloc_r+0xb4>)
 80026c6:	6814      	ldr	r4, [r2, #0]
 80026c8:	0021      	movs	r1, r4
 80026ca:	2900      	cmp	r1, #0
 80026cc:	d119      	bne.n	8002702 <_malloc_r+0x5a>
 80026ce:	4c24      	ldr	r4, [pc, #144]	; (8002760 <_malloc_r+0xb8>)
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <_malloc_r+0x36>
 80026d6:	0030      	movs	r0, r6
 80026d8:	f000 f86a 	bl	80027b0 <_sbrk_r>
 80026dc:	6020      	str	r0, [r4, #0]
 80026de:	0029      	movs	r1, r5
 80026e0:	0030      	movs	r0, r6
 80026e2:	f000 f865 	bl	80027b0 <_sbrk_r>
 80026e6:	1c43      	adds	r3, r0, #1
 80026e8:	d12c      	bne.n	8002744 <_malloc_r+0x9c>
 80026ea:	230c      	movs	r3, #12
 80026ec:	0030      	movs	r0, r6
 80026ee:	6033      	str	r3, [r6, #0]
 80026f0:	f000 f871 	bl	80027d6 <__malloc_unlock>
 80026f4:	e003      	b.n	80026fe <_malloc_r+0x56>
 80026f6:	2d00      	cmp	r5, #0
 80026f8:	dadf      	bge.n	80026ba <_malloc_r+0x12>
 80026fa:	230c      	movs	r3, #12
 80026fc:	6033      	str	r3, [r6, #0]
 80026fe:	2000      	movs	r0, #0
 8002700:	bd70      	pop	{r4, r5, r6, pc}
 8002702:	680b      	ldr	r3, [r1, #0]
 8002704:	1b5b      	subs	r3, r3, r5
 8002706:	d41a      	bmi.n	800273e <_malloc_r+0x96>
 8002708:	2b0b      	cmp	r3, #11
 800270a:	d903      	bls.n	8002714 <_malloc_r+0x6c>
 800270c:	600b      	str	r3, [r1, #0]
 800270e:	18cc      	adds	r4, r1, r3
 8002710:	6025      	str	r5, [r4, #0]
 8002712:	e003      	b.n	800271c <_malloc_r+0x74>
 8002714:	428c      	cmp	r4, r1
 8002716:	d10e      	bne.n	8002736 <_malloc_r+0x8e>
 8002718:	6863      	ldr	r3, [r4, #4]
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	0030      	movs	r0, r6
 800271e:	f000 f85a 	bl	80027d6 <__malloc_unlock>
 8002722:	0020      	movs	r0, r4
 8002724:	2207      	movs	r2, #7
 8002726:	300b      	adds	r0, #11
 8002728:	1d23      	adds	r3, r4, #4
 800272a:	4390      	bics	r0, r2
 800272c:	1ac3      	subs	r3, r0, r3
 800272e:	d0e7      	beq.n	8002700 <_malloc_r+0x58>
 8002730:	425a      	negs	r2, r3
 8002732:	50e2      	str	r2, [r4, r3]
 8002734:	e7e4      	b.n	8002700 <_malloc_r+0x58>
 8002736:	684b      	ldr	r3, [r1, #4]
 8002738:	6063      	str	r3, [r4, #4]
 800273a:	000c      	movs	r4, r1
 800273c:	e7ee      	b.n	800271c <_malloc_r+0x74>
 800273e:	000c      	movs	r4, r1
 8002740:	6849      	ldr	r1, [r1, #4]
 8002742:	e7c2      	b.n	80026ca <_malloc_r+0x22>
 8002744:	2303      	movs	r3, #3
 8002746:	1cc4      	adds	r4, r0, #3
 8002748:	439c      	bics	r4, r3
 800274a:	42a0      	cmp	r0, r4
 800274c:	d0e0      	beq.n	8002710 <_malloc_r+0x68>
 800274e:	1a21      	subs	r1, r4, r0
 8002750:	0030      	movs	r0, r6
 8002752:	f000 f82d 	bl	80027b0 <_sbrk_r>
 8002756:	1c43      	adds	r3, r0, #1
 8002758:	d1da      	bne.n	8002710 <_malloc_r+0x68>
 800275a:	e7c6      	b.n	80026ea <_malloc_r+0x42>
 800275c:	20000090 	.word	0x20000090
 8002760:	20000094 	.word	0x20000094

08002764 <_realloc_r>:
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	0007      	movs	r7, r0
 8002768:	000d      	movs	r5, r1
 800276a:	0016      	movs	r6, r2
 800276c:	2900      	cmp	r1, #0
 800276e:	d105      	bne.n	800277c <_realloc_r+0x18>
 8002770:	0011      	movs	r1, r2
 8002772:	f7ff ff99 	bl	80026a8 <_malloc_r>
 8002776:	0004      	movs	r4, r0
 8002778:	0020      	movs	r0, r4
 800277a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800277c:	2a00      	cmp	r2, #0
 800277e:	d103      	bne.n	8002788 <_realloc_r+0x24>
 8002780:	f7ff ff48 	bl	8002614 <_free_r>
 8002784:	0034      	movs	r4, r6
 8002786:	e7f7      	b.n	8002778 <_realloc_r+0x14>
 8002788:	f000 f826 	bl	80027d8 <_malloc_usable_size_r>
 800278c:	002c      	movs	r4, r5
 800278e:	4286      	cmp	r6, r0
 8002790:	d9f2      	bls.n	8002778 <_realloc_r+0x14>
 8002792:	0031      	movs	r1, r6
 8002794:	0038      	movs	r0, r7
 8002796:	f7ff ff87 	bl	80026a8 <_malloc_r>
 800279a:	1e04      	subs	r4, r0, #0
 800279c:	d0ec      	beq.n	8002778 <_realloc_r+0x14>
 800279e:	0029      	movs	r1, r5
 80027a0:	0032      	movs	r2, r6
 80027a2:	f7ff fbff 	bl	8001fa4 <memcpy>
 80027a6:	0029      	movs	r1, r5
 80027a8:	0038      	movs	r0, r7
 80027aa:	f7ff ff33 	bl	8002614 <_free_r>
 80027ae:	e7e3      	b.n	8002778 <_realloc_r+0x14>

080027b0 <_sbrk_r>:
 80027b0:	2300      	movs	r3, #0
 80027b2:	b570      	push	{r4, r5, r6, lr}
 80027b4:	4c06      	ldr	r4, [pc, #24]	; (80027d0 <_sbrk_r+0x20>)
 80027b6:	0005      	movs	r5, r0
 80027b8:	0008      	movs	r0, r1
 80027ba:	6023      	str	r3, [r4, #0]
 80027bc:	f000 f814 	bl	80027e8 <_sbrk>
 80027c0:	1c43      	adds	r3, r0, #1
 80027c2:	d103      	bne.n	80027cc <_sbrk_r+0x1c>
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d000      	beq.n	80027cc <_sbrk_r+0x1c>
 80027ca:	602b      	str	r3, [r5, #0]
 80027cc:	bd70      	pop	{r4, r5, r6, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	20000180 	.word	0x20000180

080027d4 <__malloc_lock>:
 80027d4:	4770      	bx	lr

080027d6 <__malloc_unlock>:
 80027d6:	4770      	bx	lr

080027d8 <_malloc_usable_size_r>:
 80027d8:	1f0b      	subs	r3, r1, #4
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	1f18      	subs	r0, r3, #4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	da01      	bge.n	80027e6 <_malloc_usable_size_r+0xe>
 80027e2:	580b      	ldr	r3, [r1, r0]
 80027e4:	18c0      	adds	r0, r0, r3
 80027e6:	4770      	bx	lr

080027e8 <_sbrk>:
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <_sbrk+0x18>)
 80027ea:	0002      	movs	r2, r0
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	2900      	cmp	r1, #0
 80027f0:	d101      	bne.n	80027f6 <_sbrk+0xe>
 80027f2:	4904      	ldr	r1, [pc, #16]	; (8002804 <_sbrk+0x1c>)
 80027f4:	6019      	str	r1, [r3, #0]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	1882      	adds	r2, r0, r2
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	4770      	bx	lr
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	20000098 	.word	0x20000098
 8002804:	20000184 	.word	0x20000184

08002808 <_init>:
 8002808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280e:	bc08      	pop	{r3}
 8002810:	469e      	mov	lr, r3
 8002812:	4770      	bx	lr

08002814 <_fini>:
 8002814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281a:	bc08      	pop	{r3}
 800281c:	469e      	mov	lr, r3
 800281e:	4770      	bx	lr
