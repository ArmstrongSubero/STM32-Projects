
06_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001de4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08001ea4  08001ea4  00011ea4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f24  08001f24  00011f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f28  08001f28  00011f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08001f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000110  20000068  08001f94  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000178  08001f94  00020178  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c036  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d3e  00000000  00000000  0002c0c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002eb4  00000000  00000000  0002de04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000578  00000000  00000000  00030cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000708  00000000  00000000  00031230  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000392d  00000000  00000000  00031938  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000218d  00000000  00000000  00035265  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000373f2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001184  00000000  00000000  00037470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001e8c 	.word	0x08001e8c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08001e8c 	.word	0x08001e8c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000244:	b510      	push	{r4, lr}
 8000246:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000248:	f000 fdea 	bl	8000e20 <HAL_RCC_GetHCLKFreq>
 800024c:	21fa      	movs	r1, #250	; 0xfa
 800024e:	0089      	lsls	r1, r1, #2
 8000250:	f7ff ff6c 	bl	800012c <__udivsi3>
 8000254:	f000 fa5c 	bl	8000710 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000258:	2001      	movs	r0, #1
 800025a:	2200      	movs	r2, #0
 800025c:	0021      	movs	r1, r4
 800025e:	4240      	negs	r0, r0
 8000260:	f000 fa26 	bl	80006b0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000264:	2000      	movs	r0, #0
 8000266:	bd10      	pop	{r4, pc}

08000268 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000268:	2310      	movs	r3, #16
 800026a:	4a06      	ldr	r2, [pc, #24]	; (8000284 <HAL_Init+0x1c>)
{
 800026c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000270:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000272:	430b      	orrs	r3, r1
 8000274:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000276:	f7ff ffe5 	bl	8000244 <HAL_InitTick>
  HAL_MspInit();
 800027a:	f001 f8eb 	bl	8001454 <HAL_MspInit>
}
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	40022000 	.word	0x40022000

08000288 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000288:	4a02      	ldr	r2, [pc, #8]	; (8000294 <HAL_IncTick+0xc>)
 800028a:	6813      	ldr	r3, [r2, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	4770      	bx	lr
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	20000090 	.word	0x20000090

08000298 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_GetTick+0x8>)
 800029a:	6818      	ldr	r0, [r3, #0]
}
 800029c:	4770      	bx	lr
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	20000090 	.word	0x20000090

080002a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80002a6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002a8:	f7ff fff6 	bl	8000298 <HAL_GetTick>
  uint32_t wait = Delay;
 80002ac:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002ae:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002b0:	1c63      	adds	r3, r4, #1
 80002b2:	1e5a      	subs	r2, r3, #1
 80002b4:	4193      	sbcs	r3, r2
 80002b6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002b8:	f7ff ffee 	bl	8000298 <HAL_GetTick>
 80002bc:	1b40      	subs	r0, r0, r5
 80002be:	42a0      	cmp	r0, r4
 80002c0:	d3fa      	bcc.n	80002b8 <HAL_Delay+0x14>
  {
  }
}
 80002c2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002c4 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80002c4:	2300      	movs	r3, #0
{
 80002c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002c8:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 80002ca:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002cc:	6803      	ldr	r3, [r0, #0]
{
 80002ce:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002d0:	689a      	ldr	r2, [r3, #8]
 80002d2:	400a      	ands	r2, r1
 80002d4:	2a01      	cmp	r2, #1
 80002d6:	d107      	bne.n	80002e8 <ADC_Enable+0x24>
 80002d8:	6819      	ldr	r1, [r3, #0]
 80002da:	4211      	tst	r1, r2
 80002dc:	d001      	beq.n	80002e2 <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80002de:	2000      	movs	r0, #0
}
 80002e0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002e2:	68da      	ldr	r2, [r3, #12]
 80002e4:	0412      	lsls	r2, r2, #16
 80002e6:	d4fa      	bmi.n	80002de <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80002e8:	6899      	ldr	r1, [r3, #8]
 80002ea:	4a19      	ldr	r2, [pc, #100]	; (8000350 <ADC_Enable+0x8c>)
 80002ec:	4211      	tst	r1, r2
 80002ee:	d008      	beq.n	8000302 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002f0:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002f2:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80002f6:	4313      	orrs	r3, r2
 80002f8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002fc:	4303      	orrs	r3, r0
 80002fe:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000300:	e7ee      	b.n	80002e0 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8000302:	2201      	movs	r2, #1
 8000304:	6899      	ldr	r1, [r3, #8]
 8000306:	430a      	orrs	r2, r1
 8000308:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800030a:	4b12      	ldr	r3, [pc, #72]	; (8000354 <ADC_Enable+0x90>)
 800030c:	4912      	ldr	r1, [pc, #72]	; (8000358 <ADC_Enable+0x94>)
 800030e:	6818      	ldr	r0, [r3, #0]
 8000310:	f7ff ff0c 	bl	800012c <__udivsi3>
 8000314:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8000316:	9b01      	ldr	r3, [sp, #4]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d115      	bne.n	8000348 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 800031c:	f7ff ffbc 	bl	8000298 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000320:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8000322:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000324:	6823      	ldr	r3, [r4, #0]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	422b      	tst	r3, r5
 800032a:	d1d8      	bne.n	80002de <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800032c:	f7ff ffb4 	bl	8000298 <HAL_GetTick>
 8000330:	1b80      	subs	r0, r0, r6
 8000332:	2802      	cmp	r0, #2
 8000334:	d9f6      	bls.n	8000324 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000336:	2310      	movs	r3, #16
 8000338:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 800033a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800033c:	4313      	orrs	r3, r2
 800033e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000340:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000342:	432b      	orrs	r3, r5
 8000344:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000346:	e7cb      	b.n	80002e0 <ADC_Enable+0x1c>
      wait_loop_index--;
 8000348:	9b01      	ldr	r3, [sp, #4]
 800034a:	3b01      	subs	r3, #1
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	e7e2      	b.n	8000316 <ADC_Enable+0x52>
 8000350:	80000017 	.word	0x80000017
 8000354:	20000000 	.word	0x20000000
 8000358:	000f4240 	.word	0x000f4240

0800035c <HAL_ADC_Init>:
{
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000360:	2001      	movs	r0, #1
  if(hadc == NULL)
 8000362:	2c00      	cmp	r4, #0
 8000364:	d072      	beq.n	800044c <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000366:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000368:	2b00      	cmp	r3, #0
 800036a:	d106      	bne.n	800037a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800036c:	0022      	movs	r2, r4
 800036e:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8000370:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 8000372:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000374:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000376:	f001 f88b 	bl	8001490 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800037a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800037c:	06db      	lsls	r3, r3, #27
 800037e:	d500      	bpl.n	8000382 <HAL_ADC_Init+0x26>
 8000380:	e079      	b.n	8000476 <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000382:	2204      	movs	r2, #4
 8000384:	6823      	ldr	r3, [r4, #0]
 8000386:	6898      	ldr	r0, [r3, #8]
 8000388:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800038a:	d000      	beq.n	800038e <HAL_ADC_Init+0x32>
 800038c:	e073      	b.n	8000476 <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 800038e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000390:	4942      	ldr	r1, [pc, #264]	; (800049c <HAL_ADC_Init+0x140>)
 8000392:	4011      	ands	r1, r2
 8000394:	2202      	movs	r2, #2
 8000396:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000398:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 800039a:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	400a      	ands	r2, r1
 80003a0:	2a01      	cmp	r2, #1
 80003a2:	d000      	beq.n	80003a6 <HAL_ADC_Init+0x4a>
 80003a4:	e06d      	b.n	8000482 <HAL_ADC_Init+0x126>
 80003a6:	6819      	ldr	r1, [r3, #0]
 80003a8:	4211      	tst	r1, r2
 80003aa:	d102      	bne.n	80003b2 <HAL_ADC_Init+0x56>
 80003ac:	68da      	ldr	r2, [r3, #12]
 80003ae:	0412      	lsls	r2, r2, #16
 80003b0:	d567      	bpl.n	8000482 <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80003b2:	68da      	ldr	r2, [r3, #12]
 80003b4:	493a      	ldr	r1, [pc, #232]	; (80004a0 <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003b6:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80003b8:	400a      	ands	r2, r1
 80003ba:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003bc:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003be:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003c0:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80003c2:	69e2      	ldr	r2, [r4, #28]
 80003c4:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003c6:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003c8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80003ca:	3a01      	subs	r2, #1
 80003cc:	1e56      	subs	r6, r2, #1
 80003ce:	41b2      	sbcs	r2, r6
 80003d0:	0316      	lsls	r6, r2, #12
 80003d2:	68e2      	ldr	r2, [r4, #12]
 80003d4:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003d6:	6922      	ldr	r2, [r4, #16]
 80003d8:	430f      	orrs	r7, r1
 80003da:	2a02      	cmp	r2, #2
 80003dc:	d100      	bne.n	80003e0 <HAL_ADC_Init+0x84>
 80003de:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80003e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80003e4:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003e6:	433a      	orrs	r2, r7
 80003e8:	4332      	orrs	r2, r6
 80003ea:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003ec:	2901      	cmp	r1, #1
 80003ee:	d104      	bne.n	80003fa <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d12c      	bne.n	800044e <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80003f4:	2180      	movs	r1, #128	; 0x80
 80003f6:	0249      	lsls	r1, r1, #9
 80003f8:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003fa:	20c2      	movs	r0, #194	; 0xc2
 80003fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80003fe:	30ff      	adds	r0, #255	; 0xff
 8000400:	4281      	cmp	r1, r0
 8000402:	d002      	beq.n	800040a <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000404:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000406:	4301      	orrs	r1, r0
 8000408:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800040a:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800040c:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800040e:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000410:	4311      	orrs	r1, r2
 8000412:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000414:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000416:	4281      	cmp	r1, r0
 8000418:	d002      	beq.n	8000420 <HAL_ADC_Init+0xc4>
 800041a:	1e48      	subs	r0, r1, #1
 800041c:	2806      	cmp	r0, #6
 800041e:	d807      	bhi.n	8000430 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000420:	2507      	movs	r5, #7
 8000422:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000424:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000426:	43a8      	bics	r0, r5
 8000428:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800042a:	6958      	ldr	r0, [r3, #20]
 800042c:	4301      	orrs	r1, r0
 800042e:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000430:	68db      	ldr	r3, [r3, #12]
 8000432:	491c      	ldr	r1, [pc, #112]	; (80004a4 <HAL_ADC_Init+0x148>)
 8000434:	400b      	ands	r3, r1
 8000436:	429a      	cmp	r2, r3
 8000438:	d111      	bne.n	800045e <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 800043a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800043c:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800043e:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000440:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000442:	4393      	bics	r3, r2
 8000444:	001a      	movs	r2, r3
 8000446:	2301      	movs	r3, #1
 8000448:	4313      	orrs	r3, r2
 800044a:	6463      	str	r3, [r4, #68]	; 0x44
}
 800044c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800044e:	2020      	movs	r0, #32
 8000450:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8000452:	4328      	orrs	r0, r5
 8000454:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000456:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000458:	4301      	orrs	r1, r0
 800045a:	64a1      	str	r1, [r4, #72]	; 0x48
 800045c:	e7cd      	b.n	80003fa <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 800045e:	2212      	movs	r2, #18
 8000460:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000462:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000464:	4393      	bics	r3, r2
 8000466:	001a      	movs	r2, r3
 8000468:	2310      	movs	r3, #16
 800046a:	4313      	orrs	r3, r2
 800046c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800046e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000470:	4303      	orrs	r3, r0
 8000472:	64a3      	str	r3, [r4, #72]	; 0x48
 8000474:	e7ea      	b.n	800044c <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000476:	2310      	movs	r3, #16
 8000478:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800047a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800047c:	4313      	orrs	r3, r2
 800047e:	6463      	str	r3, [r4, #68]	; 0x44
 8000480:	e7e4      	b.n	800044c <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000482:	2118      	movs	r1, #24
 8000484:	68da      	ldr	r2, [r3, #12]
 8000486:	438a      	bics	r2, r1
 8000488:	68a1      	ldr	r1, [r4, #8]
 800048a:	430a      	orrs	r2, r1
 800048c:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800048e:	6919      	ldr	r1, [r3, #16]
 8000490:	6862      	ldr	r2, [r4, #4]
 8000492:	0089      	lsls	r1, r1, #2
 8000494:	0889      	lsrs	r1, r1, #2
 8000496:	4311      	orrs	r1, r2
 8000498:	6119      	str	r1, [r3, #16]
 800049a:	e78a      	b.n	80003b2 <HAL_ADC_Init+0x56>
 800049c:	fffffefd 	.word	0xfffffefd
 80004a0:	fffe0219 	.word	0xfffe0219
 80004a4:	833fffe7 	.word	0x833fffe7

080004a8 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004a8:	6803      	ldr	r3, [r0, #0]
{
 80004aa:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004ac:	689b      	ldr	r3, [r3, #8]
{
 80004ae:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80004b0:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004b2:	075b      	lsls	r3, r3, #29
 80004b4:	d41a      	bmi.n	80004ec <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80004b6:	0025      	movs	r5, r4
 80004b8:	3540      	adds	r5, #64	; 0x40
 80004ba:	782b      	ldrb	r3, [r5, #0]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d015      	beq.n	80004ec <HAL_ADC_Start+0x44>
 80004c0:	2301      	movs	r3, #1
 80004c2:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80004c4:	69e3      	ldr	r3, [r4, #28]
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d111      	bne.n	80004ee <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80004ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004cc:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80004ce:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80004d0:	401a      	ands	r2, r3
 80004d2:	2380      	movs	r3, #128	; 0x80
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004d8:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80004da:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004dc:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 80004de:	64a0      	str	r0, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80004e0:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004e2:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80004e4:	6899      	ldr	r1, [r3, #8]
 80004e6:	3a18      	subs	r2, #24
 80004e8:	430a      	orrs	r2, r1
 80004ea:	609a      	str	r2, [r3, #8]
}
 80004ec:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80004ee:	0020      	movs	r0, r4
 80004f0:	f7ff fee8 	bl	80002c4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80004f4:	2800      	cmp	r0, #0
 80004f6:	d1f9      	bne.n	80004ec <HAL_ADC_Start+0x44>
 80004f8:	e7e7      	b.n	80004ca <HAL_ADC_Start+0x22>
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	fffff0fe 	.word	0xfffff0fe

08000500 <HAL_ADC_PollForConversion>:
{
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000502:	6945      	ldr	r5, [r0, #20]
{
 8000504:	0004      	movs	r4, r0
 8000506:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000508:	2d08      	cmp	r5, #8
 800050a:	d00d      	beq.n	8000528 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800050c:	6803      	ldr	r3, [r0, #0]
 800050e:	2001      	movs	r0, #1
 8000510:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000512:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000514:	4203      	tst	r3, r0
 8000516:	d007      	beq.n	8000528 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000518:	2320      	movs	r3, #32
 800051a:	6c62      	ldr	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800051c:	3440      	adds	r4, #64	; 0x40
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800051e:	4313      	orrs	r3, r2
 8000520:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8000522:	2300      	movs	r3, #0
 8000524:	7023      	strb	r3, [r4, #0]
}
 8000526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8000528:	f7ff feb6 	bl	8000298 <HAL_GetTick>
 800052c:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	422a      	tst	r2, r5
 8000534:	d023      	beq.n	800057e <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800053a:	0092      	lsls	r2, r2, #2
 800053c:	430a      	orrs	r2, r1
 800053e:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000540:	22c0      	movs	r2, #192	; 0xc0
 8000542:	68d9      	ldr	r1, [r3, #12]
 8000544:	0112      	lsls	r2, r2, #4
 8000546:	4211      	tst	r1, r2
 8000548:	d112      	bne.n	8000570 <HAL_ADC_PollForConversion+0x70>
 800054a:	6a22      	ldr	r2, [r4, #32]
 800054c:	2a00      	cmp	r2, #0
 800054e:	d10f      	bne.n	8000570 <HAL_ADC_PollForConversion+0x70>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	0712      	lsls	r2, r2, #28
 8000554:	d50c      	bpl.n	8000570 <HAL_ADC_PollForConversion+0x70>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000556:	689a      	ldr	r2, [r3, #8]
 8000558:	0752      	lsls	r2, r2, #29
 800055a:	d423      	bmi.n	80005a4 <HAL_ADC_PollForConversion+0xa4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800055c:	210c      	movs	r1, #12
 800055e:	685a      	ldr	r2, [r3, #4]
 8000560:	438a      	bics	r2, r1
 8000562:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8000564:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000566:	4914      	ldr	r1, [pc, #80]	; (80005b8 <HAL_ADC_PollForConversion+0xb8>)
 8000568:	4011      	ands	r1, r2
 800056a:	2201      	movs	r2, #1
 800056c:	430a      	orrs	r2, r1
 800056e:	6462      	str	r2, [r4, #68]	; 0x44
  return HAL_OK;
 8000570:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000572:	69a2      	ldr	r2, [r4, #24]
 8000574:	4282      	cmp	r2, r0
 8000576:	d1d6      	bne.n	8000526 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000578:	220c      	movs	r2, #12
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	e7d3      	b.n	8000526 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 800057e:	1c72      	adds	r2, r6, #1
 8000580:	d0d6      	beq.n	8000530 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000582:	2e00      	cmp	r6, #0
 8000584:	d108      	bne.n	8000598 <HAL_ADC_PollForConversion+0x98>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000586:	2304      	movs	r3, #4
 8000588:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800058a:	3440      	adds	r4, #64	; 0x40
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800058c:	4313      	orrs	r3, r2
 800058e:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8000590:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8000592:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8000594:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8000596:	e7c6      	b.n	8000526 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000598:	f7ff fe7e 	bl	8000298 <HAL_GetTick>
 800059c:	1bc0      	subs	r0, r0, r7
 800059e:	4286      	cmp	r6, r0
 80005a0:	d2c5      	bcs.n	800052e <HAL_ADC_PollForConversion+0x2e>
 80005a2:	e7f0      	b.n	8000586 <HAL_ADC_PollForConversion+0x86>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005a4:	2220      	movs	r2, #32
 80005a6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80005a8:	430a      	orrs	r2, r1
 80005aa:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005ac:	2201      	movs	r2, #1
 80005ae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80005b0:	430a      	orrs	r2, r1
 80005b2:	64a2      	str	r2, [r4, #72]	; 0x48
 80005b4:	e7dc      	b.n	8000570 <HAL_ADC_PollForConversion+0x70>
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	fffffefe 	.word	0xfffffefe

080005bc <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80005bc:	6803      	ldr	r3, [r0, #0]
 80005be:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80005c0:	4770      	bx	lr
	...

080005c4 <HAL_ADC_ConfigChannel>:
{
 80005c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 80005c6:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 80005c8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80005ca:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80005cc:	3440      	adds	r4, #64	; 0x40
 80005ce:	7823      	ldrb	r3, [r4, #0]
{
 80005d0:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 80005d2:	2002      	movs	r0, #2
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d02b      	beq.n	8000630 <HAL_ADC_ConfigChannel+0x6c>
 80005d8:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005da:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005dc:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005de:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 80005e0:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005e2:	0740      	lsls	r0, r0, #29
 80005e4:	d452      	bmi.n	800068c <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank != ADC_RANK_NONE)
 80005e6:	482c      	ldr	r0, [pc, #176]	; (8000698 <HAL_ADC_ConfigChannel+0xd4>)
 80005e8:	684f      	ldr	r7, [r1, #4]
 80005ea:	680d      	ldr	r5, [r1, #0]
 80005ec:	4287      	cmp	r7, r0
 80005ee:	d03b      	beq.n	8000668 <HAL_ADC_ConfigChannel+0xa4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80005f0:	40ab      	lsls	r3, r5
 80005f2:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005f4:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80005f6:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005f8:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80005fa:	4338      	orrs	r0, r7
 80005fc:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005fe:	429e      	cmp	r6, r3
 8000600:	d00f      	beq.n	8000622 <HAL_ADC_ConfigChannel+0x5e>
 8000602:	3e01      	subs	r6, #1
 8000604:	2e06      	cmp	r6, #6
 8000606:	d90c      	bls.n	8000622 <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000608:	688b      	ldr	r3, [r1, #8]
 800060a:	2107      	movs	r1, #7
 800060c:	6950      	ldr	r0, [r2, #20]
 800060e:	4008      	ands	r0, r1
 8000610:	4283      	cmp	r3, r0
 8000612:	d006      	beq.n	8000622 <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000614:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000616:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000618:	4388      	bics	r0, r1
 800061a:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800061c:	6950      	ldr	r0, [r2, #20]
 800061e:	4303      	orrs	r3, r0
 8000620:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000622:	002b      	movs	r3, r5
 8000624:	3b10      	subs	r3, #16
 8000626:	2b01      	cmp	r3, #1
 8000628:	d903      	bls.n	8000632 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800062a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800062c:	2300      	movs	r3, #0
 800062e:	7023      	strb	r3, [r4, #0]
}
 8000630:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <HAL_ADC_ConfigChannel+0xd8>)
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	6819      	ldr	r1, [r3, #0]
 8000638:	2d10      	cmp	r5, #16
 800063a:	d013      	beq.n	8000664 <HAL_ADC_ConfigChannel+0xa0>
 800063c:	03d2      	lsls	r2, r2, #15
 800063e:	430a      	orrs	r2, r1
 8000640:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000642:	2d10      	cmp	r5, #16
 8000644:	d1f1      	bne.n	800062a <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <HAL_ADC_ConfigChannel+0xdc>)
 8000648:	4916      	ldr	r1, [pc, #88]	; (80006a4 <HAL_ADC_ConfigChannel+0xe0>)
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	f7ff fd6e 	bl	800012c <__udivsi3>
 8000650:	230a      	movs	r3, #10
 8000652:	4358      	muls	r0, r3
 8000654:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000656:	9b01      	ldr	r3, [sp, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0e6      	beq.n	800062a <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 800065c:	9b01      	ldr	r3, [sp, #4]
 800065e:	3b01      	subs	r3, #1
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	e7f8      	b.n	8000656 <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000664:	0412      	lsls	r2, r2, #16
 8000666:	e7ea      	b.n	800063e <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000668:	40ab      	lsls	r3, r5
 800066a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800066c:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800066e:	002b      	movs	r3, r5
 8000670:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000672:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000674:	2b01      	cmp	r3, #1
 8000676:	d8d8      	bhi.n	800062a <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <HAL_ADC_ConfigChannel+0xd8>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	2d10      	cmp	r5, #16
 800067e:	d003      	beq.n	8000688 <HAL_ADC_ConfigChannel+0xc4>
 8000680:	4909      	ldr	r1, [pc, #36]	; (80006a8 <HAL_ADC_ConfigChannel+0xe4>)
 8000682:	400a      	ands	r2, r1
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	e7d0      	b.n	800062a <HAL_ADC_ConfigChannel+0x66>
 8000688:	4908      	ldr	r1, [pc, #32]	; (80006ac <HAL_ADC_ConfigChannel+0xe8>)
 800068a:	e7fa      	b.n	8000682 <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800068c:	2220      	movs	r2, #32
 800068e:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000690:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000692:	430a      	orrs	r2, r1
 8000694:	646a      	str	r2, [r5, #68]	; 0x44
 8000696:	e7c9      	b.n	800062c <HAL_ADC_ConfigChannel+0x68>
 8000698:	00001001 	.word	0x00001001
 800069c:	40012708 	.word	0x40012708
 80006a0:	20000000 	.word	0x20000000
 80006a4:	000f4240 	.word	0x000f4240
 80006a8:	ffbfffff 	.word	0xffbfffff
 80006ac:	ff7fffff 	.word	0xff7fffff

080006b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80006b4:	2800      	cmp	r0, #0
 80006b6:	da14      	bge.n	80006e2 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006b8:	230f      	movs	r3, #15
 80006ba:	b2c0      	uxtb	r0, r0
 80006bc:	4003      	ands	r3, r0
 80006be:	3b08      	subs	r3, #8
 80006c0:	4a11      	ldr	r2, [pc, #68]	; (8000708 <HAL_NVIC_SetPriority+0x58>)
 80006c2:	089b      	lsrs	r3, r3, #2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	189b      	adds	r3, r3, r2
 80006c8:	2203      	movs	r2, #3
 80006ca:	4010      	ands	r0, r2
 80006cc:	4090      	lsls	r0, r2
 80006ce:	32fc      	adds	r2, #252	; 0xfc
 80006d0:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006d2:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006d6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d8:	69dc      	ldr	r4, [r3, #28]
 80006da:	43ac      	bics	r4, r5
 80006dc:	4321      	orrs	r1, r4
 80006de:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006e2:	2503      	movs	r5, #3
 80006e4:	0883      	lsrs	r3, r0, #2
 80006e6:	4028      	ands	r0, r5
 80006e8:	40a8      	lsls	r0, r5
 80006ea:	35fc      	adds	r5, #252	; 0xfc
 80006ec:	002e      	movs	r6, r5
 80006ee:	4a07      	ldr	r2, [pc, #28]	; (800070c <HAL_NVIC_SetPriority+0x5c>)
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	189b      	adds	r3, r3, r2
 80006f4:	22c0      	movs	r2, #192	; 0xc0
 80006f6:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006f8:	4029      	ands	r1, r5
 80006fa:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006fc:	0092      	lsls	r2, r2, #2
 80006fe:	589c      	ldr	r4, [r3, r2]
 8000700:	43b4      	bics	r4, r6
 8000702:	4321      	orrs	r1, r4
 8000704:	5099      	str	r1, [r3, r2]
 8000706:	e7eb      	b.n	80006e0 <HAL_NVIC_SetPriority+0x30>
 8000708:	e000ed00 	.word	0xe000ed00
 800070c:	e000e100 	.word	0xe000e100

08000710 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000710:	4a09      	ldr	r2, [pc, #36]	; (8000738 <HAL_SYSTICK_Config+0x28>)
 8000712:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000714:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000716:	4293      	cmp	r3, r2
 8000718:	d80d      	bhi.n	8000736 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800071a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071c:	4a07      	ldr	r2, [pc, #28]	; (800073c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800071e:	4808      	ldr	r0, [pc, #32]	; (8000740 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000720:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000722:	6a03      	ldr	r3, [r0, #32]
 8000724:	0609      	lsls	r1, r1, #24
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	430b      	orrs	r3, r1
 800072c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800072e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000730:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000732:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000734:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000736:	4770      	bx	lr
 8000738:	00ffffff 	.word	0x00ffffff
 800073c:	e000e010 	.word	0xe000e010
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000746:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000748:	2804      	cmp	r0, #4
 800074a:	d102      	bne.n	8000752 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800074c:	4310      	orrs	r0, r2
 800074e:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000750:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000752:	2104      	movs	r1, #4
 8000754:	438a      	bics	r2, r1
 8000756:	601a      	str	r2, [r3, #0]
}
 8000758:	e7fa      	b.n	8000750 <HAL_SYSTICK_CLKSourceConfig+0xc>
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	e000e010 	.word	0xe000e010

08000760 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000760:	4770      	bx	lr

08000762 <HAL_SYSTICK_IRQHandler>:
{
 8000762:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000764:	f7ff fffc 	bl	8000760 <HAL_SYSTICK_Callback>
}
 8000768:	bd10      	pop	{r4, pc}
	...

0800076c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800076c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800076e:	680b      	ldr	r3, [r1, #0]
{ 
 8000770:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000772:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000774:	2300      	movs	r3, #0
{ 
 8000776:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000778:	9a02      	ldr	r2, [sp, #8]
 800077a:	40da      	lsrs	r2, r3
 800077c:	d101      	bne.n	8000782 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800077e:	b007      	add	sp, #28
 8000780:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000782:	2201      	movs	r2, #1
 8000784:	409a      	lsls	r2, r3
 8000786:	9203      	str	r2, [sp, #12]
 8000788:	9903      	ldr	r1, [sp, #12]
 800078a:	9a02      	ldr	r2, [sp, #8]
 800078c:	400a      	ands	r2, r1
 800078e:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000790:	d100      	bne.n	8000794 <HAL_GPIO_Init+0x28>
 8000792:	e08c      	b.n	80008ae <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000794:	9a01      	ldr	r2, [sp, #4]
 8000796:	2110      	movs	r1, #16
 8000798:	6852      	ldr	r2, [r2, #4]
 800079a:	0016      	movs	r6, r2
 800079c:	438e      	bics	r6, r1
 800079e:	2e02      	cmp	r6, #2
 80007a0:	d10e      	bne.n	80007c0 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80007a2:	2507      	movs	r5, #7
 80007a4:	401d      	ands	r5, r3
 80007a6:	00ad      	lsls	r5, r5, #2
 80007a8:	3901      	subs	r1, #1
 80007aa:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 80007ac:	08dc      	lsrs	r4, r3, #3
 80007ae:	00a4      	lsls	r4, r4, #2
 80007b0:	1904      	adds	r4, r0, r4
 80007b2:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80007b4:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80007b6:	9901      	ldr	r1, [sp, #4]
 80007b8:	6909      	ldr	r1, [r1, #16]
 80007ba:	40a9      	lsls	r1, r5
 80007bc:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80007be:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80007c0:	2403      	movs	r4, #3
 80007c2:	005f      	lsls	r7, r3, #1
 80007c4:	40bc      	lsls	r4, r7
 80007c6:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80007c8:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ca:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80007cc:	4025      	ands	r5, r4
 80007ce:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007d0:	2503      	movs	r5, #3
 80007d2:	4015      	ands	r5, r2
 80007d4:	40bd      	lsls	r5, r7
 80007d6:	4661      	mov	r1, ip
 80007d8:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80007da:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007dc:	2e01      	cmp	r6, #1
 80007de:	d80f      	bhi.n	8000800 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80007e0:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80007e2:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80007e4:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007e6:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80007e8:	40bd      	lsls	r5, r7
 80007ea:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80007ec:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80007ee:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80007f0:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007f2:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80007f4:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007f6:	2101      	movs	r1, #1
 80007f8:	400d      	ands	r5, r1
 80007fa:	409d      	lsls	r5, r3
 80007fc:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80007fe:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000800:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000802:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000804:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000806:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000808:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800080a:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800080c:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800080e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000810:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000812:	420a      	tst	r2, r1
 8000814:	d04b      	beq.n	80008ae <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	2101      	movs	r1, #1
 8000818:	4c26      	ldr	r4, [pc, #152]	; (80008b4 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800081a:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081c:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800081e:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000820:	430d      	orrs	r5, r1
 8000822:	61a5      	str	r5, [r4, #24]
 8000824:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000826:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000828:	400c      	ands	r4, r1
 800082a:	9405      	str	r4, [sp, #20]
 800082c:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800082e:	240f      	movs	r4, #15
 8000830:	4921      	ldr	r1, [pc, #132]	; (80008b8 <HAL_GPIO_Init+0x14c>)
 8000832:	00ad      	lsls	r5, r5, #2
 8000834:	00b6      	lsls	r6, r6, #2
 8000836:	186d      	adds	r5, r5, r1
 8000838:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800083a:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 800083c:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800083e:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000840:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000842:	2400      	movs	r4, #0
 8000844:	4288      	cmp	r0, r1
 8000846:	d00c      	beq.n	8000862 <HAL_GPIO_Init+0xf6>
 8000848:	491c      	ldr	r1, [pc, #112]	; (80008bc <HAL_GPIO_Init+0x150>)
 800084a:	3401      	adds	r4, #1
 800084c:	4288      	cmp	r0, r1
 800084e:	d008      	beq.n	8000862 <HAL_GPIO_Init+0xf6>
 8000850:	491b      	ldr	r1, [pc, #108]	; (80008c0 <HAL_GPIO_Init+0x154>)
 8000852:	3401      	adds	r4, #1
 8000854:	4288      	cmp	r0, r1
 8000856:	d004      	beq.n	8000862 <HAL_GPIO_Init+0xf6>
 8000858:	491a      	ldr	r1, [pc, #104]	; (80008c4 <HAL_GPIO_Init+0x158>)
 800085a:	3403      	adds	r4, #3
 800085c:	4288      	cmp	r0, r1
 800085e:	d100      	bne.n	8000862 <HAL_GPIO_Init+0xf6>
 8000860:	3c02      	subs	r4, #2
 8000862:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000864:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000866:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000868:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 800086a:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 800086c:	4c16      	ldr	r4, [pc, #88]	; (80008c8 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800086e:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000870:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8000872:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000874:	03d1      	lsls	r1, r2, #15
 8000876:	d401      	bmi.n	800087c <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000878:	003e      	movs	r6, r7
 800087a:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 800087c:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800087e:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000880:	9e00      	ldr	r6, [sp, #0]
 8000882:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000884:	0391      	lsls	r1, r2, #14
 8000886:	d401      	bmi.n	800088c <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000888:	003e      	movs	r6, r7
 800088a:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 800088c:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800088e:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000890:	9e00      	ldr	r6, [sp, #0]
 8000892:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000894:	02d1      	lsls	r1, r2, #11
 8000896:	d401      	bmi.n	800089c <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000898:	003e      	movs	r6, r7
 800089a:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 800089c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800089e:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80008a0:	9f00      	ldr	r7, [sp, #0]
 80008a2:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008a4:	0292      	lsls	r2, r2, #10
 80008a6:	d401      	bmi.n	80008ac <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80008a8:	402e      	ands	r6, r5
 80008aa:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80008ac:	60e7      	str	r7, [r4, #12]
    position++;
 80008ae:	3301      	adds	r3, #1
 80008b0:	e762      	b.n	8000778 <HAL_GPIO_Init+0xc>
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40010000 	.word	0x40010000
 80008bc:	48000400 	.word	0x48000400
 80008c0:	48000800 	.word	0x48000800
 80008c4:	48000c00 	.word	0x48000c00
 80008c8:	40010400 	.word	0x40010400

080008cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008ce:	6803      	ldr	r3, [r0, #0]
{
 80008d0:	b085      	sub	sp, #20
 80008d2:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008d4:	07db      	lsls	r3, r3, #31
 80008d6:	d42f      	bmi.n	8000938 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008d8:	682b      	ldr	r3, [r5, #0]
 80008da:	079b      	lsls	r3, r3, #30
 80008dc:	d500      	bpl.n	80008e0 <HAL_RCC_OscConfig+0x14>
 80008de:	e081      	b.n	80009e4 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008e0:	682b      	ldr	r3, [r5, #0]
 80008e2:	071b      	lsls	r3, r3, #28
 80008e4:	d500      	bpl.n	80008e8 <HAL_RCC_OscConfig+0x1c>
 80008e6:	e0bc      	b.n	8000a62 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008e8:	682b      	ldr	r3, [r5, #0]
 80008ea:	075b      	lsls	r3, r3, #29
 80008ec:	d500      	bpl.n	80008f0 <HAL_RCC_OscConfig+0x24>
 80008ee:	e0df      	b.n	8000ab0 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80008f0:	682b      	ldr	r3, [r5, #0]
 80008f2:	06db      	lsls	r3, r3, #27
 80008f4:	d51a      	bpl.n	800092c <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80008f6:	696a      	ldr	r2, [r5, #20]
 80008f8:	4cb5      	ldr	r4, [pc, #724]	; (8000bd0 <HAL_RCC_OscConfig+0x304>)
 80008fa:	2304      	movs	r3, #4
 80008fc:	2a01      	cmp	r2, #1
 80008fe:	d000      	beq.n	8000902 <HAL_RCC_OscConfig+0x36>
 8000900:	e14b      	b.n	8000b9a <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000902:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000904:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000906:	430b      	orrs	r3, r1
 8000908:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800090a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800090c:	431a      	orrs	r2, r3
 800090e:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000910:	f7ff fcc2 	bl	8000298 <HAL_GetTick>
 8000914:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000916:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000918:	4233      	tst	r3, r6
 800091a:	d100      	bne.n	800091e <HAL_RCC_OscConfig+0x52>
 800091c:	e136      	b.n	8000b8c <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800091e:	21f8      	movs	r1, #248	; 0xf8
 8000920:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000922:	69ab      	ldr	r3, [r5, #24]
 8000924:	438a      	bics	r2, r1
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	4313      	orrs	r3, r2
 800092a:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800092c:	6a29      	ldr	r1, [r5, #32]
 800092e:	2900      	cmp	r1, #0
 8000930:	d000      	beq.n	8000934 <HAL_RCC_OscConfig+0x68>
 8000932:	e159      	b.n	8000be8 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000934:	2000      	movs	r0, #0
 8000936:	e013      	b.n	8000960 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000938:	210c      	movs	r1, #12
 800093a:	4ca5      	ldr	r4, [pc, #660]	; (8000bd0 <HAL_RCC_OscConfig+0x304>)
 800093c:	6862      	ldr	r2, [r4, #4]
 800093e:	400a      	ands	r2, r1
 8000940:	2a04      	cmp	r2, #4
 8000942:	d006      	beq.n	8000952 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000944:	6863      	ldr	r3, [r4, #4]
 8000946:	400b      	ands	r3, r1
 8000948:	2b08      	cmp	r3, #8
 800094a:	d10b      	bne.n	8000964 <HAL_RCC_OscConfig+0x98>
 800094c:	6863      	ldr	r3, [r4, #4]
 800094e:	03db      	lsls	r3, r3, #15
 8000950:	d508      	bpl.n	8000964 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000952:	6823      	ldr	r3, [r4, #0]
 8000954:	039b      	lsls	r3, r3, #14
 8000956:	d5bf      	bpl.n	80008d8 <HAL_RCC_OscConfig+0xc>
 8000958:	686b      	ldr	r3, [r5, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1bc      	bne.n	80008d8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800095e:	2001      	movs	r0, #1
}
 8000960:	b005      	add	sp, #20
 8000962:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000964:	686b      	ldr	r3, [r5, #4]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d113      	bne.n	8000992 <HAL_RCC_OscConfig+0xc6>
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	6822      	ldr	r2, [r4, #0]
 800096e:	025b      	lsls	r3, r3, #9
 8000970:	4313      	orrs	r3, r2
 8000972:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000974:	f7ff fc90 	bl	8000298 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000978:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800097a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800097c:	02b6      	lsls	r6, r6, #10
 800097e:	6823      	ldr	r3, [r4, #0]
 8000980:	4233      	tst	r3, r6
 8000982:	d1a9      	bne.n	80008d8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000984:	f7ff fc88 	bl	8000298 <HAL_GetTick>
 8000988:	1bc0      	subs	r0, r0, r7
 800098a:	2864      	cmp	r0, #100	; 0x64
 800098c:	d9f7      	bls.n	800097e <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 800098e:	2003      	movs	r0, #3
 8000990:	e7e6      	b.n	8000960 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000992:	2b00      	cmp	r3, #0
 8000994:	d116      	bne.n	80009c4 <HAL_RCC_OscConfig+0xf8>
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	4a8e      	ldr	r2, [pc, #568]	; (8000bd4 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800099a:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800099c:	4013      	ands	r3, r2
 800099e:	6023      	str	r3, [r4, #0]
 80009a0:	6823      	ldr	r3, [r4, #0]
 80009a2:	4a8d      	ldr	r2, [pc, #564]	; (8000bd8 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009a4:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009a6:	4013      	ands	r3, r2
 80009a8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009aa:	f7ff fc75 	bl	8000298 <HAL_GetTick>
 80009ae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009b0:	6823      	ldr	r3, [r4, #0]
 80009b2:	4233      	tst	r3, r6
 80009b4:	d100      	bne.n	80009b8 <HAL_RCC_OscConfig+0xec>
 80009b6:	e78f      	b.n	80008d8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009b8:	f7ff fc6e 	bl	8000298 <HAL_GetTick>
 80009bc:	1bc0      	subs	r0, r0, r7
 80009be:	2864      	cmp	r0, #100	; 0x64
 80009c0:	d9f6      	bls.n	80009b0 <HAL_RCC_OscConfig+0xe4>
 80009c2:	e7e4      	b.n	800098e <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009c4:	2b05      	cmp	r3, #5
 80009c6:	d105      	bne.n	80009d4 <HAL_RCC_OscConfig+0x108>
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	6822      	ldr	r2, [r4, #0]
 80009cc:	02db      	lsls	r3, r3, #11
 80009ce:	4313      	orrs	r3, r2
 80009d0:	6023      	str	r3, [r4, #0]
 80009d2:	e7ca      	b.n	800096a <HAL_RCC_OscConfig+0x9e>
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	4a7f      	ldr	r2, [pc, #508]	; (8000bd4 <HAL_RCC_OscConfig+0x308>)
 80009d8:	4013      	ands	r3, r2
 80009da:	6023      	str	r3, [r4, #0]
 80009dc:	6823      	ldr	r3, [r4, #0]
 80009de:	4a7e      	ldr	r2, [pc, #504]	; (8000bd8 <HAL_RCC_OscConfig+0x30c>)
 80009e0:	4013      	ands	r3, r2
 80009e2:	e7c6      	b.n	8000972 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009e4:	220c      	movs	r2, #12
 80009e6:	4c7a      	ldr	r4, [pc, #488]	; (8000bd0 <HAL_RCC_OscConfig+0x304>)
 80009e8:	6863      	ldr	r3, [r4, #4]
 80009ea:	4213      	tst	r3, r2
 80009ec:	d006      	beq.n	80009fc <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80009ee:	6863      	ldr	r3, [r4, #4]
 80009f0:	4013      	ands	r3, r2
 80009f2:	2b08      	cmp	r3, #8
 80009f4:	d110      	bne.n	8000a18 <HAL_RCC_OscConfig+0x14c>
 80009f6:	6863      	ldr	r3, [r4, #4]
 80009f8:	03db      	lsls	r3, r3, #15
 80009fa:	d40d      	bmi.n	8000a18 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009fc:	6823      	ldr	r3, [r4, #0]
 80009fe:	079b      	lsls	r3, r3, #30
 8000a00:	d502      	bpl.n	8000a08 <HAL_RCC_OscConfig+0x13c>
 8000a02:	68eb      	ldr	r3, [r5, #12]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d1aa      	bne.n	800095e <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a08:	21f8      	movs	r1, #248	; 0xf8
 8000a0a:	6822      	ldr	r2, [r4, #0]
 8000a0c:	692b      	ldr	r3, [r5, #16]
 8000a0e:	438a      	bics	r2, r1
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	4313      	orrs	r3, r2
 8000a14:	6023      	str	r3, [r4, #0]
 8000a16:	e763      	b.n	80008e0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a18:	68ea      	ldr	r2, [r5, #12]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	2a00      	cmp	r2, #0
 8000a1e:	d00f      	beq.n	8000a40 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000a20:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a22:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000a24:	4313      	orrs	r3, r2
 8000a26:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a28:	f7ff fc36 	bl	8000298 <HAL_GetTick>
 8000a2c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a2e:	6823      	ldr	r3, [r4, #0]
 8000a30:	4233      	tst	r3, r6
 8000a32:	d1e9      	bne.n	8000a08 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a34:	f7ff fc30 	bl	8000298 <HAL_GetTick>
 8000a38:	1bc0      	subs	r0, r0, r7
 8000a3a:	2802      	cmp	r0, #2
 8000a3c:	d9f7      	bls.n	8000a2e <HAL_RCC_OscConfig+0x162>
 8000a3e:	e7a6      	b.n	800098e <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000a40:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a42:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000a44:	439a      	bics	r2, r3
 8000a46:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000a48:	f7ff fc26 	bl	8000298 <HAL_GetTick>
 8000a4c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a4e:	6823      	ldr	r3, [r4, #0]
 8000a50:	4233      	tst	r3, r6
 8000a52:	d100      	bne.n	8000a56 <HAL_RCC_OscConfig+0x18a>
 8000a54:	e744      	b.n	80008e0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a56:	f7ff fc1f 	bl	8000298 <HAL_GetTick>
 8000a5a:	1bc0      	subs	r0, r0, r7
 8000a5c:	2802      	cmp	r0, #2
 8000a5e:	d9f6      	bls.n	8000a4e <HAL_RCC_OscConfig+0x182>
 8000a60:	e795      	b.n	800098e <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a62:	69ea      	ldr	r2, [r5, #28]
 8000a64:	2301      	movs	r3, #1
 8000a66:	4c5a      	ldr	r4, [pc, #360]	; (8000bd0 <HAL_RCC_OscConfig+0x304>)
 8000a68:	2a00      	cmp	r2, #0
 8000a6a:	d010      	beq.n	8000a8e <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000a6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a6e:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000a70:	4313      	orrs	r3, r2
 8000a72:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000a74:	f7ff fc10 	bl	8000298 <HAL_GetTick>
 8000a78:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a7c:	4233      	tst	r3, r6
 8000a7e:	d000      	beq.n	8000a82 <HAL_RCC_OscConfig+0x1b6>
 8000a80:	e732      	b.n	80008e8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a82:	f7ff fc09 	bl	8000298 <HAL_GetTick>
 8000a86:	1bc0      	subs	r0, r0, r7
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d9f6      	bls.n	8000a7a <HAL_RCC_OscConfig+0x1ae>
 8000a8c:	e77f      	b.n	800098e <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000a8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a90:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000a92:	439a      	bics	r2, r3
 8000a94:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000a96:	f7ff fbff 	bl	8000298 <HAL_GetTick>
 8000a9a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a9e:	4233      	tst	r3, r6
 8000aa0:	d100      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x1d8>
 8000aa2:	e721      	b.n	80008e8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aa4:	f7ff fbf8 	bl	8000298 <HAL_GetTick>
 8000aa8:	1bc0      	subs	r0, r0, r7
 8000aaa:	2802      	cmp	r0, #2
 8000aac:	d9f6      	bls.n	8000a9c <HAL_RCC_OscConfig+0x1d0>
 8000aae:	e76e      	b.n	800098e <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ab0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000ab2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ab4:	4c46      	ldr	r4, [pc, #280]	; (8000bd0 <HAL_RCC_OscConfig+0x304>)
 8000ab6:	0552      	lsls	r2, r2, #21
 8000ab8:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000aba:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000abc:	4213      	tst	r3, r2
 8000abe:	d108      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ac0:	69e3      	ldr	r3, [r4, #28]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	61e3      	str	r3, [r4, #28]
 8000ac6:	69e3      	ldr	r3, [r4, #28]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	9303      	str	r3, [sp, #12]
 8000acc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad2:	2780      	movs	r7, #128	; 0x80
 8000ad4:	4e41      	ldr	r6, [pc, #260]	; (8000bdc <HAL_RCC_OscConfig+0x310>)
 8000ad6:	007f      	lsls	r7, r7, #1
 8000ad8:	6833      	ldr	r3, [r6, #0]
 8000ada:	423b      	tst	r3, r7
 8000adc:	d006      	beq.n	8000aec <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ade:	68ab      	ldr	r3, [r5, #8]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d113      	bne.n	8000b0c <HAL_RCC_OscConfig+0x240>
 8000ae4:	6a22      	ldr	r2, [r4, #32]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	6223      	str	r3, [r4, #32]
 8000aea:	e030      	b.n	8000b4e <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aec:	6833      	ldr	r3, [r6, #0]
 8000aee:	433b      	orrs	r3, r7
 8000af0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000af2:	f7ff fbd1 	bl	8000298 <HAL_GetTick>
 8000af6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af8:	6833      	ldr	r3, [r6, #0]
 8000afa:	423b      	tst	r3, r7
 8000afc:	d1ef      	bne.n	8000ade <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000afe:	f7ff fbcb 	bl	8000298 <HAL_GetTick>
 8000b02:	9b01      	ldr	r3, [sp, #4]
 8000b04:	1ac0      	subs	r0, r0, r3
 8000b06:	2864      	cmp	r0, #100	; 0x64
 8000b08:	d9f6      	bls.n	8000af8 <HAL_RCC_OscConfig+0x22c>
 8000b0a:	e740      	b.n	800098e <HAL_RCC_OscConfig+0xc2>
 8000b0c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d114      	bne.n	8000b3c <HAL_RCC_OscConfig+0x270>
 8000b12:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b14:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b16:	4393      	bics	r3, r2
 8000b18:	6223      	str	r3, [r4, #32]
 8000b1a:	6a23      	ldr	r3, [r4, #32]
 8000b1c:	3203      	adds	r2, #3
 8000b1e:	4393      	bics	r3, r2
 8000b20:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b22:	f7ff fbb9 	bl	8000298 <HAL_GetTick>
 8000b26:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b28:	6a23      	ldr	r3, [r4, #32]
 8000b2a:	423b      	tst	r3, r7
 8000b2c:	d025      	beq.n	8000b7a <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fbb3 	bl	8000298 <HAL_GetTick>
 8000b32:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <HAL_RCC_OscConfig+0x314>)
 8000b34:	1b80      	subs	r0, r0, r6
 8000b36:	4298      	cmp	r0, r3
 8000b38:	d9f6      	bls.n	8000b28 <HAL_RCC_OscConfig+0x25c>
 8000b3a:	e728      	b.n	800098e <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b3c:	2b05      	cmp	r3, #5
 8000b3e:	d10b      	bne.n	8000b58 <HAL_RCC_OscConfig+0x28c>
 8000b40:	6a21      	ldr	r1, [r4, #32]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	430b      	orrs	r3, r1
 8000b46:	6223      	str	r3, [r4, #32]
 8000b48:	6a23      	ldr	r3, [r4, #32]
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000b4e:	f7ff fba3 	bl	8000298 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b52:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000b54:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b56:	e00d      	b.n	8000b74 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b58:	6a23      	ldr	r3, [r4, #32]
 8000b5a:	4393      	bics	r3, r2
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	6223      	str	r3, [r4, #32]
 8000b60:	6a23      	ldr	r3, [r4, #32]
 8000b62:	4393      	bics	r3, r2
 8000b64:	e7c0      	b.n	8000ae8 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b66:	f7ff fb97 	bl	8000298 <HAL_GetTick>
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <HAL_RCC_OscConfig+0x314>)
 8000b6c:	1b80      	subs	r0, r0, r6
 8000b6e:	4298      	cmp	r0, r3
 8000b70:	d900      	bls.n	8000b74 <HAL_RCC_OscConfig+0x2a8>
 8000b72:	e70c      	b.n	800098e <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b74:	6a23      	ldr	r3, [r4, #32]
 8000b76:	423b      	tst	r3, r7
 8000b78:	d0f5      	beq.n	8000b66 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000b7a:	9b00      	ldr	r3, [sp, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d000      	beq.n	8000b82 <HAL_RCC_OscConfig+0x2b6>
 8000b80:	e6b6      	b.n	80008f0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b82:	69e3      	ldr	r3, [r4, #28]
 8000b84:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <HAL_RCC_OscConfig+0x318>)
 8000b86:	4013      	ands	r3, r2
 8000b88:	61e3      	str	r3, [r4, #28]
 8000b8a:	e6b1      	b.n	80008f0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000b8c:	f7ff fb84 	bl	8000298 <HAL_GetTick>
 8000b90:	1bc0      	subs	r0, r0, r7
 8000b92:	2802      	cmp	r0, #2
 8000b94:	d800      	bhi.n	8000b98 <HAL_RCC_OscConfig+0x2cc>
 8000b96:	e6be      	b.n	8000916 <HAL_RCC_OscConfig+0x4a>
 8000b98:	e6f9      	b.n	800098e <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000b9a:	3205      	adds	r2, #5
 8000b9c:	d103      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000b9e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000ba0:	439a      	bics	r2, r3
 8000ba2:	6362      	str	r2, [r4, #52]	; 0x34
 8000ba4:	e6bb      	b.n	800091e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ba6:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ba8:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000baa:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000bac:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bae:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000bb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000bb2:	4393      	bics	r3, r2
 8000bb4:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000bb6:	f7ff fb6f 	bl	8000298 <HAL_GetTick>
 8000bba:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000bbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000bbe:	4233      	tst	r3, r6
 8000bc0:	d100      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x2f8>
 8000bc2:	e6b3      	b.n	800092c <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bc4:	f7ff fb68 	bl	8000298 <HAL_GetTick>
 8000bc8:	1bc0      	subs	r0, r0, r7
 8000bca:	2802      	cmp	r0, #2
 8000bcc:	d9f6      	bls.n	8000bbc <HAL_RCC_OscConfig+0x2f0>
 8000bce:	e6de      	b.n	800098e <HAL_RCC_OscConfig+0xc2>
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	fffeffff 	.word	0xfffeffff
 8000bd8:	fffbffff 	.word	0xfffbffff
 8000bdc:	40007000 	.word	0x40007000
 8000be0:	00001388 	.word	0x00001388
 8000be4:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000be8:	220c      	movs	r2, #12
 8000bea:	4c26      	ldr	r4, [pc, #152]	; (8000c84 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000bec:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bee:	6863      	ldr	r3, [r4, #4]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	2b08      	cmp	r3, #8
 8000bf4:	d100      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x32c>
 8000bf6:	e6b3      	b.n	8000960 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000bf8:	6823      	ldr	r3, [r4, #0]
 8000bfa:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <HAL_RCC_OscConfig+0x3bc>)
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c00:	2902      	cmp	r1, #2
 8000c02:	d12f      	bne.n	8000c64 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000c04:	f7ff fb48 	bl	8000298 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c08:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c0a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c0c:	04b6      	lsls	r6, r6, #18
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	4233      	tst	r3, r6
 8000c12:	d121      	bne.n	8000c58 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c14:	220f      	movs	r2, #15
 8000c16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c18:	4393      	bics	r3, r2
 8000c1a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c20:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000c22:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c24:	6862      	ldr	r2, [r4, #4]
 8000c26:	430b      	orrs	r3, r1
 8000c28:	4918      	ldr	r1, [pc, #96]	; (8000c8c <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c2a:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c2c:	400a      	ands	r2, r1
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	6822      	ldr	r2, [r4, #0]
 8000c36:	045b      	lsls	r3, r3, #17
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c3c:	f7ff fb2c 	bl	8000298 <HAL_GetTick>
 8000c40:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c42:	04ad      	lsls	r5, r5, #18
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	422b      	tst	r3, r5
 8000c48:	d000      	beq.n	8000c4c <HAL_RCC_OscConfig+0x380>
 8000c4a:	e673      	b.n	8000934 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c4c:	f7ff fb24 	bl	8000298 <HAL_GetTick>
 8000c50:	1b80      	subs	r0, r0, r6
 8000c52:	2802      	cmp	r0, #2
 8000c54:	d9f6      	bls.n	8000c44 <HAL_RCC_OscConfig+0x378>
 8000c56:	e69a      	b.n	800098e <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c58:	f7ff fb1e 	bl	8000298 <HAL_GetTick>
 8000c5c:	1bc0      	subs	r0, r0, r7
 8000c5e:	2802      	cmp	r0, #2
 8000c60:	d9d5      	bls.n	8000c0e <HAL_RCC_OscConfig+0x342>
 8000c62:	e694      	b.n	800098e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000c64:	f7ff fb18 	bl	8000298 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c68:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c6a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c6c:	04ad      	lsls	r5, r5, #18
 8000c6e:	6823      	ldr	r3, [r4, #0]
 8000c70:	422b      	tst	r3, r5
 8000c72:	d100      	bne.n	8000c76 <HAL_RCC_OscConfig+0x3aa>
 8000c74:	e65e      	b.n	8000934 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c76:	f7ff fb0f 	bl	8000298 <HAL_GetTick>
 8000c7a:	1b80      	subs	r0, r0, r6
 8000c7c:	2802      	cmp	r0, #2
 8000c7e:	d9f6      	bls.n	8000c6e <HAL_RCC_OscConfig+0x3a2>
 8000c80:	e685      	b.n	800098e <HAL_RCC_OscConfig+0xc2>
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	40021000 	.word	0x40021000
 8000c88:	feffffff 	.word	0xfeffffff
 8000c8c:	ffc2ffff 	.word	0xffc2ffff

08000c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000c90:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000c92:	4c14      	ldr	r4, [pc, #80]	; (8000ce4 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000c94:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000c96:	2210      	movs	r2, #16
 8000c98:	0021      	movs	r1, r4
 8000c9a:	4668      	mov	r0, sp
 8000c9c:	f000 fcc4 	bl	8001628 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000ca0:	0021      	movs	r1, r4
 8000ca2:	ad04      	add	r5, sp, #16
 8000ca4:	2210      	movs	r2, #16
 8000ca6:	3110      	adds	r1, #16
 8000ca8:	0028      	movs	r0, r5
 8000caa:	f000 fcbd 	bl	8001628 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000cae:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000cb0:	4e0d      	ldr	r6, [pc, #52]	; (8000ce8 <HAL_RCC_GetSysClockFreq+0x58>)
 8000cb2:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	2a08      	cmp	r2, #8
 8000cb8:	d111      	bne.n	8000cde <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000cba:	200f      	movs	r0, #15
 8000cbc:	466a      	mov	r2, sp
 8000cbe:	0c99      	lsrs	r1, r3, #18
 8000cc0:	4001      	ands	r1, r0
 8000cc2:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000cc4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000cc6:	4002      	ands	r2, r0
 8000cc8:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000cca:	03db      	lsls	r3, r3, #15
 8000ccc:	d505      	bpl.n	8000cda <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000cce:	4807      	ldr	r0, [pc, #28]	; (8000cec <HAL_RCC_GetSysClockFreq+0x5c>)
 8000cd0:	f7ff fa2c 	bl	800012c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000cd4:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000cd6:	b008      	add	sp, #32
 8000cd8:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <HAL_RCC_GetSysClockFreq+0x60>)
 8000cdc:	e7fa      	b.n	8000cd4 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000cde:	4803      	ldr	r0, [pc, #12]	; (8000cec <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000ce0:	e7f9      	b.n	8000cd6 <HAL_RCC_GetSysClockFreq+0x46>
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	08001ea4 	.word	0x08001ea4
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	007a1200 	.word	0x007a1200
 8000cf0:	003d0900 	.word	0x003d0900

08000cf4 <HAL_RCC_ClockConfig>:
{
 8000cf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4c43      	ldr	r4, [pc, #268]	; (8000e08 <HAL_RCC_ClockConfig+0x114>)
{
 8000cfa:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cfc:	6823      	ldr	r3, [r4, #0]
{
 8000cfe:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d00:	4013      	ands	r3, r2
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d31c      	bcc.n	8000d40 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d06:	6832      	ldr	r2, [r6, #0]
 8000d08:	0793      	lsls	r3, r2, #30
 8000d0a:	d423      	bmi.n	8000d54 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d0c:	07d3      	lsls	r3, r2, #31
 8000d0e:	d429      	bmi.n	8000d64 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d10:	2301      	movs	r3, #1
 8000d12:	6822      	ldr	r2, [r4, #0]
 8000d14:	401a      	ands	r2, r3
 8000d16:	4297      	cmp	r7, r2
 8000d18:	d367      	bcc.n	8000dea <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d1a:	6833      	ldr	r3, [r6, #0]
 8000d1c:	4c3b      	ldr	r4, [pc, #236]	; (8000e0c <HAL_RCC_ClockConfig+0x118>)
 8000d1e:	075b      	lsls	r3, r3, #29
 8000d20:	d46a      	bmi.n	8000df8 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d22:	f7ff ffb5 	bl	8000c90 <HAL_RCC_GetSysClockFreq>
 8000d26:	6863      	ldr	r3, [r4, #4]
 8000d28:	4a39      	ldr	r2, [pc, #228]	; (8000e10 <HAL_RCC_ClockConfig+0x11c>)
 8000d2a:	061b      	lsls	r3, r3, #24
 8000d2c:	0f1b      	lsrs	r3, r3, #28
 8000d2e:	5cd3      	ldrb	r3, [r2, r3]
 8000d30:	40d8      	lsrs	r0, r3
 8000d32:	4b38      	ldr	r3, [pc, #224]	; (8000e14 <HAL_RCC_ClockConfig+0x120>)
 8000d34:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff fa84 	bl	8000244 <HAL_InitTick>
  return HAL_OK;
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	e008      	b.n	8000d52 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d40:	6823      	ldr	r3, [r4, #0]
 8000d42:	4393      	bics	r3, r2
 8000d44:	430b      	orrs	r3, r1
 8000d46:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d48:	6823      	ldr	r3, [r4, #0]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	d0da      	beq.n	8000d06 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000d50:	2001      	movs	r0, #1
}
 8000d52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d54:	20f0      	movs	r0, #240	; 0xf0
 8000d56:	492d      	ldr	r1, [pc, #180]	; (8000e0c <HAL_RCC_ClockConfig+0x118>)
 8000d58:	684b      	ldr	r3, [r1, #4]
 8000d5a:	4383      	bics	r3, r0
 8000d5c:	68b0      	ldr	r0, [r6, #8]
 8000d5e:	4303      	orrs	r3, r0
 8000d60:	604b      	str	r3, [r1, #4]
 8000d62:	e7d3      	b.n	8000d0c <HAL_RCC_ClockConfig+0x18>
 8000d64:	4d29      	ldr	r5, [pc, #164]	; (8000e0c <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d66:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d68:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d6a:	2a01      	cmp	r2, #1
 8000d6c:	d11a      	bne.n	8000da4 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6e:	039b      	lsls	r3, r3, #14
 8000d70:	d5ee      	bpl.n	8000d50 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d72:	2103      	movs	r1, #3
 8000d74:	686b      	ldr	r3, [r5, #4]
 8000d76:	438b      	bics	r3, r1
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000d7c:	f7ff fa8c 	bl	8000298 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d80:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d82:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d115      	bne.n	8000db4 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d88:	220c      	movs	r2, #12
 8000d8a:	686b      	ldr	r3, [r5, #4]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	d0be      	beq.n	8000d10 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d92:	f7ff fa81 	bl	8000298 <HAL_GetTick>
 8000d96:	9b01      	ldr	r3, [sp, #4]
 8000d98:	1ac0      	subs	r0, r0, r3
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <HAL_RCC_ClockConfig+0x124>)
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	d9f3      	bls.n	8000d88 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000da0:	2003      	movs	r0, #3
 8000da2:	e7d6      	b.n	8000d52 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000da4:	2a02      	cmp	r2, #2
 8000da6:	d102      	bne.n	8000dae <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000da8:	019b      	lsls	r3, r3, #6
 8000daa:	d4e2      	bmi.n	8000d72 <HAL_RCC_ClockConfig+0x7e>
 8000dac:	e7d0      	b.n	8000d50 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dae:	079b      	lsls	r3, r3, #30
 8000db0:	d4df      	bmi.n	8000d72 <HAL_RCC_ClockConfig+0x7e>
 8000db2:	e7cd      	b.n	8000d50 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d012      	beq.n	8000dde <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000db8:	220c      	movs	r2, #12
 8000dba:	686b      	ldr	r3, [r5, #4]
 8000dbc:	4213      	tst	r3, r2
 8000dbe:	d0a7      	beq.n	8000d10 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dc0:	f7ff fa6a 	bl	8000298 <HAL_GetTick>
 8000dc4:	9b01      	ldr	r3, [sp, #4]
 8000dc6:	1ac0      	subs	r0, r0, r3
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <HAL_RCC_ClockConfig+0x124>)
 8000dca:	4298      	cmp	r0, r3
 8000dcc:	d9f4      	bls.n	8000db8 <HAL_RCC_ClockConfig+0xc4>
 8000dce:	e7e7      	b.n	8000da0 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dd0:	f7ff fa62 	bl	8000298 <HAL_GetTick>
 8000dd4:	9b01      	ldr	r3, [sp, #4]
 8000dd6:	1ac0      	subs	r0, r0, r3
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_RCC_ClockConfig+0x124>)
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d8e0      	bhi.n	8000da0 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dde:	220c      	movs	r2, #12
 8000de0:	686b      	ldr	r3, [r5, #4]
 8000de2:	4013      	ands	r3, r2
 8000de4:	2b08      	cmp	r3, #8
 8000de6:	d1f3      	bne.n	8000dd0 <HAL_RCC_ClockConfig+0xdc>
 8000de8:	e792      	b.n	8000d10 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dea:	6822      	ldr	r2, [r4, #0]
 8000dec:	439a      	bics	r2, r3
 8000dee:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000df0:	6822      	ldr	r2, [r4, #0]
 8000df2:	421a      	tst	r2, r3
 8000df4:	d1ac      	bne.n	8000d50 <HAL_RCC_ClockConfig+0x5c>
 8000df6:	e790      	b.n	8000d1a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000df8:	6863      	ldr	r3, [r4, #4]
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_RCC_ClockConfig+0x128>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	68f2      	ldr	r2, [r6, #12]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	6063      	str	r3, [r4, #4]
 8000e04:	e78d      	b.n	8000d22 <HAL_RCC_ClockConfig+0x2e>
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	40022000 	.word	0x40022000
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	08001ed8 	.word	0x08001ed8
 8000e14:	20000000 	.word	0x20000000
 8000e18:	00001388 	.word	0x00001388
 8000e1c:	fffff8ff 	.word	0xfffff8ff

08000e20 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000e20:	4b01      	ldr	r3, [pc, #4]	; (8000e28 <HAL_RCC_GetHCLKFreq+0x8>)
 8000e22:	6818      	ldr	r0, [r3, #0]
}
 8000e24:	4770      	bx	lr
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	20000000 	.word	0x20000000

08000e2c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	055b      	lsls	r3, r3, #21
 8000e34:	0f5b      	lsrs	r3, r3, #29
 8000e36:	5cd3      	ldrb	r3, [r2, r3]
 8000e38:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e3a:	6810      	ldr	r0, [r2, #0]
 8000e3c:	40d8      	lsrs	r0, r3
}    
 8000e3e:	4770      	bx	lr
 8000e40:	40021000 	.word	0x40021000
 8000e44:	08001ee8 	.word	0x08001ee8
 8000e48:	20000000 	.word	0x20000000

08000e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e4e:	6803      	ldr	r3, [r0, #0]
{
 8000e50:	b085      	sub	sp, #20
 8000e52:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e54:	03db      	lsls	r3, r3, #15
 8000e56:	d528      	bpl.n	8000eaa <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e58:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000e5a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e5c:	4c37      	ldr	r4, [pc, #220]	; (8000f3c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000e5e:	0552      	lsls	r2, r2, #21
 8000e60:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000e62:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e64:	4213      	tst	r3, r2
 8000e66:	d108      	bne.n	8000e7a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e68:	69e3      	ldr	r3, [r4, #28]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61e3      	str	r3, [r4, #28]
 8000e6e:	69e3      	ldr	r3, [r4, #28]
 8000e70:	4013      	ands	r3, r2
 8000e72:	9303      	str	r3, [sp, #12]
 8000e74:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000e76:	2301      	movs	r3, #1
 8000e78:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7a:	2780      	movs	r7, #128	; 0x80
 8000e7c:	4e30      	ldr	r6, [pc, #192]	; (8000f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8000e7e:	007f      	lsls	r7, r7, #1
 8000e80:	6833      	ldr	r3, [r6, #0]
 8000e82:	423b      	tst	r3, r7
 8000e84:	d026      	beq.n	8000ed4 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000e86:	22c0      	movs	r2, #192	; 0xc0
 8000e88:	6a23      	ldr	r3, [r4, #32]
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	4e2d      	ldr	r6, [pc, #180]	; (8000f44 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e90:	d132      	bne.n	8000ef8 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000e92:	6a23      	ldr	r3, [r4, #32]
 8000e94:	401e      	ands	r6, r3
 8000e96:	686b      	ldr	r3, [r5, #4]
 8000e98:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e9a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000e9c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d103      	bne.n	8000eaa <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ea2:	69e3      	ldr	r3, [r4, #28]
 8000ea4:	4a28      	ldr	r2, [pc, #160]	; (8000f48 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000eaa:	682a      	ldr	r2, [r5, #0]
 8000eac:	07d3      	lsls	r3, r2, #31
 8000eae:	d506      	bpl.n	8000ebe <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	4922      	ldr	r1, [pc, #136]	; (8000f3c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000eb4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000eb6:	4383      	bics	r3, r0
 8000eb8:	68a8      	ldr	r0, [r5, #8]
 8000eba:	4303      	orrs	r3, r0
 8000ebc:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000ebe:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000ec0:	0693      	lsls	r3, r2, #26
 8000ec2:	d517      	bpl.n	8000ef4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000ec4:	2110      	movs	r1, #16
 8000ec6:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000ec8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000eca:	438b      	bics	r3, r1
 8000ecc:	68e9      	ldr	r1, [r5, #12]
 8000ece:	430b      	orrs	r3, r1
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	e00f      	b.n	8000ef4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ed4:	6833      	ldr	r3, [r6, #0]
 8000ed6:	433b      	orrs	r3, r7
 8000ed8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000eda:	f7ff f9dd 	bl	8000298 <HAL_GetTick>
 8000ede:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee0:	6833      	ldr	r3, [r6, #0]
 8000ee2:	423b      	tst	r3, r7
 8000ee4:	d1cf      	bne.n	8000e86 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ee6:	f7ff f9d7 	bl	8000298 <HAL_GetTick>
 8000eea:	9b01      	ldr	r3, [sp, #4]
 8000eec:	1ac0      	subs	r0, r0, r3
 8000eee:	2864      	cmp	r0, #100	; 0x64
 8000ef0:	d9f6      	bls.n	8000ee0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8000ef2:	2003      	movs	r0, #3
}
 8000ef4:	b005      	add	sp, #20
 8000ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000ef8:	6869      	ldr	r1, [r5, #4]
 8000efa:	400a      	ands	r2, r1
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d0c8      	beq.n	8000e92 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f00:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f02:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f04:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f06:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f08:	025b      	lsls	r3, r3, #9
 8000f0a:	4303      	orrs	r3, r0
 8000f0c:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f0e:	6a23      	ldr	r3, [r4, #32]
 8000f10:	480e      	ldr	r0, [pc, #56]	; (8000f4c <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f12:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f14:	4003      	ands	r3, r0
 8000f16:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000f18:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000f1a:	07d3      	lsls	r3, r2, #31
 8000f1c:	d5b9      	bpl.n	8000e92 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000f1e:	f7ff f9bb 	bl	8000298 <HAL_GetTick>
 8000f22:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f24:	2202      	movs	r2, #2
 8000f26:	6a23      	ldr	r3, [r4, #32]
 8000f28:	4213      	tst	r3, r2
 8000f2a:	d1b2      	bne.n	8000e92 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f2c:	f7ff f9b4 	bl	8000298 <HAL_GetTick>
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000f32:	1bc0      	subs	r0, r0, r7
 8000f34:	4298      	cmp	r0, r3
 8000f36:	d9f5      	bls.n	8000f24 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8000f38:	e7db      	b.n	8000ef2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40007000 	.word	0x40007000
 8000f44:	fffffcff 	.word	0xfffffcff
 8000f48:	efffffff 	.word	0xefffffff
 8000f4c:	fffeffff 	.word	0xfffeffff
 8000f50:	00001388 	.word	0x00001388

08000f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f54:	b570      	push	{r4, r5, r6, lr}
 8000f56:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f58:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f5a:	69c2      	ldr	r2, [r0, #28]
 8000f5c:	6883      	ldr	r3, [r0, #8]
 8000f5e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f60:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f62:	4303      	orrs	r3, r0
 8000f64:	6960      	ldr	r0, [r4, #20]
 8000f66:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f68:	4835      	ldr	r0, [pc, #212]	; (8001040 <UART_SetConfig+0xec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f6a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f6c:	4001      	ands	r1, r0
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f72:	686b      	ldr	r3, [r5, #4]
 8000f74:	4933      	ldr	r1, [pc, #204]	; (8001044 <UART_SetConfig+0xf0>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f76:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f78:	400b      	ands	r3, r1
 8000f7a:	68e1      	ldr	r1, [r4, #12]
 8000f7c:	430b      	orrs	r3, r1
 8000f7e:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f80:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f82:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f84:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f86:	4830      	ldr	r0, [pc, #192]	; (8001048 <UART_SetConfig+0xf4>)
 8000f88:	4001      	ands	r1, r0
 8000f8a:	430b      	orrs	r3, r1

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f8c:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f8e:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f90:	4b2e      	ldr	r3, [pc, #184]	; (800104c <UART_SetConfig+0xf8>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	400b      	ands	r3, r1
 8000f96:	492e      	ldr	r1, [pc, #184]	; (8001050 <UART_SetConfig+0xfc>)
 8000f98:	5cc8      	ldrb	r0, [r1, r3]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d12c      	bne.n	8000ffc <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8000fa2:	2808      	cmp	r0, #8
 8000fa4:	d827      	bhi.n	8000ff6 <UART_SetConfig+0xa2>
 8000fa6:	f7ff f8b7 	bl	8000118 <__gnu_thumb1_case_uqi>
 8000faa:	2605      	.short	0x2605
 8000fac:	261e260b 	.word	0x261e260b
 8000fb0:	2626      	.short	0x2626
 8000fb2:	21          	.byte	0x21
 8000fb3:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000fb4:	f7ff ff3a 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000fb8:	6863      	ldr	r3, [r4, #4]
 8000fba:	0040      	lsls	r0, r0, #1
 8000fbc:	085b      	lsrs	r3, r3, #1
 8000fbe:	e002      	b.n	8000fc6 <UART_SetConfig+0x72>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000fc0:	6863      	ldr	r3, [r4, #4]
 8000fc2:	0858      	lsrs	r0, r3, #1
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <UART_SetConfig+0x100>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000fc6:	18c0      	adds	r0, r0, r3
 8000fc8:	6861      	ldr	r1, [r4, #4]
 8000fca:	f7ff f8af 	bl	800012c <__udivsi3>
 8000fce:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8000fd0:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	0019      	movs	r1, r3
 8000fd6:	4391      	bics	r1, r2
 8000fd8:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000fda:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8000fdc:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000fde:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 8000fe4:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000fe6:	f7ff fe53 	bl	8000c90 <HAL_RCC_GetSysClockFreq>
 8000fea:	e7e5      	b.n	8000fb8 <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000fec:	6863      	ldr	r3, [r4, #4]
 8000fee:	0858      	lsrs	r0, r3, #1
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	025b      	lsls	r3, r3, #9
 8000ff4:	e7e7      	b.n	8000fc6 <UART_SetConfig+0x72>
        ret = HAL_ERROR;
 8000ff6:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e7ea      	b.n	8000fd2 <UART_SetConfig+0x7e>
    switch (clocksource)
 8000ffc:	2808      	cmp	r0, #8
 8000ffe:	d81d      	bhi.n	800103c <UART_SetConfig+0xe8>
 8001000:	f7ff f88a 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001004:	1c0a1c05 	.word	0x1c0a1c05
 8001008:	1c1c1c14 	.word	0x1c1c1c14
 800100c:	17          	.byte	0x17
 800100d:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800100e:	f7ff ff0d 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001012:	6861      	ldr	r1, [r4, #4]
 8001014:	084b      	lsrs	r3, r1, #1
 8001016:	e002      	b.n	800101e <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001018:	6861      	ldr	r1, [r4, #4]
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <UART_SetConfig+0x104>)
 800101c:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800101e:	18c0      	adds	r0, r0, r3
 8001020:	f7ff f884 	bl	800012c <__udivsi3>
 8001024:	b280      	uxth	r0, r0
 8001026:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001028:	2000      	movs	r0, #0
        break;
 800102a:	e7db      	b.n	8000fe4 <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800102c:	f7ff fe30 	bl	8000c90 <HAL_RCC_GetSysClockFreq>
 8001030:	e7ef      	b.n	8001012 <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	6861      	ldr	r1, [r4, #4]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	0848      	lsrs	r0, r1, #1
 800103a:	e7f0      	b.n	800101e <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 800103c:	2001      	movs	r0, #1
 800103e:	e7d1      	b.n	8000fe4 <UART_SetConfig+0x90>
 8001040:	ffff69f3 	.word	0xffff69f3
 8001044:	ffffcfff 	.word	0xffffcfff
 8001048:	fffff4ff 	.word	0xfffff4ff
 800104c:	40021000 	.word	0x40021000
 8001050:	08001ec4 	.word	0x08001ec4
 8001054:	00f42400 	.word	0x00f42400
 8001058:	007a1200 	.word	0x007a1200

0800105c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800105c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800105e:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001060:	07da      	lsls	r2, r3, #31
 8001062:	d506      	bpl.n	8001072 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001064:	6801      	ldr	r1, [r0, #0]
 8001066:	4c28      	ldr	r4, [pc, #160]	; (8001108 <UART_AdvFeatureConfig+0xac>)
 8001068:	684a      	ldr	r2, [r1, #4]
 800106a:	4022      	ands	r2, r4
 800106c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800106e:	4322      	orrs	r2, r4
 8001070:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001072:	079a      	lsls	r2, r3, #30
 8001074:	d506      	bpl.n	8001084 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001076:	6801      	ldr	r1, [r0, #0]
 8001078:	4c24      	ldr	r4, [pc, #144]	; (800110c <UART_AdvFeatureConfig+0xb0>)
 800107a:	684a      	ldr	r2, [r1, #4]
 800107c:	4022      	ands	r2, r4
 800107e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001080:	4322      	orrs	r2, r4
 8001082:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001084:	075a      	lsls	r2, r3, #29
 8001086:	d506      	bpl.n	8001096 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001088:	6801      	ldr	r1, [r0, #0]
 800108a:	4c21      	ldr	r4, [pc, #132]	; (8001110 <UART_AdvFeatureConfig+0xb4>)
 800108c:	684a      	ldr	r2, [r1, #4]
 800108e:	4022      	ands	r2, r4
 8001090:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001092:	4322      	orrs	r2, r4
 8001094:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001096:	071a      	lsls	r2, r3, #28
 8001098:	d506      	bpl.n	80010a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800109a:	6801      	ldr	r1, [r0, #0]
 800109c:	4c1d      	ldr	r4, [pc, #116]	; (8001114 <UART_AdvFeatureConfig+0xb8>)
 800109e:	684a      	ldr	r2, [r1, #4]
 80010a0:	4022      	ands	r2, r4
 80010a2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80010a4:	4322      	orrs	r2, r4
 80010a6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80010a8:	06da      	lsls	r2, r3, #27
 80010aa:	d506      	bpl.n	80010ba <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80010ac:	6801      	ldr	r1, [r0, #0]
 80010ae:	4c1a      	ldr	r4, [pc, #104]	; (8001118 <UART_AdvFeatureConfig+0xbc>)
 80010b0:	688a      	ldr	r2, [r1, #8]
 80010b2:	4022      	ands	r2, r4
 80010b4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80010b6:	4322      	orrs	r2, r4
 80010b8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80010ba:	069a      	lsls	r2, r3, #26
 80010bc:	d506      	bpl.n	80010cc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80010be:	6801      	ldr	r1, [r0, #0]
 80010c0:	4c16      	ldr	r4, [pc, #88]	; (800111c <UART_AdvFeatureConfig+0xc0>)
 80010c2:	688a      	ldr	r2, [r1, #8]
 80010c4:	4022      	ands	r2, r4
 80010c6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80010c8:	4322      	orrs	r2, r4
 80010ca:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80010cc:	065a      	lsls	r2, r3, #25
 80010ce:	d510      	bpl.n	80010f2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80010d0:	6801      	ldr	r1, [r0, #0]
 80010d2:	4d13      	ldr	r5, [pc, #76]	; (8001120 <UART_AdvFeatureConfig+0xc4>)
 80010d4:	684a      	ldr	r2, [r1, #4]
 80010d6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80010d8:	402a      	ands	r2, r5
 80010da:	4322      	orrs	r2, r4
 80010dc:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	0352      	lsls	r2, r2, #13
 80010e2:	4294      	cmp	r4, r2
 80010e4:	d105      	bne.n	80010f2 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80010e6:	684a      	ldr	r2, [r1, #4]
 80010e8:	4c0e      	ldr	r4, [pc, #56]	; (8001124 <UART_AdvFeatureConfig+0xc8>)
 80010ea:	4022      	ands	r2, r4
 80010ec:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80010ee:	4322      	orrs	r2, r4
 80010f0:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80010f2:	061b      	lsls	r3, r3, #24
 80010f4:	d506      	bpl.n	8001104 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80010f6:	6802      	ldr	r2, [r0, #0]
 80010f8:	490b      	ldr	r1, [pc, #44]	; (8001128 <UART_AdvFeatureConfig+0xcc>)
 80010fa:	6853      	ldr	r3, [r2, #4]
 80010fc:	400b      	ands	r3, r1
 80010fe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001100:	430b      	orrs	r3, r1
 8001102:	6053      	str	r3, [r2, #4]
  }
}
 8001104:	bd30      	pop	{r4, r5, pc}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	fffdffff 	.word	0xfffdffff
 800110c:	fffeffff 	.word	0xfffeffff
 8001110:	fffbffff 	.word	0xfffbffff
 8001114:	ffff7fff 	.word	0xffff7fff
 8001118:	ffffefff 	.word	0xffffefff
 800111c:	ffffdfff 	.word	0xffffdfff
 8001120:	ffefffff 	.word	0xffefffff
 8001124:	ff9fffff 	.word	0xff9fffff
 8001128:	fff7ffff 	.word	0xfff7ffff

0800112c <HAL_HalfDuplex_Init>:
{
 800112c:	b570      	push	{r4, r5, r6, lr}
 800112e:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001130:	d101      	bne.n	8001136 <HAL_HalfDuplex_Init+0xa>
    return HAL_ERROR;
 8001132:	2001      	movs	r0, #1
}
 8001134:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001136:	0005      	movs	r5, r0
 8001138:	3569      	adds	r5, #105	; 0x69
 800113a:	782b      	ldrb	r3, [r5, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d104      	bne.n	800114c <HAL_HalfDuplex_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8001142:	0002      	movs	r2, r0
 8001144:	3268      	adds	r2, #104	; 0x68
 8001146:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001148:	f000 f9c2 	bl	80014d0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800114c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800114e:	2101      	movs	r1, #1
 8001150:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001152:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001154:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001156:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001158:	438b      	bics	r3, r1
 800115a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800115c:	f7ff fefa 	bl	8000f54 <UART_SetConfig>
 8001160:	2801      	cmp	r0, #1
 8001162:	d0e6      	beq.n	8001132 <HAL_HalfDuplex_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001164:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <HAL_HalfDuplex_Init+0x44>
    UART_AdvFeatureConfig(huart);
 800116a:	0020      	movs	r0, r4
 800116c:	f7ff ff76 	bl	800105c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	490b      	ldr	r1, [pc, #44]	; (80011a0 <HAL_HalfDuplex_Init+0x74>)
 8001174:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001176:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001178:	400a      	ands	r2, r1
 800117a:	605a      	str	r2, [r3, #4]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800117c:	2208      	movs	r2, #8
 800117e:	6899      	ldr	r1, [r3, #8]
 8001180:	430a      	orrs	r2, r1
 8001182:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001184:	2201      	movs	r2, #1
 8001186:	6819      	ldr	r1, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 800118c:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 800118e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001190:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8001192:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001194:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001196:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001198:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 800119a:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 800119c:	e7ca      	b.n	8001134 <HAL_HalfDuplex_Init+0x8>
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	fffff7ff 	.word	0xfffff7ff

080011a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80011a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a6:	0004      	movs	r4, r0
 80011a8:	000e      	movs	r6, r1
 80011aa:	0015      	movs	r5, r2
 80011ac:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011ae:	6822      	ldr	r2, [r4, #0]
 80011b0:	69d3      	ldr	r3, [r2, #28]
 80011b2:	4033      	ands	r3, r6
 80011b4:	1b9b      	subs	r3, r3, r6
 80011b6:	4259      	negs	r1, r3
 80011b8:	414b      	adcs	r3, r1
 80011ba:	42ab      	cmp	r3, r5
 80011bc:	d001      	beq.n	80011c2 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80011be:	2000      	movs	r0, #0
 80011c0:	e018      	b.n	80011f4 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 80011c2:	9b06      	ldr	r3, [sp, #24]
 80011c4:	3301      	adds	r3, #1
 80011c6:	d0f3      	beq.n	80011b0 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80011c8:	9b06      	ldr	r3, [sp, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d113      	bne.n	80011f6 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <UART_WaitOnFlagUntilTimeout+0x60>)
 80011d2:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 80011d4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80011d6:	400a      	ands	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	31a3      	adds	r1, #163	; 0xa3
 80011de:	31ff      	adds	r1, #255	; 0xff
 80011e0:	438a      	bics	r2, r1
 80011e2:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80011e4:	0022      	movs	r2, r4
 80011e6:	2320      	movs	r3, #32
 80011e8:	3269      	adds	r2, #105	; 0x69
 80011ea:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 80011ec:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 80011ee:	2300      	movs	r3, #0
 80011f0:	3468      	adds	r4, #104	; 0x68
 80011f2:	7023      	strb	r3, [r4, #0]
}
 80011f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80011f6:	f7ff f84f 	bl	8000298 <HAL_GetTick>
 80011fa:	9b06      	ldr	r3, [sp, #24]
 80011fc:	1bc0      	subs	r0, r0, r7
 80011fe:	4283      	cmp	r3, r0
 8001200:	d2d5      	bcs.n	80011ae <UART_WaitOnFlagUntilTimeout+0xa>
 8001202:	e7e4      	b.n	80011ce <UART_WaitOnFlagUntilTimeout+0x2a>
 8001204:	fffffe5f 	.word	0xfffffe5f

08001208 <HAL_UART_Transmit>:
{
 8001208:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 800120a:	0007      	movs	r7, r0
{
 800120c:	b085      	sub	sp, #20
 800120e:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 8001210:	3769      	adds	r7, #105	; 0x69
 8001212:	783b      	ldrb	r3, [r7, #0]
{
 8001214:	0004      	movs	r4, r0
 8001216:	000d      	movs	r5, r1
 8001218:	0016      	movs	r6, r2
    return HAL_BUSY;
 800121a:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 800121c:	2b20      	cmp	r3, #32
 800121e:	d146      	bne.n	80012ae <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 8001220:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8001222:	2900      	cmp	r1, #0
 8001224:	d043      	beq.n	80012ae <HAL_UART_Transmit+0xa6>
 8001226:	2a00      	cmp	r2, #0
 8001228:	d041      	beq.n	80012ae <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	68a2      	ldr	r2, [r4, #8]
 800122e:	015b      	lsls	r3, r3, #5
 8001230:	429a      	cmp	r2, r3
 8001232:	d104      	bne.n	800123e <HAL_UART_Transmit+0x36>
 8001234:	6923      	ldr	r3, [r4, #16]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 800123a:	4201      	tst	r1, r0
 800123c:	d137      	bne.n	80012ae <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800123e:	0023      	movs	r3, r4
 8001240:	3368      	adds	r3, #104	; 0x68
 8001242:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001244:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001246:	2a01      	cmp	r2, #1
 8001248:	d031      	beq.n	80012ae <HAL_UART_Transmit+0xa6>
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800124e:	2300      	movs	r3, #0
 8001250:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001252:	3321      	adds	r3, #33	; 0x21
 8001254:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001256:	f7ff f81f 	bl	8000298 <HAL_GetTick>
    huart->TxXferSize = Size;
 800125a:	0023      	movs	r3, r4
 800125c:	3350      	adds	r3, #80	; 0x50
 800125e:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8001260:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001262:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8001264:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001266:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8001268:	0021      	movs	r1, r4
 800126a:	3152      	adds	r1, #82	; 0x52
 800126c:	880a      	ldrh	r2, [r1, #0]
 800126e:	b292      	uxth	r2, r2
 8001270:	2a00      	cmp	r2, #0
 8001272:	d10d      	bne.n	8001290 <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001274:	9b03      	ldr	r3, [sp, #12]
 8001276:	2140      	movs	r1, #64	; 0x40
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	0020      	movs	r0, r4
 800127c:	9b02      	ldr	r3, [sp, #8]
 800127e:	f7ff ff91 	bl	80011a4 <UART_WaitOnFlagUntilTimeout>
 8001282:	2800      	cmp	r0, #0
 8001284:	d112      	bne.n	80012ac <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 8001286:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001288:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 800128a:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 800128c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800128e:	e00e      	b.n	80012ae <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8001290:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001292:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8001294:	3b01      	subs	r3, #1
 8001296:	b29b      	uxth	r3, r3
 8001298:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800129a:	9b03      	ldr	r3, [sp, #12]
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	0020      	movs	r0, r4
 80012a2:	9b02      	ldr	r3, [sp, #8]
 80012a4:	f7ff ff7e 	bl	80011a4 <UART_WaitOnFlagUntilTimeout>
 80012a8:	2800      	cmp	r0, #0
 80012aa:	d002      	beq.n	80012b2 <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 80012ac:	2003      	movs	r0, #3
}
 80012ae:	b005      	add	sp, #20
 80012b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012b2:	68a3      	ldr	r3, [r4, #8]
 80012b4:	6822      	ldr	r2, [r4, #0]
 80012b6:	42b3      	cmp	r3, r6
 80012b8:	d108      	bne.n	80012cc <HAL_UART_Transmit+0xc4>
 80012ba:	6923      	ldr	r3, [r4, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d105      	bne.n	80012cc <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80012c0:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 80012c2:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80012c4:	05db      	lsls	r3, r3, #23
 80012c6:	0ddb      	lsrs	r3, r3, #23
 80012c8:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80012ca:	e7cd      	b.n	8001268 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80012cc:	782b      	ldrb	r3, [r5, #0]
 80012ce:	3501      	adds	r5, #1
 80012d0:	8513      	strh	r3, [r2, #40]	; 0x28
 80012d2:	e7c9      	b.n	8001268 <HAL_UART_Transmit+0x60>

080012d4 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80012d4:	2312      	movs	r3, #18
{
 80012d6:	b530      	push	{r4, r5, lr}
 80012d8:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80012da:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80012dc:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80012de:	3b02      	subs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e0:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80012e2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80012e4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e8:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80012ea:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ec:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ee:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80012f0:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f2:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80012f6:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80012f8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fa:	f7ff fae7 	bl	80008cc <HAL_RCC_OscConfig>
 80012fe:	2800      	cmp	r0, #0
 8001300:	d000      	beq.n	8001304 <SystemClock_Config+0x30>
 8001302:	e7fe      	b.n	8001302 <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001306:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001308:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800130a:	0021      	movs	r1, r4
 800130c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001310:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001312:	f7ff fcef 	bl	8000cf4 <HAL_RCC_ClockConfig>
 8001316:	2800      	cmp	r0, #0
 8001318:	d000      	beq.n	800131c <SystemClock_Config+0x48>
 800131a:	e7fe      	b.n	800131a <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800131c:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131e:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001320:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001322:	f7ff fd93 	bl	8000e4c <HAL_RCCEx_PeriphCLKConfig>
 8001326:	1e04      	subs	r4, r0, #0
 8001328:	d000      	beq.n	800132c <SystemClock_Config+0x58>
 800132a:	e7fe      	b.n	800132a <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800132c:	f7ff fd78 	bl	8000e20 <HAL_RCC_GetHCLKFreq>
 8001330:	21fa      	movs	r1, #250	; 0xfa
 8001332:	0089      	lsls	r1, r1, #2
 8001334:	f7fe fefa 	bl	800012c <__udivsi3>
 8001338:	f7ff f9ea 	bl	8000710 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800133c:	2004      	movs	r0, #4
 800133e:	f7ff fa01 	bl	8000744 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001342:	2001      	movs	r0, #1
 8001344:	0022      	movs	r2, r4
 8001346:	0021      	movs	r1, r4
 8001348:	4240      	negs	r0, r0
 800134a:	f7ff f9b1 	bl	80006b0 <HAL_NVIC_SetPriority>
}
 800134e:	b015      	add	sp, #84	; 0x54
 8001350:	bd30      	pop	{r4, r5, pc}
	...

08001354 <main>:
{
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	b085      	sub	sp, #20
  HAL_Init();
 8001358:	f7fe ff86 	bl	8000268 <HAL_Init>
  SystemClock_Config();
 800135c:	f7ff ffba 	bl	80012d4 <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	2080      	movs	r0, #128	; 0x80
 8001362:	4a34      	ldr	r2, [pc, #208]	; (8001434 <main+0xe0>)
 8001364:	0280      	lsls	r0, r0, #10
 8001366:	6951      	ldr	r1, [r2, #20]
  huart1.Instance = USART1;
 8001368:	4d33      	ldr	r5, [pc, #204]	; (8001438 <main+0xe4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4301      	orrs	r1, r0
 800136c:	6151      	str	r1, [r2, #20]
 800136e:	6953      	ldr	r3, [r2, #20]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001370:	220c      	movs	r2, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4003      	ands	r3, r0
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	9b00      	ldr	r3, [sp, #0]
  huart1.Instance = USART1;
 8001378:	4b30      	ldr	r3, [pc, #192]	; (800143c <main+0xe8>)
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800137a:	0028      	movs	r0, r5
  huart1.Instance = USART1;
 800137c:	602b      	str	r3, [r5, #0]
  huart1.Init.BaudRate = 38400;
 800137e:	2396      	movs	r3, #150	; 0x96
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	606b      	str	r3, [r5, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001384:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001386:	616a      	str	r2, [r5, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001388:	60ab      	str	r3, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800138a:	60eb      	str	r3, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800138c:	612b      	str	r3, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	61ab      	str	r3, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	61eb      	str	r3, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001392:	622b      	str	r3, [r5, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001394:	626b      	str	r3, [r5, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001396:	f7ff fec9 	bl	800112c <HAL_HalfDuplex_Init>
 800139a:	2800      	cmp	r0, #0
 800139c:	d000      	beq.n	80013a0 <main+0x4c>
 800139e:	e7fe      	b.n	800139e <main+0x4a>
  hadc.Instance = ADC1;
 80013a0:	4c27      	ldr	r4, [pc, #156]	; (8001440 <main+0xec>)
 80013a2:	4b28      	ldr	r3, [pc, #160]	; (8001444 <main+0xf0>)
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80013a4:	2601      	movs	r6, #1
  hadc.Instance = ADC1;
 80013a6:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a8:	2304      	movs	r3, #4
 80013aa:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ac:	23c2      	movs	r3, #194	; 0xc2
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013ae:	6060      	str	r0, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013b0:	60a0      	str	r0, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b2:	60e0      	str	r0, [r4, #12]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80013b4:	61a0      	str	r0, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80013b6:	61e0      	str	r0, [r4, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013b8:	6260      	str	r0, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ba:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013bc:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 80013be:	6320      	str	r0, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80013c0:	0020      	movs	r0, r4
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80013c2:	6126      	str	r6, [r4, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 80013c4:	6226      	str	r6, [r4, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c6:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013c8:	6366      	str	r6, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80013ca:	f7fe ffc7 	bl	800035c <HAL_ADC_Init>
 80013ce:	2800      	cmp	r0, #0
 80013d0:	d000      	beq.n	80013d4 <main+0x80>
 80013d2:	e7fe      	b.n	80013d2 <main+0x7e>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	015b      	lsls	r3, r3, #5
 80013d8:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013da:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013dc:	a901      	add	r1, sp, #4
 80013de:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80013e0:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013e2:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013e4:	f7ff f8ee 	bl	80005c4 <HAL_ADC_ConfigChannel>
 80013e8:	2800      	cmp	r0, #0
 80013ea:	d000      	beq.n	80013ee <main+0x9a>
 80013ec:	e7fe      	b.n	80013ec <main+0x98>
  HAL_ADC_Start(&hadc);
 80013ee:	0020      	movs	r0, r4
	 HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80013f0:	2701      	movs	r7, #1
  HAL_ADC_Start(&hadc);
 80013f2:	f7ff f859 	bl	80004a8 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80013f6:	427f      	negs	r7, r7
 80013f8:	0039      	movs	r1, r7
 80013fa:	0020      	movs	r0, r4
 80013fc:	f7ff f880 	bl	8000500 <HAL_ADC_PollForConversion>
	 adcValue = HAL_ADC_GetValue(&hadc);
 8001400:	0020      	movs	r0, r4
 8001402:	f7ff f8db 	bl	80005bc <HAL_ADC_GetValue>
	 sprintf(msg, "adcValue: %hu\r\n", adcValue);
 8001406:	4e10      	ldr	r6, [pc, #64]	; (8001448 <main+0xf4>)
	 adcValue = HAL_ADC_GetValue(&hadc);
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <main+0xf8>)
	 sprintf(msg, "adcValue: %hu\r\n", adcValue);
 800140a:	b282      	uxth	r2, r0
	 adcValue = HAL_ADC_GetValue(&hadc);
 800140c:	8018      	strh	r0, [r3, #0]
	 sprintf(msg, "adcValue: %hu\r\n", adcValue);
 800140e:	4910      	ldr	r1, [pc, #64]	; (8001450 <main+0xfc>)
 8001410:	0030      	movs	r0, r6
 8001412:	f000 f913 	bl	800163c <siprintf>
     HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001416:	0030      	movs	r0, r6
 8001418:	f7fe fe76 	bl	8000108 <strlen>
 800141c:	003b      	movs	r3, r7
 800141e:	b282      	uxth	r2, r0
 8001420:	0031      	movs	r1, r6
 8001422:	0028      	movs	r0, r5
 8001424:	f7ff fef0 	bl	8001208 <HAL_UART_Transmit>
     HAL_Delay(1000);
 8001428:	20fa      	movs	r0, #250	; 0xfa
 800142a:	0080      	lsls	r0, r0, #2
 800142c:	f7fe ff3a 	bl	80002a4 <HAL_Delay>
 8001430:	e7e2      	b.n	80013f8 <main+0xa4>
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	40021000 	.word	0x40021000
 8001438:	200000b4 	.word	0x200000b4
 800143c:	40013800 	.word	0x40013800
 8001440:	20000128 	.word	0x20000128
 8001444:	40012400 	.word	0x40012400
 8001448:	20000094 	.word	0x20000094
 800144c:	20000124 	.word	0x20000124
 8001450:	08001ec8 	.word	0x08001ec8

08001454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	2001      	movs	r0, #1
 8001458:	4a0c      	ldr	r2, [pc, #48]	; (800148c <HAL_MspInit+0x38>)
 800145a:	6991      	ldr	r1, [r2, #24]
 800145c:	4301      	orrs	r1, r0
 800145e:	6191      	str	r1, [r2, #24]
 8001460:	6993      	ldr	r3, [r2, #24]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001464:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001466:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001468:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800146a:	3806      	subs	r0, #6
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800146e:	f7ff f91f 	bl	80006b0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2002      	movs	r0, #2
 8001476:	0011      	movs	r1, r2
 8001478:	4240      	negs	r0, r0
 800147a:	f7ff f919 	bl	80006b0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2001      	movs	r0, #1
 8001482:	0011      	movs	r1, r2
 8001484:	4240      	negs	r0, r0
 8001486:	f7ff f913 	bl	80006b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bd07      	pop	{r0, r1, r2, pc}
 800148c:	40021000 	.word	0x40021000

08001490 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001490:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_ADC_MspInit+0x38>)
 8001494:	6802      	ldr	r2, [r0, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d114      	bne.n	80014c4 <HAL_ADC_MspInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800149a:	2080      	movs	r0, #128	; 0x80
 800149c:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <HAL_ADC_MspInit+0x3c>)
 800149e:	0080      	lsls	r0, r0, #2
 80014a0:	6991      	ldr	r1, [r2, #24]
 80014a2:	4301      	orrs	r1, r0
 80014a4:	6191      	str	r1, [r2, #24]
 80014a6:	6993      	ldr	r3, [r2, #24]
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014aa:	4003      	ands	r3, r0
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014b0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014b4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b6:	3301      	adds	r3, #1
 80014b8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f7ff f954 	bl	800076c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014c4:	b007      	add	sp, #28
 80014c6:	bd00      	pop	{pc}
 80014c8:	40012400 	.word	0x40012400
 80014cc:	40021000 	.word	0x40021000

080014d0 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_UART_MspInit+0x40>)
 80014d4:	6802      	ldr	r2, [r0, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d117      	bne.n	800150a <HAL_UART_MspInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014da:	2080      	movs	r0, #128	; 0x80
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <HAL_UART_MspInit+0x44>)
 80014de:	01c0      	lsls	r0, r0, #7
 80014e0:	6991      	ldr	r1, [r2, #24]
 80014e2:	4301      	orrs	r1, r0
 80014e4:	6191      	str	r1, [r2, #24]
 80014e6:	6993      	ldr	r3, [r2, #24]
    PA2     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e8:	2203      	movs	r2, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ea:	4003      	ands	r3, r0
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014f0:	2304      	movs	r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014f4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f6:	330e      	adds	r3, #14
 80014f8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fc:	3b11      	subs	r3, #17
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001500:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001502:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001504:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f7ff f931 	bl	800076c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800150a:	b007      	add	sp, #28
 800150c:	bd00      	pop	{pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	40013800 	.word	0x40013800
 8001514:	40021000 	.word	0x40021000

08001518 <NMI_Handler>:
 8001518:	4770      	bx	lr

0800151a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800151a:	e7fe      	b.n	800151a <HardFault_Handler>

0800151c <SVC_Handler>:
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151e:	4770      	bx	lr

08001520 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001520:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001522:	f7fe feb1 	bl	8000288 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001526:	f7ff f91c 	bl	8000762 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152a:	bd10      	pop	{r4, pc}

0800152c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800152c:	2101      	movs	r1, #1
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001530:	4811      	ldr	r0, [pc, #68]	; (8001578 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	4002      	ands	r2, r0
 800153c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	480e      	ldr	r0, [pc, #56]	; (800157c <SystemInit+0x50>)
 8001542:	4002      	ands	r2, r0
 8001544:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	480d      	ldr	r0, [pc, #52]	; (8001580 <SystemInit+0x54>)
 800154a:	4002      	ands	r2, r0
 800154c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	480c      	ldr	r0, [pc, #48]	; (8001584 <SystemInit+0x58>)
 8001552:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001554:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001556:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155a:	4382      	bics	r2, r0
 800155c:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800155e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001560:	4809      	ldr	r0, [pc, #36]	; (8001588 <SystemInit+0x5c>)
 8001562:	4002      	ands	r2, r0
 8001564:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001568:	438a      	bics	r2, r1
 800156a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]

}
 8001570:	4770      	bx	lr
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	40021000 	.word	0x40021000
 8001578:	08ffb80c 	.word	0x08ffb80c
 800157c:	fef6ffff 	.word	0xfef6ffff
 8001580:	fffbffff 	.word	0xfffbffff
 8001584:	ffc0ffff 	.word	0xffc0ffff
 8001588:	fffffeec 	.word	0xfffffeec

0800158c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800158c:	480d      	ldr	r0, [pc, #52]	; (80015c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800158e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001590:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001592:	e003      	b.n	800159c <LoopCopyDataInit>

08001594 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001596:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001598:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800159a:	3104      	adds	r1, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800159c:	480b      	ldr	r0, [pc, #44]	; (80015cc <LoopForever+0xa>)
  ldr r3, =_edata
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <LoopForever+0xe>)
  adds r2, r0, r1
 80015a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015a4:	d3f6      	bcc.n	8001594 <CopyDataInit>
  ldr r2, =_sbss
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <LoopForever+0x12>)
  b LoopFillZerobss
 80015a8:	e002      	b.n	80015b0 <LoopFillZerobss>

080015aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  str  r3, [r2]
 80015ac:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ae:	3204      	adds	r2, #4

080015b0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <LoopForever+0x16>)
  cmp r2, r3
 80015b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015b4:	d3f9      	bcc.n	80015aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80015b6:	f7ff ffb9 	bl	800152c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80015ba:	f000 f811 	bl	80015e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015be:	f7ff fec9 	bl	8001354 <main>

080015c2 <LoopForever>:

LoopForever:
    b LoopForever
 80015c2:	e7fe      	b.n	80015c2 <LoopForever>
  ldr   r0, =_estack
 80015c4:	20001000 	.word	0x20001000
  ldr r3, =_sidata
 80015c8:	08001f2c 	.word	0x08001f2c
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015d0:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 80015d4:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 80015d8:	20000178 	.word	0x20000178

080015dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC1_IRQHandler>
	...

080015e0 <__libc_init_array>:
 80015e0:	b570      	push	{r4, r5, r6, lr}
 80015e2:	2600      	movs	r6, #0
 80015e4:	4d0c      	ldr	r5, [pc, #48]	; (8001618 <__libc_init_array+0x38>)
 80015e6:	4c0d      	ldr	r4, [pc, #52]	; (800161c <__libc_init_array+0x3c>)
 80015e8:	1b64      	subs	r4, r4, r5
 80015ea:	10a4      	asrs	r4, r4, #2
 80015ec:	42a6      	cmp	r6, r4
 80015ee:	d109      	bne.n	8001604 <__libc_init_array+0x24>
 80015f0:	2600      	movs	r6, #0
 80015f2:	f000 fc4b 	bl	8001e8c <_init>
 80015f6:	4d0a      	ldr	r5, [pc, #40]	; (8001620 <__libc_init_array+0x40>)
 80015f8:	4c0a      	ldr	r4, [pc, #40]	; (8001624 <__libc_init_array+0x44>)
 80015fa:	1b64      	subs	r4, r4, r5
 80015fc:	10a4      	asrs	r4, r4, #2
 80015fe:	42a6      	cmp	r6, r4
 8001600:	d105      	bne.n	800160e <__libc_init_array+0x2e>
 8001602:	bd70      	pop	{r4, r5, r6, pc}
 8001604:	00b3      	lsls	r3, r6, #2
 8001606:	58eb      	ldr	r3, [r5, r3]
 8001608:	4798      	blx	r3
 800160a:	3601      	adds	r6, #1
 800160c:	e7ee      	b.n	80015ec <__libc_init_array+0xc>
 800160e:	00b3      	lsls	r3, r6, #2
 8001610:	58eb      	ldr	r3, [r5, r3]
 8001612:	4798      	blx	r3
 8001614:	3601      	adds	r6, #1
 8001616:	e7f2      	b.n	80015fe <__libc_init_array+0x1e>
 8001618:	08001f24 	.word	0x08001f24
 800161c:	08001f24 	.word	0x08001f24
 8001620:	08001f24 	.word	0x08001f24
 8001624:	08001f28 	.word	0x08001f28

08001628 <memcpy>:
 8001628:	2300      	movs	r3, #0
 800162a:	b510      	push	{r4, lr}
 800162c:	429a      	cmp	r2, r3
 800162e:	d100      	bne.n	8001632 <memcpy+0xa>
 8001630:	bd10      	pop	{r4, pc}
 8001632:	5ccc      	ldrb	r4, [r1, r3]
 8001634:	54c4      	strb	r4, [r0, r3]
 8001636:	3301      	adds	r3, #1
 8001638:	e7f8      	b.n	800162c <memcpy+0x4>
	...

0800163c <siprintf>:
 800163c:	b40e      	push	{r1, r2, r3}
 800163e:	b510      	push	{r4, lr}
 8001640:	b09d      	sub	sp, #116	; 0x74
 8001642:	a902      	add	r1, sp, #8
 8001644:	9002      	str	r0, [sp, #8]
 8001646:	6108      	str	r0, [r1, #16]
 8001648:	480b      	ldr	r0, [pc, #44]	; (8001678 <siprintf+0x3c>)
 800164a:	2482      	movs	r4, #130	; 0x82
 800164c:	6088      	str	r0, [r1, #8]
 800164e:	6148      	str	r0, [r1, #20]
 8001650:	2001      	movs	r0, #1
 8001652:	4240      	negs	r0, r0
 8001654:	ab1f      	add	r3, sp, #124	; 0x7c
 8001656:	81c8      	strh	r0, [r1, #14]
 8001658:	4808      	ldr	r0, [pc, #32]	; (800167c <siprintf+0x40>)
 800165a:	cb04      	ldmia	r3!, {r2}
 800165c:	00a4      	lsls	r4, r4, #2
 800165e:	6800      	ldr	r0, [r0, #0]
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	818c      	strh	r4, [r1, #12]
 8001664:	f000 f86e 	bl	8001744 <_svfiprintf_r>
 8001668:	2300      	movs	r3, #0
 800166a:	9a02      	ldr	r2, [sp, #8]
 800166c:	7013      	strb	r3, [r2, #0]
 800166e:	b01d      	add	sp, #116	; 0x74
 8001670:	bc10      	pop	{r4}
 8001672:	bc08      	pop	{r3}
 8001674:	b003      	add	sp, #12
 8001676:	4718      	bx	r3
 8001678:	7fffffff 	.word	0x7fffffff
 800167c:	20000004 	.word	0x20000004

08001680 <__ssputs_r>:
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001682:	688e      	ldr	r6, [r1, #8]
 8001684:	b085      	sub	sp, #20
 8001686:	0007      	movs	r7, r0
 8001688:	000c      	movs	r4, r1
 800168a:	9203      	str	r2, [sp, #12]
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	429e      	cmp	r6, r3
 8001690:	d839      	bhi.n	8001706 <__ssputs_r+0x86>
 8001692:	2390      	movs	r3, #144	; 0x90
 8001694:	898a      	ldrh	r2, [r1, #12]
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	421a      	tst	r2, r3
 800169a:	d034      	beq.n	8001706 <__ssputs_r+0x86>
 800169c:	2503      	movs	r5, #3
 800169e:	6909      	ldr	r1, [r1, #16]
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	1a5b      	subs	r3, r3, r1
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	6963      	ldr	r3, [r4, #20]
 80016a8:	9802      	ldr	r0, [sp, #8]
 80016aa:	435d      	muls	r5, r3
 80016ac:	0feb      	lsrs	r3, r5, #31
 80016ae:	195d      	adds	r5, r3, r5
 80016b0:	9b01      	ldr	r3, [sp, #4]
 80016b2:	106d      	asrs	r5, r5, #1
 80016b4:	3301      	adds	r3, #1
 80016b6:	181b      	adds	r3, r3, r0
 80016b8:	42ab      	cmp	r3, r5
 80016ba:	d900      	bls.n	80016be <__ssputs_r+0x3e>
 80016bc:	001d      	movs	r5, r3
 80016be:	0553      	lsls	r3, r2, #21
 80016c0:	d532      	bpl.n	8001728 <__ssputs_r+0xa8>
 80016c2:	0029      	movs	r1, r5
 80016c4:	0038      	movs	r0, r7
 80016c6:	f000 fb31 	bl	8001d2c <_malloc_r>
 80016ca:	1e06      	subs	r6, r0, #0
 80016cc:	d109      	bne.n	80016e2 <__ssputs_r+0x62>
 80016ce:	230c      	movs	r3, #12
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	2340      	movs	r3, #64	; 0x40
 80016d4:	2001      	movs	r0, #1
 80016d6:	89a2      	ldrh	r2, [r4, #12]
 80016d8:	4240      	negs	r0, r0
 80016da:	4313      	orrs	r3, r2
 80016dc:	81a3      	strh	r3, [r4, #12]
 80016de:	b005      	add	sp, #20
 80016e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e2:	9a02      	ldr	r2, [sp, #8]
 80016e4:	6921      	ldr	r1, [r4, #16]
 80016e6:	f7ff ff9f 	bl	8001628 <memcpy>
 80016ea:	89a3      	ldrh	r3, [r4, #12]
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <__ssputs_r+0xc0>)
 80016ee:	401a      	ands	r2, r3
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	4313      	orrs	r3, r2
 80016f4:	81a3      	strh	r3, [r4, #12]
 80016f6:	9b02      	ldr	r3, [sp, #8]
 80016f8:	6126      	str	r6, [r4, #16]
 80016fa:	18f6      	adds	r6, r6, r3
 80016fc:	6026      	str	r6, [r4, #0]
 80016fe:	6165      	str	r5, [r4, #20]
 8001700:	9e01      	ldr	r6, [sp, #4]
 8001702:	1aed      	subs	r5, r5, r3
 8001704:	60a5      	str	r5, [r4, #8]
 8001706:	9b01      	ldr	r3, [sp, #4]
 8001708:	42b3      	cmp	r3, r6
 800170a:	d200      	bcs.n	800170e <__ssputs_r+0x8e>
 800170c:	001e      	movs	r6, r3
 800170e:	0032      	movs	r2, r6
 8001710:	9903      	ldr	r1, [sp, #12]
 8001712:	6820      	ldr	r0, [r4, #0]
 8001714:	f000 faad 	bl	8001c72 <memmove>
 8001718:	68a3      	ldr	r3, [r4, #8]
 800171a:	2000      	movs	r0, #0
 800171c:	1b9b      	subs	r3, r3, r6
 800171e:	60a3      	str	r3, [r4, #8]
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	199e      	adds	r6, r3, r6
 8001724:	6026      	str	r6, [r4, #0]
 8001726:	e7da      	b.n	80016de <__ssputs_r+0x5e>
 8001728:	002a      	movs	r2, r5
 800172a:	0038      	movs	r0, r7
 800172c:	f000 fb5c 	bl	8001de8 <_realloc_r>
 8001730:	1e06      	subs	r6, r0, #0
 8001732:	d1e0      	bne.n	80016f6 <__ssputs_r+0x76>
 8001734:	6921      	ldr	r1, [r4, #16]
 8001736:	0038      	movs	r0, r7
 8001738:	f000 faae 	bl	8001c98 <_free_r>
 800173c:	e7c7      	b.n	80016ce <__ssputs_r+0x4e>
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	fffffb7f 	.word	0xfffffb7f

08001744 <_svfiprintf_r>:
 8001744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001746:	b09f      	sub	sp, #124	; 0x7c
 8001748:	9002      	str	r0, [sp, #8]
 800174a:	9305      	str	r3, [sp, #20]
 800174c:	898b      	ldrh	r3, [r1, #12]
 800174e:	000f      	movs	r7, r1
 8001750:	0016      	movs	r6, r2
 8001752:	061b      	lsls	r3, r3, #24
 8001754:	d511      	bpl.n	800177a <_svfiprintf_r+0x36>
 8001756:	690b      	ldr	r3, [r1, #16]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10e      	bne.n	800177a <_svfiprintf_r+0x36>
 800175c:	2140      	movs	r1, #64	; 0x40
 800175e:	f000 fae5 	bl	8001d2c <_malloc_r>
 8001762:	6038      	str	r0, [r7, #0]
 8001764:	6138      	str	r0, [r7, #16]
 8001766:	2800      	cmp	r0, #0
 8001768:	d105      	bne.n	8001776 <_svfiprintf_r+0x32>
 800176a:	230c      	movs	r3, #12
 800176c:	9a02      	ldr	r2, [sp, #8]
 800176e:	3801      	subs	r0, #1
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	b01f      	add	sp, #124	; 0x7c
 8001774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001776:	2340      	movs	r3, #64	; 0x40
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	2300      	movs	r3, #0
 800177c:	ad06      	add	r5, sp, #24
 800177e:	616b      	str	r3, [r5, #20]
 8001780:	3320      	adds	r3, #32
 8001782:	766b      	strb	r3, [r5, #25]
 8001784:	3310      	adds	r3, #16
 8001786:	76ab      	strb	r3, [r5, #26]
 8001788:	0034      	movs	r4, r6
 800178a:	7823      	ldrb	r3, [r4, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d147      	bne.n	8001820 <_svfiprintf_r+0xdc>
 8001790:	1ba3      	subs	r3, r4, r6
 8001792:	9304      	str	r3, [sp, #16]
 8001794:	d00d      	beq.n	80017b2 <_svfiprintf_r+0x6e>
 8001796:	1ba3      	subs	r3, r4, r6
 8001798:	0032      	movs	r2, r6
 800179a:	0039      	movs	r1, r7
 800179c:	9802      	ldr	r0, [sp, #8]
 800179e:	f7ff ff6f 	bl	8001680 <__ssputs_r>
 80017a2:	1c43      	adds	r3, r0, #1
 80017a4:	d100      	bne.n	80017a8 <_svfiprintf_r+0x64>
 80017a6:	e0b5      	b.n	8001914 <_svfiprintf_r+0x1d0>
 80017a8:	696a      	ldr	r2, [r5, #20]
 80017aa:	9b04      	ldr	r3, [sp, #16]
 80017ac:	4694      	mov	ip, r2
 80017ae:	4463      	add	r3, ip
 80017b0:	616b      	str	r3, [r5, #20]
 80017b2:	7823      	ldrb	r3, [r4, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d100      	bne.n	80017ba <_svfiprintf_r+0x76>
 80017b8:	e0ac      	b.n	8001914 <_svfiprintf_r+0x1d0>
 80017ba:	2201      	movs	r2, #1
 80017bc:	2300      	movs	r3, #0
 80017be:	4252      	negs	r2, r2
 80017c0:	606a      	str	r2, [r5, #4]
 80017c2:	a902      	add	r1, sp, #8
 80017c4:	3254      	adds	r2, #84	; 0x54
 80017c6:	1852      	adds	r2, r2, r1
 80017c8:	3401      	adds	r4, #1
 80017ca:	602b      	str	r3, [r5, #0]
 80017cc:	60eb      	str	r3, [r5, #12]
 80017ce:	60ab      	str	r3, [r5, #8]
 80017d0:	7013      	strb	r3, [r2, #0]
 80017d2:	65ab      	str	r3, [r5, #88]	; 0x58
 80017d4:	4e58      	ldr	r6, [pc, #352]	; (8001938 <_svfiprintf_r+0x1f4>)
 80017d6:	2205      	movs	r2, #5
 80017d8:	7821      	ldrb	r1, [r4, #0]
 80017da:	0030      	movs	r0, r6
 80017dc:	f000 fa3e 	bl	8001c5c <memchr>
 80017e0:	1c62      	adds	r2, r4, #1
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d120      	bne.n	8001828 <_svfiprintf_r+0xe4>
 80017e6:	6829      	ldr	r1, [r5, #0]
 80017e8:	06cb      	lsls	r3, r1, #27
 80017ea:	d504      	bpl.n	80017f6 <_svfiprintf_r+0xb2>
 80017ec:	2353      	movs	r3, #83	; 0x53
 80017ee:	ae02      	add	r6, sp, #8
 80017f0:	3020      	adds	r0, #32
 80017f2:	199b      	adds	r3, r3, r6
 80017f4:	7018      	strb	r0, [r3, #0]
 80017f6:	070b      	lsls	r3, r1, #28
 80017f8:	d504      	bpl.n	8001804 <_svfiprintf_r+0xc0>
 80017fa:	2353      	movs	r3, #83	; 0x53
 80017fc:	202b      	movs	r0, #43	; 0x2b
 80017fe:	ae02      	add	r6, sp, #8
 8001800:	199b      	adds	r3, r3, r6
 8001802:	7018      	strb	r0, [r3, #0]
 8001804:	7823      	ldrb	r3, [r4, #0]
 8001806:	2b2a      	cmp	r3, #42	; 0x2a
 8001808:	d016      	beq.n	8001838 <_svfiprintf_r+0xf4>
 800180a:	2000      	movs	r0, #0
 800180c:	210a      	movs	r1, #10
 800180e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001810:	7822      	ldrb	r2, [r4, #0]
 8001812:	3a30      	subs	r2, #48	; 0x30
 8001814:	2a09      	cmp	r2, #9
 8001816:	d955      	bls.n	80018c4 <_svfiprintf_r+0x180>
 8001818:	2800      	cmp	r0, #0
 800181a:	d015      	beq.n	8001848 <_svfiprintf_r+0x104>
 800181c:	9309      	str	r3, [sp, #36]	; 0x24
 800181e:	e013      	b.n	8001848 <_svfiprintf_r+0x104>
 8001820:	2b25      	cmp	r3, #37	; 0x25
 8001822:	d0b5      	beq.n	8001790 <_svfiprintf_r+0x4c>
 8001824:	3401      	adds	r4, #1
 8001826:	e7b0      	b.n	800178a <_svfiprintf_r+0x46>
 8001828:	2301      	movs	r3, #1
 800182a:	1b80      	subs	r0, r0, r6
 800182c:	4083      	lsls	r3, r0
 800182e:	6829      	ldr	r1, [r5, #0]
 8001830:	0014      	movs	r4, r2
 8001832:	430b      	orrs	r3, r1
 8001834:	602b      	str	r3, [r5, #0]
 8001836:	e7cd      	b.n	80017d4 <_svfiprintf_r+0x90>
 8001838:	9b05      	ldr	r3, [sp, #20]
 800183a:	1d18      	adds	r0, r3, #4
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	9005      	str	r0, [sp, #20]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db39      	blt.n	80018b8 <_svfiprintf_r+0x174>
 8001844:	9309      	str	r3, [sp, #36]	; 0x24
 8001846:	0014      	movs	r4, r2
 8001848:	7823      	ldrb	r3, [r4, #0]
 800184a:	2b2e      	cmp	r3, #46	; 0x2e
 800184c:	d10b      	bne.n	8001866 <_svfiprintf_r+0x122>
 800184e:	7863      	ldrb	r3, [r4, #1]
 8001850:	1c62      	adds	r2, r4, #1
 8001852:	2b2a      	cmp	r3, #42	; 0x2a
 8001854:	d13e      	bne.n	80018d4 <_svfiprintf_r+0x190>
 8001856:	9b05      	ldr	r3, [sp, #20]
 8001858:	3402      	adds	r4, #2
 800185a:	1d1a      	adds	r2, r3, #4
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	9205      	str	r2, [sp, #20]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db34      	blt.n	80018ce <_svfiprintf_r+0x18a>
 8001864:	9307      	str	r3, [sp, #28]
 8001866:	4e35      	ldr	r6, [pc, #212]	; (800193c <_svfiprintf_r+0x1f8>)
 8001868:	7821      	ldrb	r1, [r4, #0]
 800186a:	2203      	movs	r2, #3
 800186c:	0030      	movs	r0, r6
 800186e:	f000 f9f5 	bl	8001c5c <memchr>
 8001872:	2800      	cmp	r0, #0
 8001874:	d006      	beq.n	8001884 <_svfiprintf_r+0x140>
 8001876:	2340      	movs	r3, #64	; 0x40
 8001878:	1b80      	subs	r0, r0, r6
 800187a:	4083      	lsls	r3, r0
 800187c:	682a      	ldr	r2, [r5, #0]
 800187e:	3401      	adds	r4, #1
 8001880:	4313      	orrs	r3, r2
 8001882:	602b      	str	r3, [r5, #0]
 8001884:	7821      	ldrb	r1, [r4, #0]
 8001886:	2206      	movs	r2, #6
 8001888:	482d      	ldr	r0, [pc, #180]	; (8001940 <_svfiprintf_r+0x1fc>)
 800188a:	1c66      	adds	r6, r4, #1
 800188c:	7629      	strb	r1, [r5, #24]
 800188e:	f000 f9e5 	bl	8001c5c <memchr>
 8001892:	2800      	cmp	r0, #0
 8001894:	d046      	beq.n	8001924 <_svfiprintf_r+0x1e0>
 8001896:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <_svfiprintf_r+0x200>)
 8001898:	2b00      	cmp	r3, #0
 800189a:	d12f      	bne.n	80018fc <_svfiprintf_r+0x1b8>
 800189c:	6829      	ldr	r1, [r5, #0]
 800189e:	9b05      	ldr	r3, [sp, #20]
 80018a0:	2207      	movs	r2, #7
 80018a2:	05c9      	lsls	r1, r1, #23
 80018a4:	d528      	bpl.n	80018f8 <_svfiprintf_r+0x1b4>
 80018a6:	189b      	adds	r3, r3, r2
 80018a8:	4393      	bics	r3, r2
 80018aa:	3308      	adds	r3, #8
 80018ac:	9305      	str	r3, [sp, #20]
 80018ae:	696b      	ldr	r3, [r5, #20]
 80018b0:	9a03      	ldr	r2, [sp, #12]
 80018b2:	189b      	adds	r3, r3, r2
 80018b4:	616b      	str	r3, [r5, #20]
 80018b6:	e767      	b.n	8001788 <_svfiprintf_r+0x44>
 80018b8:	425b      	negs	r3, r3
 80018ba:	60eb      	str	r3, [r5, #12]
 80018bc:	2302      	movs	r3, #2
 80018be:	430b      	orrs	r3, r1
 80018c0:	602b      	str	r3, [r5, #0]
 80018c2:	e7c0      	b.n	8001846 <_svfiprintf_r+0x102>
 80018c4:	434b      	muls	r3, r1
 80018c6:	3401      	adds	r4, #1
 80018c8:	189b      	adds	r3, r3, r2
 80018ca:	2001      	movs	r0, #1
 80018cc:	e7a0      	b.n	8001810 <_svfiprintf_r+0xcc>
 80018ce:	2301      	movs	r3, #1
 80018d0:	425b      	negs	r3, r3
 80018d2:	e7c7      	b.n	8001864 <_svfiprintf_r+0x120>
 80018d4:	2300      	movs	r3, #0
 80018d6:	0014      	movs	r4, r2
 80018d8:	200a      	movs	r0, #10
 80018da:	001a      	movs	r2, r3
 80018dc:	606b      	str	r3, [r5, #4]
 80018de:	7821      	ldrb	r1, [r4, #0]
 80018e0:	3930      	subs	r1, #48	; 0x30
 80018e2:	2909      	cmp	r1, #9
 80018e4:	d903      	bls.n	80018ee <_svfiprintf_r+0x1aa>
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0bd      	beq.n	8001866 <_svfiprintf_r+0x122>
 80018ea:	9207      	str	r2, [sp, #28]
 80018ec:	e7bb      	b.n	8001866 <_svfiprintf_r+0x122>
 80018ee:	4342      	muls	r2, r0
 80018f0:	3401      	adds	r4, #1
 80018f2:	1852      	adds	r2, r2, r1
 80018f4:	2301      	movs	r3, #1
 80018f6:	e7f2      	b.n	80018de <_svfiprintf_r+0x19a>
 80018f8:	3307      	adds	r3, #7
 80018fa:	e7d5      	b.n	80018a8 <_svfiprintf_r+0x164>
 80018fc:	ab05      	add	r3, sp, #20
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	003a      	movs	r2, r7
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <_svfiprintf_r+0x204>)
 8001904:	0029      	movs	r1, r5
 8001906:	9802      	ldr	r0, [sp, #8]
 8001908:	e000      	b.n	800190c <_svfiprintf_r+0x1c8>
 800190a:	bf00      	nop
 800190c:	9003      	str	r0, [sp, #12]
 800190e:	9b03      	ldr	r3, [sp, #12]
 8001910:	3301      	adds	r3, #1
 8001912:	d1cc      	bne.n	80018ae <_svfiprintf_r+0x16a>
 8001914:	89bb      	ldrh	r3, [r7, #12]
 8001916:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001918:	065b      	lsls	r3, r3, #25
 800191a:	d400      	bmi.n	800191e <_svfiprintf_r+0x1da>
 800191c:	e729      	b.n	8001772 <_svfiprintf_r+0x2e>
 800191e:	2001      	movs	r0, #1
 8001920:	4240      	negs	r0, r0
 8001922:	e726      	b.n	8001772 <_svfiprintf_r+0x2e>
 8001924:	ab05      	add	r3, sp, #20
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	003a      	movs	r2, r7
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <_svfiprintf_r+0x204>)
 800192c:	0029      	movs	r1, r5
 800192e:	9802      	ldr	r0, [sp, #8]
 8001930:	f000 f87a 	bl	8001a28 <_printf_i>
 8001934:	e7ea      	b.n	800190c <_svfiprintf_r+0x1c8>
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	08001ef0 	.word	0x08001ef0
 800193c:	08001ef6 	.word	0x08001ef6
 8001940:	08001efa 	.word	0x08001efa
 8001944:	00000000 	.word	0x00000000
 8001948:	08001681 	.word	0x08001681

0800194c <_printf_common>:
 800194c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800194e:	0015      	movs	r5, r2
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	688a      	ldr	r2, [r1, #8]
 8001954:	690b      	ldr	r3, [r1, #16]
 8001956:	9000      	str	r0, [sp, #0]
 8001958:	000c      	movs	r4, r1
 800195a:	4293      	cmp	r3, r2
 800195c:	da00      	bge.n	8001960 <_printf_common+0x14>
 800195e:	0013      	movs	r3, r2
 8001960:	0022      	movs	r2, r4
 8001962:	602b      	str	r3, [r5, #0]
 8001964:	3243      	adds	r2, #67	; 0x43
 8001966:	7812      	ldrb	r2, [r2, #0]
 8001968:	2a00      	cmp	r2, #0
 800196a:	d001      	beq.n	8001970 <_printf_common+0x24>
 800196c:	3301      	adds	r3, #1
 800196e:	602b      	str	r3, [r5, #0]
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	069b      	lsls	r3, r3, #26
 8001974:	d502      	bpl.n	800197c <_printf_common+0x30>
 8001976:	682b      	ldr	r3, [r5, #0]
 8001978:	3302      	adds	r3, #2
 800197a:	602b      	str	r3, [r5, #0]
 800197c:	2706      	movs	r7, #6
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	401f      	ands	r7, r3
 8001982:	d027      	beq.n	80019d4 <_printf_common+0x88>
 8001984:	0023      	movs	r3, r4
 8001986:	3343      	adds	r3, #67	; 0x43
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	1e5a      	subs	r2, r3, #1
 800198c:	4193      	sbcs	r3, r2
 800198e:	6822      	ldr	r2, [r4, #0]
 8001990:	0692      	lsls	r2, r2, #26
 8001992:	d430      	bmi.n	80019f6 <_printf_common+0xaa>
 8001994:	0022      	movs	r2, r4
 8001996:	9901      	ldr	r1, [sp, #4]
 8001998:	3243      	adds	r2, #67	; 0x43
 800199a:	9800      	ldr	r0, [sp, #0]
 800199c:	9e08      	ldr	r6, [sp, #32]
 800199e:	47b0      	blx	r6
 80019a0:	1c43      	adds	r3, r0, #1
 80019a2:	d025      	beq.n	80019f0 <_printf_common+0xa4>
 80019a4:	2306      	movs	r3, #6
 80019a6:	6820      	ldr	r0, [r4, #0]
 80019a8:	682a      	ldr	r2, [r5, #0]
 80019aa:	68e1      	ldr	r1, [r4, #12]
 80019ac:	4003      	ands	r3, r0
 80019ae:	2500      	movs	r5, #0
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d103      	bne.n	80019bc <_printf_common+0x70>
 80019b4:	1a8d      	subs	r5, r1, r2
 80019b6:	43eb      	mvns	r3, r5
 80019b8:	17db      	asrs	r3, r3, #31
 80019ba:	401d      	ands	r5, r3
 80019bc:	68a3      	ldr	r3, [r4, #8]
 80019be:	6922      	ldr	r2, [r4, #16]
 80019c0:	4293      	cmp	r3, r2
 80019c2:	dd01      	ble.n	80019c8 <_printf_common+0x7c>
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	18ed      	adds	r5, r5, r3
 80019c8:	2700      	movs	r7, #0
 80019ca:	42bd      	cmp	r5, r7
 80019cc:	d120      	bne.n	8001a10 <_printf_common+0xc4>
 80019ce:	2000      	movs	r0, #0
 80019d0:	e010      	b.n	80019f4 <_printf_common+0xa8>
 80019d2:	3701      	adds	r7, #1
 80019d4:	68e3      	ldr	r3, [r4, #12]
 80019d6:	682a      	ldr	r2, [r5, #0]
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	429f      	cmp	r7, r3
 80019dc:	dad2      	bge.n	8001984 <_printf_common+0x38>
 80019de:	0022      	movs	r2, r4
 80019e0:	2301      	movs	r3, #1
 80019e2:	3219      	adds	r2, #25
 80019e4:	9901      	ldr	r1, [sp, #4]
 80019e6:	9800      	ldr	r0, [sp, #0]
 80019e8:	9e08      	ldr	r6, [sp, #32]
 80019ea:	47b0      	blx	r6
 80019ec:	1c43      	adds	r3, r0, #1
 80019ee:	d1f0      	bne.n	80019d2 <_printf_common+0x86>
 80019f0:	2001      	movs	r0, #1
 80019f2:	4240      	negs	r0, r0
 80019f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80019f6:	2030      	movs	r0, #48	; 0x30
 80019f8:	18e1      	adds	r1, r4, r3
 80019fa:	3143      	adds	r1, #67	; 0x43
 80019fc:	7008      	strb	r0, [r1, #0]
 80019fe:	0021      	movs	r1, r4
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	3145      	adds	r1, #69	; 0x45
 8001a04:	7809      	ldrb	r1, [r1, #0]
 8001a06:	18a2      	adds	r2, r4, r2
 8001a08:	3243      	adds	r2, #67	; 0x43
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	7011      	strb	r1, [r2, #0]
 8001a0e:	e7c1      	b.n	8001994 <_printf_common+0x48>
 8001a10:	0022      	movs	r2, r4
 8001a12:	2301      	movs	r3, #1
 8001a14:	321a      	adds	r2, #26
 8001a16:	9901      	ldr	r1, [sp, #4]
 8001a18:	9800      	ldr	r0, [sp, #0]
 8001a1a:	9e08      	ldr	r6, [sp, #32]
 8001a1c:	47b0      	blx	r6
 8001a1e:	1c43      	adds	r3, r0, #1
 8001a20:	d0e6      	beq.n	80019f0 <_printf_common+0xa4>
 8001a22:	3701      	adds	r7, #1
 8001a24:	e7d1      	b.n	80019ca <_printf_common+0x7e>
	...

08001a28 <_printf_i>:
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	b08b      	sub	sp, #44	; 0x2c
 8001a2c:	9206      	str	r2, [sp, #24]
 8001a2e:	000a      	movs	r2, r1
 8001a30:	3243      	adds	r2, #67	; 0x43
 8001a32:	9307      	str	r3, [sp, #28]
 8001a34:	9005      	str	r0, [sp, #20]
 8001a36:	9204      	str	r2, [sp, #16]
 8001a38:	7e0a      	ldrb	r2, [r1, #24]
 8001a3a:	000c      	movs	r4, r1
 8001a3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001a3e:	2a6e      	cmp	r2, #110	; 0x6e
 8001a40:	d100      	bne.n	8001a44 <_printf_i+0x1c>
 8001a42:	e08f      	b.n	8001b64 <_printf_i+0x13c>
 8001a44:	d817      	bhi.n	8001a76 <_printf_i+0x4e>
 8001a46:	2a63      	cmp	r2, #99	; 0x63
 8001a48:	d02c      	beq.n	8001aa4 <_printf_i+0x7c>
 8001a4a:	d808      	bhi.n	8001a5e <_printf_i+0x36>
 8001a4c:	2a00      	cmp	r2, #0
 8001a4e:	d100      	bne.n	8001a52 <_printf_i+0x2a>
 8001a50:	e099      	b.n	8001b86 <_printf_i+0x15e>
 8001a52:	2a58      	cmp	r2, #88	; 0x58
 8001a54:	d054      	beq.n	8001b00 <_printf_i+0xd8>
 8001a56:	0026      	movs	r6, r4
 8001a58:	3642      	adds	r6, #66	; 0x42
 8001a5a:	7032      	strb	r2, [r6, #0]
 8001a5c:	e029      	b.n	8001ab2 <_printf_i+0x8a>
 8001a5e:	2a64      	cmp	r2, #100	; 0x64
 8001a60:	d001      	beq.n	8001a66 <_printf_i+0x3e>
 8001a62:	2a69      	cmp	r2, #105	; 0x69
 8001a64:	d1f7      	bne.n	8001a56 <_printf_i+0x2e>
 8001a66:	6821      	ldr	r1, [r4, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	0608      	lsls	r0, r1, #24
 8001a6c:	d523      	bpl.n	8001ab6 <_printf_i+0x8e>
 8001a6e:	1d11      	adds	r1, r2, #4
 8001a70:	6019      	str	r1, [r3, #0]
 8001a72:	6815      	ldr	r5, [r2, #0]
 8001a74:	e025      	b.n	8001ac2 <_printf_i+0x9a>
 8001a76:	2a73      	cmp	r2, #115	; 0x73
 8001a78:	d100      	bne.n	8001a7c <_printf_i+0x54>
 8001a7a:	e088      	b.n	8001b8e <_printf_i+0x166>
 8001a7c:	d808      	bhi.n	8001a90 <_printf_i+0x68>
 8001a7e:	2a6f      	cmp	r2, #111	; 0x6f
 8001a80:	d029      	beq.n	8001ad6 <_printf_i+0xae>
 8001a82:	2a70      	cmp	r2, #112	; 0x70
 8001a84:	d1e7      	bne.n	8001a56 <_printf_i+0x2e>
 8001a86:	2220      	movs	r2, #32
 8001a88:	6809      	ldr	r1, [r1, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	6022      	str	r2, [r4, #0]
 8001a8e:	e003      	b.n	8001a98 <_printf_i+0x70>
 8001a90:	2a75      	cmp	r2, #117	; 0x75
 8001a92:	d020      	beq.n	8001ad6 <_printf_i+0xae>
 8001a94:	2a78      	cmp	r2, #120	; 0x78
 8001a96:	d1de      	bne.n	8001a56 <_printf_i+0x2e>
 8001a98:	0022      	movs	r2, r4
 8001a9a:	2178      	movs	r1, #120	; 0x78
 8001a9c:	3245      	adds	r2, #69	; 0x45
 8001a9e:	7011      	strb	r1, [r2, #0]
 8001aa0:	4a6c      	ldr	r2, [pc, #432]	; (8001c54 <_printf_i+0x22c>)
 8001aa2:	e030      	b.n	8001b06 <_printf_i+0xde>
 8001aa4:	000e      	movs	r6, r1
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	3642      	adds	r6, #66	; 0x42
 8001aaa:	1d11      	adds	r1, r2, #4
 8001aac:	6019      	str	r1, [r3, #0]
 8001aae:	6813      	ldr	r3, [r2, #0]
 8001ab0:	7033      	strb	r3, [r6, #0]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e079      	b.n	8001baa <_printf_i+0x182>
 8001ab6:	0649      	lsls	r1, r1, #25
 8001ab8:	d5d9      	bpl.n	8001a6e <_printf_i+0x46>
 8001aba:	1d11      	adds	r1, r2, #4
 8001abc:	6019      	str	r1, [r3, #0]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	5ed5      	ldrsh	r5, [r2, r3]
 8001ac2:	2d00      	cmp	r5, #0
 8001ac4:	da03      	bge.n	8001ace <_printf_i+0xa6>
 8001ac6:	232d      	movs	r3, #45	; 0x2d
 8001ac8:	9a04      	ldr	r2, [sp, #16]
 8001aca:	426d      	negs	r5, r5
 8001acc:	7013      	strb	r3, [r2, #0]
 8001ace:	4b62      	ldr	r3, [pc, #392]	; (8001c58 <_printf_i+0x230>)
 8001ad0:	270a      	movs	r7, #10
 8001ad2:	9303      	str	r3, [sp, #12]
 8001ad4:	e02f      	b.n	8001b36 <_printf_i+0x10e>
 8001ad6:	6820      	ldr	r0, [r4, #0]
 8001ad8:	6819      	ldr	r1, [r3, #0]
 8001ada:	0605      	lsls	r5, r0, #24
 8001adc:	d503      	bpl.n	8001ae6 <_printf_i+0xbe>
 8001ade:	1d08      	adds	r0, r1, #4
 8001ae0:	6018      	str	r0, [r3, #0]
 8001ae2:	680d      	ldr	r5, [r1, #0]
 8001ae4:	e005      	b.n	8001af2 <_printf_i+0xca>
 8001ae6:	0640      	lsls	r0, r0, #25
 8001ae8:	d5f9      	bpl.n	8001ade <_printf_i+0xb6>
 8001aea:	680d      	ldr	r5, [r1, #0]
 8001aec:	1d08      	adds	r0, r1, #4
 8001aee:	6018      	str	r0, [r3, #0]
 8001af0:	b2ad      	uxth	r5, r5
 8001af2:	4b59      	ldr	r3, [pc, #356]	; (8001c58 <_printf_i+0x230>)
 8001af4:	2708      	movs	r7, #8
 8001af6:	9303      	str	r3, [sp, #12]
 8001af8:	2a6f      	cmp	r2, #111	; 0x6f
 8001afa:	d018      	beq.n	8001b2e <_printf_i+0x106>
 8001afc:	270a      	movs	r7, #10
 8001afe:	e016      	b.n	8001b2e <_printf_i+0x106>
 8001b00:	3145      	adds	r1, #69	; 0x45
 8001b02:	700a      	strb	r2, [r1, #0]
 8001b04:	4a54      	ldr	r2, [pc, #336]	; (8001c58 <_printf_i+0x230>)
 8001b06:	9203      	str	r2, [sp, #12]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	6821      	ldr	r1, [r4, #0]
 8001b0c:	1d10      	adds	r0, r2, #4
 8001b0e:	6018      	str	r0, [r3, #0]
 8001b10:	6815      	ldr	r5, [r2, #0]
 8001b12:	0608      	lsls	r0, r1, #24
 8001b14:	d522      	bpl.n	8001b5c <_printf_i+0x134>
 8001b16:	07cb      	lsls	r3, r1, #31
 8001b18:	d502      	bpl.n	8001b20 <_printf_i+0xf8>
 8001b1a:	2320      	movs	r3, #32
 8001b1c:	4319      	orrs	r1, r3
 8001b1e:	6021      	str	r1, [r4, #0]
 8001b20:	2710      	movs	r7, #16
 8001b22:	2d00      	cmp	r5, #0
 8001b24:	d103      	bne.n	8001b2e <_printf_i+0x106>
 8001b26:	2320      	movs	r3, #32
 8001b28:	6822      	ldr	r2, [r4, #0]
 8001b2a:	439a      	bics	r2, r3
 8001b2c:	6022      	str	r2, [r4, #0]
 8001b2e:	0023      	movs	r3, r4
 8001b30:	2200      	movs	r2, #0
 8001b32:	3343      	adds	r3, #67	; 0x43
 8001b34:	701a      	strb	r2, [r3, #0]
 8001b36:	6863      	ldr	r3, [r4, #4]
 8001b38:	60a3      	str	r3, [r4, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db5c      	blt.n	8001bf8 <_printf_i+0x1d0>
 8001b3e:	2204      	movs	r2, #4
 8001b40:	6821      	ldr	r1, [r4, #0]
 8001b42:	4391      	bics	r1, r2
 8001b44:	6021      	str	r1, [r4, #0]
 8001b46:	2d00      	cmp	r5, #0
 8001b48:	d158      	bne.n	8001bfc <_printf_i+0x1d4>
 8001b4a:	9e04      	ldr	r6, [sp, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d064      	beq.n	8001c1a <_printf_i+0x1f2>
 8001b50:	0026      	movs	r6, r4
 8001b52:	9b03      	ldr	r3, [sp, #12]
 8001b54:	3642      	adds	r6, #66	; 0x42
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	7033      	strb	r3, [r6, #0]
 8001b5a:	e05e      	b.n	8001c1a <_printf_i+0x1f2>
 8001b5c:	0648      	lsls	r0, r1, #25
 8001b5e:	d5da      	bpl.n	8001b16 <_printf_i+0xee>
 8001b60:	b2ad      	uxth	r5, r5
 8001b62:	e7d8      	b.n	8001b16 <_printf_i+0xee>
 8001b64:	6809      	ldr	r1, [r1, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	0608      	lsls	r0, r1, #24
 8001b6a:	d505      	bpl.n	8001b78 <_printf_i+0x150>
 8001b6c:	1d11      	adds	r1, r2, #4
 8001b6e:	6019      	str	r1, [r3, #0]
 8001b70:	6813      	ldr	r3, [r2, #0]
 8001b72:	6962      	ldr	r2, [r4, #20]
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	e006      	b.n	8001b86 <_printf_i+0x15e>
 8001b78:	0649      	lsls	r1, r1, #25
 8001b7a:	d5f7      	bpl.n	8001b6c <_printf_i+0x144>
 8001b7c:	1d11      	adds	r1, r2, #4
 8001b7e:	6019      	str	r1, [r3, #0]
 8001b80:	6813      	ldr	r3, [r2, #0]
 8001b82:	8aa2      	ldrh	r2, [r4, #20]
 8001b84:	801a      	strh	r2, [r3, #0]
 8001b86:	2300      	movs	r3, #0
 8001b88:	9e04      	ldr	r6, [sp, #16]
 8001b8a:	6123      	str	r3, [r4, #16]
 8001b8c:	e054      	b.n	8001c38 <_printf_i+0x210>
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	1d11      	adds	r1, r2, #4
 8001b92:	6019      	str	r1, [r3, #0]
 8001b94:	6816      	ldr	r6, [r2, #0]
 8001b96:	2100      	movs	r1, #0
 8001b98:	6862      	ldr	r2, [r4, #4]
 8001b9a:	0030      	movs	r0, r6
 8001b9c:	f000 f85e 	bl	8001c5c <memchr>
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d001      	beq.n	8001ba8 <_printf_i+0x180>
 8001ba4:	1b80      	subs	r0, r0, r6
 8001ba6:	6060      	str	r0, [r4, #4]
 8001ba8:	6863      	ldr	r3, [r4, #4]
 8001baa:	6123      	str	r3, [r4, #16]
 8001bac:	2300      	movs	r3, #0
 8001bae:	9a04      	ldr	r2, [sp, #16]
 8001bb0:	7013      	strb	r3, [r2, #0]
 8001bb2:	e041      	b.n	8001c38 <_printf_i+0x210>
 8001bb4:	6923      	ldr	r3, [r4, #16]
 8001bb6:	0032      	movs	r2, r6
 8001bb8:	9906      	ldr	r1, [sp, #24]
 8001bba:	9805      	ldr	r0, [sp, #20]
 8001bbc:	9d07      	ldr	r5, [sp, #28]
 8001bbe:	47a8      	blx	r5
 8001bc0:	1c43      	adds	r3, r0, #1
 8001bc2:	d043      	beq.n	8001c4c <_printf_i+0x224>
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	2500      	movs	r5, #0
 8001bc8:	079b      	lsls	r3, r3, #30
 8001bca:	d40f      	bmi.n	8001bec <_printf_i+0x1c4>
 8001bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bce:	68e0      	ldr	r0, [r4, #12]
 8001bd0:	4298      	cmp	r0, r3
 8001bd2:	da3d      	bge.n	8001c50 <_printf_i+0x228>
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	e03b      	b.n	8001c50 <_printf_i+0x228>
 8001bd8:	0022      	movs	r2, r4
 8001bda:	2301      	movs	r3, #1
 8001bdc:	3219      	adds	r2, #25
 8001bde:	9906      	ldr	r1, [sp, #24]
 8001be0:	9805      	ldr	r0, [sp, #20]
 8001be2:	9e07      	ldr	r6, [sp, #28]
 8001be4:	47b0      	blx	r6
 8001be6:	1c43      	adds	r3, r0, #1
 8001be8:	d030      	beq.n	8001c4c <_printf_i+0x224>
 8001bea:	3501      	adds	r5, #1
 8001bec:	68e3      	ldr	r3, [r4, #12]
 8001bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	429d      	cmp	r5, r3
 8001bf4:	dbf0      	blt.n	8001bd8 <_printf_i+0x1b0>
 8001bf6:	e7e9      	b.n	8001bcc <_printf_i+0x1a4>
 8001bf8:	2d00      	cmp	r5, #0
 8001bfa:	d0a9      	beq.n	8001b50 <_printf_i+0x128>
 8001bfc:	9e04      	ldr	r6, [sp, #16]
 8001bfe:	0028      	movs	r0, r5
 8001c00:	0039      	movs	r1, r7
 8001c02:	f7fe fb19 	bl	8000238 <__aeabi_uidivmod>
 8001c06:	9b03      	ldr	r3, [sp, #12]
 8001c08:	3e01      	subs	r6, #1
 8001c0a:	5c5b      	ldrb	r3, [r3, r1]
 8001c0c:	0028      	movs	r0, r5
 8001c0e:	7033      	strb	r3, [r6, #0]
 8001c10:	0039      	movs	r1, r7
 8001c12:	f7fe fa8b 	bl	800012c <__udivsi3>
 8001c16:	1e05      	subs	r5, r0, #0
 8001c18:	d1f1      	bne.n	8001bfe <_printf_i+0x1d6>
 8001c1a:	2f08      	cmp	r7, #8
 8001c1c:	d109      	bne.n	8001c32 <_printf_i+0x20a>
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	07db      	lsls	r3, r3, #31
 8001c22:	d506      	bpl.n	8001c32 <_printf_i+0x20a>
 8001c24:	6863      	ldr	r3, [r4, #4]
 8001c26:	6922      	ldr	r2, [r4, #16]
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	dc02      	bgt.n	8001c32 <_printf_i+0x20a>
 8001c2c:	2330      	movs	r3, #48	; 0x30
 8001c2e:	3e01      	subs	r6, #1
 8001c30:	7033      	strb	r3, [r6, #0]
 8001c32:	9b04      	ldr	r3, [sp, #16]
 8001c34:	1b9b      	subs	r3, r3, r6
 8001c36:	6123      	str	r3, [r4, #16]
 8001c38:	9b07      	ldr	r3, [sp, #28]
 8001c3a:	aa09      	add	r2, sp, #36	; 0x24
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	0021      	movs	r1, r4
 8001c40:	9b06      	ldr	r3, [sp, #24]
 8001c42:	9805      	ldr	r0, [sp, #20]
 8001c44:	f7ff fe82 	bl	800194c <_printf_common>
 8001c48:	1c43      	adds	r3, r0, #1
 8001c4a:	d1b3      	bne.n	8001bb4 <_printf_i+0x18c>
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	4240      	negs	r0, r0
 8001c50:	b00b      	add	sp, #44	; 0x2c
 8001c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c54:	08001f12 	.word	0x08001f12
 8001c58:	08001f01 	.word	0x08001f01

08001c5c <memchr>:
 8001c5c:	b2c9      	uxtb	r1, r1
 8001c5e:	1882      	adds	r2, r0, r2
 8001c60:	4290      	cmp	r0, r2
 8001c62:	d101      	bne.n	8001c68 <memchr+0xc>
 8001c64:	2000      	movs	r0, #0
 8001c66:	4770      	bx	lr
 8001c68:	7803      	ldrb	r3, [r0, #0]
 8001c6a:	428b      	cmp	r3, r1
 8001c6c:	d0fb      	beq.n	8001c66 <memchr+0xa>
 8001c6e:	3001      	adds	r0, #1
 8001c70:	e7f6      	b.n	8001c60 <memchr+0x4>

08001c72 <memmove>:
 8001c72:	b510      	push	{r4, lr}
 8001c74:	4288      	cmp	r0, r1
 8001c76:	d902      	bls.n	8001c7e <memmove+0xc>
 8001c78:	188b      	adds	r3, r1, r2
 8001c7a:	4298      	cmp	r0, r3
 8001c7c:	d308      	bcc.n	8001c90 <memmove+0x1e>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d007      	beq.n	8001c94 <memmove+0x22>
 8001c84:	5ccc      	ldrb	r4, [r1, r3]
 8001c86:	54c4      	strb	r4, [r0, r3]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	e7f9      	b.n	8001c80 <memmove+0xe>
 8001c8c:	5c8b      	ldrb	r3, [r1, r2]
 8001c8e:	5483      	strb	r3, [r0, r2]
 8001c90:	3a01      	subs	r2, #1
 8001c92:	d2fb      	bcs.n	8001c8c <memmove+0x1a>
 8001c94:	bd10      	pop	{r4, pc}
	...

08001c98 <_free_r>:
 8001c98:	b570      	push	{r4, r5, r6, lr}
 8001c9a:	0005      	movs	r5, r0
 8001c9c:	2900      	cmp	r1, #0
 8001c9e:	d010      	beq.n	8001cc2 <_free_r+0x2a>
 8001ca0:	1f0c      	subs	r4, r1, #4
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	da00      	bge.n	8001caa <_free_r+0x12>
 8001ca8:	18e4      	adds	r4, r4, r3
 8001caa:	0028      	movs	r0, r5
 8001cac:	f000 f8d4 	bl	8001e58 <__malloc_lock>
 8001cb0:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <_free_r+0x90>)
 8001cb2:	6813      	ldr	r3, [r2, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d105      	bne.n	8001cc4 <_free_r+0x2c>
 8001cb8:	6063      	str	r3, [r4, #4]
 8001cba:	6014      	str	r4, [r2, #0]
 8001cbc:	0028      	movs	r0, r5
 8001cbe:	f000 f8cc 	bl	8001e5a <__malloc_unlock>
 8001cc2:	bd70      	pop	{r4, r5, r6, pc}
 8001cc4:	42a3      	cmp	r3, r4
 8001cc6:	d909      	bls.n	8001cdc <_free_r+0x44>
 8001cc8:	6821      	ldr	r1, [r4, #0]
 8001cca:	1860      	adds	r0, r4, r1
 8001ccc:	4283      	cmp	r3, r0
 8001cce:	d1f3      	bne.n	8001cb8 <_free_r+0x20>
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	1841      	adds	r1, r0, r1
 8001cd6:	6021      	str	r1, [r4, #0]
 8001cd8:	e7ee      	b.n	8001cb8 <_free_r+0x20>
 8001cda:	0013      	movs	r3, r2
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	2a00      	cmp	r2, #0
 8001ce0:	d001      	beq.n	8001ce6 <_free_r+0x4e>
 8001ce2:	42a2      	cmp	r2, r4
 8001ce4:	d9f9      	bls.n	8001cda <_free_r+0x42>
 8001ce6:	6819      	ldr	r1, [r3, #0]
 8001ce8:	1858      	adds	r0, r3, r1
 8001cea:	42a0      	cmp	r0, r4
 8001cec:	d10b      	bne.n	8001d06 <_free_r+0x6e>
 8001cee:	6820      	ldr	r0, [r4, #0]
 8001cf0:	1809      	adds	r1, r1, r0
 8001cf2:	1858      	adds	r0, r3, r1
 8001cf4:	6019      	str	r1, [r3, #0]
 8001cf6:	4282      	cmp	r2, r0
 8001cf8:	d1e0      	bne.n	8001cbc <_free_r+0x24>
 8001cfa:	6810      	ldr	r0, [r2, #0]
 8001cfc:	6852      	ldr	r2, [r2, #4]
 8001cfe:	1841      	adds	r1, r0, r1
 8001d00:	6019      	str	r1, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	e7da      	b.n	8001cbc <_free_r+0x24>
 8001d06:	42a0      	cmp	r0, r4
 8001d08:	d902      	bls.n	8001d10 <_free_r+0x78>
 8001d0a:	230c      	movs	r3, #12
 8001d0c:	602b      	str	r3, [r5, #0]
 8001d0e:	e7d5      	b.n	8001cbc <_free_r+0x24>
 8001d10:	6821      	ldr	r1, [r4, #0]
 8001d12:	1860      	adds	r0, r4, r1
 8001d14:	4282      	cmp	r2, r0
 8001d16:	d103      	bne.n	8001d20 <_free_r+0x88>
 8001d18:	6810      	ldr	r0, [r2, #0]
 8001d1a:	6852      	ldr	r2, [r2, #4]
 8001d1c:	1841      	adds	r1, r0, r1
 8001d1e:	6021      	str	r1, [r4, #0]
 8001d20:	6062      	str	r2, [r4, #4]
 8001d22:	605c      	str	r4, [r3, #4]
 8001d24:	e7ca      	b.n	8001cbc <_free_r+0x24>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	20000084 	.word	0x20000084

08001d2c <_malloc_r>:
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	b570      	push	{r4, r5, r6, lr}
 8001d30:	1ccd      	adds	r5, r1, #3
 8001d32:	439d      	bics	r5, r3
 8001d34:	3508      	adds	r5, #8
 8001d36:	0006      	movs	r6, r0
 8001d38:	2d0c      	cmp	r5, #12
 8001d3a:	d21e      	bcs.n	8001d7a <_malloc_r+0x4e>
 8001d3c:	250c      	movs	r5, #12
 8001d3e:	42a9      	cmp	r1, r5
 8001d40:	d81d      	bhi.n	8001d7e <_malloc_r+0x52>
 8001d42:	0030      	movs	r0, r6
 8001d44:	f000 f888 	bl	8001e58 <__malloc_lock>
 8001d48:	4a25      	ldr	r2, [pc, #148]	; (8001de0 <_malloc_r+0xb4>)
 8001d4a:	6814      	ldr	r4, [r2, #0]
 8001d4c:	0021      	movs	r1, r4
 8001d4e:	2900      	cmp	r1, #0
 8001d50:	d119      	bne.n	8001d86 <_malloc_r+0x5a>
 8001d52:	4c24      	ldr	r4, [pc, #144]	; (8001de4 <_malloc_r+0xb8>)
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d103      	bne.n	8001d62 <_malloc_r+0x36>
 8001d5a:	0030      	movs	r0, r6
 8001d5c:	f000 f86a 	bl	8001e34 <_sbrk_r>
 8001d60:	6020      	str	r0, [r4, #0]
 8001d62:	0029      	movs	r1, r5
 8001d64:	0030      	movs	r0, r6
 8001d66:	f000 f865 	bl	8001e34 <_sbrk_r>
 8001d6a:	1c43      	adds	r3, r0, #1
 8001d6c:	d12c      	bne.n	8001dc8 <_malloc_r+0x9c>
 8001d6e:	230c      	movs	r3, #12
 8001d70:	0030      	movs	r0, r6
 8001d72:	6033      	str	r3, [r6, #0]
 8001d74:	f000 f871 	bl	8001e5a <__malloc_unlock>
 8001d78:	e003      	b.n	8001d82 <_malloc_r+0x56>
 8001d7a:	2d00      	cmp	r5, #0
 8001d7c:	dadf      	bge.n	8001d3e <_malloc_r+0x12>
 8001d7e:	230c      	movs	r3, #12
 8001d80:	6033      	str	r3, [r6, #0]
 8001d82:	2000      	movs	r0, #0
 8001d84:	bd70      	pop	{r4, r5, r6, pc}
 8001d86:	680b      	ldr	r3, [r1, #0]
 8001d88:	1b5b      	subs	r3, r3, r5
 8001d8a:	d41a      	bmi.n	8001dc2 <_malloc_r+0x96>
 8001d8c:	2b0b      	cmp	r3, #11
 8001d8e:	d903      	bls.n	8001d98 <_malloc_r+0x6c>
 8001d90:	600b      	str	r3, [r1, #0]
 8001d92:	18cc      	adds	r4, r1, r3
 8001d94:	6025      	str	r5, [r4, #0]
 8001d96:	e003      	b.n	8001da0 <_malloc_r+0x74>
 8001d98:	428c      	cmp	r4, r1
 8001d9a:	d10e      	bne.n	8001dba <_malloc_r+0x8e>
 8001d9c:	6863      	ldr	r3, [r4, #4]
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	0030      	movs	r0, r6
 8001da2:	f000 f85a 	bl	8001e5a <__malloc_unlock>
 8001da6:	0020      	movs	r0, r4
 8001da8:	2207      	movs	r2, #7
 8001daa:	300b      	adds	r0, #11
 8001dac:	1d23      	adds	r3, r4, #4
 8001dae:	4390      	bics	r0, r2
 8001db0:	1ac3      	subs	r3, r0, r3
 8001db2:	d0e7      	beq.n	8001d84 <_malloc_r+0x58>
 8001db4:	425a      	negs	r2, r3
 8001db6:	50e2      	str	r2, [r4, r3]
 8001db8:	e7e4      	b.n	8001d84 <_malloc_r+0x58>
 8001dba:	684b      	ldr	r3, [r1, #4]
 8001dbc:	6063      	str	r3, [r4, #4]
 8001dbe:	000c      	movs	r4, r1
 8001dc0:	e7ee      	b.n	8001da0 <_malloc_r+0x74>
 8001dc2:	000c      	movs	r4, r1
 8001dc4:	6849      	ldr	r1, [r1, #4]
 8001dc6:	e7c2      	b.n	8001d4e <_malloc_r+0x22>
 8001dc8:	2303      	movs	r3, #3
 8001dca:	1cc4      	adds	r4, r0, #3
 8001dcc:	439c      	bics	r4, r3
 8001dce:	42a0      	cmp	r0, r4
 8001dd0:	d0e0      	beq.n	8001d94 <_malloc_r+0x68>
 8001dd2:	1a21      	subs	r1, r4, r0
 8001dd4:	0030      	movs	r0, r6
 8001dd6:	f000 f82d 	bl	8001e34 <_sbrk_r>
 8001dda:	1c43      	adds	r3, r0, #1
 8001ddc:	d1da      	bne.n	8001d94 <_malloc_r+0x68>
 8001dde:	e7c6      	b.n	8001d6e <_malloc_r+0x42>
 8001de0:	20000084 	.word	0x20000084
 8001de4:	20000088 	.word	0x20000088

08001de8 <_realloc_r>:
 8001de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dea:	0007      	movs	r7, r0
 8001dec:	000d      	movs	r5, r1
 8001dee:	0016      	movs	r6, r2
 8001df0:	2900      	cmp	r1, #0
 8001df2:	d105      	bne.n	8001e00 <_realloc_r+0x18>
 8001df4:	0011      	movs	r1, r2
 8001df6:	f7ff ff99 	bl	8001d2c <_malloc_r>
 8001dfa:	0004      	movs	r4, r0
 8001dfc:	0020      	movs	r0, r4
 8001dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e00:	2a00      	cmp	r2, #0
 8001e02:	d103      	bne.n	8001e0c <_realloc_r+0x24>
 8001e04:	f7ff ff48 	bl	8001c98 <_free_r>
 8001e08:	0034      	movs	r4, r6
 8001e0a:	e7f7      	b.n	8001dfc <_realloc_r+0x14>
 8001e0c:	f000 f826 	bl	8001e5c <_malloc_usable_size_r>
 8001e10:	002c      	movs	r4, r5
 8001e12:	4286      	cmp	r6, r0
 8001e14:	d9f2      	bls.n	8001dfc <_realloc_r+0x14>
 8001e16:	0031      	movs	r1, r6
 8001e18:	0038      	movs	r0, r7
 8001e1a:	f7ff ff87 	bl	8001d2c <_malloc_r>
 8001e1e:	1e04      	subs	r4, r0, #0
 8001e20:	d0ec      	beq.n	8001dfc <_realloc_r+0x14>
 8001e22:	0029      	movs	r1, r5
 8001e24:	0032      	movs	r2, r6
 8001e26:	f7ff fbff 	bl	8001628 <memcpy>
 8001e2a:	0029      	movs	r1, r5
 8001e2c:	0038      	movs	r0, r7
 8001e2e:	f7ff ff33 	bl	8001c98 <_free_r>
 8001e32:	e7e3      	b.n	8001dfc <_realloc_r+0x14>

08001e34 <_sbrk_r>:
 8001e34:	2300      	movs	r3, #0
 8001e36:	b570      	push	{r4, r5, r6, lr}
 8001e38:	4c06      	ldr	r4, [pc, #24]	; (8001e54 <_sbrk_r+0x20>)
 8001e3a:	0005      	movs	r5, r0
 8001e3c:	0008      	movs	r0, r1
 8001e3e:	6023      	str	r3, [r4, #0]
 8001e40:	f000 f814 	bl	8001e6c <_sbrk>
 8001e44:	1c43      	adds	r3, r0, #1
 8001e46:	d103      	bne.n	8001e50 <_sbrk_r+0x1c>
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d000      	beq.n	8001e50 <_sbrk_r+0x1c>
 8001e4e:	602b      	str	r3, [r5, #0]
 8001e50:	bd70      	pop	{r4, r5, r6, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	20000174 	.word	0x20000174

08001e58 <__malloc_lock>:
 8001e58:	4770      	bx	lr

08001e5a <__malloc_unlock>:
 8001e5a:	4770      	bx	lr

08001e5c <_malloc_usable_size_r>:
 8001e5c:	1f0b      	subs	r3, r1, #4
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	1f18      	subs	r0, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	da01      	bge.n	8001e6a <_malloc_usable_size_r+0xe>
 8001e66:	580b      	ldr	r3, [r1, r0]
 8001e68:	18c0      	adds	r0, r0, r3
 8001e6a:	4770      	bx	lr

08001e6c <_sbrk>:
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <_sbrk+0x18>)
 8001e6e:	0002      	movs	r2, r0
 8001e70:	6819      	ldr	r1, [r3, #0]
 8001e72:	2900      	cmp	r1, #0
 8001e74:	d101      	bne.n	8001e7a <_sbrk+0xe>
 8001e76:	4904      	ldr	r1, [pc, #16]	; (8001e88 <_sbrk+0x1c>)
 8001e78:	6019      	str	r1, [r3, #0]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	1882      	adds	r2, r0, r2
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	4770      	bx	lr
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	2000008c 	.word	0x2000008c
 8001e88:	20000178 	.word	0x20000178

08001e8c <_init>:
 8001e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e92:	bc08      	pop	{r3}
 8001e94:	469e      	mov	lr, r3
 8001e96:	4770      	bx	lr

08001e98 <_fini>:
 8001e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e9e:	bc08      	pop	{r3}
 8001ea0:	469e      	mov	lr, r3
 8001ea2:	4770      	bx	lr
