;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 4/9/2018 11:57:23 PM
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0x4FFC2000  	536891388
0x0004	0x3DFD0000  	15869
0x0008	0x3DF50000  	15861
0x000C	0x3DF50000  	15861
0x0010	0x3DF50000  	15861
0x0014	0x3DF50000  	15861
0x0018	0x3DF50000  	15861
0x001C	0x3DF50000  	15861
0x0020	0x3DF50000  	15861
0x0024	0x3DF50000  	15861
0x0028	0x3DF50000  	15861
0x002C	0x3D650000  	15717
0x0030	0x3DF50000  	15861
0x0034	0x3DF50000  	15861
0x0038	0x3D950000  	15765
0x003C	0x3D310000  	15665
0x0040	0x3DF50000  	15861
0x0044	0x3DF50000  	15861
0x0048	0x3DF50000  	15861
0x004C	0x3DF50000  	15861
0x0050	0x3DF50000  	15861
0x0054	0x3DF50000  	15861
0x0058	0x3DF50000  	15861
0x005C	0x3DF50000  	15861
0x0060	0x3DF50000  	15861
0x0064	0x3DF50000  	15861
0x0068	0x3DF50000  	15861
0x006C	0x3DF50000  	15861
0x0070	0x3DF50000  	15861
0x0074	0x3DF50000  	15861
0x0078	0x3DF50000  	15861
0x007C	0x3DF50000  	15861
0x0080	0x3DF50000  	15861
0x0084	0x3DF50000  	15861
0x0088	0x3DF50000  	15861
0x008C	0x3DF50000  	15861
0x0090	0x3DF50000  	15861
0x0094	0x3DF50000  	15861
0x0098	0x3DF50000  	15861
0x009C	0x3DF50000  	15861
0x00A0	0x3DF50000  	15861
0x00A4	0x3DF50000  	15861
0x00A8	0x3DF50000  	15861
0x00AC	0x3DF50000  	15861
0x00B0	0x3DF50000  	15861
0x00B4	0x3DF50000  	15861
0x00B8	0x3DF50000  	15861
0x00BC	0x3DF50000  	15861
0x00C0	0x3DF50000  	15861
0x00C4	0x3DF50000  	15861
0x00C8	0x3DF50000  	15861
0x00CC	0x3DF50000  	15861
0x00D0	0x3DF50000  	15861
0x00D4	0x3DF50000  	15861
0x00D8	0x3DF50000  	15861
0x00DC	0x3DF50000  	15861
0x00E0	0x3DF50000  	15861
0x00E4	0x3DF50000  	15861
0x00E8	0x3DF50000  	15861
0x00EC	0x3DF50000  	15861
0x00F0	0x3DF50000  	15861
0x00F4	0x3DF50000  	15861
0x00F8	0x3DF50000  	15861
0x00FC	0x3DF50000  	15861
0x0100	0x3DF50000  	15861
0x0104	0x3DF50000  	15861
0x0108	0x3DF50000  	15861
0x010C	0x3DF50000  	15861
0x0110	0x3DF50000  	15861
0x0114	0x3DF50000  	15861
0x0118	0x3DF50000  	15861
0x011C	0x3DF50000  	15861
0x0120	0x3DF50000  	15861
0x0124	0x3DF50000  	15861
0x0128	0x3DF50000  	15861
0x012C	0x3DF50000  	15861
; end of ____SysVT
_main:
;main.c, 66 :: 		void main()
0x3DFC	0xF000F844  BL	16008
0x3E00	0xF000F948  BL	16532
0x3E04	0xF000F8B8  BL	16248
0x3E08	0xF000F8F6  BL	16376
;main.c, 75 :: 		NULL
0x3E0C	0x2000    MOVS	R0, #0
0x3E0E	0xB401    PUSH	(R0)
;main.c, 74 :: 		10,
0x3E10	0x200A    MOVS	R0, #10
0x3E12	0xB401    PUSH	(R0)
;main.c, 73 :: 		NULL,
0x3E14	0x2000    MOVS	R0, #0
0x3E16	0xB401    PUSH	(R0)
;main.c, 72 :: 		configMINIMAL_STACK_SIZE,
0x3E18	0x2080    MOVS	R0, #128
0x3E1A	0xB401    PUSH	(R0)
;main.c, 71 :: 		"Task 1",
0x3E1C	0x4814    LDR	R0, [PC, #80]
0x3E1E	0xB401    PUSH	(R0)
;main.c, 70 :: 		(TaskFunction_t)task1,
0x3E20	0x4814    LDR	R0, [PC, #80]
0x3E22	0xB401    PUSH	(R0)
;main.c, 75 :: 		NULL
0x3E24	0xF7FFFD72  BL	_xTaskCreate+0
0x3E28	0xB006    ADD	SP, SP, #24
;main.c, 85 :: 		NULL
0x3E2A	0x2000    MOVS	R0, #0
0x3E2C	0xB401    PUSH	(R0)
;main.c, 84 :: 		10,
0x3E2E	0x200A    MOVS	R0, #10
0x3E30	0xB401    PUSH	(R0)
;main.c, 83 :: 		NULL,
0x3E32	0x2000    MOVS	R0, #0
0x3E34	0xB401    PUSH	(R0)
;main.c, 82 :: 		configMINIMAL_STACK_SIZE,
0x3E36	0x2080    MOVS	R0, #128
0x3E38	0xB401    PUSH	(R0)
;main.c, 81 :: 		"Task 2",
0x3E3A	0x480F    LDR	R0, [PC, #60]
0x3E3C	0xB401    PUSH	(R0)
;main.c, 80 :: 		(TaskFunction_t)task2,
0x3E3E	0x480F    LDR	R0, [PC, #60]
0x3E40	0xB401    PUSH	(R0)
;main.c, 85 :: 		NULL
0x3E42	0xF7FFFD63  BL	_xTaskCreate+0
0x3E46	0xB006    ADD	SP, SP, #24
;main.c, 95 :: 		NULL
0x3E48	0x2000    MOVS	R0, #0
0x3E4A	0xB401    PUSH	(R0)
;main.c, 94 :: 		10,
0x3E4C	0x200A    MOVS	R0, #10
0x3E4E	0xB401    PUSH	(R0)
;main.c, 93 :: 		NULL,
0x3E50	0x2000    MOVS	R0, #0
0x3E52	0xB401    PUSH	(R0)
;main.c, 92 :: 		configMINIMAL_STACK_SIZE,
0x3E54	0x2080    MOVS	R0, #128
0x3E56	0xB401    PUSH	(R0)
;main.c, 91 :: 		"Task 3",
0x3E58	0x4809    LDR	R0, [PC, #36]
0x3E5A	0xB401    PUSH	(R0)
;main.c, 90 :: 		(TaskFunction_t)task3,
0x3E5C	0x4809    LDR	R0, [PC, #36]
0x3E5E	0xB401    PUSH	(R0)
;main.c, 95 :: 		NULL
0x3E60	0xF7FFFD54  BL	_xTaskCreate+0
0x3E64	0xB006    ADD	SP, SP, #24
;main.c, 99 :: 		vTaskStartScheduler();
0x3E66	0xF7FFFF0F  BL	_vTaskStartScheduler+0
;main.c, 102 :: 		while (1);
L_main8:
0x3E6A	0xE7FE    B	L_main8
;main.c, 103 :: 		}
L_end_main:
L__main_end_loop:
0x3E6C	0xE7FE    B	L__main_end_loop
0x3E6E	0xBF00    NOP
0x3E70	0x3FDB0000  	?lstr_1_main+0
0x3E74	0x26AD0000  	_task1+0
0x3E78	0x3FE20000  	?lstr_2_main+0
0x3E7C	0x34A50000  	_task2+0
0x3E80	0x3FD40000  	?lstr_3_main+0
0x3E84	0x340D0000  	_task3+0
; end of _main
___FillZeros:
;__Lib_System_101_102_103.c, 70 :: 		
0x39F4	0xB081    SUB	SP, SP, #4
;__Lib_System_101_102_103.c, 72 :: 		
0x39F6	0xF04F0900  MOV	R9, #0
;__Lib_System_101_102_103.c, 73 :: 		
0x39FA	0xF04F0C00  MOV	R12, #0
;__Lib_System_101_102_103.c, 74 :: 		
0x39FE	0xEBBD0F0A  CMP	SP, R10, LSL #0
;__Lib_System_101_102_103.c, 75 :: 		
0x3A02	0xDC04    BGT	L_loopFZs
;__Lib_System_101_102_103.c, 76 :: 		
0x3A04	0xEBBD0F0B  CMP	SP, R11, LSL #0
;__Lib_System_101_102_103.c, 77 :: 		
0x3A08	0xDB01    BLT	L_loopFZs
;__Lib_System_101_102_103.c, 78 :: 		
0x3A0A	0x46D4    MOV	R12, R10
;__Lib_System_101_102_103.c, 79 :: 		
0x3A0C	0x46EA    MOV	R10, SP
;__Lib_System_101_102_103.c, 80 :: 		
L_loopFZs:
;__Lib_System_101_102_103.c, 81 :: 		
0x3A0E	0xF84B9B04  STR	R9, [R11], #4
;__Lib_System_101_102_103.c, 82 :: 		
0x3A12	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_101_102_103.c, 83 :: 		
0x3A16	0xD1FA    BNE	L_loopFZs
;__Lib_System_101_102_103.c, 84 :: 		
0x3A18	0xEBBC0F0A  CMP	R12, R10, LSL #0
;__Lib_System_101_102_103.c, 85 :: 		
0x3A1C	0xDD05    BLE	L_norep
;__Lib_System_101_102_103.c, 86 :: 		
0x3A1E	0x46E2    MOV	R10, R12
;__Lib_System_101_102_103.c, 87 :: 		
0x3A20	0xF8D9B000  LDR	R11, [R9, #0]
;__Lib_System_101_102_103.c, 88 :: 		
0x3A24	0xF10B0B04  ADD	R11, R11, #4
;__Lib_System_101_102_103.c, 89 :: 		
0x3A28	0xE7F1    B	L_loopFZs
;__Lib_System_101_102_103.c, 90 :: 		
L_norep:
;__Lib_System_101_102_103.c, 92 :: 		
L_end___FillZeros:
0x3A2A	0xB001    ADD	SP, SP, #4
0x3A2C	0x4770    BX	LR
; end of ___FillZeros
_xTaskCreate:
;tasks.c, 681 :: 		TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
0x390C	0xB084    SUB	SP, SP, #16
0x390E	0xF8CDE000  STR	LR, [SP, #0]
;tasks.c, 716 :: 		pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
0x3912	0xF8BD1018  LDRH	R1, [SP, #24]
0x3916	0x2004    MOVS	R0, #4
0x3918	0x4348    MULS	R0, R1, R0
0x391A	0xB401    PUSH	(R0)
0x391C	0xF7FFFE60  BL	_pvPortMalloc+0
0x3920	0xB001    ADD	SP, SP, #4
0x3922	0x9001    STR	R0, [SP, #4]
;tasks.c, 718 :: 		if( pxStack != NULL )
0x3924	0x9801    LDR	R0, [SP, #4]
0x3926	0xB198    CBZ	R0, L_xTaskCreate2
;tasks.c, 721 :: 		pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
0x3928	0x2054    MOVS	R0, #84
0x392A	0xB401    PUSH	(R0)
0x392C	0xF7FFFE58  BL	_pvPortMalloc+0
0x3930	0xB001    ADD	SP, SP, #4
0x3932	0x9002    STR	R0, [SP, #8]
;tasks.c, 723 :: 		if( pxNewTCB != NULL )
0x3934	0x9802    LDR	R0, [SP, #8]
0x3936	0xB128    CBZ	R0, L_xTaskCreate3
;tasks.c, 726 :: 		pxNewTCB->pxStack = pxStack;
0x3938	0x9802    LDR	R0, [SP, #8]
0x393A	0xF2000130  ADDW	R1, R0, #48
0x393E	0x9801    LDR	R0, [SP, #4]
0x3940	0x6008    STR	R0, [R1, #0]
;tasks.c, 727 :: 		}
0x3942	0xE004    B	L_xTaskCreate4
L_xTaskCreate3:
;tasks.c, 732 :: 		vPortFree( pxStack );
0x3944	0x9801    LDR	R0, [SP, #4]
0x3946	0xB401    PUSH	(R0)
0x3948	0xF7FFFFD0  BL	_vPortFree+0
0x394C	0xB001    ADD	SP, SP, #4
;tasks.c, 733 :: 		}
L_xTaskCreate4:
;tasks.c, 734 :: 		}
0x394E	0xE001    B	L_xTaskCreate5
L_xTaskCreate2:
;tasks.c, 737 :: 		pxNewTCB = NULL;
0x3950	0x2000    MOVS	R0, #0
0x3952	0x9002    STR	R0, [SP, #8]
;tasks.c, 738 :: 		}
L_xTaskCreate5:
;tasks.c, 742 :: 		if( pxNewTCB != NULL )
0x3954	0x9802    LDR	R0, [SP, #8]
0x3956	0xB1E0    CBZ	R0, L_xTaskCreate6
;tasks.c, 752 :: 		prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
0x3958	0x2000    MOVS	R0, #0
0x395A	0xB401    PUSH	(R0)
0x395C	0x9803    LDR	R0, [SP, #12]
0x395E	0xB401    PUSH	(R0)
0x3960	0x980B    LDR	R0, [SP, #44]
0x3962	0xB401    PUSH	(R0)
0x3964	0x980B    LDR	R0, [SP, #44]
0x3966	0xB401    PUSH	(R0)
0x3968	0x980B    LDR	R0, [SP, #44]
0x396A	0xB401    PUSH	(R0)
0x396C	0xF8BD002C  LDRH	R0, [SP, #44]
0x3970	0xB401    PUSH	(R0)
0x3972	0x980B    LDR	R0, [SP, #44]
0x3974	0xB401    PUSH	(R0)
0x3976	0x980B    LDR	R0, [SP, #44]
0x3978	0xB401    PUSH	(R0)
0x397A	0xF7FFFE4F  BL	tasks_prvInitialiseNewTask+0
0x397E	0xB008    ADD	SP, SP, #32
;tasks.c, 753 :: 		prvAddNewTaskToReadyList( pxNewTCB );
0x3980	0x9802    LDR	R0, [SP, #8]
0x3982	0xB401    PUSH	(R0)
0x3984	0xF7FFFEDE  BL	tasks_prvAddNewTaskToReadyList+0
0x3988	0xB001    ADD	SP, SP, #4
;tasks.c, 754 :: 		xReturn = pdPASS;
0x398A	0xF04F0001  MOV	R0, #1
0x398E	0x9003    STR	R0, [SP, #12]
;tasks.c, 755 :: 		}
0x3990	0xE002    B	L_xTaskCreate7
L_xTaskCreate6:
;tasks.c, 758 :: 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
0x3992	0xF04F30FF  MOV	R0, #-1
0x3996	0x9003    STR	R0, [SP, #12]
;tasks.c, 759 :: 		}
L_xTaskCreate7:
;tasks.c, 761 :: 		return xReturn;
0x3998	0x9803    LDR	R0, [SP, #12]
;tasks.c, 762 :: 		}
L_end_xTaskCreate:
0x399A	0xF8DDE000  LDR	LR, [SP, #0]
0x399E	0xB004    ADD	SP, SP, #16
0x39A0	0x4770    BX	LR
; end of _xTaskCreate
_pvPortMalloc:
;heap_3.c, 102 :: 		void *pvPortMalloc( size_t xWantedSize )
0x35E0	0xB082    SUB	SP, SP, #8
0x35E2	0xF8CDE000  STR	LR, [SP, #0]
;heap_3.c, 106 :: 		vTaskSuspendAll();
0x35E6	0xF7FFFCA3  BL	_vTaskSuspendAll+0
;heap_3.c, 108 :: 		pvReturn = malloc( xWantedSize );
0x35EA	0x9802    LDR	R0, [SP, #8]
0x35EC	0xF7FFFCC6  BL	_malloc+0
0x35F0	0x9001    STR	R0, [SP, #4]
;heap_3.c, 111 :: 		( void ) xTaskResumeAll();
0x35F2	0xF7FFFE5D  BL	_xTaskResumeAll+0
;heap_3.c, 123 :: 		return pvReturn;
0x35F6	0x9801    LDR	R0, [SP, #4]
;heap_3.c, 124 :: 		}
L_end_pvPortMalloc:
0x35F8	0xF8DDE000  LDR	LR, [SP, #0]
0x35FC	0xB002    ADD	SP, SP, #8
0x35FE	0x4770    BX	LR
; end of _pvPortMalloc
_vTaskSuspendAll:
;tasks.c, 1944 :: 		void vTaskSuspendAll( void )
;tasks.c, 1950 :: 		++uxSchedulerSuspended;
0x2F30	0x4802    LDR	R0, [PC, #8]
0x2F32	0x6800    LDR	R0, [R0, #0]
0x2F34	0x1C41    ADDS	R1, R0, #1
0x2F36	0x4801    LDR	R0, [PC, #4]
0x2F38	0x6001    STR	R1, [R0, #0]
;tasks.c, 1951 :: 		}
L_end_vTaskSuspendAll:
0x2F3A	0x4770    BX	LR
0x2F3C	0x000C2000  	tasks_uxSchedulerSuspended+0
; end of _vTaskSuspendAll
_malloc:
;__Lib_dlmalloc.c, 4625 :: 		void* dlmalloc(size_t bytes) {
; bytes start address is: 0 (R0)
0x2F7C	0xB081    SUB	SP, SP, #4
0x2F7E	0xF8CDE000  STR	LR, [SP, #0]
; bytes end address is: 0 (R0)
; bytes start address is: 0 (R0)
;__Lib_dlmalloc.c, 4656 :: 		if (bytes <= MAX_SMALL_REQUEST) {
0x2F82	0x28F4    CMP	R0, #244
0x2F84	0xF200810F  BHI	L_malloc697
;__Lib_dlmalloc.c, 4659 :: 		nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
0x2F88	0x280B    CMP	R0, #11
0x2F8A	0xD202    BCS	L_malloc698
; bytes end address is: 0 (R0)
; ?FLOC___malloc?T6315 start address is: 0 (R0)
0x2F8C	0xF04F0010  MOV	R0, #16
; ?FLOC___malloc?T6315 end address is: 0 (R0)
0x2F90	0xE004    B	L_malloc699
L_malloc698:
; bytes start address is: 0 (R0)
0x2F92	0x1D00    ADDS	R0, R0, #4
; bytes end address is: 0 (R0)
0x2F94	0x1DC0    ADDS	R0, R0, #7
0x2F96	0xF06F0107  MVN	R1, #7
0x2F9A	0x4008    ANDS	R0, R1
; ?FLOC___malloc?T6315 start address is: 0 (R0)
; ?FLOC___malloc?T6315 end address is: 0 (R0)
L_malloc699:
; ?FLOC___malloc?T6315 start address is: 0 (R0)
; nb start address is: 44 (R11)
0x2F9C	0x4683    MOV	R11, R0
;__Lib_dlmalloc.c, 4660 :: 		idx = small_index(nb);
0x2F9E	0x08C2    LSRS	R2, R0, #3
; ?FLOC___malloc?T6315 end address is: 0 (R0)
; idx start address is: 0 (R0)
0x2FA0	0x4610    MOV	R0, R2
;__Lib_dlmalloc.c, 4661 :: 		smallbits = gm->smallmap >> idx;
0x2FA2	0x49BB    LDR	R1, [PC, #748]
0x2FA4	0x6809    LDR	R1, [R1, #0]
0x2FA6	0x40D1    LSRS	R1, R2
; smallbits start address is: 8 (R2)
0x2FA8	0x460A    MOV	R2, R1
;__Lib_dlmalloc.c, 4663 :: 		if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
0x2FAA	0xF0010103  AND	R1, R1, #3
0x2FAE	0x2900    CMP	R1, #0
0x2FB0	0xD03C    BEQ	L_malloc700
; nb end address is: 44 (R11)
;__Lib_dlmalloc.c, 4665 :: 		idx += ~smallbits & 1;       /* Uses next bin if idx empty */
0x2FB2	0x43D1    MVN	R1, R2
; smallbits end address is: 8 (R2)
0x2FB4	0xF0010101  AND	R1, R1, #1
0x2FB8	0x1841    ADDS	R1, R0, R1
0x2FBA	0x4608    MOV	R0, R1
;__Lib_dlmalloc.c, 4666 :: 		b = smallbin_at(gm, idx);
0x2FBC	0x0049    LSLS	R1, R1, #1
0x2FBE	0x008A    LSLS	R2, R1, #2
0x2FC0	0x49B4    LDR	R1, [PC, #720]
0x2FC2	0x188A    ADDS	R2, R1, R2
; b start address is: 12 (R3)
0x2FC4	0x4613    MOV	R3, R2
;__Lib_dlmalloc.c, 4667 :: 		p = b->fd;
0x2FC6	0xF2020108  ADDW	R1, R2, #8
0x2FCA	0x6809    LDR	R1, [R1, #0]
; p start address is: 16 (R4)
0x2FCC	0x460C    MOV	R4, R1
;__Lib_dlmalloc.c, 4669 :: 		unlink_first_small_chunk(gm, b, p, idx);
0x2FCE	0x3108    ADDS	R1, #8
0x2FD0	0x6809    LDR	R1, [R1, #0]
; F start address is: 20 (R5)
0x2FD2	0x460D    MOV	R5, R1
0x2FD4	0x428A    CMP	R2, R1
0x2FD6	0xD108    BNE	L_malloc701
; b end address is: 12 (R3)
; F end address is: 20 (R5)
0x2FD8	0xF04F0101  MOV	R1, #1
0x2FDC	0x4081    LSLS	R1, R0
0x2FDE	0x43CB    MVN	R3, R1
0x2FE0	0x4AAB    LDR	R2, [PC, #684]
0x2FE2	0x6811    LDR	R1, [R2, #0]
0x2FE4	0x4019    ANDS	R1, R3
0x2FE6	0x6011    STR	R1, [R2, #0]
0x2FE8	0xE00F    B	L_malloc702
L_malloc701:
; F start address is: 20 (R5)
; b start address is: 12 (R3)
0x2FEA	0x49AB    LDR	R1, [PC, #684]
0x2FEC	0x6809    LDR	R1, [R1, #0]
0x2FEE	0x428D    CMP	R5, R1
0x2FF0	0xD30B    BCC	L__malloc1336
0x2FF2	0xF205010C  ADDW	R1, R5, #12
0x2FF6	0x6809    LDR	R1, [R1, #0]
0x2FF8	0x42A1    CMP	R1, R4
0x2FFA	0xD106    BNE	L__malloc1335
L__malloc1334:
0x2FFC	0xF205010C  ADDW	R1, R5, #12
0x3000	0x600B    STR	R3, [R1, #0]
0x3002	0xF2030108  ADDW	R1, R3, #8
; b end address is: 12 (R3)
0x3006	0x600D    STR	R5, [R1, #0]
; F end address is: 20 (R5)
0x3008	0xE7FF    B	L_malloc706
L__malloc1336:
L__malloc1335:
L_malloc706:
L_malloc702:
;__Lib_dlmalloc.c, 4670 :: 		set_inuse_and_pinuse(gm, p, small_index2size(idx));
0x300A	0x1D22    ADDS	R2, R4, #4
0x300C	0x00C1    LSLS	R1, R0, #3
0x300E	0xF0410101  ORR	R1, R1, #1
0x3012	0xF0410102  ORR	R1, R1, #2
0x3016	0x6011    STR	R1, [R2, #0]
0x3018	0x00C1    LSLS	R1, R0, #3
; idx end address is: 0 (R0)
0x301A	0x1861    ADDS	R1, R4, R1
0x301C	0x1D0A    ADDS	R2, R1, #4
0x301E	0x6811    LDR	R1, [R2, #0]
0x3020	0xF0410101  ORR	R1, R1, #1
0x3024	0x6011    STR	R1, [R2, #0]
;__Lib_dlmalloc.c, 4671 :: 		mem = chunk2mem(p);
0x3026	0xF2040008  ADDW	R0, R4, #8
; p end address is: 16 (R4)
; mem start address is: 0 (R0)
;__Lib_dlmalloc.c, 4673 :: 		goto postaction;
; mem end address is: 0 (R0)
0x302A	0xE12C    B	___malloc_postaction
;__Lib_dlmalloc.c, 4674 :: 		}
L_malloc700:
;__Lib_dlmalloc.c, 4676 :: 		else if (nb > gm->dvsize) {
; idx start address is: 0 (R0)
; smallbits start address is: 8 (R2)
; nb start address is: 44 (R11)
0x302C	0x499B    LDR	R1, [PC, #620]
0x302E	0x6809    LDR	R1, [R1, #0]
0x3030	0x458B    CMP	R11, R1
0x3032	0xF24080B6  BLS	L_malloc708
;__Lib_dlmalloc.c, 4677 :: 		if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
0x3036	0x2A00    CMP	R2, #0
0x3038	0xF00080A8  BEQ	L_malloc709
;__Lib_dlmalloc.c, 4681 :: 		binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
0x303C	0xFA02F300  LSL	R3, R2, R0
; smallbits end address is: 8 (R2)
0x3040	0xF04F0101  MOV	R1, #1
0x3044	0x4081    LSLS	R1, R0
0x3046	0x004A    LSLS	R2, R1, #1
0x3048	0xF04F0101  MOV	R1, #1
0x304C	0x4081    LSLS	R1, R0
; idx end address is: 0 (R0)
0x304E	0x0049    LSLS	R1, R1, #1
0x3050	0x4249    RSBS	R1, R1, #0
0x3052	0xEA420101  ORR	R1, R2, R1, LSL #0
0x3056	0xEA030201  AND	R2, R3, R1, LSL #0
;__Lib_dlmalloc.c, 4682 :: 		binmap_t leastbit = least_bit(leftbits);
0x305A	0x4251    RSBS	R1, R2, #0
0x305C	0xEA020101  AND	R1, R2, R1, LSL #0
;__Lib_dlmalloc.c, 4683 :: 		compute_bit2idx(leastbit, i);
0x3060	0x1E4B    SUBS	R3, R1, #1
0x3062	0x0B19    LSRS	R1, R3, #12
0x3064	0xF0010210  AND	R2, R1, #16
0x3068	0x40D3    LSRS	R3, R2
0x306A	0x0959    LSRS	R1, R3, #5
0x306C	0xF0010108  AND	R1, R1, #8
0x3070	0x1852    ADDS	R2, R2, R1
0x3072	0x40CB    LSRS	R3, R1
0x3074	0x0899    LSRS	R1, R3, #2
0x3076	0xF0010104  AND	R1, R1, #4
0x307A	0x1852    ADDS	R2, R2, R1
0x307C	0x40CB    LSRS	R3, R1
0x307E	0x0859    LSRS	R1, R3, #1
0x3080	0xF0010102  AND	R1, R1, #2
0x3084	0x1852    ADDS	R2, R2, R1
0x3086	0x40CB    LSRS	R3, R1
0x3088	0x0859    LSRS	R1, R3, #1
0x308A	0xF0010101  AND	R1, R1, #1
0x308E	0x1852    ADDS	R2, R2, R1
0x3090	0xFA23F101  LSR	R1, R3, R1
0x3094	0x1851    ADDS	R1, R2, R1
; i start address is: 16 (R4)
0x3096	0x460C    MOV	R4, R1
;__Lib_dlmalloc.c, 4684 :: 		b = smallbin_at(gm, i);
0x3098	0x0049    LSLS	R1, R1, #1
0x309A	0x008A    LSLS	R2, R1, #2
0x309C	0x497D    LDR	R1, [PC, #500]
0x309E	0x188A    ADDS	R2, R1, R2
; b start address is: 12 (R3)
0x30A0	0x4613    MOV	R3, R2
;__Lib_dlmalloc.c, 4685 :: 		p = b->fd;
0x30A2	0xF2020108  ADDW	R1, R2, #8
0x30A6	0x6809    LDR	R1, [R1, #0]
; p start address is: 0 (R0)
0x30A8	0x4608    MOV	R0, R1
;__Lib_dlmalloc.c, 4687 :: 		unlink_first_small_chunk(gm, b, p, i);
0x30AA	0x3108    ADDS	R1, #8
0x30AC	0x6809    LDR	R1, [R1, #0]
; F start address is: 20 (R5)
0x30AE	0x460D    MOV	R5, R1
0x30B0	0x428A    CMP	R2, R1
0x30B2	0xD108    BNE	L_malloc710
; b end address is: 12 (R3)
; F end address is: 20 (R5)
0x30B4	0xF04F0101  MOV	R1, #1
0x30B8	0x40A1    LSLS	R1, R4
0x30BA	0x43CB    MVN	R3, R1
0x30BC	0x4A74    LDR	R2, [PC, #464]
0x30BE	0x6811    LDR	R1, [R2, #0]
0x30C0	0x4019    ANDS	R1, R3
0x30C2	0x6011    STR	R1, [R2, #0]
0x30C4	0xE00F    B	L_malloc711
L_malloc710:
; F start address is: 20 (R5)
; b start address is: 12 (R3)
0x30C6	0x4974    LDR	R1, [PC, #464]
0x30C8	0x6809    LDR	R1, [R1, #0]
0x30CA	0x428D    CMP	R5, R1
0x30CC	0xD30B    BCC	L__malloc1338
0x30CE	0xF205010C  ADDW	R1, R5, #12
0x30D2	0x6809    LDR	R1, [R1, #0]
0x30D4	0x4281    CMP	R1, R0
0x30D6	0xD106    BNE	L__malloc1337
L__malloc1333:
0x30D8	0xF205010C  ADDW	R1, R5, #12
0x30DC	0x600B    STR	R3, [R1, #0]
0x30DE	0xF2030108  ADDW	R1, R3, #8
; b end address is: 12 (R3)
0x30E2	0x600D    STR	R5, [R1, #0]
; F end address is: 20 (R5)
0x30E4	0xE7FF    B	L_malloc715
L__malloc1338:
L__malloc1337:
L_malloc715:
L_malloc711:
;__Lib_dlmalloc.c, 4688 :: 		rsize = small_index2size(i) - nb;
0x30E6	0x00E1    LSLS	R1, R4, #3
; i end address is: 16 (R4)
0x30E8	0xEBA1010B  SUB	R1, R1, R11, LSL #0
; rsize start address is: 16 (R4)
0x30EC	0x460C    MOV	R4, R1
;__Lib_dlmalloc.c, 4691 :: 		set_inuse_and_pinuse(gm, p, small_index2size(i));
L_malloc716:
;__Lib_dlmalloc.c, 4693 :: 		set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
0x30EE	0x1D02    ADDS	R2, R0, #4
0x30F0	0xF04B0101  ORR	R1, R11, #1
0x30F4	0xF0410102  ORR	R1, R1, #2
0x30F8	0x6011    STR	R1, [R2, #0]
;__Lib_dlmalloc.c, 4694 :: 		r = chunk_plus_offset(p, nb);
0x30FA	0xEB00010B  ADD	R1, R0, R11, LSL #0
; nb end address is: 44 (R11)
; r start address is: 20 (R5)
0x30FE	0x460D    MOV	R5, R1
;__Lib_dlmalloc.c, 4695 :: 		set_size_and_pinuse_of_free_chunk(r, rsize);
0x3100	0x1D0A    ADDS	R2, R1, #4
0x3102	0xF0440101  ORR	R1, R4, #1
0x3106	0x6011    STR	R1, [R2, #0]
0x3108	0x1929    ADDS	R1, R5, R4
0x310A	0x600C    STR	R4, [R1, #0]
;__Lib_dlmalloc.c, 4696 :: 		replace_dv(gm, r, rsize);
0x310C	0x4963    LDR	R1, [PC, #396]
; DVS start address is: 8 (R2)
0x310E	0x680A    LDR	R2, [R1, #0]
0x3110	0x6809    LDR	R1, [R1, #0]
0x3112	0x2900    CMP	R1, #0
0x3114	0xD034    BEQ	L_malloc718
0x3116	0x4962    LDR	R1, [PC, #392]
; DV start address is: 24 (R6)
0x3118	0x680E    LDR	R6, [R1, #0]
0x311A	0x08D3    LSRS	R3, R2, #3
; DVS end address is: 8 (R2)
; I start address is: 32 (R8)
0x311C	0x4698    MOV	R8, R3
0x311E	0x0059    LSLS	R1, R3, #1
0x3120	0x008A    LSLS	R2, R1, #2
0x3122	0x495C    LDR	R1, [PC, #368]
0x3124	0x1889    ADDS	R1, R1, R2
; B start address is: 28 (R7)
0x3126	0x460F    MOV	R7, R1
; F start address is: 36 (R9)
0x3128	0x4689    MOV	R9, R1
0x312A	0xF04F0101  MOV	R1, #1
0x312E	0xFA01F203  LSL	R2, R1, R3
0x3132	0x4957    LDR	R1, [PC, #348]
0x3134	0x6809    LDR	R1, [R1, #0]
0x3136	0x4011    ANDS	R1, R2
0x3138	0xB949    CBNZ	R1, L_malloc719
0x313A	0xF04F0101  MOV	R1, #1
0x313E	0xFA01F308  LSL	R3, R1, R8
; I end address is: 32 (R8)
0x3142	0x4A53    LDR	R2, [PC, #332]
0x3144	0x6811    LDR	R1, [R2, #0]
0x3146	0x4319    ORRS	R1, R3
0x3148	0x6011    STR	R1, [R2, #0]
0x314A	0x464A    MOV	R2, R9
0x314C	0xE00C    B	L_malloc720
L_malloc719:
0x314E	0xF2070108  ADDW	R1, R7, #8
0x3152	0x680A    LDR	R2, [R1, #0]
0x3154	0x4950    LDR	R1, [PC, #320]
0x3156	0x6809    LDR	R1, [R1, #0]
0x3158	0x428A    CMP	R2, R1
0x315A	0xD304    BCC	L_malloc721
; F end address is: 36 (R9)
0x315C	0xF2070108  ADDW	R1, R7, #8
0x3160	0x6809    LDR	R1, [R1, #0]
; F start address is: 4 (R1)
0x3162	0x460A    MOV	R2, R1
; F end address is: 4 (R1)
0x3164	0xE000    B	L_malloc722
L_malloc721:
; F start address is: 36 (R9)
0x3166	0x464A    MOV	R2, R9
L_malloc722:
; F end address is: 36 (R9)
; F start address is: 8 (R2)
; F end address is: 8 (R2)
L_malloc720:
; F start address is: 8 (R2)
0x3168	0xF2070108  ADDW	R1, R7, #8
0x316C	0x600E    STR	R6, [R1, #0]
0x316E	0xF202010C  ADDW	R1, R2, #12
0x3172	0x600E    STR	R6, [R1, #0]
0x3174	0xF2060108  ADDW	R1, R6, #8
0x3178	0x600A    STR	R2, [R1, #0]
; F end address is: 8 (R2)
0x317A	0xF206010C  ADDW	R1, R6, #12
; DV end address is: 24 (R6)
0x317E	0x600F    STR	R7, [R1, #0]
; B end address is: 28 (R7)
L_malloc718:
0x3180	0x4946    LDR	R1, [PC, #280]
0x3182	0x600C    STR	R4, [R1, #0]
; rsize end address is: 16 (R4)
0x3184	0x4946    LDR	R1, [PC, #280]
0x3186	0x600D    STR	R5, [R1, #0]
; r end address is: 20 (R5)
;__Lib_dlmalloc.c, 4698 :: 		mem = chunk2mem(p);
0x3188	0x3008    ADDS	R0, #8
; p end address is: 0 (R0)
; mem start address is: 0 (R0)
;__Lib_dlmalloc.c, 4700 :: 		goto postaction;
; mem end address is: 0 (R0)
0x318A	0xE07C    B	___malloc_postaction
;__Lib_dlmalloc.c, 4701 :: 		}
L_malloc709:
;__Lib_dlmalloc.c, 4703 :: 		else if (gm->treemap != 0 && (mem = tmalloc_small(gm, nb)) != 0) {
; nb start address is: 44 (R11)
0x318C	0x4945    LDR	R1, [PC, #276]
0x318E	0x6809    LDR	R1, [R1, #0]
0x3190	0xB139    CBZ	R1, L__malloc1340
0x3192	0x4659    MOV	R1, R11
0x3194	0x483E    LDR	R0, [PC, #248]
0x3196	0xF7FEFD8B  BL	__Lib_dlmalloc_tmalloc_small+0
; mem start address is: 4 (R1)
0x319A	0x4601    MOV	R1, R0
0x319C	0xB108    CBZ	R0, L__malloc1339
; nb end address is: 44 (R11)
L__malloc1332:
;__Lib_dlmalloc.c, 4705 :: 		goto postaction;
0x319E	0x4608    MOV	R0, R1
; mem end address is: 4 (R1)
0x31A0	0xE071    B	___malloc_postaction
;__Lib_dlmalloc.c, 4703 :: 		else if (gm->treemap != 0 && (mem = tmalloc_small(gm, nb)) != 0) {
L__malloc1340:
; nb start address is: 44 (R11)
L__malloc1339:
;__Lib_dlmalloc.c, 4707 :: 		}
L_malloc708:
;__Lib_dlmalloc.c, 4708 :: 		}
0x31A2	0x4658    MOV	R0, R11
; nb end address is: 44 (R11)
0x31A4	0xE019    B	L_malloc727
L_malloc697:
;__Lib_dlmalloc.c, 4709 :: 		else if (bytes >= MAX_REQUEST)
; bytes start address is: 0 (R0)
0x31A6	0xF06F013F  MVN	R1, #63
0x31AA	0x4288    CMP	R0, R1
0x31AC	0xD302    BCC	L_malloc728
; bytes end address is: 0 (R0)
;__Lib_dlmalloc.c, 4710 :: 		nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
; nb start address is: 0 (R0)
0x31AE	0xF04F30FF  MOV	R0, #-1
; nb end address is: 0 (R0)
0x31B2	0xE012    B	L_malloc729
L_malloc728:
;__Lib_dlmalloc.c, 4712 :: 		nb = pad_request(bytes);
; bytes start address is: 0 (R0)
0x31B4	0x1D01    ADDS	R1, R0, #4
; bytes end address is: 0 (R0)
0x31B6	0x1DCA    ADDS	R2, R1, #7
0x31B8	0xF06F0107  MVN	R1, #7
0x31BC	0xEA020101  AND	R1, R2, R1, LSL #0
; nb start address is: 48 (R12)
0x31C0	0x468C    MOV	R12, R1
;__Lib_dlmalloc.c, 4713 :: 		if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
0x31C2	0x4938    LDR	R1, [PC, #224]
0x31C4	0x6809    LDR	R1, [R1, #0]
0x31C6	0xB139    CBZ	R1, L__malloc1342
0x31C8	0x4661    MOV	R1, R12
0x31CA	0x4831    LDR	R0, [PC, #196]
0x31CC	0xF7FEFA86  BL	__Lib_dlmalloc_tmalloc_large+0
; mem start address is: 4 (R1)
0x31D0	0x4601    MOV	R1, R0
0x31D2	0xB108    CBZ	R0, L__malloc1341
; nb end address is: 48 (R12)
L__malloc1331:
;__Lib_dlmalloc.c, 4715 :: 		goto postaction;
0x31D4	0x4608    MOV	R0, R1
; mem end address is: 4 (R1)
0x31D6	0xE056    B	___malloc_postaction
;__Lib_dlmalloc.c, 4713 :: 		if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
L__malloc1342:
; nb start address is: 48 (R12)
L__malloc1341:
;__Lib_dlmalloc.c, 4717 :: 		}
0x31D8	0x4660    MOV	R0, R12
L_malloc729:
; nb end address is: 48 (R12)
; nb start address is: 0 (R0)
; nb end address is: 0 (R0)
L_malloc727:
;__Lib_dlmalloc.c, 4719 :: 		if (nb <= gm->dvsize) {
; nb start address is: 0 (R0)
0x31DA	0x4930    LDR	R1, [PC, #192]
0x31DC	0x6809    LDR	R1, [R1, #0]
0x31DE	0x4288    CMP	R0, R1
0x31E0	0xD830    BHI	L_malloc733
;__Lib_dlmalloc.c, 4720 :: 		size_t rsize = gm->dvsize - nb;
0x31E2	0x492E    LDR	R1, [PC, #184]
0x31E4	0x6809    LDR	R1, [R1, #0]
0x31E6	0x1A0A    SUB	R2, R1, R0
; rsize start address is: 16 (R4)
0x31E8	0x4614    MOV	R4, R2
;__Lib_dlmalloc.c, 4721 :: 		mchunkptr p = gm->dv;
0x31EA	0x492D    LDR	R1, [PC, #180]
; p start address is: 12 (R3)
0x31EC	0x680B    LDR	R3, [R1, #0]
;__Lib_dlmalloc.c, 4722 :: 		if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
0x31EE	0x2A10    CMP	R2, #16
0x31F0	0xD312    BCC	L_malloc734
;__Lib_dlmalloc.c, 4723 :: 		mchunkptr r = gm->dv = chunk_plus_offset(p, nb);
0x31F2	0x181A    ADDS	R2, R3, R0
0x31F4	0x492A    LDR	R1, [PC, #168]
0x31F6	0x600A    STR	R2, [R1, #0]
; r start address is: 20 (R5)
0x31F8	0x4615    MOV	R5, R2
;__Lib_dlmalloc.c, 4724 :: 		gm->dvsize = rsize;
0x31FA	0x4928    LDR	R1, [PC, #160]
0x31FC	0x600C    STR	R4, [R1, #0]
;__Lib_dlmalloc.c, 4725 :: 		set_size_and_pinuse_of_free_chunk(r, rsize);
0x31FE	0x1D12    ADDS	R2, R2, #4
0x3200	0xF0440101  ORR	R1, R4, #1
0x3204	0x6011    STR	R1, [R2, #0]
0x3206	0x1929    ADDS	R1, R5, R4
; r end address is: 20 (R5)
0x3208	0x600C    STR	R4, [R1, #0]
; rsize end address is: 16 (R4)
;__Lib_dlmalloc.c, 4726 :: 		set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
0x320A	0x1D1A    ADDS	R2, R3, #4
0x320C	0xF0400101  ORR	R1, R0, #1
; nb end address is: 0 (R0)
0x3210	0xF0410102  ORR	R1, R1, #2
0x3214	0x6011    STR	R1, [R2, #0]
;__Lib_dlmalloc.c, 4727 :: 		}
0x3216	0xE012    B	L_malloc735
L_malloc734:
;__Lib_dlmalloc.c, 4729 :: 		size_t dvs = gm->dvsize;
0x3218	0x4A20    LDR	R2, [PC, #128]
; dvs start address is: 0 (R0)
0x321A	0x6810    LDR	R0, [R2, #0]
;__Lib_dlmalloc.c, 4730 :: 		gm->dvsize = 0;
0x321C	0x2100    MOVS	R1, #0
0x321E	0x6011    STR	R1, [R2, #0]
;__Lib_dlmalloc.c, 4731 :: 		gm->dv = 0;
0x3220	0x2200    MOVS	R2, #0
0x3222	0x491F    LDR	R1, [PC, #124]
0x3224	0x600A    STR	R2, [R1, #0]
;__Lib_dlmalloc.c, 4732 :: 		set_inuse_and_pinuse(gm, p, dvs);
0x3226	0x1D1A    ADDS	R2, R3, #4
0x3228	0xF0400101  ORR	R1, R0, #1
0x322C	0xF0410102  ORR	R1, R1, #2
0x3230	0x6011    STR	R1, [R2, #0]
0x3232	0x1819    ADDS	R1, R3, R0
; dvs end address is: 0 (R0)
0x3234	0x1D0A    ADDS	R2, R1, #4
0x3236	0x6811    LDR	R1, [R2, #0]
0x3238	0xF0410101  ORR	R1, R1, #1
0x323C	0x6011    STR	R1, [R2, #0]
;__Lib_dlmalloc.c, 4733 :: 		}
L_malloc735:
;__Lib_dlmalloc.c, 4734 :: 		mem = chunk2mem(p);
0x323E	0xF2030008  ADDW	R0, R3, #8
; p end address is: 12 (R3)
; mem start address is: 0 (R0)
;__Lib_dlmalloc.c, 4736 :: 		goto postaction;
; mem end address is: 0 (R0)
0x3242	0xE020    B	___malloc_postaction
;__Lib_dlmalloc.c, 4737 :: 		}
L_malloc733:
;__Lib_dlmalloc.c, 4739 :: 		else if (nb < gm->topsize) { /* Split top */
; nb start address is: 0 (R0)
0x3244	0x4918    LDR	R1, [PC, #96]
0x3246	0x6809    LDR	R1, [R1, #0]
0x3248	0x4288    CMP	R0, R1
0x324A	0xD216    BCS	L_malloc737
;__Lib_dlmalloc.c, 4740 :: 		size_t rsize = gm->topsize -= nb;
0x324C	0x4A16    LDR	R2, [PC, #88]
0x324E	0x6811    LDR	R1, [R2, #0]
0x3250	0x1A0B    SUB	R3, R1, R0
0x3252	0x6013    STR	R3, [R2, #0]
;__Lib_dlmalloc.c, 4741 :: 		mchunkptr p = gm->top;
0x3254	0x4A15    LDR	R2, [PC, #84]
; p start address is: 16 (R4)
0x3256	0x6814    LDR	R4, [R2, #0]
;__Lib_dlmalloc.c, 4742 :: 		mchunkptr r = gm->top = chunk_plus_offset(p, nb);
0x3258	0x4611    MOV	R1, R2
0x325A	0x6809    LDR	R1, [R1, #0]
0x325C	0x1809    ADDS	R1, R1, R0
0x325E	0x6011    STR	R1, [R2, #0]
;__Lib_dlmalloc.c, 4743 :: 		r->head = rsize | PINUSE_BIT;
0x3260	0x1D0A    ADDS	R2, R1, #4
0x3262	0xF0430101  ORR	R1, R3, #1
0x3266	0x6011    STR	R1, [R2, #0]
;__Lib_dlmalloc.c, 4744 :: 		set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
0x3268	0x1D22    ADDS	R2, R4, #4
0x326A	0xF0400101  ORR	R1, R0, #1
; nb end address is: 0 (R0)
0x326E	0xF0410102  ORR	R1, R1, #2
0x3272	0x6011    STR	R1, [R2, #0]
;__Lib_dlmalloc.c, 4745 :: 		mem = chunk2mem(p);
0x3274	0xF2040008  ADDW	R0, R4, #8
; p end address is: 16 (R4)
; mem start address is: 0 (R0)
;__Lib_dlmalloc.c, 4748 :: 		goto postaction;
; mem end address is: 0 (R0)
0x3278	0xE005    B	___malloc_postaction
;__Lib_dlmalloc.c, 4749 :: 		}
L_malloc737:
;__Lib_dlmalloc.c, 4751 :: 		mem = sys_alloc(gm, nb);
; nb start address is: 0 (R0)
0x327A	0x4601    MOV	R1, R0
; nb end address is: 0 (R0)
0x327C	0x4804    LDR	R0, [PC, #16]
0x327E	0xF7FEFEBF  BL	__Lib_dlmalloc_sys_alloc+0
; mem start address is: 4 (R1)
0x3282	0x4601    MOV	R1, R0
; mem end address is: 4 (R1)
0x3284	0x4608    MOV	R0, R1
;__Lib_dlmalloc.c, 4753 :: 		postaction:
___malloc_postaction:
;__Lib_dlmalloc.c, 4755 :: 		return mem;
; mem start address is: 0 (R0)
; mem end address is: 0 (R0)
;__Lib_dlmalloc.c, 4759 :: 		}
L_end_malloc:
0x3286	0xF8DDE000  LDR	LR, [SP, #0]
0x328A	0xB001    ADD	SP, SP, #4
0x328C	0x4770    BX	LR
0x328E	0xBF00    NOP
0x3290	0x22082000  	__Lib_dlmalloc__gm_+0
0x3294	0x22302000  	__Lib_dlmalloc__gm_+40
0x3298	0x22182000  	__Lib_dlmalloc__gm_+16
0x329C	0x22102000  	__Lib_dlmalloc__gm_+8
0x32A0	0x221C2000  	__Lib_dlmalloc__gm_+20
0x32A4	0x220C2000  	__Lib_dlmalloc__gm_+4
0x32A8	0x22142000  	__Lib_dlmalloc__gm_+12
0x32AC	0x22202000  	__Lib_dlmalloc__gm_+24
; end of _malloc
__Lib_dlmalloc_tmalloc_small:
;__Lib_dlmalloc.c, 4586 :: 		static void* tmalloc_small(mstate m, size_t nb) {
; nb start address is: 4 (R1)
; m start address is: 0 (R0)
0x1CB0	0xB082    SUB	SP, SP, #8
0x1CB2	0x9100    STR	R1, [SP, #0]
0x1CB4	0x4601    MOV	R1, R0
0x1CB6	0x9800    LDR	R0, [SP, #0]
; nb end address is: 4 (R1)
; m end address is: 0 (R0)
; m start address is: 4 (R1)
; nb start address is: 0 (R0)
;__Lib_dlmalloc.c, 4590 :: 		binmap_t leastbit = least_bit(m->treemap);
0x1CB8	0x1D0A    ADDS	R2, R1, #4
0x1CBA	0x6813    LDR	R3, [R2, #0]
0x1CBC	0x425A    RSBS	R2, R3, #0
0x1CBE	0xEA030202  AND	R2, R3, R2, LSL #0
;__Lib_dlmalloc.c, 4591 :: 		compute_bit2idx(leastbit, i);
0x1CC2	0x1E54    SUBS	R4, R2, #1
0x1CC4	0x0B22    LSRS	R2, R4, #12
0x1CC6	0xF0020310  AND	R3, R2, #16
0x1CCA	0x40DC    LSRS	R4, R3
0x1CCC	0x0962    LSRS	R2, R4, #5
0x1CCE	0xF0020208  AND	R2, R2, #8
0x1CD2	0x189B    ADDS	R3, R3, R2
0x1CD4	0x40D4    LSRS	R4, R2
0x1CD6	0x08A2    LSRS	R2, R4, #2
0x1CD8	0xF0020204  AND	R2, R2, #4
0x1CDC	0x189B    ADDS	R3, R3, R2
0x1CDE	0x40D4    LSRS	R4, R2
0x1CE0	0x0862    LSRS	R2, R4, #1
0x1CE2	0xF0020202  AND	R2, R2, #2
0x1CE6	0x189B    ADDS	R3, R3, R2
0x1CE8	0x40D4    LSRS	R4, R2
0x1CEA	0x0862    LSRS	R2, R4, #1
0x1CEC	0xF0020201  AND	R2, R2, #1
0x1CF0	0x189B    ADDS	R3, R3, R2
0x1CF2	0xFA24F202  LSR	R2, R4, R2
0x1CF6	0x189A    ADDS	R2, R3, R2
;__Lib_dlmalloc.c, 4592 :: 		v = t = *treebin_at(m, i);
0x1CF8	0xF5017398  ADD	R3, R1, #304
0x1CFC	0x0092    LSLS	R2, R2, #2
0x1CFE	0x189A    ADDS	R2, R3, R2
0x1D00	0x6812    LDR	R2, [R2, #0]
; t start address is: 16 (R4)
0x1D02	0x4614    MOV	R4, R2
; v start address is: 20 (R5)
0x1D04	0x4615    MOV	R5, R2
;__Lib_dlmalloc.c, 4593 :: 		rsize = chunksize(t) - nb;
0x1D06	0x1D12    ADDS	R2, R2, #4
0x1D08	0x6813    LDR	R3, [R2, #0]
0x1D0A	0xF06F0207  MVN	R2, #7
0x1D0E	0xEA030202  AND	R2, R3, R2, LSL #0
0x1D12	0x1A12    SUB	R2, R2, R0
; rsize start address is: 12 (R3)
0x1D14	0x4613    MOV	R3, R2
; t end address is: 16 (R4)
; rsize end address is: 12 (R3)
; v end address is: 20 (R5)
0x1D16	0x9300    STR	R3, [SP, #0]
0x1D18	0x4623    MOV	R3, R4
0x1D1A	0x9C00    LDR	R4, [SP, #0]
;__Lib_dlmalloc.c, 4595 :: 		while ((t = leftmost_child(t)) != 0) {
L___Lib_dlmalloc_tmalloc_small650:
; rsize start address is: 16 (R4)
; v start address is: 20 (R5)
; t start address is: 12 (R3)
; nb start address is: 0 (R0)
; nb end address is: 0 (R0)
; m start address is: 4 (R1)
; m end address is: 4 (R1)
0x1D1C	0xF2030210  ADDW	R2, R3, #16
0x1D20	0x6812    LDR	R2, [R2, #0]
0x1D22	0xB11A    CBZ	R2, L___Lib_dlmalloc_tmalloc_small652
; nb end address is: 0 (R0)
; m end address is: 4 (R1)
; m start address is: 4 (R1)
; nb start address is: 0 (R0)
0x1D24	0xF2030210  ADDW	R2, R3, #16
; t end address is: 12 (R3)
0x1D28	0x6812    LDR	R2, [R2, #0]
; ?FLOC____Lib_dlmalloc_tmalloc_small?T5855 start address is: 8 (R2)
; ?FLOC____Lib_dlmalloc_tmalloc_small?T5855 end address is: 8 (R2)
0x1D2A	0xE005    B	L___Lib_dlmalloc_tmalloc_small653
L___Lib_dlmalloc_tmalloc_small652:
; t start address is: 12 (R3)
0x1D2C	0xF2030210  ADDW	R2, R3, #16
; t end address is: 12 (R3)
0x1D30	0x1D12    ADDS	R2, R2, #4
0x1D32	0x6812    LDR	R2, [R2, #0]
; ?FLOC____Lib_dlmalloc_tmalloc_small?T5855 start address is: 12 (R3)
0x1D34	0x4613    MOV	R3, R2
; ?FLOC____Lib_dlmalloc_tmalloc_small?T5855 end address is: 12 (R3)
0x1D36	0x461A    MOV	R2, R3
L___Lib_dlmalloc_tmalloc_small653:
; ?FLOC____Lib_dlmalloc_tmalloc_small?T5855 start address is: 8 (R2)
; t start address is: 24 (R6)
0x1D38	0x4616    MOV	R6, R2
0x1D3A	0xB182    CBZ	R2, L___Lib_dlmalloc_tmalloc_small651
; ?FLOC____Lib_dlmalloc_tmalloc_small?T5855 end address is: 8 (R2)
;__Lib_dlmalloc.c, 4596 :: 		size_t trem = chunksize(t) - nb;
0x1D3C	0x1D32    ADDS	R2, R6, #4
0x1D3E	0x6813    LDR	R3, [R2, #0]
0x1D40	0xF06F0207  MVN	R2, #7
0x1D44	0xEA030202  AND	R2, R3, R2, LSL #0
0x1D48	0x1A12    SUB	R2, R2, R0
; trem start address is: 12 (R3)
0x1D4A	0x4613    MOV	R3, R2
;__Lib_dlmalloc.c, 4597 :: 		if (trem < rsize) {
0x1D4C	0x42A2    CMP	R2, R4
0x1D4E	0xD204    BCS	L___Lib_dlmalloc_tmalloc_small1329
; rsize end address is: 16 (R4)
; v end address is: 20 (R5)
;__Lib_dlmalloc.c, 4598 :: 		rsize = trem;
; rsize start address is: 8 (R2)
0x1D50	0x461A    MOV	R2, R3
; trem end address is: 12 (R3)
;__Lib_dlmalloc.c, 4599 :: 		v = t;
; v start address is: 12 (R3)
0x1D52	0x4633    MOV	R3, R6
; v end address is: 12 (R3)
; rsize end address is: 8 (R2)
0x1D54	0x4614    MOV	R4, R2
0x1D56	0x461D    MOV	R5, R3
;__Lib_dlmalloc.c, 4600 :: 		}
0x1D58	0xE7FF    B	L___Lib_dlmalloc_tmalloc_small654
L___Lib_dlmalloc_tmalloc_small1329:
;__Lib_dlmalloc.c, 4597 :: 		if (trem < rsize) {
;__Lib_dlmalloc.c, 4600 :: 		}
L___Lib_dlmalloc_tmalloc_small654:
;__Lib_dlmalloc.c, 4601 :: 		}
; v start address is: 20 (R5)
; rsize start address is: 16 (R4)
; t end address is: 24 (R6)
0x1D5A	0x4633    MOV	R3, R6
0x1D5C	0xE7DE    B	L___Lib_dlmalloc_tmalloc_small650
L___Lib_dlmalloc_tmalloc_small651:
;__Lib_dlmalloc.c, 4603 :: 		if (RTCHECK(ok_address(m, v))) {
0x1D5E	0xF2010210  ADDW	R2, R1, #16
0x1D62	0x6812    LDR	R2, [R2, #0]
0x1D64	0x4295    CMP	R5, R2
0x1D66	0xF0C0813A  BCC	L___Lib_dlmalloc_tmalloc_small655
;__Lib_dlmalloc.c, 4604 :: 		mchunkptr r = chunk_plus_offset(v, nb);
0x1D6A	0x182A    ADDS	R2, R5, R0
; r start address is: 24 (R6)
0x1D6C	0x4616    MOV	R6, R2
;__Lib_dlmalloc.c, 4606 :: 		if (RTCHECK(ok_next(v, r))) {
0x1D6E	0x4295    CMP	R5, R2
0x1D70	0xF0808135  BCS	L___Lib_dlmalloc_tmalloc_small656
;__Lib_dlmalloc.c, 4607 :: 		unlink_large_chunk(m, v);
0x1D74	0xF2050218  ADDW	R2, R5, #24
0x1D78	0x6817    LDR	R7, [R2, #0]
; XP start address is: 28 (R7)
0x1D7A	0xF205020C  ADDW	R2, R5, #12
0x1D7E	0x6812    LDR	R2, [R2, #0]
0x1D80	0x42AA    CMP	R2, R5
0x1D82	0xD024    BEQ	L___Lib_dlmalloc_tmalloc_small657
0x1D84	0xF2050208  ADDW	R2, R5, #8
0x1D88	0x6813    LDR	R3, [R2, #0]
; F start address is: 32 (R8)
0x1D8A	0x4698    MOV	R8, R3
0x1D8C	0xF205020C  ADDW	R2, R5, #12
0x1D90	0x6812    LDR	R2, [R2, #0]
; R start address is: 36 (R9)
0x1D92	0x4691    MOV	R9, R2
0x1D94	0xF2010210  ADDW	R2, R1, #16
0x1D98	0x6812    LDR	R2, [R2, #0]
0x1D9A	0x4293    CMP	R3, R2
0x1D9C	0xD312    BCC	L___Lib_dlmalloc_tmalloc_small1324
0x1D9E	0xF108020C  ADD	R2, R8, #12
0x1DA2	0x6812    LDR	R2, [R2, #0]
0x1DA4	0x42AA    CMP	R2, R5
0x1DA6	0xD10D    BNE	L___Lib_dlmalloc_tmalloc_small1323
0x1DA8	0xF1090208  ADD	R2, R9, #8
0x1DAC	0x6812    LDR	R2, [R2, #0]
0x1DAE	0x42AA    CMP	R2, R5
0x1DB0	0xD108    BNE	L___Lib_dlmalloc_tmalloc_small1322
L___Lib_dlmalloc_tmalloc_small1321:
0x1DB2	0xF108020C  ADD	R2, R8, #12
0x1DB6	0xF8C29000  STR	R9, [R2, #0]
0x1DBA	0xF1090208  ADD	R2, R9, #8
0x1DBE	0xF8C28000  STR	R8, [R2, #0]
; F end address is: 32 (R8)
0x1DC2	0xE7FF    B	L___Lib_dlmalloc_tmalloc_small661
L___Lib_dlmalloc_tmalloc_small1324:
L___Lib_dlmalloc_tmalloc_small1323:
L___Lib_dlmalloc_tmalloc_small1322:
L___Lib_dlmalloc_tmalloc_small661:
0x1DC4	0x46C8    MOV	R8, R9
; R end address is: 36 (R9)
0x1DC6	0x4681    MOV	R9, R0
0x1DC8	0x4628    MOV	R0, R5
0x1DCA	0x4625    MOV	R5, R4
0x1DCC	0xE03C    B	L___Lib_dlmalloc_tmalloc_small662
L___Lib_dlmalloc_tmalloc_small657:
0x1DCE	0xF2050210  ADDW	R2, R5, #16
0x1DD2	0x1D12    ADDS	R2, R2, #4
; RP start address is: 12 (R3)
0x1DD4	0x4613    MOV	R3, R2
0x1DD6	0x6812    LDR	R2, [R2, #0]
; R start address is: 32 (R8)
0x1DD8	0x4690    MOV	R8, R2
0x1DDA	0xB952    CBNZ	R2, L___Lib_dlmalloc_tmalloc_small1326
; RP end address is: 12 (R3)
; R end address is: 32 (R8)
0x1DDC	0xF2050210  ADDW	R2, R5, #16
; RP start address is: 32 (R8)
0x1DE0	0x4690    MOV	R8, R2
0x1DE2	0x6812    LDR	R2, [R2, #0]
; R start address is: 12 (R3)
0x1DE4	0x4613    MOV	R3, R2
0x1DE6	0xB932    CBNZ	R2, L___Lib_dlmalloc_tmalloc_small1330
; RP end address is: 32 (R8)
0x1DE8	0x4698    MOV	R8, R3
; R end address is: 12 (R3)
0x1DEA	0x4681    MOV	R9, R0
0x1DEC	0x4622    MOV	R2, R4
0x1DEE	0x462C    MOV	R4, R5
0x1DF0	0xE028    B	L___Lib_dlmalloc_tmalloc_small665
L___Lib_dlmalloc_tmalloc_small1326:
; R start address is: 32 (R8)
; RP start address is: 12 (R3)
0x1DF2	0x461A    MOV	R2, R3
; R end address is: 32 (R8)
0x1DF4	0xE001    B	L___Lib_dlmalloc_tmalloc_small1325
; RP end address is: 12 (R3)
L___Lib_dlmalloc_tmalloc_small1330:
0x1DF6	0x4642    MOV	R2, R8
0x1DF8	0x4698    MOV	R8, R3
L___Lib_dlmalloc_tmalloc_small1325:
; R start address is: 32 (R8)
; RP start address is: 8 (R2)
0x1DFA	0x460B    MOV	R3, R1
; nb end address is: 0 (R0)
; rsize end address is: 16 (R4)
; RP end address is: 8 (R2)
; XP end address is: 28 (R7)
; r end address is: 24 (R6)
; m end address is: 4 (R1)
; R end address is: 32 (R8)
0x1DFC	0x4631    MOV	R1, R6
0x1DFE	0x4626    MOV	R6, R4
0x1E00	0x4604    MOV	R4, R0
0x1E02	0x4638    MOV	R0, R7
0x1E04	0x4617    MOV	R7, R2
L___Lib_dlmalloc_tmalloc_small666:
; RP start address is: 28 (R7)
; rsize start address is: 24 (R6)
; nb start address is: 16 (R4)
; m start address is: 12 (R3)
; r start address is: 4 (R1)
; XP start address is: 0 (R0)
; R start address is: 32 (R8)
; XP start address is: 0 (R0)
; XP end address is: 0 (R0)
; r start address is: 4 (R1)
; r end address is: 4 (R1)
; m start address is: 12 (R3)
; m end address is: 12 (R3)
; nb start address is: 16 (R4)
; nb end address is: 16 (R4)
; v start address is: 20 (R5)
; v end address is: 20 (R5)
; rsize start address is: 24 (R6)
; rsize end address is: 24 (R6)
0x1E06	0xF1080210  ADD	R2, R8, #16
0x1E0A	0x1D12    ADDS	R2, R2, #4
0x1E0C	0x9201    STR	R2, [SP, #4]
0x1E0E	0x6812    LDR	R2, [R2, #0]
0x1E10	0xB92A    CBNZ	R2, L___Lib_dlmalloc_tmalloc_small1328
; XP end address is: 0 (R0)
; r end address is: 4 (R1)
; m end address is: 12 (R3)
; nb end address is: 16 (R4)
; v end address is: 20 (R5)
; rsize end address is: 24 (R6)
; rsize start address is: 24 (R6)
; v start address is: 20 (R5)
; nb start address is: 16 (R4)
; m start address is: 12 (R3)
; r start address is: 4 (R1)
; XP start address is: 0 (R0)
0x1E12	0xF1080210  ADD	R2, R8, #16
0x1E16	0x9201    STR	R2, [SP, #4]
0x1E18	0x6812    LDR	R2, [R2, #0]
0x1E1A	0xB902    CBNZ	R2, L___Lib_dlmalloc_tmalloc_small1327
0x1E1C	0xE004    B	L___Lib_dlmalloc_tmalloc_small667
; RP end address is: 28 (R7)
; R end address is: 32 (R8)
L___Lib_dlmalloc_tmalloc_small1328:
L___Lib_dlmalloc_tmalloc_small1327:
; RP start address is: 28 (R7)
0x1E1E	0x9F01    LDR	R7, [SP, #4]
0x1E20	0x9A01    LDR	R2, [SP, #4]
0x1E22	0x6812    LDR	R2, [R2, #0]
; R start address is: 32 (R8)
0x1E24	0x4690    MOV	R8, R2
0x1E26	0xE7EE    B	L___Lib_dlmalloc_tmalloc_small666
L___Lib_dlmalloc_tmalloc_small667:
0x1E28	0xF2030210  ADDW	R2, R3, #16
0x1E2C	0x6812    LDR	R2, [R2, #0]
0x1E2E	0x4297    CMP	R7, R2
0x1E30	0xD302    BCC	L___Lib_dlmalloc_tmalloc_small670
0x1E32	0x2200    MOVS	R2, #0
0x1E34	0x603A    STR	R2, [R7, #0]
; RP end address is: 28 (R7)
0x1E36	0xE7FF    B	L___Lib_dlmalloc_tmalloc_small671
L___Lib_dlmalloc_tmalloc_small670:
L___Lib_dlmalloc_tmalloc_small671:
; r end address is: 4 (R1)
; m end address is: 12 (R3)
; nb end address is: 16 (R4)
; v end address is: 20 (R5)
; rsize end address is: 24 (R6)
; R end address is: 32 (R8)
0x1E38	0x4607    MOV	R7, R0
0x1E3A	0x4632    MOV	R2, R6
0x1E3C	0x460E    MOV	R6, R1
0x1E3E	0x4619    MOV	R1, R3
0x1E40	0x46A1    MOV	R9, R4
0x1E42	0x462C    MOV	R4, R5
L___Lib_dlmalloc_tmalloc_small665:
; XP end address is: 0 (R0)
; rsize start address is: 8 (R2)
; v start address is: 16 (R4)
; nb start address is: 36 (R9)
; m start address is: 4 (R1)
; r start address is: 24 (R6)
; XP start address is: 28 (R7)
; R start address is: 32 (R8)
0x1E44	0x4615    MOV	R5, R2
; rsize end address is: 8 (R2)
; v end address is: 16 (R4)
; XP end address is: 28 (R7)
; r end address is: 24 (R6)
; m end address is: 4 (R1)
; nb end address is: 36 (R9)
; R end address is: 32 (R8)
0x1E46	0x4620    MOV	R0, R4
L___Lib_dlmalloc_tmalloc_small662:
; R start address is: 32 (R8)
; XP start address is: 28 (R7)
; r start address is: 24 (R6)
; m start address is: 4 (R1)
; nb start address is: 36 (R9)
; v start address is: 0 (R0)
; rsize start address is: 20 (R5)
0x1E48	0x2F00    CMP	R7, #0
0x1E4A	0xF0008062  BEQ	L___Lib_dlmalloc_tmalloc_small672
0x1E4E	0xF5017398  ADD	R3, R1, #304
0x1E52	0xF200021C  ADDW	R2, R0, #28
0x1E56	0x6812    LDR	R2, [R2, #0]
0x1E58	0x0092    LSLS	R2, R2, #2
0x1E5A	0x189A    ADDS	R2, R3, R2
; H start address is: 12 (R3)
0x1E5C	0x4613    MOV	R3, R2
0x1E5E	0x6812    LDR	R2, [R2, #0]
0x1E60	0x4290    CMP	R0, R2
0x1E62	0xD10F    BNE	L___Lib_dlmalloc_tmalloc_small673
0x1E64	0xF8C38000  STR	R8, [R3, #0]
0x1E68	0x681A    LDR	R2, [R3, #0]
; H end address is: 12 (R3)
0x1E6A	0xB952    CBNZ	R2, L___Lib_dlmalloc_tmalloc_small674
0x1E6C	0x1D0C    ADDS	R4, R1, #4
0x1E6E	0xF200021C  ADDW	R2, R0, #28
0x1E72	0x6813    LDR	R3, [R2, #0]
0x1E74	0xF04F0201  MOV	R2, #1
0x1E78	0x409A    LSLS	R2, R3
0x1E7A	0x43D3    MVN	R3, R2
0x1E7C	0x6822    LDR	R2, [R4, #0]
0x1E7E	0x401A    ANDS	R2, R3
0x1E80	0x6022    STR	R2, [R4, #0]
L___Lib_dlmalloc_tmalloc_small674:
0x1E82	0xE014    B	L___Lib_dlmalloc_tmalloc_small675
L___Lib_dlmalloc_tmalloc_small673:
0x1E84	0xF2010210  ADDW	R2, R1, #16
0x1E88	0x6812    LDR	R2, [R2, #0]
0x1E8A	0x4297    CMP	R7, R2
0x1E8C	0xD30F    BCC	L___Lib_dlmalloc_tmalloc_small676
0x1E8E	0xF2070210  ADDW	R2, R7, #16
0x1E92	0x6812    LDR	R2, [R2, #0]
0x1E94	0x4282    CMP	R2, R0
0x1E96	0xD104    BNE	L___Lib_dlmalloc_tmalloc_small677
0x1E98	0xF2070210  ADDW	R2, R7, #16
0x1E9C	0xF8C28000  STR	R8, [R2, #0]
0x1EA0	0xE004    B	L___Lib_dlmalloc_tmalloc_small678
L___Lib_dlmalloc_tmalloc_small677:
0x1EA2	0xF2070210  ADDW	R2, R7, #16
0x1EA6	0x1D12    ADDS	R2, R2, #4
0x1EA8	0xF8C28000  STR	R8, [R2, #0]
L___Lib_dlmalloc_tmalloc_small678:
0x1EAC	0xE7FF    B	L___Lib_dlmalloc_tmalloc_small679
L___Lib_dlmalloc_tmalloc_small676:
L___Lib_dlmalloc_tmalloc_small679:
L___Lib_dlmalloc_tmalloc_small675:
0x1EAE	0xF1B80F00  CMP	R8, #0
0x1EB2	0xD02E    BEQ	L___Lib_dlmalloc_tmalloc_small680
0x1EB4	0xF2010210  ADDW	R2, R1, #16
0x1EB8	0x6812    LDR	R2, [R2, #0]
0x1EBA	0x4590    CMP	R8, R2
0x1EBC	0xD329    BCC	L___Lib_dlmalloc_tmalloc_small681
0x1EBE	0xF1080218  ADD	R2, R8, #24
0x1EC2	0x6017    STR	R7, [R2, #0]
; XP end address is: 28 (R7)
0x1EC4	0xF2000210  ADDW	R2, R0, #16
0x1EC8	0x6812    LDR	R2, [R2, #0]
; C0 start address is: 12 (R3)
0x1ECA	0x4613    MOV	R3, R2
0x1ECC	0xB162    CBZ	R2, L___Lib_dlmalloc_tmalloc_small682
0x1ECE	0xF2010210  ADDW	R2, R1, #16
0x1ED2	0x6812    LDR	R2, [R2, #0]
0x1ED4	0x4293    CMP	R3, R2
0x1ED6	0xD307    BCC	L___Lib_dlmalloc_tmalloc_small683
0x1ED8	0xF1080210  ADD	R2, R8, #16
0x1EDC	0x6013    STR	R3, [R2, #0]
0x1EDE	0xF2030218  ADDW	R2, R3, #24
; C0 end address is: 12 (R3)
0x1EE2	0xF8C28000  STR	R8, [R2, #0]
0x1EE6	0xE7FF    B	L___Lib_dlmalloc_tmalloc_small684
L___Lib_dlmalloc_tmalloc_small683:
L___Lib_dlmalloc_tmalloc_small684:
L___Lib_dlmalloc_tmalloc_small682:
0x1EE8	0xF2000210  ADDW	R2, R0, #16
0x1EEC	0x1D12    ADDS	R2, R2, #4
0x1EEE	0x6812    LDR	R2, [R2, #0]
; C1 start address is: 12 (R3)
0x1EF0	0x4613    MOV	R3, R2
0x1EF2	0xB16A    CBZ	R2, L___Lib_dlmalloc_tmalloc_small685
0x1EF4	0xF2010210  ADDW	R2, R1, #16
0x1EF8	0x6812    LDR	R2, [R2, #0]
0x1EFA	0x4293    CMP	R3, R2
0x1EFC	0xD308    BCC	L___Lib_dlmalloc_tmalloc_small686
0x1EFE	0xF1080210  ADD	R2, R8, #16
0x1F02	0x1D12    ADDS	R2, R2, #4
0x1F04	0x6013    STR	R3, [R2, #0]
0x1F06	0xF2030218  ADDW	R2, R3, #24
; C1 end address is: 12 (R3)
0x1F0A	0xF8C28000  STR	R8, [R2, #0]
; R end address is: 32 (R8)
0x1F0E	0xE7FF    B	L___Lib_dlmalloc_tmalloc_small687
L___Lib_dlmalloc_tmalloc_small686:
L___Lib_dlmalloc_tmalloc_small687:
L___Lib_dlmalloc_tmalloc_small685:
0x1F10	0xE7FF    B	L___Lib_dlmalloc_tmalloc_small688
L___Lib_dlmalloc_tmalloc_small681:
L___Lib_dlmalloc_tmalloc_small688:
L___Lib_dlmalloc_tmalloc_small680:
L___Lib_dlmalloc_tmalloc_small672:
;__Lib_dlmalloc.c, 4608 :: 		if (rsize < MIN_CHUNK_SIZE)
0x1F12	0x2D10    CMP	R5, #16
0x1F14	0xD210    BCS	L___Lib_dlmalloc_tmalloc_small689
; r end address is: 24 (R6)
; m end address is: 4 (R1)
;__Lib_dlmalloc.c, 4609 :: 		set_inuse_and_pinuse(m, v, (rsize + nb));
0x1F16	0x1D03    ADDS	R3, R0, #4
0x1F18	0xEB050209  ADD	R2, R5, R9, LSL #0
0x1F1C	0xF0420201  ORR	R2, R2, #1
0x1F20	0xF0420202  ORR	R2, R2, #2
0x1F24	0x601A    STR	R2, [R3, #0]
0x1F26	0xEB050209  ADD	R2, R5, R9, LSL #0
; nb end address is: 36 (R9)
; rsize end address is: 20 (R5)
0x1F2A	0x1882    ADDS	R2, R0, R2
0x1F2C	0x1D13    ADDS	R3, R2, #4
0x1F2E	0x681A    LDR	R2, [R3, #0]
0x1F30	0xF0420201  ORR	R2, R2, #1
0x1F34	0x601A    STR	R2, [R3, #0]
0x1F36	0xE04E    B	L___Lib_dlmalloc_tmalloc_small690
L___Lib_dlmalloc_tmalloc_small689:
;__Lib_dlmalloc.c, 4611 :: 		set_size_and_pinuse_of_inuse_chunk(m, v, nb);
; rsize start address is: 20 (R5)
; nb start address is: 36 (R9)
; m start address is: 4 (R1)
; r start address is: 24 (R6)
0x1F38	0x1D03    ADDS	R3, R0, #4
0x1F3A	0xF0490201  ORR	R2, R9, #1
; nb end address is: 36 (R9)
0x1F3E	0xF0420202  ORR	R2, R2, #2
0x1F42	0x601A    STR	R2, [R3, #0]
;__Lib_dlmalloc.c, 4612 :: 		set_size_and_pinuse_of_free_chunk(r, rsize);
0x1F44	0x1D33    ADDS	R3, R6, #4
0x1F46	0xF0450201  ORR	R2, R5, #1
0x1F4A	0x601A    STR	R2, [R3, #0]
0x1F4C	0x1972    ADDS	R2, R6, R5
0x1F4E	0x6015    STR	R5, [R2, #0]
;__Lib_dlmalloc.c, 4613 :: 		replace_dv(m, r, rsize);
0x1F50	0xF2010208  ADDW	R2, R1, #8
0x1F54	0x6812    LDR	R2, [R2, #0]
; DVS start address is: 12 (R3)
0x1F56	0x4613    MOV	R3, R2
0x1F58	0xB3BA    CBZ	R2, L___Lib_dlmalloc_tmalloc_small691
0x1F5A	0xF2010214  ADDW	R2, R1, #20
0x1F5E	0x6812    LDR	R2, [R2, #0]
; DV start address is: 28 (R7)
0x1F60	0x4617    MOV	R7, R2
0x1F62	0x08DC    LSRS	R4, R3, #3
; DVS end address is: 12 (R3)
; I start address is: 36 (R9)
0x1F64	0x46A1    MOV	R9, R4
0x1F66	0xF2010328  ADDW	R3, R1, #40
0x1F6A	0x0062    LSLS	R2, R4, #1
0x1F6C	0x0092    LSLS	R2, R2, #2
0x1F6E	0x189A    ADDS	R2, R3, R2
; B start address is: 32 (R8)
0x1F70	0x4690    MOV	R8, R2
; F start address is: 40 (R10)
0x1F72	0x4692    MOV	R10, R2
0x1F74	0x680B    LDR	R3, [R1, #0]
0x1F76	0xF04F0201  MOV	R2, #1
0x1F7A	0x40A2    LSLS	R2, R4
0x1F7C	0xEA030202  AND	R2, R3, R2, LSL #0
0x1F80	0xB942    CBNZ	R2, L___Lib_dlmalloc_tmalloc_small692
0x1F82	0xF04F0201  MOV	R2, #1
0x1F86	0xFA02F309  LSL	R3, R2, R9
; I end address is: 36 (R9)
0x1F8A	0x680A    LDR	R2, [R1, #0]
0x1F8C	0x431A    ORRS	R2, R3
0x1F8E	0x600A    STR	R2, [R1, #0]
0x1F90	0x4653    MOV	R3, R10
0x1F92	0xE00D    B	L___Lib_dlmalloc_tmalloc_small693
L___Lib_dlmalloc_tmalloc_small692:
0x1F94	0xF1080208  ADD	R2, R8, #8
0x1F98	0x6813    LDR	R3, [R2, #0]
0x1F9A	0xF2010210  ADDW	R2, R1, #16
0x1F9E	0x6812    LDR	R2, [R2, #0]
0x1FA0	0x4293    CMP	R3, R2
0x1FA2	0xD304    BCC	L___Lib_dlmalloc_tmalloc_small694
; F end address is: 40 (R10)
0x1FA4	0xF1080208  ADD	R2, R8, #8
0x1FA8	0x6812    LDR	R2, [R2, #0]
; F start address is: 8 (R2)
0x1FAA	0x4613    MOV	R3, R2
; F end address is: 8 (R2)
0x1FAC	0xE000    B	L___Lib_dlmalloc_tmalloc_small695
L___Lib_dlmalloc_tmalloc_small694:
; F start address is: 40 (R10)
0x1FAE	0x4653    MOV	R3, R10
L___Lib_dlmalloc_tmalloc_small695:
; F end address is: 40 (R10)
; F start address is: 12 (R3)
; F end address is: 12 (R3)
L___Lib_dlmalloc_tmalloc_small693:
; F start address is: 12 (R3)
0x1FB0	0xF1080208  ADD	R2, R8, #8
0x1FB4	0x6017    STR	R7, [R2, #0]
0x1FB6	0xF203020C  ADDW	R2, R3, #12
0x1FBA	0x6017    STR	R7, [R2, #0]
0x1FBC	0xF2070208  ADDW	R2, R7, #8
0x1FC0	0x6013    STR	R3, [R2, #0]
; F end address is: 12 (R3)
0x1FC2	0xF207020C  ADDW	R2, R7, #12
; DV end address is: 28 (R7)
0x1FC6	0xF8C28000  STR	R8, [R2, #0]
; B end address is: 32 (R8)
L___Lib_dlmalloc_tmalloc_small691:
0x1FCA	0xF2010208  ADDW	R2, R1, #8
0x1FCE	0x6015    STR	R5, [R2, #0]
; rsize end address is: 20 (R5)
0x1FD0	0xF2010214  ADDW	R2, R1, #20
; m end address is: 4 (R1)
0x1FD4	0x6016    STR	R6, [R2, #0]
; r end address is: 24 (R6)
;__Lib_dlmalloc.c, 4614 :: 		}
L___Lib_dlmalloc_tmalloc_small690:
;__Lib_dlmalloc.c, 4615 :: 		return chunk2mem(v);
0x1FD6	0xF2000208  ADDW	R2, R0, #8
; v end address is: 0 (R0)
0x1FDA	0x4610    MOV	R0, R2
0x1FDC	0xE000    B	L_end_tmalloc_small
;__Lib_dlmalloc.c, 4616 :: 		}
L___Lib_dlmalloc_tmalloc_small656:
;__Lib_dlmalloc.c, 4617 :: 		}
L___Lib_dlmalloc_tmalloc_small655:
;__Lib_dlmalloc.c, 4620 :: 		return 0;
0x1FDE	0x2000    MOVS	R0, #0
;__Lib_dlmalloc.c, 4621 :: 		}
L_end_tmalloc_small:
0x1FE0	0xB002    ADD	SP, SP, #8
0x1FE2	0x4770    BX	LR
; end of __Lib_dlmalloc_tmalloc_small
__Lib_dlmalloc_tmalloc_large:
;__Lib_dlmalloc.c, 4515 :: 		static void* tmalloc_large(mstate m, size_t nb) {
; nb start address is: 4 (R1)
; m start address is: 0 (R0)
0x16DC	0xB082    SUB	SP, SP, #8
0x16DE	0x460E    MOV	R6, R1
; nb end address is: 4 (R1)
; m end address is: 0 (R0)
; m start address is: 0 (R0)
; nb start address is: 24 (R6)
;__Lib_dlmalloc.c, 4516 :: 		tchunkptr v = 0;
; v start address is: 28 (R7)
0x16E0	0xF04F0700  MOV	R7, #0
;__Lib_dlmalloc.c, 4517 :: 		size_t rsize = -nb; /* Unsigned negation */
0x16E4	0x4272    RSBS	R2, R6, #0
; rsize start address is: 32 (R8)
0x16E6	0x4690    MOV	R8, R2
;__Lib_dlmalloc.c, 4520 :: 		compute_tree_index(nb, idx);
0x16E8	0x0A32    LSRS	R2, R6, #8
; X start address is: 4 (R1)
0x16EA	0x4611    MOV	R1, R2
0x16EC	0xB90A    CBNZ	R2, L___Lib_dlmalloc_tmalloc_large559
; X end address is: 4 (R1)
; idx start address is: 4 (R1)
0x16EE	0x2100    MOVS	R1, #0
; idx end address is: 4 (R1)
0x16F0	0xE027    B	L___Lib_dlmalloc_tmalloc_large560
L___Lib_dlmalloc_tmalloc_large559:
; X start address is: 4 (R1)
0x16F2	0x4AFE    LDR	R2, [PC, #1016]
0x16F4	0x4291    CMP	R1, R2
0x16F6	0xD902    BLS	L___Lib_dlmalloc_tmalloc_large561
; X end address is: 4 (R1)
; idx start address is: 4 (R1)
0x16F8	0xF04F011F  MOV	R1, #31
; idx end address is: 4 (R1)
0x16FC	0xE021    B	L___Lib_dlmalloc_tmalloc_large562
L___Lib_dlmalloc_tmalloc_large561:
; X start address is: 4 (R1)
0x16FE	0xF5A17280  SUB	R2, R1, #256
0x1702	0x0C12    LSRS	R2, R2, #16
0x1704	0xF0020308  AND	R3, R2, #8
0x1708	0xFA01F403  LSL	R4, R1, R3
; X end address is: 4 (R1)
0x170C	0xF5A45280  SUB	R2, R4, #4096
0x1710	0x0C12    LSRS	R2, R2, #16
0x1712	0xF0020204  AND	R2, R2, #4
0x1716	0x189B    ADDS	R3, R3, R2
0x1718	0xFA04F502  LSL	R5, R4, R2
0x171C	0xF5A54280  SUB	R2, R5, #16384
0x1720	0x0C12    LSRS	R2, R2, #16
0x1722	0xF0020402  AND	R4, R2, #2
0x1726	0x191A    ADDS	R2, R3, R4
0x1728	0xF1C2030E  RSB	R3, R2, #14
0x172C	0xFA05F204  LSL	R2, R5, R4
0x1730	0x0BD2    LSRS	R2, R2, #15
0x1732	0x189A    ADDS	R2, R3, R2
0x1734	0x0051    LSLS	R1, R2, #1
0x1736	0x1DD2    ADDS	R2, R2, #7
0x1738	0xFA26F202  LSR	R2, R6, R2
0x173C	0xF0020201  AND	R2, R2, #1
0x1740	0x1889    ADDS	R1, R1, R2
; idx start address is: 4 (R1)
; idx end address is: 4 (R1)
L___Lib_dlmalloc_tmalloc_large562:
; idx start address is: 4 (R1)
; idx end address is: 4 (R1)
L___Lib_dlmalloc_tmalloc_large560:
;__Lib_dlmalloc.c, 4521 :: 		if ((t = *treebin_at(m, idx)) != 0) {
; idx start address is: 4 (R1)
0x1742	0xF5007398  ADD	R3, R0, #304
0x1746	0x008A    LSLS	R2, R1, #2
0x1748	0x189A    ADDS	R2, R3, R2
0x174A	0x6812    LDR	R2, [R2, #0]
; t start address is: 40 (R10)
0x174C	0x4692    MOV	R10, R2
0x174E	0x2A00    CMP	R2, #0
0x1750	0xD042    BEQ	L___Lib_dlmalloc_tmalloc_large1313
;__Lib_dlmalloc.c, 4523 :: 		size_t sizebits = nb << leftshift_for_tree_index(idx);
0x1752	0x291F    CMP	R1, #31
0x1754	0xD101    BNE	L___Lib_dlmalloc_tmalloc_large564
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5033 start address is: 12 (R3)
0x1756	0x2300    MOVS	R3, #0
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5033 end address is: 12 (R3)
0x1758	0xE004    B	L___Lib_dlmalloc_tmalloc_large565
L___Lib_dlmalloc_tmalloc_large564:
0x175A	0x084A    LSRS	R2, R1, #1
0x175C	0x3208    ADDS	R2, #8
0x175E	0x1E92    SUBS	R2, R2, #2
0x1760	0xF1C2031F  RSB	R3, R2, #31
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5033 start address is: 12 (R3)
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5033 end address is: 12 (R3)
L___Lib_dlmalloc_tmalloc_large565:
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5033 start address is: 12 (R3)
0x1764	0xFA06F503  LSL	R5, R6, R3
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5033 end address is: 12 (R3)
; sizebits start address is: 20 (R5)
;__Lib_dlmalloc.c, 4524 :: 		tchunkptr rst = 0;  /* The deepest untaken right subtree */
; rst start address is: 36 (R9)
0x1768	0xF04F0900  MOV	R9, #0
; v end address is: 28 (R7)
; rsize end address is: 32 (R8)
; t end address is: 40 (R10)
; rst end address is: 36 (R9)
; sizebits end address is: 20 (R5)
; nb end address is: 24 (R6)
0x176C	0x4644    MOV	R4, R8
0x176E	0x46B8    MOV	R8, R7
;__Lib_dlmalloc.c, 4525 :: 		for (;;) {
L___Lib_dlmalloc_tmalloc_large566:
;__Lib_dlmalloc.c, 4527 :: 		size_t trem = chunksize(t) - nb;
; rst start address is: 36 (R9)
; sizebits start address is: 20 (R5)
; t start address is: 40 (R10)
; idx start address is: 4 (R1)
; idx end address is: 4 (R1)
; rsize start address is: 16 (R4)
; v start address is: 32 (R8)
; nb start address is: 24 (R6)
; m start address is: 0 (R0)
; m end address is: 0 (R0)
0x1770	0xF10A0204  ADD	R2, R10, #4
0x1774	0x6813    LDR	R3, [R2, #0]
0x1776	0xF06F0207  MVN	R2, #7
0x177A	0xEA030202  AND	R2, R3, R2, LSL #0
0x177E	0x1B92    SUB	R2, R2, R6
; trem start address is: 12 (R3)
0x1780	0x4613    MOV	R3, R2
;__Lib_dlmalloc.c, 4528 :: 		if (trem < rsize) {
0x1782	0x42A2    CMP	R2, R4
0x1784	0xD207    BCS	L___Lib_dlmalloc_tmalloc_large1310
; idx end address is: 4 (R1)
; rsize end address is: 16 (R4)
; m end address is: 0 (R0)
;__Lib_dlmalloc.c, 4529 :: 		v = t;
; m start address is: 0 (R0)
; idx start address is: 4 (R1)
0x1786	0x46D0    MOV	R8, R10
;__Lib_dlmalloc.c, 4530 :: 		if ((rsize = trem) == 0)
; rsize start address is: 28 (R7)
0x1788	0x461F    MOV	R7, R3
0x178A	0xB91B    CBNZ	R3, L___Lib_dlmalloc_tmalloc_large570
; trem end address is: 12 (R3)
; rst end address is: 36 (R9)
; sizebits end address is: 20 (R5)
;__Lib_dlmalloc.c, 4531 :: 		break;
0x178C	0x463A    MOV	R2, R7
0x178E	0x4645    MOV	R5, R8
0x1790	0x4654    MOV	R4, R10
0x1792	0xE01E    B	L___Lib_dlmalloc_tmalloc_large567
L___Lib_dlmalloc_tmalloc_large570:
;__Lib_dlmalloc.c, 4532 :: 		}
; sizebits start address is: 20 (R5)
; rst start address is: 36 (R9)
; v end address is: 32 (R8)
0x1794	0xE000    B	L___Lib_dlmalloc_tmalloc_large569
; rsize end address is: 28 (R7)
L___Lib_dlmalloc_tmalloc_large1310:
;__Lib_dlmalloc.c, 4528 :: 		if (trem < rsize) {
0x1796	0x4627    MOV	R7, R4
;__Lib_dlmalloc.c, 4532 :: 		}
L___Lib_dlmalloc_tmalloc_large569:
;__Lib_dlmalloc.c, 4533 :: 		rt = t->child[1];
; rsize start address is: 28 (R7)
; v start address is: 32 (R8)
0x1798	0xF10A0410  ADD	R4, R10, #16
; t end address is: 40 (R10)
0x179C	0x1D22    ADDS	R2, R4, #4
0x179E	0x6813    LDR	R3, [R2, #0]
; rt start address is: 44 (R11)
0x17A0	0x469B    MOV	R11, R3
;__Lib_dlmalloc.c, 4534 :: 		t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
0x17A2	0x0FEA    LSRS	R2, R5, #31
0x17A4	0xF0020201  AND	R2, R2, #1
0x17A8	0x0092    LSLS	R2, R2, #2
0x17AA	0x18A2    ADDS	R2, R4, R2
0x17AC	0x6812    LDR	R2, [R2, #0]
; t start address is: 40 (R10)
0x17AE	0x4692    MOV	R10, R2
;__Lib_dlmalloc.c, 4535 :: 		if (rt != 0 && rt != t)
0x17B0	0xB123    CBZ	R3, L___Lib_dlmalloc_tmalloc_large1311
0x17B2	0x45D3    CMP	R11, R10
0x17B4	0xD003    BEQ	L___Lib_dlmalloc_tmalloc_large1312
; rst end address is: 36 (R9)
L___Lib_dlmalloc_tmalloc_large1294:
;__Lib_dlmalloc.c, 4536 :: 		rst = rt;
; rst start address is: 8 (R2)
0x17B6	0x465A    MOV	R2, R11
; rt end address is: 44 (R11)
; rst end address is: 8 (R2)
0x17B8	0x4691    MOV	R9, R2
;__Lib_dlmalloc.c, 4535 :: 		if (rt != 0 && rt != t)
0x17BA	0xE7FF    B	L___Lib_dlmalloc_tmalloc_large1296
L___Lib_dlmalloc_tmalloc_large1311:
L___Lib_dlmalloc_tmalloc_large1296:
; rst start address is: 36 (R9)
; rst end address is: 36 (R9)
0x17BC	0xE7FF    B	L___Lib_dlmalloc_tmalloc_large1295
L___Lib_dlmalloc_tmalloc_large1312:
L___Lib_dlmalloc_tmalloc_large1295:
;__Lib_dlmalloc.c, 4537 :: 		if (t == 0) {
; rst start address is: 36 (R9)
0x17BE	0xF1BA0F00  CMP	R10, #0
0x17C2	0xD103    BNE	L___Lib_dlmalloc_tmalloc_large574
; t end address is: 40 (R10)
; sizebits end address is: 20 (R5)
;__Lib_dlmalloc.c, 4538 :: 		t = rst; /* set t to least subtree holding sizes > nb */
; t start address is: 16 (R4)
0x17C4	0x464C    MOV	R4, R9
; rst end address is: 36 (R9)
;__Lib_dlmalloc.c, 4539 :: 		break;
0x17C6	0x463A    MOV	R2, R7
; t end address is: 16 (R4)
0x17C8	0x4645    MOV	R5, R8
0x17CA	0xE002    B	L___Lib_dlmalloc_tmalloc_large567
;__Lib_dlmalloc.c, 4540 :: 		}
L___Lib_dlmalloc_tmalloc_large574:
;__Lib_dlmalloc.c, 4541 :: 		sizebits <<= 1;
; sizebits start address is: 20 (R5)
; rst start address is: 36 (R9)
; t start address is: 40 (R10)
0x17CC	0x006D    LSLS	R5, R5, #1
;__Lib_dlmalloc.c, 4542 :: 		}
; rsize end address is: 28 (R7)
; v end address is: 32 (R8)
; t end address is: 40 (R10)
; rst end address is: 36 (R9)
; sizebits end address is: 20 (R5)
0x17CE	0x463C    MOV	R4, R7
0x17D0	0xE7CE    B	L___Lib_dlmalloc_tmalloc_large566
L___Lib_dlmalloc_tmalloc_large567:
;__Lib_dlmalloc.c, 4543 :: 		}
; t start address is: 16 (R4)
; v start address is: 20 (R5)
; rsize start address is: 8 (R2)
; idx end address is: 4 (R1)
; rsize end address is: 8 (R2)
; t end address is: 16 (R4)
; nb end address is: 24 (R6)
; m end address is: 0 (R0)
; v end address is: 20 (R5)
0x17D2	0x460F    MOV	R7, R1
0x17D4	0x4611    MOV	R1, R2
0x17D6	0xE003    B	L___Lib_dlmalloc_tmalloc_large563
L___Lib_dlmalloc_tmalloc_large1313:
;__Lib_dlmalloc.c, 4521 :: 		if ((t = *treebin_at(m, idx)) != 0) {
0x17D8	0x4654    MOV	R4, R10
0x17DA	0x463D    MOV	R5, R7
0x17DC	0x460F    MOV	R7, R1
0x17DE	0x4641    MOV	R1, R8
;__Lib_dlmalloc.c, 4543 :: 		}
L___Lib_dlmalloc_tmalloc_large563:
;__Lib_dlmalloc.c, 4544 :: 		if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
; t start address is: 16 (R4)
; idx start address is: 28 (R7)
; rsize start address is: 4 (R1)
; v start address is: 20 (R5)
; nb start address is: 24 (R6)
; m start address is: 0 (R0)
0x17E0	0x2C00    CMP	R4, #0
0x17E2	0xD139    BNE	L___Lib_dlmalloc_tmalloc_large1315
0x17E4	0x2D00    CMP	R5, #0
0x17E6	0xD139    BNE	L___Lib_dlmalloc_tmalloc_large1316
L___Lib_dlmalloc_tmalloc_large1293:
;__Lib_dlmalloc.c, 4545 :: 		binmap_t leftbits = left_bits(idx2bit(idx)) & m->treemap;
0x17E8	0xF04F0201  MOV	R2, #1
0x17EC	0x40BA    LSLS	R2, R7
0x17EE	0x0053    LSLS	R3, R2, #1
0x17F0	0xF04F0201  MOV	R2, #1
0x17F4	0x40BA    LSLS	R2, R7
; idx end address is: 28 (R7)
0x17F6	0x0052    LSLS	R2, R2, #1
0x17F8	0x4252    RSBS	R2, R2, #0
0x17FA	0x4313    ORRS	R3, R2
0x17FC	0x1D02    ADDS	R2, R0, #4
0x17FE	0x6812    LDR	R2, [R2, #0]
0x1800	0xEA030202  AND	R2, R3, R2, LSL #0
; leftbits start address is: 12 (R3)
0x1804	0x4613    MOV	R3, R2
;__Lib_dlmalloc.c, 4546 :: 		if (leftbits != 0) {
0x1806	0xB32A    CBZ	R2, L___Lib_dlmalloc_tmalloc_large1314
; t end address is: 16 (R4)
;__Lib_dlmalloc.c, 4548 :: 		binmap_t leastbit = least_bit(leftbits);
0x1808	0x425A    RSBS	R2, R3, #0
0x180A	0xEA030202  AND	R2, R3, R2, LSL #0
; leftbits end address is: 12 (R3)
;__Lib_dlmalloc.c, 4549 :: 		compute_bit2idx(leastbit, i);
0x180E	0x1E54    SUBS	R4, R2, #1
0x1810	0x0B22    LSRS	R2, R4, #12
0x1812	0xF0020310  AND	R3, R2, #16
0x1816	0x40DC    LSRS	R4, R3
0x1818	0x0962    LSRS	R2, R4, #5
0x181A	0xF0020208  AND	R2, R2, #8
0x181E	0x189B    ADDS	R3, R3, R2
0x1820	0x40D4    LSRS	R4, R2
0x1822	0x08A2    LSRS	R2, R4, #2
0x1824	0xF0020204  AND	R2, R2, #4
0x1828	0x189B    ADDS	R3, R3, R2
0x182A	0x40D4    LSRS	R4, R2
0x182C	0x0862    LSRS	R2, R4, #1
0x182E	0xF0020202  AND	R2, R2, #2
0x1832	0x189B    ADDS	R3, R3, R2
0x1834	0x40D4    LSRS	R4, R2
0x1836	0x0862    LSRS	R2, R4, #1
0x1838	0xF0020201  AND	R2, R2, #1
0x183C	0x189B    ADDS	R3, R3, R2
0x183E	0xFA24F202  LSR	R2, R4, R2
0x1842	0x189A    ADDS	R2, R3, R2
;__Lib_dlmalloc.c, 4550 :: 		t = *treebin_at(m, i);
0x1844	0xF5007398  ADD	R3, R0, #304
0x1848	0x0092    LSLS	R2, R2, #2
0x184A	0x189A    ADDS	R2, R3, R2
0x184C	0x6812    LDR	R2, [R2, #0]
; t start address is: 12 (R3)
0x184E	0x4613    MOV	R3, R2
; t end address is: 12 (R3)
0x1850	0x461A    MOV	R2, R3
;__Lib_dlmalloc.c, 4551 :: 		}
0x1852	0xE000    B	L___Lib_dlmalloc_tmalloc_large578
L___Lib_dlmalloc_tmalloc_large1314:
;__Lib_dlmalloc.c, 4546 :: 		if (leftbits != 0) {
0x1854	0x4622    MOV	R2, R4
;__Lib_dlmalloc.c, 4551 :: 		}
L___Lib_dlmalloc_tmalloc_large578:
;__Lib_dlmalloc.c, 4544 :: 		if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
; t start address is: 8 (R2)
; t end address is: 8 (R2)
0x1856	0xE000    B	L___Lib_dlmalloc_tmalloc_large1298
L___Lib_dlmalloc_tmalloc_large1315:
0x1858	0x4622    MOV	R2, R4
L___Lib_dlmalloc_tmalloc_large1298:
; t start address is: 8 (R2)
; t end address is: 8 (R2)
0x185A	0xE000    B	L___Lib_dlmalloc_tmalloc_large1297
L___Lib_dlmalloc_tmalloc_large1316:
0x185C	0x4622    MOV	R2, R4
L___Lib_dlmalloc_tmalloc_large1297:
;__Lib_dlmalloc.c, 4554 :: 		while (t != 0) { /* find smallest of tree or subtree */
; t start address is: 8 (R2)
0x185E	0x4604    MOV	R4, R0
; rsize end address is: 4 (R1)
; nb end address is: 24 (R6)
; m end address is: 0 (R0)
; t end address is: 8 (R2)
; v end address is: 20 (R5)
0x1860	0x4608    MOV	R0, R1
0x1862	0x4629    MOV	R1, R5
0x1864	0x4635    MOV	R5, R6
0x1866	0x4616    MOV	R6, R2
L___Lib_dlmalloc_tmalloc_large579:
; t start address is: 24 (R6)
; m start address is: 16 (R4)
; nb start address is: 20 (R5)
; v start address is: 4 (R1)
; rsize start address is: 0 (R0)
0x1868	0xB1E6    CBZ	R6, L___Lib_dlmalloc_tmalloc_large580
;__Lib_dlmalloc.c, 4555 :: 		size_t trem = chunksize(t) - nb;
0x186A	0x1D32    ADDS	R2, R6, #4
0x186C	0x6813    LDR	R3, [R2, #0]
0x186E	0xF06F0207  MVN	R2, #7
0x1872	0xEA030202  AND	R2, R3, R2, LSL #0
0x1876	0x1B52    SUB	R2, R2, R5
; trem start address is: 12 (R3)
0x1878	0x4613    MOV	R3, R2
;__Lib_dlmalloc.c, 4556 :: 		if (trem < rsize) {
0x187A	0x4282    CMP	R2, R0
0x187C	0xD202    BCS	L___Lib_dlmalloc_tmalloc_large1317
; v end address is: 4 (R1)
;__Lib_dlmalloc.c, 4557 :: 		rsize = trem;
0x187E	0x4618    MOV	R0, R3
; trem end address is: 12 (R3)
;__Lib_dlmalloc.c, 4558 :: 		v = t;
; v start address is: 4 (R1)
0x1880	0x4631    MOV	R1, R6
; v end address is: 4 (R1)
; rsize end address is: 0 (R0)
;__Lib_dlmalloc.c, 4559 :: 		}
0x1882	0xE7FF    B	L___Lib_dlmalloc_tmalloc_large581
L___Lib_dlmalloc_tmalloc_large1317:
;__Lib_dlmalloc.c, 4556 :: 		if (trem < rsize) {
;__Lib_dlmalloc.c, 4559 :: 		}
L___Lib_dlmalloc_tmalloc_large581:
;__Lib_dlmalloc.c, 4560 :: 		t = leftmost_child(t);
; v start address is: 4 (R1)
; rsize start address is: 0 (R0)
0x1884	0xF2060210  ADDW	R2, R6, #16
0x1888	0x6812    LDR	R2, [R2, #0]
0x188A	0xB11A    CBZ	R2, L___Lib_dlmalloc_tmalloc_large582
0x188C	0xF2060210  ADDW	R2, R6, #16
; t end address is: 24 (R6)
0x1890	0x6812    LDR	R2, [R2, #0]
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5158 start address is: 8 (R2)
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5158 end address is: 8 (R2)
0x1892	0xE005    B	L___Lib_dlmalloc_tmalloc_large583
L___Lib_dlmalloc_tmalloc_large582:
; t start address is: 24 (R6)
0x1894	0xF2060210  ADDW	R2, R6, #16
; t end address is: 24 (R6)
0x1898	0x1D12    ADDS	R2, R2, #4
0x189A	0x6812    LDR	R2, [R2, #0]
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5158 start address is: 12 (R3)
0x189C	0x4613    MOV	R3, R2
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5158 end address is: 12 (R3)
0x189E	0x461A    MOV	R2, R3
L___Lib_dlmalloc_tmalloc_large583:
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5158 start address is: 8 (R2)
; t start address is: 24 (R6)
0x18A0	0x4616    MOV	R6, R2
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5158 end address is: 8 (R2)
;__Lib_dlmalloc.c, 4561 :: 		}
; t end address is: 24 (R6)
0x18A2	0xE7E1    B	L___Lib_dlmalloc_tmalloc_large579
L___Lib_dlmalloc_tmalloc_large580:
;__Lib_dlmalloc.c, 4564 :: 		if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
0x18A4	0x2900    CMP	R1, #0
0x18A6	0xF00081FD  BEQ	L___Lib_dlmalloc_tmalloc_large1309
0x18AA	0xF2040208  ADDW	R2, R4, #8
0x18AE	0x6812    LDR	R2, [R2, #0]
0x18B0	0x1B52    SUB	R2, R2, R5
0x18B2	0x4290    CMP	R0, R2
0x18B4	0xF08081F6  BCS	L___Lib_dlmalloc_tmalloc_large1308
L___Lib_dlmalloc_tmalloc_large1292:
;__Lib_dlmalloc.c, 4565 :: 		if (RTCHECK(ok_address(m, v))) { /* split */
0x18B8	0xF2040210  ADDW	R2, R4, #16
0x18BC	0x6812    LDR	R2, [R2, #0]
0x18BE	0x4291    CMP	R1, R2
0x18C0	0xF0C081F0  BCC	L___Lib_dlmalloc_tmalloc_large587
;__Lib_dlmalloc.c, 4566 :: 		mchunkptr r = chunk_plus_offset(v, nb);
0x18C4	0x194A    ADDS	R2, R1, R5
; r start address is: 28 (R7)
0x18C6	0x4617    MOV	R7, R2
;__Lib_dlmalloc.c, 4568 :: 		if (RTCHECK(ok_next(v, r))) {
0x18C8	0x4291    CMP	R1, R2
0x18CA	0xF08081EB  BCS	L___Lib_dlmalloc_tmalloc_large588
;__Lib_dlmalloc.c, 4569 :: 		unlink_large_chunk(m, v);
0x18CE	0xF2010218  ADDW	R2, R1, #24
0x18D2	0x6812    LDR	R2, [R2, #0]
; XP start address is: 24 (R6)
0x18D4	0x4616    MOV	R6, R2
0x18D6	0xF201020C  ADDW	R2, R1, #12
0x18DA	0x6812    LDR	R2, [R2, #0]
0x18DC	0x428A    CMP	R2, R1
0x18DE	0xD023    BEQ	L___Lib_dlmalloc_tmalloc_large589
0x18E0	0xF2010208  ADDW	R2, R1, #8
0x18E4	0x6813    LDR	R3, [R2, #0]
; F start address is: 32 (R8)
0x18E6	0x4698    MOV	R8, R3
0x18E8	0xF201020C  ADDW	R2, R1, #12
0x18EC	0x6812    LDR	R2, [R2, #0]
; R start address is: 36 (R9)
0x18EE	0x4691    MOV	R9, R2
0x18F0	0xF2040210  ADDW	R2, R4, #16
0x18F4	0x6812    LDR	R2, [R2, #0]
0x18F6	0x4293    CMP	R3, R2
0x18F8	0xD312    BCC	L___Lib_dlmalloc_tmalloc_large1301
0x18FA	0xF108020C  ADD	R2, R8, #12
0x18FE	0x6812    LDR	R2, [R2, #0]
0x1900	0x428A    CMP	R2, R1
0x1902	0xD10D    BNE	L___Lib_dlmalloc_tmalloc_large1300
0x1904	0xF1090208  ADD	R2, R9, #8
0x1908	0x6812    LDR	R2, [R2, #0]
0x190A	0x428A    CMP	R2, R1
0x190C	0xD108    BNE	L___Lib_dlmalloc_tmalloc_large1299
L___Lib_dlmalloc_tmalloc_large1291:
0x190E	0xF108020C  ADD	R2, R8, #12
0x1912	0xF8C29000  STR	R9, [R2, #0]
0x1916	0xF1090208  ADD	R2, R9, #8
0x191A	0xF8C28000  STR	R8, [R2, #0]
; F end address is: 32 (R8)
0x191E	0xE7FF    B	L___Lib_dlmalloc_tmalloc_large593
L___Lib_dlmalloc_tmalloc_large1301:
L___Lib_dlmalloc_tmalloc_large1300:
L___Lib_dlmalloc_tmalloc_large1299:
L___Lib_dlmalloc_tmalloc_large593:
0x1920	0x46C8    MOV	R8, R9
; R end address is: 36 (R9)
0x1922	0x46B1    MOV	R9, R6
0x1924	0x4626    MOV	R6, R4
0x1926	0xE039    B	L___Lib_dlmalloc_tmalloc_large594
L___Lib_dlmalloc_tmalloc_large589:
0x1928	0xF2010210  ADDW	R2, R1, #16
0x192C	0x1D12    ADDS	R2, R2, #4
; RP start address is: 12 (R3)
0x192E	0x4613    MOV	R3, R2
0x1930	0x6812    LDR	R2, [R2, #0]
; R start address is: 32 (R8)
0x1932	0x4690    MOV	R8, R2
0x1934	0xB94A    CBNZ	R2, L___Lib_dlmalloc_tmalloc_large1303
; RP end address is: 12 (R3)
; R end address is: 32 (R8)
0x1936	0xF2010210  ADDW	R2, R1, #16
; RP start address is: 32 (R8)
0x193A	0x4690    MOV	R8, R2
0x193C	0x6812    LDR	R2, [R2, #0]
; R start address is: 12 (R3)
0x193E	0x4613    MOV	R3, R2
0x1940	0xB92A    CBNZ	R2, L___Lib_dlmalloc_tmalloc_large1318
; RP end address is: 32 (R8)
0x1942	0x4698    MOV	R8, R3
; R end address is: 12 (R3)
0x1944	0x46B1    MOV	R9, R6
0x1946	0x4622    MOV	R2, R4
0x1948	0xE027    B	L___Lib_dlmalloc_tmalloc_large597
L___Lib_dlmalloc_tmalloc_large1303:
; R start address is: 32 (R8)
; RP start address is: 12 (R3)
0x194A	0x461A    MOV	R2, R3
; R end address is: 32 (R8)
0x194C	0xE001    B	L___Lib_dlmalloc_tmalloc_large1302
; RP end address is: 12 (R3)
L___Lib_dlmalloc_tmalloc_large1318:
0x194E	0x4642    MOV	R2, R8
0x1950	0x4698    MOV	R8, R3
L___Lib_dlmalloc_tmalloc_large1302:
; R start address is: 32 (R8)
; RP start address is: 8 (R2)
0x1952	0x4603    MOV	R3, R0
; XP end address is: 24 (R6)
; RP end address is: 8 (R2)
; r end address is: 28 (R7)
; v end address is: 4 (R1)
; m end address is: 16 (R4)
; rsize end address is: 0 (R0)
; R end address is: 32 (R8)
0x1954	0x4630    MOV	R0, R6
0x1956	0x4626    MOV	R6, R4
0x1958	0x460C    MOV	R4, R1
0x195A	0x4639    MOV	R1, R7
0x195C	0x4617    MOV	R7, R2
L___Lib_dlmalloc_tmalloc_large598:
; RP start address is: 28 (R7)
; m start address is: 24 (R6)
; v start address is: 16 (R4)
; rsize start address is: 12 (R3)
; r start address is: 4 (R1)
; XP start address is: 0 (R0)
; R start address is: 32 (R8)
; XP start address is: 0 (R0)
; XP end address is: 0 (R0)
; r start address is: 4 (R1)
; r end address is: 4 (R1)
; rsize start address is: 12 (R3)
; rsize end address is: 12 (R3)
; v start address is: 16 (R4)
; v end address is: 16 (R4)
; nb start address is: 20 (R5)
; nb end address is: 20 (R5)
; m start address is: 24 (R6)
; m end address is: 24 (R6)
0x195E	0xF1080210  ADD	R2, R8, #16
0x1962	0x1D12    ADDS	R2, R2, #4
0x1964	0x9200    STR	R2, [SP, #0]
0x1966	0x6812    LDR	R2, [R2, #0]
0x1968	0xB92A    CBNZ	R2, L___Lib_dlmalloc_tmalloc_large1305
; XP end address is: 0 (R0)
; r end address is: 4 (R1)
; rsize end address is: 12 (R3)
; v end address is: 16 (R4)
; nb end address is: 20 (R5)
; m end address is: 24 (R6)
; m start address is: 24 (R6)
; nb start address is: 20 (R5)
; v start address is: 16 (R4)
; rsize start address is: 12 (R3)
; r start address is: 4 (R1)
; XP start address is: 0 (R0)
0x196A	0xF1080210  ADD	R2, R8, #16
0x196E	0x9200    STR	R2, [SP, #0]
0x1970	0x6812    LDR	R2, [R2, #0]
0x1972	0xB902    CBNZ	R2, L___Lib_dlmalloc_tmalloc_large1304
0x1974	0xE004    B	L___Lib_dlmalloc_tmalloc_large599
; RP end address is: 28 (R7)
; R end address is: 32 (R8)
L___Lib_dlmalloc_tmalloc_large1305:
L___Lib_dlmalloc_tmalloc_large1304:
; RP start address is: 28 (R7)
0x1976	0x9F00    LDR	R7, [SP, #0]
0x1978	0x9A00    LDR	R2, [SP, #0]
0x197A	0x6812    LDR	R2, [R2, #0]
; R start address is: 32 (R8)
0x197C	0x4690    MOV	R8, R2
0x197E	0xE7EE    B	L___Lib_dlmalloc_tmalloc_large598
L___Lib_dlmalloc_tmalloc_large599:
0x1980	0xF2060210  ADDW	R2, R6, #16
0x1984	0x6812    LDR	R2, [R2, #0]
0x1986	0x4297    CMP	R7, R2
0x1988	0xD302    BCC	L___Lib_dlmalloc_tmalloc_large602
0x198A	0x2200    MOVS	R2, #0
0x198C	0x603A    STR	R2, [R7, #0]
; RP end address is: 28 (R7)
0x198E	0xE7FF    B	L___Lib_dlmalloc_tmalloc_large603
L___Lib_dlmalloc_tmalloc_large602:
L___Lib_dlmalloc_tmalloc_large603:
; r end address is: 4 (R1)
; rsize end address is: 12 (R3)
; v end address is: 16 (R4)
; nb end address is: 20 (R5)
; m end address is: 24 (R6)
; R end address is: 32 (R8)
0x1990	0x4681    MOV	R9, R0
0x1992	0x4618    MOV	R0, R3
0x1994	0x460F    MOV	R7, R1
0x1996	0x4621    MOV	R1, R4
0x1998	0x4632    MOV	R2, R6
L___Lib_dlmalloc_tmalloc_large597:
; XP end address is: 0 (R0)
; m start address is: 8 (R2)
; nb start address is: 20 (R5)
; v start address is: 4 (R1)
; rsize start address is: 0 (R0)
; r start address is: 28 (R7)
; XP start address is: 36 (R9)
; R start address is: 32 (R8)
0x199A	0x4616    MOV	R6, R2
; m end address is: 8 (R2)
; XP end address is: 36 (R9)
; r end address is: 28 (R7)
; v end address is: 4 (R1)
; nb end address is: 20 (R5)
; rsize end address is: 0 (R0)
; R end address is: 32 (R8)
L___Lib_dlmalloc_tmalloc_large594:
; R start address is: 32 (R8)
; XP start address is: 36 (R9)
; r start address is: 28 (R7)
; rsize start address is: 0 (R0)
; v start address is: 4 (R1)
; nb start address is: 20 (R5)
; m start address is: 24 (R6)
0x199C	0xF1B90F00  CMP	R9, #0
0x19A0	0xF0008063  BEQ	L___Lib_dlmalloc_tmalloc_large604
0x19A4	0xF5067398  ADD	R3, R6, #304
0x19A8	0xF201021C  ADDW	R2, R1, #28
0x19AC	0x6812    LDR	R2, [R2, #0]
0x19AE	0x0092    LSLS	R2, R2, #2
0x19B0	0x189A    ADDS	R2, R3, R2
; H start address is: 12 (R3)
0x19B2	0x4613    MOV	R3, R2
0x19B4	0x6812    LDR	R2, [R2, #0]
0x19B6	0x4291    CMP	R1, R2
0x19B8	0xD10F    BNE	L___Lib_dlmalloc_tmalloc_large605
0x19BA	0xF8C38000  STR	R8, [R3, #0]
0x19BE	0x681A    LDR	R2, [R3, #0]
; H end address is: 12 (R3)
0x19C0	0xB952    CBNZ	R2, L___Lib_dlmalloc_tmalloc_large606
0x19C2	0x1D34    ADDS	R4, R6, #4
0x19C4	0xF201021C  ADDW	R2, R1, #28
0x19C8	0x6813    LDR	R3, [R2, #0]
0x19CA	0xF04F0201  MOV	R2, #1
0x19CE	0x409A    LSLS	R2, R3
0x19D0	0x43D3    MVN	R3, R2
0x19D2	0x6822    LDR	R2, [R4, #0]
0x19D4	0x401A    ANDS	R2, R3
0x19D6	0x6022    STR	R2, [R4, #0]
L___Lib_dlmalloc_tmalloc_large606:
0x19D8	0xE014    B	L___Lib_dlmalloc_tmalloc_large607
L___Lib_dlmalloc_tmalloc_large605:
0x19DA	0xF2060210  ADDW	R2, R6, #16
0x19DE	0x6812    LDR	R2, [R2, #0]
0x19E0	0x4591    CMP	R9, R2
0x19E2	0xD30F    BCC	L___Lib_dlmalloc_tmalloc_large608
0x19E4	0xF1090210  ADD	R2, R9, #16
0x19E8	0x6812    LDR	R2, [R2, #0]
0x19EA	0x428A    CMP	R2, R1
0x19EC	0xD104    BNE	L___Lib_dlmalloc_tmalloc_large609
0x19EE	0xF1090210  ADD	R2, R9, #16
0x19F2	0xF8C28000  STR	R8, [R2, #0]
0x19F6	0xE004    B	L___Lib_dlmalloc_tmalloc_large610
L___Lib_dlmalloc_tmalloc_large609:
0x19F8	0xF1090210  ADD	R2, R9, #16
0x19FC	0x1D12    ADDS	R2, R2, #4
0x19FE	0xF8C28000  STR	R8, [R2, #0]
L___Lib_dlmalloc_tmalloc_large610:
0x1A02	0xE7FF    B	L___Lib_dlmalloc_tmalloc_large611
L___Lib_dlmalloc_tmalloc_large608:
L___Lib_dlmalloc_tmalloc_large611:
L___Lib_dlmalloc_tmalloc_large607:
0x1A04	0xF1B80F00  CMP	R8, #0
0x1A08	0xD02F    BEQ	L___Lib_dlmalloc_tmalloc_large612
0x1A0A	0xF2060210  ADDW	R2, R6, #16
0x1A0E	0x6812    LDR	R2, [R2, #0]
0x1A10	0x4590    CMP	R8, R2
0x1A12	0xD32A    BCC	L___Lib_dlmalloc_tmalloc_large613
0x1A14	0xF1080218  ADD	R2, R8, #24
0x1A18	0xF8C29000  STR	R9, [R2, #0]
; XP end address is: 36 (R9)
0x1A1C	0xF2010210  ADDW	R2, R1, #16
0x1A20	0x6812    LDR	R2, [R2, #0]
; C0 start address is: 12 (R3)
0x1A22	0x4613    MOV	R3, R2
0x1A24	0xB162    CBZ	R2, L___Lib_dlmalloc_tmalloc_large614
0x1A26	0xF2060210  ADDW	R2, R6, #16
0x1A2A	0x6812    LDR	R2, [R2, #0]
0x1A2C	0x4293    CMP	R3, R2
0x1A2E	0xD307    BCC	L___Lib_dlmalloc_tmalloc_large615
0x1A30	0xF1080210  ADD	R2, R8, #16
0x1A34	0x6013    STR	R3, [R2, #0]
0x1A36	0xF2030218  ADDW	R2, R3, #24
; C0 end address is: 12 (R3)
0x1A3A	0xF8C28000  STR	R8, [R2, #0]
0x1A3E	0xE7FF    B	L___Lib_dlmalloc_tmalloc_large616
L___Lib_dlmalloc_tmalloc_large615:
L___Lib_dlmalloc_tmalloc_large616:
L___Lib_dlmalloc_tmalloc_large614:
0x1A40	0xF2010210  ADDW	R2, R1, #16
0x1A44	0x1D12    ADDS	R2, R2, #4
0x1A46	0x6812    LDR	R2, [R2, #0]
; C1 start address is: 12 (R3)
0x1A48	0x4613    MOV	R3, R2
0x1A4A	0xB16A    CBZ	R2, L___Lib_dlmalloc_tmalloc_large617
0x1A4C	0xF2060210  ADDW	R2, R6, #16
0x1A50	0x6812    LDR	R2, [R2, #0]
0x1A52	0x4293    CMP	R3, R2
0x1A54	0xD308    BCC	L___Lib_dlmalloc_tmalloc_large618
0x1A56	0xF1080210  ADD	R2, R8, #16
0x1A5A	0x1D12    ADDS	R2, R2, #4
0x1A5C	0x6013    STR	R3, [R2, #0]
0x1A5E	0xF2030218  ADDW	R2, R3, #24
; C1 end address is: 12 (R3)
0x1A62	0xF8C28000  STR	R8, [R2, #0]
; R end address is: 32 (R8)
0x1A66	0xE7FF    B	L___Lib_dlmalloc_tmalloc_large619
L___Lib_dlmalloc_tmalloc_large618:
L___Lib_dlmalloc_tmalloc_large619:
L___Lib_dlmalloc_tmalloc_large617:
0x1A68	0xE7FF    B	L___Lib_dlmalloc_tmalloc_large620
L___Lib_dlmalloc_tmalloc_large613:
L___Lib_dlmalloc_tmalloc_large620:
L___Lib_dlmalloc_tmalloc_large612:
L___Lib_dlmalloc_tmalloc_large604:
;__Lib_dlmalloc.c, 4570 :: 		if (rsize < MIN_CHUNK_SIZE)
0x1A6A	0x2810    CMP	R0, #16
0x1A6C	0xD20F    BCS	L___Lib_dlmalloc_tmalloc_large621
; r end address is: 28 (R7)
; m end address is: 24 (R6)
;__Lib_dlmalloc.c, 4571 :: 		set_inuse_and_pinuse(m, v, (rsize + nb));
0x1A6E	0x1D0B    ADDS	R3, R1, #4
0x1A70	0x1942    ADDS	R2, R0, R5
0x1A72	0xF0420201  ORR	R2, R2, #1
0x1A76	0xF0420202  ORR	R2, R2, #2
0x1A7A	0x601A    STR	R2, [R3, #0]
0x1A7C	0x1942    ADDS	R2, R0, R5
; nb end address is: 20 (R5)
; rsize end address is: 0 (R0)
0x1A7E	0x188A    ADDS	R2, R1, R2
0x1A80	0x1D13    ADDS	R3, R2, #4
0x1A82	0x681A    LDR	R2, [R3, #0]
0x1A84	0xF0420201  ORR	R2, R2, #1
0x1A88	0x601A    STR	R2, [R3, #0]
0x1A8A	0x4608    MOV	R0, R1
0x1A8C	0xE106    B	L___Lib_dlmalloc_tmalloc_large622
L___Lib_dlmalloc_tmalloc_large621:
;__Lib_dlmalloc.c, 4573 :: 		set_size_and_pinuse_of_inuse_chunk(m, v, nb);
; rsize start address is: 0 (R0)
; m start address is: 24 (R6)
; nb start address is: 20 (R5)
; r start address is: 28 (R7)
0x1A8E	0x1D0B    ADDS	R3, R1, #4
0x1A90	0xF0450201  ORR	R2, R5, #1
; nb end address is: 20 (R5)
0x1A94	0xF0420202  ORR	R2, R2, #2
0x1A98	0x601A    STR	R2, [R3, #0]
;__Lib_dlmalloc.c, 4574 :: 		set_size_and_pinuse_of_free_chunk(r, rsize);
0x1A9A	0x1D3B    ADDS	R3, R7, #4
0x1A9C	0xF0400201  ORR	R2, R0, #1
0x1AA0	0x601A    STR	R2, [R3, #0]
0x1AA2	0x183A    ADDS	R2, R7, R0
0x1AA4	0x6010    STR	R0, [R2, #0]
;__Lib_dlmalloc.c, 4575 :: 		insert_chunk(m, r, rsize);
0x1AA6	0x08C2    LSRS	R2, R0, #3
0x1AA8	0x2A20    CMP	R2, #32
0x1AAA	0xD237    BCS	L___Lib_dlmalloc_tmalloc_large623
0x1AAC	0x08C4    LSRS	R4, R0, #3
; rsize end address is: 0 (R0)
; I start address is: 20 (R5)
0x1AAE	0x4625    MOV	R5, R4
0x1AB0	0xF2060328  ADDW	R3, R6, #40
0x1AB4	0x0062    LSLS	R2, R4, #1
0x1AB6	0x0092    LSLS	R2, R2, #2
0x1AB8	0x189A    ADDS	R2, R3, R2
; B start address is: 0 (R0)
0x1ABA	0x4610    MOV	R0, R2
; F start address is: 32 (R8)
0x1ABC	0x4690    MOV	R8, R2
0x1ABE	0x6833    LDR	R3, [R6, #0]
0x1AC0	0xF04F0201  MOV	R2, #1
0x1AC4	0x40A2    LSLS	R2, R4
0x1AC6	0xEA030202  AND	R2, R3, R2, LSL #0
0x1ACA	0xB942    CBNZ	R2, L___Lib_dlmalloc_tmalloc_large624
0x1ACC	0xF04F0201  MOV	R2, #1
0x1AD0	0xFA02F305  LSL	R3, R2, R5
; I end address is: 20 (R5)
0x1AD4	0x6832    LDR	R2, [R6, #0]
0x1AD6	0x431A    ORRS	R2, R3
0x1AD8	0x6032    STR	R2, [R6, #0]
; m end address is: 24 (R6)
0x1ADA	0x4643    MOV	R3, R8
0x1ADC	0xE010    B	L___Lib_dlmalloc_tmalloc_large625
L___Lib_dlmalloc_tmalloc_large624:
; m start address is: 24 (R6)
0x1ADE	0xF2000208  ADDW	R2, R0, #8
0x1AE2	0x6813    LDR	R3, [R2, #0]
0x1AE4	0xF2060210  ADDW	R2, R6, #16
; m end address is: 24 (R6)
0x1AE8	0x6812    LDR	R2, [R2, #0]
0x1AEA	0xE001    B	#2
0x1AEC	0xFFFF0000  	#65535
0x1AF0	0x4293    CMP	R3, R2
0x1AF2	0xD304    BCC	L___Lib_dlmalloc_tmalloc_large626
; F end address is: 32 (R8)
0x1AF4	0xF2000208  ADDW	R2, R0, #8
0x1AF8	0x6812    LDR	R2, [R2, #0]
; F start address is: 8 (R2)
0x1AFA	0x4613    MOV	R3, R2
; F end address is: 8 (R2)
0x1AFC	0xE000    B	L___Lib_dlmalloc_tmalloc_large627
L___Lib_dlmalloc_tmalloc_large626:
; F start address is: 32 (R8)
0x1AFE	0x4643    MOV	R3, R8
L___Lib_dlmalloc_tmalloc_large627:
; F end address is: 32 (R8)
; F start address is: 12 (R3)
; F end address is: 12 (R3)
L___Lib_dlmalloc_tmalloc_large625:
; F start address is: 12 (R3)
0x1B00	0xF2000208  ADDW	R2, R0, #8
0x1B04	0x6017    STR	R7, [R2, #0]
0x1B06	0xF203020C  ADDW	R2, R3, #12
0x1B0A	0x6017    STR	R7, [R2, #0]
0x1B0C	0xF2070208  ADDW	R2, R7, #8
0x1B10	0x6013    STR	R3, [R2, #0]
; F end address is: 12 (R3)
0x1B12	0xF207020C  ADDW	R2, R7, #12
; r end address is: 28 (R7)
0x1B16	0x6010    STR	R0, [R2, #0]
; B end address is: 0 (R0)
0x1B18	0x4608    MOV	R0, R1
0x1B1A	0xE0BF    B	L___Lib_dlmalloc_tmalloc_large628
L___Lib_dlmalloc_tmalloc_large623:
; rsize start address is: 0 (R0)
; TP start address is: 32 (R8)
; m start address is: 24 (R6)
; r start address is: 28 (R7)
0x1B1C	0x46B8    MOV	R8, R7
; r end address is: 28 (R7)
0x1B1E	0x0A02    LSRS	R2, R0, #8
; X start address is: 20 (R5)
0x1B20	0x4615    MOV	R5, R2
0x1B22	0xB90A    CBNZ	R2, L___Lib_dlmalloc_tmalloc_large629
; X end address is: 20 (R5)
; I start address is: 20 (R5)
0x1B24	0x2500    MOVS	R5, #0
; I end address is: 20 (R5)
0x1B26	0xE02A    B	L___Lib_dlmalloc_tmalloc_large630
L___Lib_dlmalloc_tmalloc_large629:
; X start address is: 20 (R5)
0x1B28	0x4A60    LDR	R2, [PC, #384]
0x1B2A	0x4295    CMP	R5, R2
0x1B2C	0xD903    BLS	L___Lib_dlmalloc_tmalloc_large631
; X end address is: 20 (R5)
; I start address is: 8 (R2)
0x1B2E	0xF04F021F  MOV	R2, #31
0x1B32	0x4615    MOV	R5, R2
; I end address is: 8 (R2)
0x1B34	0xE023    B	L___Lib_dlmalloc_tmalloc_large632
L___Lib_dlmalloc_tmalloc_large631:
; X start address is: 20 (R5)
0x1B36	0xF5A57280  SUB	R2, R5, #256
0x1B3A	0x0C12    LSRS	R2, R2, #16
0x1B3C	0xF0020308  AND	R3, R2, #8
0x1B40	0xFA05F403  LSL	R4, R5, R3
; X end address is: 20 (R5)
0x1B44	0xF5A45280  SUB	R2, R4, #4096
0x1B48	0x0C12    LSRS	R2, R2, #16
0x1B4A	0xF0020204  AND	R2, R2, #4
0x1B4E	0x189B    ADDS	R3, R3, R2
0x1B50	0xFA04F502  LSL	R5, R4, R2
0x1B54	0xF5A54280  SUB	R2, R5, #16384
0x1B58	0x0C12    LSRS	R2, R2, #16
0x1B5A	0xF0020402  AND	R4, R2, #2
0x1B5E	0x191A    ADDS	R2, R3, R4
0x1B60	0xF1C2030E  RSB	R3, R2, #14
0x1B64	0xFA05F204  LSL	R2, R5, R4
0x1B68	0x0BD2    LSRS	R2, R2, #15
0x1B6A	0x189A    ADDS	R2, R3, R2
0x1B6C	0x0053    LSLS	R3, R2, #1
0x1B6E	0x1DD2    ADDS	R2, R2, #7
0x1B70	0xFA20F202  LSR	R2, R0, R2
0x1B74	0xF0020201  AND	R2, R2, #1
0x1B78	0x189A    ADDS	R2, R3, R2
; I start address is: 12 (R3)
0x1B7A	0x4613    MOV	R3, R2
; I end address is: 12 (R3)
0x1B7C	0x461D    MOV	R5, R3
L___Lib_dlmalloc_tmalloc_large632:
; I start address is: 20 (R5)
; I end address is: 20 (R5)
L___Lib_dlmalloc_tmalloc_large630:
; I start address is: 20 (R5)
0x1B7E	0xF5067398  ADD	R3, R6, #304
0x1B82	0x00AA    LSLS	R2, R5, #2
0x1B84	0x189A    ADDS	R2, R3, R2
; H start address is: 28 (R7)
0x1B86	0x4617    MOV	R7, R2
0x1B88	0xF108021C  ADD	R2, R8, #28
0x1B8C	0x6015    STR	R5, [R2, #0]
0x1B8E	0xF1080210  ADD	R2, R8, #16
0x1B92	0x4614    MOV	R4, R2
0x1B94	0x1D13    ADDS	R3, R2, #4
0x1B96	0x2200    MOVS	R2, #0
0x1B98	0x601A    STR	R2, [R3, #0]
0x1B9A	0x681A    LDR	R2, [R3, #0]
0x1B9C	0x6022    STR	R2, [R4, #0]
0x1B9E	0x1D32    ADDS	R2, R6, #4
0x1BA0	0x6813    LDR	R3, [R2, #0]
0x1BA2	0xF04F0201  MOV	R2, #1
0x1BA6	0x40AA    LSLS	R2, R5
0x1BA8	0xEA030202  AND	R2, R3, R2, LSL #0
0x1BAC	0xB9B2    CBNZ	R2, L___Lib_dlmalloc_tmalloc_large633
; rsize end address is: 0 (R0)
0x1BAE	0x1D34    ADDS	R4, R6, #4
; m end address is: 24 (R6)
0x1BB0	0xF04F0201  MOV	R2, #1
0x1BB4	0xFA02F305  LSL	R3, R2, R5
; I end address is: 20 (R5)
0x1BB8	0x6822    LDR	R2, [R4, #0]
0x1BBA	0x431A    ORRS	R2, R3
0x1BBC	0x6022    STR	R2, [R4, #0]
0x1BBE	0xF8C78000  STR	R8, [R7, #0]
0x1BC2	0xF1080218  ADD	R2, R8, #24
0x1BC6	0x6017    STR	R7, [R2, #0]
; H end address is: 28 (R7)
0x1BC8	0xF1080308  ADD	R3, R8, #8
0x1BCC	0xF108020C  ADD	R2, R8, #12
0x1BD0	0xF8C28000  STR	R8, [R2, #0]
; TP end address is: 32 (R8)
0x1BD4	0x6812    LDR	R2, [R2, #0]
0x1BD6	0x601A    STR	R2, [R3, #0]
0x1BD8	0x4608    MOV	R0, R1
0x1BDA	0xE05F    B	L___Lib_dlmalloc_tmalloc_large634
L___Lib_dlmalloc_tmalloc_large633:
; rsize start address is: 0 (R0)
; H start address is: 28 (R7)
; I start address is: 20 (R5)
; TP start address is: 32 (R8)
; m start address is: 24 (R6)
0x1BDC	0x683A    LDR	R2, [R7, #0]
; H end address is: 28 (R7)
; T start address is: 12 (R3)
0x1BDE	0x4613    MOV	R3, R2
0x1BE0	0x2D1F    CMP	R5, #31
0x1BE2	0xD101    BNE	L___Lib_dlmalloc_tmalloc_large635
; I end address is: 20 (R5)
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5670 start address is: 16 (R4)
0x1BE4	0x2400    MOVS	R4, #0
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5670 end address is: 16 (R4)
0x1BE6	0xE004    B	L___Lib_dlmalloc_tmalloc_large636
L___Lib_dlmalloc_tmalloc_large635:
; I start address is: 20 (R5)
0x1BE8	0x086A    LSRS	R2, R5, #1
; I end address is: 20 (R5)
0x1BEA	0x3208    ADDS	R2, #8
0x1BEC	0x1E92    SUBS	R2, R2, #2
0x1BEE	0xF1C2041F  RSB	R4, R2, #31
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5670 start address is: 16 (R4)
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5670 end address is: 16 (R4)
L___Lib_dlmalloc_tmalloc_large636:
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5670 start address is: 16 (R4)
0x1BF2	0xFA00F704  LSL	R7, R0, R4
; ?FLOC____Lib_dlmalloc_tmalloc_large?T5670 end address is: 16 (R4)
; K start address is: 28 (R7)
; v end address is: 4 (R1)
; m end address is: 24 (R6)
; TP end address is: 32 (R8)
; T end address is: 12 (R3)
; rsize end address is: 0 (R0)
; K end address is: 28 (R7)
0x1BF6	0x460D    MOV	R5, R1
0x1BF8	0x4641    MOV	R1, R8
0x1BFA	0x4634    MOV	R4, R6
0x1BFC	0x461E    MOV	R6, R3
L___Lib_dlmalloc_tmalloc_large637:
; K start address is: 28 (R7)
; T start address is: 24 (R6)
; TP start address is: 4 (R1)
; m start address is: 16 (R4)
; v start address is: 20 (R5)
; rsize start address is: 0 (R0)
0x1BFE	0x1D32    ADDS	R2, R6, #4
0x1C00	0x6813    LDR	R3, [R2, #0]
0x1C02	0xF06F0207  MVN	R2, #7
0x1C06	0xEA030202  AND	R2, R3, R2, LSL #0
0x1C0A	0x4282    CMP	R2, R0
0x1C0C	0xD023    BEQ	L___Lib_dlmalloc_tmalloc_large640
0x1C0E	0xF2060310  ADDW	R3, R6, #16
0x1C12	0x0FFA    LSRS	R2, R7, #31
0x1C14	0xF0020201  AND	R2, R2, #1
0x1C18	0x0092    LSLS	R2, R2, #2
0x1C1A	0x189B    ADDS	R3, R3, R2
0x1C1C	0x9301    STR	R3, [SP, #4]
0x1C1E	0x007F    LSLS	R7, R7, #1
0x1C20	0x681A    LDR	R2, [R3, #0]
0x1C22	0xB11A    CBZ	R2, L___Lib_dlmalloc_tmalloc_large641
; T end address is: 24 (R6)
0x1C24	0x9A01    LDR	R2, [SP, #4]
0x1C26	0x6812    LDR	R2, [R2, #0]
; T start address is: 24 (R6)
0x1C28	0x4616    MOV	R6, R2
0x1C2A	0xE013    B	L___Lib_dlmalloc_tmalloc_large642
; rsize end address is: 0 (R0)
; K end address is: 28 (R7)
L___Lib_dlmalloc_tmalloc_large641:
0x1C2C	0xF2040210  ADDW	R2, R4, #16
; m end address is: 16 (R4)
0x1C30	0x6813    LDR	R3, [R2, #0]
0x1C32	0x9A01    LDR	R2, [SP, #4]
0x1C34	0x429A    CMP	R2, R3
0x1C36	0xD30C    BCC	L___Lib_dlmalloc_tmalloc_large643
0x1C38	0x9A01    LDR	R2, [SP, #4]
0x1C3A	0x6011    STR	R1, [R2, #0]
0x1C3C	0xF2010218  ADDW	R2, R1, #24
0x1C40	0x6016    STR	R6, [R2, #0]
; T end address is: 24 (R6)
0x1C42	0xF2010308  ADDW	R3, R1, #8
0x1C46	0xF201020C  ADDW	R2, R1, #12
0x1C4A	0x6011    STR	R1, [R2, #0]
; TP end address is: 4 (R1)
0x1C4C	0x6812    LDR	R2, [R2, #0]
0x1C4E	0x601A    STR	R2, [R3, #0]
0x1C50	0xE023    B	L___Lib_dlmalloc_tmalloc_large638
L___Lib_dlmalloc_tmalloc_large643:
0x1C52	0xE022    B	L___Lib_dlmalloc_tmalloc_large638
L___Lib_dlmalloc_tmalloc_large642:
; T start address is: 24 (R6)
; K start address is: 28 (R7)
; rsize start address is: 0 (R0)
; m start address is: 16 (R4)
; TP start address is: 4 (R1)
0x1C54	0xE020    B	L___Lib_dlmalloc_tmalloc_large645
; rsize end address is: 0 (R0)
; K end address is: 28 (R7)
L___Lib_dlmalloc_tmalloc_large640:
0x1C56	0xF2060208  ADDW	R2, R6, #8
0x1C5A	0x6812    LDR	R2, [R2, #0]
; F start address is: 0 (R0)
0x1C5C	0x4610    MOV	R0, R2
0x1C5E	0xF2040210  ADDW	R2, R4, #16
0x1C62	0x6812    LDR	R2, [R2, #0]
0x1C64	0x4296    CMP	R6, R2
0x1C66	0xD316    BCC	L___Lib_dlmalloc_tmalloc_large1307
0x1C68	0xF2040210  ADDW	R2, R4, #16
; m end address is: 16 (R4)
0x1C6C	0x6812    LDR	R2, [R2, #0]
0x1C6E	0x4290    CMP	R0, R2
0x1C70	0xD311    BCC	L___Lib_dlmalloc_tmalloc_large1306
L___Lib_dlmalloc_tmalloc_large1288:
0x1C72	0xF2060308  ADDW	R3, R6, #8
0x1C76	0xF200020C  ADDW	R2, R0, #12
0x1C7A	0x6011    STR	R1, [R2, #0]
0x1C7C	0x6812    LDR	R2, [R2, #0]
0x1C7E	0x601A    STR	R2, [R3, #0]
0x1C80	0xF2010208  ADDW	R2, R1, #8
0x1C84	0x6010    STR	R0, [R2, #0]
; F end address is: 0 (R0)
0x1C86	0xF201020C  ADDW	R2, R1, #12
0x1C8A	0x6016    STR	R6, [R2, #0]
; T end address is: 24 (R6)
0x1C8C	0xF2010318  ADDW	R3, R1, #24
; TP end address is: 4 (R1)
0x1C90	0x2200    MOVS	R2, #0
0x1C92	0x601A    STR	R2, [R3, #0]
0x1C94	0xE001    B	L___Lib_dlmalloc_tmalloc_large638
L___Lib_dlmalloc_tmalloc_large1307:
L___Lib_dlmalloc_tmalloc_large1306:
0x1C96	0xE000    B	L___Lib_dlmalloc_tmalloc_large638
L___Lib_dlmalloc_tmalloc_large645:
; T start address is: 24 (R6)
; K start address is: 28 (R7)
; rsize start address is: 0 (R0)
; m start address is: 16 (R4)
; TP start address is: 4 (R1)
; TP end address is: 4 (R1)
; m end address is: 16 (R4)
; rsize end address is: 0 (R0)
; K end address is: 28 (R7)
; T end address is: 24 (R6)
0x1C98	0xE7B1    B	L___Lib_dlmalloc_tmalloc_large637
L___Lib_dlmalloc_tmalloc_large638:
0x1C9A	0x4628    MOV	R0, R5
L___Lib_dlmalloc_tmalloc_large634:
; v end address is: 20 (R5)
; v start address is: 0 (R0)
; v end address is: 0 (R0)
L___Lib_dlmalloc_tmalloc_large628:
;__Lib_dlmalloc.c, 4576 :: 		}
; v start address is: 0 (R0)
; v end address is: 0 (R0)
L___Lib_dlmalloc_tmalloc_large622:
;__Lib_dlmalloc.c, 4577 :: 		return chunk2mem(v);
; v start address is: 0 (R0)
0x1C9C	0xF2000208  ADDW	R2, R0, #8
; v end address is: 0 (R0)
0x1CA0	0x4610    MOV	R0, R2
0x1CA2	0xE000    B	L_end_tmalloc_large
;__Lib_dlmalloc.c, 4578 :: 		}
L___Lib_dlmalloc_tmalloc_large588:
;__Lib_dlmalloc.c, 4579 :: 		}
L___Lib_dlmalloc_tmalloc_large587:
;__Lib_dlmalloc.c, 4564 :: 		if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
L___Lib_dlmalloc_tmalloc_large1309:
L___Lib_dlmalloc_tmalloc_large1308:
;__Lib_dlmalloc.c, 4582 :: 		return 0;
0x1CA4	0x2000    MOVS	R0, #0
;__Lib_dlmalloc.c, 4583 :: 		}
L_end_tmalloc_large:
0x1CA6	0xB002    ADD	SP, SP, #8
0x1CA8	0x4770    BX	LR
0x1CAA	0xBF00    NOP
0x1CAC	0xFFFF0000  	#65535
; end of __Lib_dlmalloc_tmalloc_large
__Lib_dlmalloc_sys_alloc:
;__Lib_dlmalloc.c, 4118 :: 		static void* sys_alloc(mstate m, size_t nb) {
; nb start address is: 4 (R1)
; m start address is: 0 (R0)
0x2000	0xB087    SUB	SP, SP, #28
0x2002	0xF8CDE000  STR	LR, [SP, #0]
0x2006	0x4607    MOV	R7, R0
0x2008	0x4688    MOV	R8, R1
; nb end address is: 4 (R1)
; m end address is: 0 (R0)
; m start address is: 28 (R7)
; nb start address is: 32 (R8)
;__Lib_dlmalloc.c, 4119 :: 		uint8_t* tbase = CMFAIL;
0x200A	0xF10D0B14  ADD	R11, SP, #20
0x200E	0xF10B0A08  ADD	R10, R11, #8
0x2012	0xF8DFC34C  LDR	R12, [PC, #844]
0x2016	0xF7FEFFDF  BL	___CC2DW+0
;__Lib_dlmalloc.c, 4120 :: 		size_t tsize = 0;
;__Lib_dlmalloc.c, 4121 :: 		flag_t mmap_flag = 0;
; mmap_flag start address is: 36 (R9)
0x201A	0xF04F0900  MOV	R9, #0
;__Lib_dlmalloc.c, 4124 :: 		ensure_initialization();
0x201E	0x4AD1    LDR	R2, [PC, #836]
0x2020	0x6812    LDR	R2, [R2, #0]
0x2022	0xB91A    CBNZ	R2, L___Lib_dlmalloc_sys_alloc226
0x2024	0xF7FEFFE2  BL	__Lib_dlmalloc_init_mparams+0
0x2028	0xB900    CBNZ	R0, L___Lib_dlmalloc_sys_alloc226
0x202A	0xE7FF    B	L___Lib_dlmalloc_sys_alloc225
L___Lib_dlmalloc_sys_alloc226:
L___Lib_dlmalloc_sys_alloc225:
;__Lib_dlmalloc.c, 4127 :: 		if (use_mmap(m) && nb >= mparams.mmap_threshold && m->topsize != 0) {
0x202C	0xF50772DE  ADD	R2, R7, #444
0x2030	0x6812    LDR	R2, [R2, #0]
0x2032	0xF0020200  AND	R2, R2, #0
0x2036	0xB17A    CBZ	R2, L___Lib_dlmalloc_sys_alloc1162
0x2038	0x4ACB    LDR	R2, [PC, #812]
0x203A	0x6812    LDR	R2, [R2, #0]
0x203C	0x4590    CMP	R8, R2
0x203E	0xD30B    BCC	L___Lib_dlmalloc_sys_alloc1161
0x2040	0xF207020C  ADDW	R2, R7, #12
0x2044	0x6812    LDR	R2, [R2, #0]
0x2046	0xB13A    CBZ	R2, L___Lib_dlmalloc_sys_alloc1160
L___Lib_dlmalloc_sys_alloc1159:
;__Lib_dlmalloc.c, 4128 :: 		void* mem = mmap_alloc(m, nb);
0x2048	0x4641    MOV	R1, R8
0x204A	0x4638    MOV	R0, R7
0x204C	0xF7FEFF50  BL	__Lib_dlmalloc_mmap_alloc+0
; mem start address is: 4 (R1)
0x2050	0x4601    MOV	R1, R0
;__Lib_dlmalloc.c, 4129 :: 		if (mem != 0)
0x2052	0xB108    CBZ	R0, L___Lib_dlmalloc_sys_alloc230
; m end address is: 28 (R7)
; mmap_flag end address is: 36 (R9)
; nb end address is: 32 (R8)
;__Lib_dlmalloc.c, 4130 :: 		return mem;
0x2054	0x4608    MOV	R0, R1
; mem end address is: 4 (R1)
0x2056	0xE2CF    B	L_end_sys_alloc
L___Lib_dlmalloc_sys_alloc230:
;__Lib_dlmalloc.c, 4127 :: 		if (use_mmap(m) && nb >= mparams.mmap_threshold && m->topsize != 0) {
; nb start address is: 32 (R8)
; mmap_flag start address is: 36 (R9)
; m start address is: 28 (R7)
L___Lib_dlmalloc_sys_alloc1162:
L___Lib_dlmalloc_sys_alloc1161:
L___Lib_dlmalloc_sys_alloc1160:
;__Lib_dlmalloc.c, 4133 :: 		asize = granularity_align(nb + SYS_ALLOC_PADDING);
0x2058	0x4AC4    LDR	R2, [PC, #784]
0x205A	0xF0020207  AND	R2, R2, #7
0x205E	0xB90A    CBNZ	R2, L___Lib_dlmalloc_sys_alloc231
; ?FLOC____Lib_dlmalloc_sys_alloc?T2185 start address is: 0 (R0)
0x2060	0x2000    MOVS	R0, #0
; ?FLOC____Lib_dlmalloc_sys_alloc?T2185 end address is: 0 (R0)
0x2062	0xE006    B	L___Lib_dlmalloc_sys_alloc232
L___Lib_dlmalloc_sys_alloc231:
0x2064	0x4AC1    LDR	R2, [PC, #772]
0x2066	0xF0020207  AND	R2, R2, #7
0x206A	0xF1C20008  RSB	R0, R2, #8
0x206E	0xF0000007  AND	R0, R0, #7
; ?FLOC____Lib_dlmalloc_sys_alloc?T2185 start address is: 0 (R0)
; ?FLOC____Lib_dlmalloc_sys_alloc?T2185 end address is: 0 (R0)
L___Lib_dlmalloc_sys_alloc232:
; ?FLOC____Lib_dlmalloc_sys_alloc?T2185 start address is: 0 (R0)
0x2072	0xF2000218  ADDW	R2, R0, #24
; ?FLOC____Lib_dlmalloc_sys_alloc?T2185 end address is: 0 (R0)
0x2076	0x3210    ADDS	R2, #16
0x2078	0x3208    ADDS	R2, #8
0x207A	0xEB080302  ADD	R3, R8, R2, LSL #0
0x207E	0x4CBC    LDR	R4, [PC, #752]
0x2080	0x6822    LDR	R2, [R4, #0]
0x2082	0x1E52    SUBS	R2, R2, #1
0x2084	0x189B    ADDS	R3, R3, R2
0x2086	0x4622    MOV	R2, R4
0x2088	0x6812    LDR	R2, [R2, #0]
0x208A	0x1E52    SUBS	R2, R2, #1
0x208C	0x43D2    MVN	R2, R2
0x208E	0xEA030202  AND	R2, R3, R2, LSL #0
; asize start address is: 20 (R5)
0x2092	0x4615    MOV	R5, R2
;__Lib_dlmalloc.c, 4134 :: 		if (asize <= nb)
0x2094	0x4542    CMP	R2, R8
0x2096	0xD801    BHI	L___Lib_dlmalloc_sys_alloc233
; m end address is: 28 (R7)
; mmap_flag end address is: 36 (R9)
; asize end address is: 20 (R5)
; nb end address is: 32 (R8)
;__Lib_dlmalloc.c, 4135 :: 		return 0; /* wraparound */
0x2098	0x2000    MOVS	R0, #0
0x209A	0xE2AD    B	L_end_sys_alloc
L___Lib_dlmalloc_sys_alloc233:
;__Lib_dlmalloc.c, 4136 :: 		if (m->footprint_limit != 0) {
; nb start address is: 32 (R8)
; asize start address is: 20 (R5)
; mmap_flag start address is: 36 (R9)
; m start address is: 28 (R7)
0x209C	0xF50772DC  ADD	R2, R7, #440
0x20A0	0x6812    LDR	R2, [R2, #0]
0x20A2	0xB172    CBZ	R2, L___Lib_dlmalloc_sys_alloc234
;__Lib_dlmalloc.c, 4137 :: 		size_t fp = m->footprint + asize;
0x20A4	0xF50772D8  ADD	R2, R7, #432
0x20A8	0x6813    LDR	R3, [R2, #0]
0x20AA	0x195A    ADDS	R2, R3, R5
; fp start address is: 0 (R0)
0x20AC	0x4610    MOV	R0, R2
;__Lib_dlmalloc.c, 4138 :: 		if (fp <= m->footprint || fp > m->footprint_limit)
0x20AE	0x429A    CMP	R2, R3
0x20B0	0xD905    BLS	L___Lib_dlmalloc_sys_alloc1164
0x20B2	0xF50772DC  ADD	R2, R7, #440
0x20B6	0x6812    LDR	R2, [R2, #0]
0x20B8	0x4290    CMP	R0, R2
0x20BA	0xD800    BHI	L___Lib_dlmalloc_sys_alloc1163
; fp end address is: 0 (R0)
0x20BC	0xE001    B	L___Lib_dlmalloc_sys_alloc237
; m end address is: 28 (R7)
; mmap_flag end address is: 36 (R9)
; asize end address is: 20 (R5)
; nb end address is: 32 (R8)
L___Lib_dlmalloc_sys_alloc1164:
L___Lib_dlmalloc_sys_alloc1163:
;__Lib_dlmalloc.c, 4139 :: 		return 0;
0x20BE	0x2000    MOVS	R0, #0
0x20C0	0xE29A    B	L_end_sys_alloc
L___Lib_dlmalloc_sys_alloc237:
;__Lib_dlmalloc.c, 4140 :: 		}
; nb start address is: 32 (R8)
; asize start address is: 20 (R5)
; mmap_flag start address is: 36 (R9)
; m start address is: 28 (R7)
L___Lib_dlmalloc_sys_alloc234:
;__Lib_dlmalloc.c, 4164 :: 		if (MORECORE_CONTIGUOUS && !use_noncontiguous(m)) {
0x20C2	0xF50772DE  ADD	R2, R7, #444
0x20C6	0x6812    LDR	R2, [R2, #0]
0x20C8	0xF0020204  AND	R2, R2, #4
0x20CC	0x2A00    CMP	R2, #0
0x20CE	0xF04080FC  BNE	L___Lib_dlmalloc_sys_alloc1175
L___Lib_dlmalloc_sys_alloc1157:
;__Lib_dlmalloc.c, 4165 :: 		uint8_t* br = CMFAIL;
0x20D2	0x4AA8    LDR	R2, [PC, #672]
0x20D4	0x9203    STR	R2, [SP, #12]
;__Lib_dlmalloc.c, 4166 :: 		size_t ssize = asize; /* sbrk call size */
; ssize start address is: 48 (R12)
0x20D6	0x46AC    MOV	R12, R5
;__Lib_dlmalloc.c, 4167 :: 		msegmentptr ss = (m->top == 0)? (msegmentptr)0 : segment_holding(m, (uint8_t*)m->top);
0x20D8	0xF2070218  ADDW	R2, R7, #24
0x20DC	0x6812    LDR	R2, [R2, #0]
0x20DE	0xB90A    CBNZ	R2, L___Lib_dlmalloc_sys_alloc241
; ?FLOC____Lib_dlmalloc_sys_alloc?T2261 start address is: 0 (R0)
0x20E0	0x48A5    LDR	R0, [PC, #660]
; ?FLOC____Lib_dlmalloc_sys_alloc?T2261 end address is: 0 (R0)
0x20E2	0xE007    B	L___Lib_dlmalloc_sys_alloc242
L___Lib_dlmalloc_sys_alloc241:
0x20E4	0xF2070218  ADDW	R2, R7, #24
0x20E8	0x6811    LDR	R1, [R2, #0]
0x20EA	0x4638    MOV	R0, R7
0x20EC	0xF7FEF8F2  BL	__Lib_dlmalloc_segment_holding+0
; ?FLOC____Lib_dlmalloc_sys_alloc?T2261 start address is: 4 (R1)
0x20F0	0x4601    MOV	R1, R0
; ?FLOC____Lib_dlmalloc_sys_alloc?T2261 end address is: 4 (R1)
0x20F2	0x4608    MOV	R0, R1
L___Lib_dlmalloc_sys_alloc242:
; ?FLOC____Lib_dlmalloc_sys_alloc?T2261 start address is: 0 (R0)
; ss start address is: 24 (R6)
0x20F4	0x4606    MOV	R6, R0
;__Lib_dlmalloc.c, 4170 :: 		if (ss == 0) {  /* First time through or recovery */
0x20F6	0x2800    CMP	R0, #0
0x20F8	0xD146    BNE	L___Lib_dlmalloc_sys_alloc243
; ?FLOC____Lib_dlmalloc_sys_alloc?T2261 end address is: 0 (R0)
; ss end address is: 24 (R6)
;__Lib_dlmalloc.c, 4171 :: 		uint8_t* base = (uint8_t*)CALL_MORECORE(0);
0x20FA	0x2000    MOVS	R0, #0
0x20FC	0xF7FEF908  BL	__Lib_dlmalloc_mikroCMemAlloc+0
; base start address is: 24 (R6)
0x2100	0x4606    MOV	R6, R0
;__Lib_dlmalloc.c, 4172 :: 		if (base != CMFAIL) {
0x2102	0x4A9E    LDR	R2, [PC, #632]
0x2104	0x4290    CMP	R0, R2
0x2106	0xD03D    BEQ	L___Lib_dlmalloc_sys_alloc1195
;__Lib_dlmalloc.c, 4175 :: 		if (!is_page_aligned(base))
0x2108	0x4A9D    LDR	R2, [PC, #628]
0x210A	0x6812    LDR	R2, [R2, #0]
0x210C	0x1E52    SUBS	R2, R2, #1
0x210E	0xEA060202  AND	R2, R6, R2, LSL #0
0x2112	0xB17A    CBZ	R2, L___Lib_dlmalloc_sys_alloc1194
;__Lib_dlmalloc.c, 4176 :: 		ssize += (page_align((size_t)base) - (size_t)base);
0x2114	0x4C9A    LDR	R4, [PC, #616]
0x2116	0x6822    LDR	R2, [R4, #0]
0x2118	0x1E52    SUBS	R2, R2, #1
0x211A	0x18B3    ADDS	R3, R6, R2
0x211C	0x4622    MOV	R2, R4
0x211E	0x6812    LDR	R2, [R2, #0]
0x2120	0x1E52    SUBS	R2, R2, #1
0x2122	0x43D2    MVN	R2, R2
0x2124	0xEA030202  AND	R2, R3, R2, LSL #0
0x2128	0x1B92    SUB	R2, R2, R6
0x212A	0xEB0C0202  ADD	R2, R12, R2, LSL #0
; ssize end address is: 48 (R12)
; ssize start address is: 16 (R4)
0x212E	0x4614    MOV	R4, R2
; ssize end address is: 16 (R4)
0x2130	0x4621    MOV	R1, R4
0x2132	0xE000    B	L___Lib_dlmalloc_sys_alloc245
L___Lib_dlmalloc_sys_alloc1194:
;__Lib_dlmalloc.c, 4175 :: 		if (!is_page_aligned(base))
0x2134	0x4661    MOV	R1, R12
;__Lib_dlmalloc.c, 4176 :: 		ssize += (page_align((size_t)base) - (size_t)base);
L___Lib_dlmalloc_sys_alloc245:
;__Lib_dlmalloc.c, 4177 :: 		fp = m->footprint + ssize; /* recheck limits */
; ssize start address is: 4 (R1)
0x2136	0xF50772D8  ADD	R2, R7, #432
0x213A	0x6812    LDR	R2, [R2, #0]
0x213C	0x1852    ADDS	R2, R2, R1
; fp start address is: 0 (R0)
0x213E	0x4610    MOV	R0, R2
;__Lib_dlmalloc.c, 4178 :: 		if (ssize > nb && ssize < HALF_MAX_SIZE_T &&
0x2140	0x4541    CMP	R1, R8
0x2142	0xD91D    BLS	L___Lib_dlmalloc_sys_alloc1170
0x2144	0xF06F4200  MVN	R2, #-2147483648
0x2148	0x4291    CMP	R1, R2
0x214A	0xD219    BCS	L___Lib_dlmalloc_sys_alloc1169
;__Lib_dlmalloc.c, 4179 :: 		(m->footprint_limit == 0 ||
0x214C	0xF50772DC  ADD	R2, R7, #440
0x2150	0x6812    LDR	R2, [R2, #0]
;__Lib_dlmalloc.c, 4180 :: 		(fp > m->footprint && fp <= m->footprint_limit)) &&
0x2152	0xB15A    CBZ	R2, L___Lib_dlmalloc_sys_alloc1167
0x2154	0xF50772D8  ADD	R2, R7, #432
0x2158	0x6812    LDR	R2, [R2, #0]
0x215A	0x4290    CMP	R0, R2
0x215C	0xD905    BLS	L___Lib_dlmalloc_sys_alloc1166
0x215E	0xF50772DC  ADD	R2, R7, #440
0x2162	0x6812    LDR	R2, [R2, #0]
0x2164	0x4290    CMP	R0, R2
0x2166	0xD800    BHI	L___Lib_dlmalloc_sys_alloc1165
; fp end address is: 0 (R0)
0x2168	0xE000    B	L___Lib_dlmalloc_sys_alloc1155
; base end address is: 24 (R6)
L___Lib_dlmalloc_sys_alloc1166:
L___Lib_dlmalloc_sys_alloc1165:
0x216A	0xE009    B	L___Lib_dlmalloc_sys_alloc252
L___Lib_dlmalloc_sys_alloc1155:
; base start address is: 24 (R6)
L___Lib_dlmalloc_sys_alloc1167:
;__Lib_dlmalloc.c, 4181 :: 		(br = (uint8_t*)(CALL_MORECORE(ssize))) == base) {
0x216C	0x9101    STR	R1, [SP, #4]
0x216E	0x4608    MOV	R0, R1
0x2170	0xF7FEF8CE  BL	__Lib_dlmalloc_mikroCMemAlloc+0
0x2174	0x9901    LDR	R1, [SP, #4]
0x2176	0x9003    STR	R0, [SP, #12]
0x2178	0x42B0    CMP	R0, R6
0x217A	0xD101    BNE	L___Lib_dlmalloc_sys_alloc1168
L___Lib_dlmalloc_sys_alloc1154:
;__Lib_dlmalloc.c, 4182 :: 		tbase = base;
0x217C	0x9605    STR	R6, [SP, #20]
; base end address is: 24 (R6)
;__Lib_dlmalloc.c, 4183 :: 		tsize = ssize;
0x217E	0x9106    STR	R1, [SP, #24]
;__Lib_dlmalloc.c, 4184 :: 		}
L___Lib_dlmalloc_sys_alloc252:
;__Lib_dlmalloc.c, 4178 :: 		if (ssize > nb && ssize < HALF_MAX_SIZE_T &&
L___Lib_dlmalloc_sys_alloc1170:
L___Lib_dlmalloc_sys_alloc1169:
;__Lib_dlmalloc.c, 4181 :: 		(br = (uint8_t*)(CALL_MORECORE(ssize))) == base) {
L___Lib_dlmalloc_sys_alloc1168:
;__Lib_dlmalloc.c, 4185 :: 		}
0x2180	0x468C    MOV	R12, R1
; ssize end address is: 4 (R1)
0x2182	0xE7FF    B	L___Lib_dlmalloc_sys_alloc244
L___Lib_dlmalloc_sys_alloc1195:
;__Lib_dlmalloc.c, 4172 :: 		if (base != CMFAIL) {
;__Lib_dlmalloc.c, 4185 :: 		}
L___Lib_dlmalloc_sys_alloc244:
;__Lib_dlmalloc.c, 4186 :: 		}
; ssize start address is: 48 (R12)
0x2184	0x4666    MOV	R6, R12
; ssize end address is: 48 (R12)
0x2186	0xE033    B	L___Lib_dlmalloc_sys_alloc253
L___Lib_dlmalloc_sys_alloc243:
;__Lib_dlmalloc.c, 4189 :: 		ssize = granularity_align(nb - m->topsize + SYS_ALLOC_PADDING);
; ss start address is: 24 (R6)
0x2188	0xF207020C  ADDW	R2, R7, #12
0x218C	0x6812    LDR	R2, [R2, #0]
0x218E	0xEBA80302  SUB	R3, R8, R2, LSL #0
0x2192	0x4A76    LDR	R2, [PC, #472]
0x2194	0xF0020207  AND	R2, R2, #7
0x2198	0xB90A    CBNZ	R2, L___Lib_dlmalloc_sys_alloc254
; ?FLOC____Lib_dlmalloc_sys_alloc?T2335 start address is: 0 (R0)
0x219A	0x2000    MOVS	R0, #0
; ?FLOC____Lib_dlmalloc_sys_alloc?T2335 end address is: 0 (R0)
0x219C	0xE006    B	L___Lib_dlmalloc_sys_alloc255
L___Lib_dlmalloc_sys_alloc254:
0x219E	0x4A73    LDR	R2, [PC, #460]
0x21A0	0xF0020207  AND	R2, R2, #7
0x21A4	0xF1C20008  RSB	R0, R2, #8
0x21A8	0xF0000007  AND	R0, R0, #7
; ?FLOC____Lib_dlmalloc_sys_alloc?T2335 start address is: 0 (R0)
; ?FLOC____Lib_dlmalloc_sys_alloc?T2335 end address is: 0 (R0)
L___Lib_dlmalloc_sys_alloc255:
; ?FLOC____Lib_dlmalloc_sys_alloc?T2335 start address is: 0 (R0)
0x21AC	0xF2000218  ADDW	R2, R0, #24
; ?FLOC____Lib_dlmalloc_sys_alloc?T2335 end address is: 0 (R0)
0x21B0	0x3210    ADDS	R2, #16
0x21B2	0x3208    ADDS	R2, #8
0x21B4	0x189B    ADDS	R3, R3, R2
0x21B6	0x4C6E    LDR	R4, [PC, #440]
0x21B8	0x6822    LDR	R2, [R4, #0]
0x21BA	0x1E52    SUBS	R2, R2, #1
0x21BC	0x189B    ADDS	R3, R3, R2
0x21BE	0x4622    MOV	R2, R4
0x21C0	0x6812    LDR	R2, [R2, #0]
0x21C2	0x1E52    SUBS	R2, R2, #1
0x21C4	0x43D2    MVN	R2, R2
0x21C6	0x4013    ANDS	R3, R2
; ssize start address is: 48 (R12)
0x21C8	0x469C    MOV	R12, R3
;__Lib_dlmalloc.c, 4192 :: 		(br = (uint8_t*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
0x21CA	0xF06F4200  MVN	R2, #-2147483648
0x21CE	0x4293    CMP	R3, R2
0x21D0	0xD20D    BCS	L___Lib_dlmalloc_sys_alloc1172
0x21D2	0x4660    MOV	R0, R12
0x21D4	0xF7FEF89C  BL	__Lib_dlmalloc_mikroCMemAlloc+0
0x21D8	0x9003    STR	R0, [SP, #12]
0x21DA	0x1D32    ADDS	R2, R6, #4
0x21DC	0x6813    LDR	R3, [R2, #0]
0x21DE	0x6832    LDR	R2, [R6, #0]
; ss end address is: 24 (R6)
0x21E0	0x18D2    ADDS	R2, R2, R3
0x21E2	0x4290    CMP	R0, R2
0x21E4	0xD103    BNE	L___Lib_dlmalloc_sys_alloc1171
L___Lib_dlmalloc_sys_alloc1153:
;__Lib_dlmalloc.c, 4193 :: 		tbase = br;
0x21E6	0x9A03    LDR	R2, [SP, #12]
0x21E8	0x9205    STR	R2, [SP, #20]
;__Lib_dlmalloc.c, 4194 :: 		tsize = ssize;
0x21EA	0xF8CDC018  STR	R12, [SP, #24]
;__Lib_dlmalloc.c, 4192 :: 		(br = (uint8_t*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
L___Lib_dlmalloc_sys_alloc1172:
L___Lib_dlmalloc_sys_alloc1171:
;__Lib_dlmalloc.c, 4196 :: 		}
0x21EE	0x4666    MOV	R6, R12
; ssize end address is: 48 (R12)
L___Lib_dlmalloc_sys_alloc253:
;__Lib_dlmalloc.c, 4198 :: 		if (tbase == CMFAIL) {    /* Cope with partial failure */
; ssize start address is: 24 (R6)
0x21F0	0x9B05    LDR	R3, [SP, #20]
0x21F2	0x4A64    LDR	R2, [PC, #400]
0x21F4	0x4293    CMP	R3, R2
0x21F6	0xF0408068  BNE	L___Lib_dlmalloc_sys_alloc259
;__Lib_dlmalloc.c, 4199 :: 		if (br != CMFAIL) {    /* Try to use/extend the space we did get */
0x21FA	0x9B03    LDR	R3, [SP, #12]
0x21FC	0x4A62    LDR	R2, [PC, #392]
0x21FE	0x4293    CMP	R3, R2
0x2200	0xF0008054  BEQ	L___Lib_dlmalloc_sys_alloc1199
;__Lib_dlmalloc.c, 4201 :: 		ssize < nb + SYS_ALLOC_PADDING) {
0x2204	0xF06F4200  MVN	R2, #-2147483648
0x2208	0x4296    CMP	R6, R2
0x220A	0xD24B    BCS	L___Lib_dlmalloc_sys_alloc1197
0x220C	0x4A57    LDR	R2, [PC, #348]
0x220E	0xF0020207  AND	R2, R2, #7
0x2212	0xB90A    CBNZ	R2, L___Lib_dlmalloc_sys_alloc261
; ?FLOC____Lib_dlmalloc_sys_alloc?T2401 start address is: 0 (R0)
0x2214	0x2000    MOVS	R0, #0
; ?FLOC____Lib_dlmalloc_sys_alloc?T2401 end address is: 0 (R0)
0x2216	0xE006    B	L___Lib_dlmalloc_sys_alloc262
L___Lib_dlmalloc_sys_alloc261:
0x2218	0x4A54    LDR	R2, [PC, #336]
0x221A	0xF0020207  AND	R2, R2, #7
0x221E	0xF1C20008  RSB	R0, R2, #8
0x2222	0xF0000007  AND	R0, R0, #7
; ?FLOC____Lib_dlmalloc_sys_alloc?T2401 start address is: 0 (R0)
; ?FLOC____Lib_dlmalloc_sys_alloc?T2401 end address is: 0 (R0)
L___Lib_dlmalloc_sys_alloc262:
; ?FLOC____Lib_dlmalloc_sys_alloc?T2401 start address is: 0 (R0)
0x2226	0xF2000218  ADDW	R2, R0, #24
; ?FLOC____Lib_dlmalloc_sys_alloc?T2401 end address is: 0 (R0)
0x222A	0x3210    ADDS	R2, #16
0x222C	0x3208    ADDS	R2, #8
0x222E	0xEB080202  ADD	R2, R8, R2, LSL #0
0x2232	0x4296    CMP	R6, R2
0x2234	0xD238    BCS	L___Lib_dlmalloc_sys_alloc1198
L___Lib_dlmalloc_sys_alloc1152:
;__Lib_dlmalloc.c, 4202 :: 		size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - ssize);
0x2236	0x4A4D    LDR	R2, [PC, #308]
0x2238	0xF0020207  AND	R2, R2, #7
0x223C	0xB90A    CBNZ	R2, L___Lib_dlmalloc_sys_alloc266
; ?FLOC____Lib_dlmalloc_sys_alloc?T2437 start address is: 0 (R0)
0x223E	0x2000    MOVS	R0, #0
; ?FLOC____Lib_dlmalloc_sys_alloc?T2437 end address is: 0 (R0)
0x2240	0xE006    B	L___Lib_dlmalloc_sys_alloc267
L___Lib_dlmalloc_sys_alloc266:
0x2242	0x4A4A    LDR	R2, [PC, #296]
0x2244	0xF0020207  AND	R2, R2, #7
0x2248	0xF1C20008  RSB	R0, R2, #8
0x224C	0xF0000007  AND	R0, R0, #7
; ?FLOC____Lib_dlmalloc_sys_alloc?T2437 start address is: 0 (R0)
; ?FLOC____Lib_dlmalloc_sys_alloc?T2437 end address is: 0 (R0)
L___Lib_dlmalloc_sys_alloc267:
; ?FLOC____Lib_dlmalloc_sys_alloc?T2437 start address is: 0 (R0)
0x2250	0xF2000218  ADDW	R2, R0, #24
; ?FLOC____Lib_dlmalloc_sys_alloc?T2437 end address is: 0 (R0)
0x2254	0x3210    ADDS	R2, #16
0x2256	0x3208    ADDS	R2, #8
0x2258	0xEB080202  ADD	R2, R8, R2, LSL #0
0x225C	0x1B93    SUB	R3, R2, R6
0x225E	0x4C44    LDR	R4, [PC, #272]
0x2260	0x6822    LDR	R2, [R4, #0]
0x2262	0x1E52    SUBS	R2, R2, #1
0x2264	0x189B    ADDS	R3, R3, R2
0x2266	0x4622    MOV	R2, R4
0x2268	0x6812    LDR	R2, [R2, #0]
0x226A	0x1E52    SUBS	R2, R2, #1
0x226C	0x43D2    MVN	R2, R2
0x226E	0x4013    ANDS	R3, R2
; esize start address is: 16 (R4)
0x2270	0x461C    MOV	R4, R3
;__Lib_dlmalloc.c, 4203 :: 		if (esize < HALF_MAX_SIZE_T) {
0x2272	0xF06F4200  MVN	R2, #-2147483648
0x2276	0x4293    CMP	R3, R2
0x2278	0xD211    BCS	L___Lib_dlmalloc_sys_alloc1196
;__Lib_dlmalloc.c, 4204 :: 		uint8_t* end = (uint8_t*)CALL_MORECORE(esize);
0x227A	0x4620    MOV	R0, R4
0x227C	0xF7FEF848  BL	__Lib_dlmalloc_mikroCMemAlloc+0
;__Lib_dlmalloc.c, 4205 :: 		if (end != CMFAIL)
0x2280	0x4A42    LDR	R2, [PC, #264]
0x2282	0x4290    CMP	R0, R2
0x2284	0xD002    BEQ	L___Lib_dlmalloc_sys_alloc269
;__Lib_dlmalloc.c, 4206 :: 		ssize += esize;
0x2286	0x1931    ADDS	R1, R6, R4
; ssize end address is: 24 (R6)
; esize end address is: 16 (R4)
; ssize start address is: 4 (R1)
0x2288	0x4608    MOV	R0, R1
; ssize end address is: 4 (R1)
0x228A	0xE006    B	L___Lib_dlmalloc_sys_alloc270
L___Lib_dlmalloc_sys_alloc269:
;__Lib_dlmalloc.c, 4208 :: 		(void) CALL_MORECORE(-ssize);
; ssize start address is: 24 (R6)
0x228C	0x4272    RSBS	R2, R6, #0
0x228E	0x4610    MOV	R0, R2
0x2290	0xF7FEF83E  BL	__Lib_dlmalloc_mikroCMemAlloc+0
;__Lib_dlmalloc.c, 4209 :: 		br = CMFAIL;
0x2294	0x4A3E    LDR	R2, [PC, #248]
0x2296	0x9203    STR	R2, [SP, #12]
; ssize end address is: 24 (R6)
0x2298	0x4630    MOV	R0, R6
;__Lib_dlmalloc.c, 4210 :: 		}
L___Lib_dlmalloc_sys_alloc270:
;__Lib_dlmalloc.c, 4211 :: 		}
; ssize start address is: 0 (R0)
0x229A	0x4601    MOV	R1, R0
; ssize end address is: 0 (R0)
0x229C	0xE000    B	L___Lib_dlmalloc_sys_alloc268
L___Lib_dlmalloc_sys_alloc1196:
;__Lib_dlmalloc.c, 4203 :: 		if (esize < HALF_MAX_SIZE_T) {
0x229E	0x4631    MOV	R1, R6
;__Lib_dlmalloc.c, 4211 :: 		}
L___Lib_dlmalloc_sys_alloc268:
;__Lib_dlmalloc.c, 4201 :: 		ssize < nb + SYS_ALLOC_PADDING) {
; ssize start address is: 4 (R1)
0x22A0	0x4608    MOV	R0, R1
; ssize end address is: 4 (R1)
0x22A2	0xE000    B	L___Lib_dlmalloc_sys_alloc1174
L___Lib_dlmalloc_sys_alloc1197:
0x22A4	0x4630    MOV	R0, R6
L___Lib_dlmalloc_sys_alloc1174:
; ssize start address is: 0 (R0)
; ssize end address is: 0 (R0)
0x22A6	0xE000    B	L___Lib_dlmalloc_sys_alloc1173
L___Lib_dlmalloc_sys_alloc1198:
0x22A8	0x4630    MOV	R0, R6
L___Lib_dlmalloc_sys_alloc1173:
;__Lib_dlmalloc.c, 4213 :: 		}
; ssize start address is: 0 (R0)
; ssize end address is: 0 (R0)
0x22AA	0xE000    B	L___Lib_dlmalloc_sys_alloc260
L___Lib_dlmalloc_sys_alloc1199:
;__Lib_dlmalloc.c, 4199 :: 		if (br != CMFAIL) {    /* Try to use/extend the space we did get */
0x22AC	0x4630    MOV	R0, R6
;__Lib_dlmalloc.c, 4213 :: 		}
L___Lib_dlmalloc_sys_alloc260:
;__Lib_dlmalloc.c, 4214 :: 		if (br != CMFAIL) {    /* Use the space we did get */
; ssize start address is: 0 (R0)
0x22AE	0x9B03    LDR	R3, [SP, #12]
0x22B0	0x4A38    LDR	R2, [PC, #224]
0x22B2	0x4293    CMP	R3, R2
0x22B4	0xD003    BEQ	L___Lib_dlmalloc_sys_alloc271
;__Lib_dlmalloc.c, 4215 :: 		tbase = br;
0x22B6	0x9A03    LDR	R2, [SP, #12]
0x22B8	0x9205    STR	R2, [SP, #20]
;__Lib_dlmalloc.c, 4216 :: 		tsize = ssize;
0x22BA	0x9006    STR	R0, [SP, #24]
; ssize end address is: 0 (R0)
;__Lib_dlmalloc.c, 4217 :: 		}
0x22BC	0xE005    B	L___Lib_dlmalloc_sys_alloc272
L___Lib_dlmalloc_sys_alloc271:
;__Lib_dlmalloc.c, 4219 :: 		disable_contiguous(m); /* Don't try contiguous path in the future */
0x22BE	0xF50773DE  ADD	R3, R7, #444
0x22C2	0x681A    LDR	R2, [R3, #0]
0x22C4	0xF0420204  ORR	R2, R2, #4
0x22C8	0x601A    STR	R2, [R3, #0]
L___Lib_dlmalloc_sys_alloc272:
;__Lib_dlmalloc.c, 4220 :: 		}
L___Lib_dlmalloc_sys_alloc259:
;__Lib_dlmalloc.c, 4164 :: 		if (MORECORE_CONTIGUOUS && !use_noncontiguous(m)) {
L___Lib_dlmalloc_sys_alloc1175:
;__Lib_dlmalloc.c, 4225 :: 		if (HAVE_MMAP && tbase == CMFAIL) {  /* Try MMAP */
;__Lib_dlmalloc.c, 4232 :: 		}
L___Lib_dlmalloc_sys_alloc273:
;__Lib_dlmalloc.c, 4234 :: 		if (HAVE_MORECORE && tbase == CMFAIL) { /* Try noncontiguous MORECORE */
0x22CA	0x9B05    LDR	R3, [SP, #20]
0x22CC	0x4A32    LDR	R2, [PC, #200]
0x22CE	0x4293    CMP	R3, R2
0x22D0	0xD12A    BNE	L___Lib_dlmalloc_sys_alloc1179
L___Lib_dlmalloc_sys_alloc1151:
;__Lib_dlmalloc.c, 4235 :: 		if (asize < HALF_MAX_SIZE_T) {
0x22D2	0xF06F4200  MVN	R2, #-2147483648
0x22D6	0x4295    CMP	R5, R2
0x22D8	0xD226    BCS	L___Lib_dlmalloc_sys_alloc278
;__Lib_dlmalloc.c, 4236 :: 		uint8_t* br = CMFAIL;
;__Lib_dlmalloc.c, 4237 :: 		uint8_t* end = CMFAIL;
;__Lib_dlmalloc.c, 4239 :: 		br = (uint8_t*)(CALL_MORECORE(asize));
0x22DA	0x4628    MOV	R0, R5
; asize end address is: 20 (R5)
0x22DC	0xF7FEF818  BL	__Lib_dlmalloc_mikroCMemAlloc+0
; br start address is: 16 (R4)
0x22E0	0x4604    MOV	R4, R0
;__Lib_dlmalloc.c, 4240 :: 		end = (uint8_t*)(CALL_MORECORE(0));
0x22E2	0x2000    MOVS	R0, #0
0x22E4	0xF7FEF814  BL	__Lib_dlmalloc_mikroCMemAlloc+0
; end start address is: 0 (R0)
;__Lib_dlmalloc.c, 4242 :: 		if (br != CMFAIL && end != CMFAIL && br < end) {
0x22E8	0x4A2C    LDR	R2, [PC, #176]
0x22EA	0x4294    CMP	R4, R2
0x22EC	0xD01C    BEQ	L___Lib_dlmalloc_sys_alloc1178
0x22EE	0x4A2C    LDR	R2, [PC, #176]
0x22F0	0x4290    CMP	R0, R2
0x22F2	0xD019    BEQ	L___Lib_dlmalloc_sys_alloc1177
0x22F4	0x4284    CMP	R4, R0
0x22F6	0xD217    BCS	L___Lib_dlmalloc_sys_alloc1176
L___Lib_dlmalloc_sys_alloc1150:
;__Lib_dlmalloc.c, 4243 :: 		size_t ssize = end - br;
0x22F8	0x1B02    SUB	R2, R0, R4
; end end address is: 0 (R0)
; ssize start address is: 0 (R0)
0x22FA	0x4610    MOV	R0, R2
;__Lib_dlmalloc.c, 4244 :: 		if (ssize > nb + TOP_FOOT_SIZE) {
0x22FC	0x4A1B    LDR	R2, [PC, #108]
0x22FE	0xF0020207  AND	R2, R2, #7
0x2302	0xB90A    CBNZ	R2, L___Lib_dlmalloc_sys_alloc282
; ?FLOC____Lib_dlmalloc_sys_alloc?T2525 start address is: 4 (R1)
0x2304	0x2100    MOVS	R1, #0
; ?FLOC____Lib_dlmalloc_sys_alloc?T2525 end address is: 4 (R1)
0x2306	0xE006    B	L___Lib_dlmalloc_sys_alloc283
L___Lib_dlmalloc_sys_alloc282:
0x2308	0x4A18    LDR	R2, [PC, #96]
0x230A	0xF0020207  AND	R2, R2, #7
0x230E	0xF1C20108  RSB	R1, R2, #8
0x2312	0xF0010107  AND	R1, R1, #7
; ?FLOC____Lib_dlmalloc_sys_alloc?T2525 start address is: 4 (R1)
; ?FLOC____Lib_dlmalloc_sys_alloc?T2525 end address is: 4 (R1)
L___Lib_dlmalloc_sys_alloc283:
; ?FLOC____Lib_dlmalloc_sys_alloc?T2525 start address is: 4 (R1)
0x2316	0xF2010218  ADDW	R2, R1, #24
; ?FLOC____Lib_dlmalloc_sys_alloc?T2525 end address is: 4 (R1)
0x231A	0x3210    ADDS	R2, #16
0x231C	0xEB080202  ADD	R2, R8, R2, LSL #0
0x2320	0x4290    CMP	R0, R2
0x2322	0xD901    BLS	L___Lib_dlmalloc_sys_alloc284
;__Lib_dlmalloc.c, 4245 :: 		tbase = br;
0x2324	0x9405    STR	R4, [SP, #20]
; br end address is: 16 (R4)
;__Lib_dlmalloc.c, 4246 :: 		tsize = ssize;
0x2326	0x9006    STR	R0, [SP, #24]
; ssize end address is: 0 (R0)
;__Lib_dlmalloc.c, 4247 :: 		}
L___Lib_dlmalloc_sys_alloc284:
;__Lib_dlmalloc.c, 4242 :: 		if (br != CMFAIL && end != CMFAIL && br < end) {
L___Lib_dlmalloc_sys_alloc1178:
L___Lib_dlmalloc_sys_alloc1177:
L___Lib_dlmalloc_sys_alloc1176:
;__Lib_dlmalloc.c, 4249 :: 		}
L___Lib_dlmalloc_sys_alloc278:
;__Lib_dlmalloc.c, 4234 :: 		if (HAVE_MORECORE && tbase == CMFAIL) { /* Try noncontiguous MORECORE */
L___Lib_dlmalloc_sys_alloc1179:
;__Lib_dlmalloc.c, 4252 :: 		if (tbase != CMFAIL) {
0x2328	0x9B05    LDR	R3, [SP, #20]
0x232A	0x4A1E    LDR	R2, [PC, #120]
0x232C	0x4293    CMP	R3, R2
0x232E	0xF0008162  BEQ	L___Lib_dlmalloc_sys_alloc285
;__Lib_dlmalloc.c, 4254 :: 		if ((m->footprint += tsize) > m->max_footprint)
0x2332	0xF50774D8  ADD	R4, R7, #432
0x2336	0x6823    LDR	R3, [R4, #0]
0x2338	0x9A06    LDR	R2, [SP, #24]
0x233A	0x189A    ADDS	R2, R3, R2
0x233C	0x6022    STR	R2, [R4, #0]
0x233E	0x6823    LDR	R3, [R4, #0]
0x2340	0xF50772DA  ADD	R2, R7, #436
0x2344	0x6812    LDR	R2, [R2, #0]
0x2346	0x4293    CMP	R3, R2
0x2348	0xD905    BLS	L___Lib_dlmalloc_sys_alloc286
;__Lib_dlmalloc.c, 4255 :: 		m->max_footprint = m->footprint;
0x234A	0xF50773DA  ADD	R3, R7, #436
0x234E	0xF50772D8  ADD	R2, R7, #432
0x2352	0x6812    LDR	R2, [R2, #0]
0x2354	0x601A    STR	R2, [R3, #0]
L___Lib_dlmalloc_sys_alloc286:
;__Lib_dlmalloc.c, 4257 :: 		if (!is_initialized(m)) { /* first-time initialization */
0x2356	0xF2070218  ADDW	R2, R7, #24
0x235A	0x6812    LDR	R2, [R2, #0]
0x235C	0x2A00    CMP	R2, #0
0x235E	0xE023    B	#70
0x2360	0x3FCC0000  	?ICS__Lib_dlmalloc_sys_alloc_tbase_L0+0
0x2364	0x21F02000  	__Lib_dlmalloc_mparams+0
0x2368	0x21FC2000  	__Lib_dlmalloc_mparams+12
0x236C	0x00080000  	#8
0x2370	0x21F82000  	__Lib_dlmalloc_mparams+8
0x2374	0xFFFFFFFF  	#4294967295
0x2378	0x00000000  	#0
0x237C	0xFFFFFFFF  	#4294967295
0x2380	0x21F42000  	__Lib_dlmalloc_mparams+4
0x2384	0xFFFFFFFF  	#4294967295
0x2388	0xFFFFFFFF  	#4294967295
0x238C	0xFFFFFFFF  	#4294967295
0x2390	0xFFFFFFFF  	#4294967295
0x2394	0xFFFFFFFF  	#4294967295
0x2398	0xFFFFFFFF  	#4294967295
0x239C	0xFFFFFFFF  	#4294967295
0x23A0	0xFFFFFFFF  	#4294967295
0x23A4	0xFFFFFFFF  	#4294967295
0x23A8	0xF040806C  BNE	L___Lib_dlmalloc_sys_alloc287
;__Lib_dlmalloc.c, 4258 :: 		if (m->least_addr == 0 || tbase < m->least_addr)
0x23AC	0xF2070210  ADDW	R2, R7, #16
0x23B0	0x6812    LDR	R2, [R2, #0]
0x23B2	0xB132    CBZ	R2, L___Lib_dlmalloc_sys_alloc1181
0x23B4	0xF2070210  ADDW	R2, R7, #16
0x23B8	0x6813    LDR	R3, [R2, #0]
0x23BA	0x9A05    LDR	R2, [SP, #20]
0x23BC	0x429A    CMP	R2, R3
0x23BE	0xD300    BCC	L___Lib_dlmalloc_sys_alloc1180
0x23C0	0xE003    B	L___Lib_dlmalloc_sys_alloc290
L___Lib_dlmalloc_sys_alloc1181:
L___Lib_dlmalloc_sys_alloc1180:
;__Lib_dlmalloc.c, 4259 :: 		m->least_addr = tbase;
0x23C2	0xF2070310  ADDW	R3, R7, #16
0x23C6	0x9A05    LDR	R2, [SP, #20]
0x23C8	0x601A    STR	R2, [R3, #0]
L___Lib_dlmalloc_sys_alloc290:
;__Lib_dlmalloc.c, 4260 :: 		m->seg.base = tbase;
0x23CA	0xF50773E0  ADD	R3, R7, #448
0x23CE	0x9A05    LDR	R2, [SP, #20]
0x23D0	0x601A    STR	R2, [R3, #0]
;__Lib_dlmalloc.c, 4261 :: 		m->seg.size = tsize;
0x23D2	0xF50772E0  ADD	R2, R7, #448
0x23D6	0x1D13    ADDS	R3, R2, #4
0x23D8	0x9A06    LDR	R2, [SP, #24]
0x23DA	0x601A    STR	R2, [R3, #0]
;__Lib_dlmalloc.c, 4262 :: 		m->seg.sflags = mmap_flag;
0x23DC	0xF50772E0  ADD	R2, R7, #448
0x23E0	0x320C    ADDS	R2, #12
0x23E2	0xF8C29000  STR	R9, [R2, #0]
; mmap_flag end address is: 36 (R9)
;__Lib_dlmalloc.c, 4263 :: 		m->magic = mparams.magic;
0x23E6	0xF2070324  ADDW	R3, R7, #36
0x23EA	0x4A85    LDR	R2, [PC, #532]
0x23EC	0x6812    LDR	R2, [R2, #0]
0x23EE	0x601A    STR	R2, [R3, #0]
;__Lib_dlmalloc.c, 4264 :: 		m->release_checks = MAX_RELEASE_CHECK_RATE;
0x23F0	0xF2070320  ADDW	R3, R7, #32
0x23F4	0xF04F32FF  MOV	R2, #-1
0x23F8	0x601A    STR	R2, [R3, #0]
;__Lib_dlmalloc.c, 4265 :: 		init_bins(m);
0x23FA	0x4638    MOV	R0, R7
0x23FC	0xF7FDFF58  BL	__Lib_dlmalloc_init_bins+0
;__Lib_dlmalloc.c, 4267 :: 		if (is_global(m))
0x2400	0x4A80    LDR	R2, [PC, #512]
0x2402	0x4297    CMP	R7, R2
0x2404	0xD117    BNE	L___Lib_dlmalloc_sys_alloc291
;__Lib_dlmalloc.c, 4268 :: 		init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
0x2406	0x4A80    LDR	R2, [PC, #512]
0x2408	0xF0020207  AND	R2, R2, #7
0x240C	0xB90A    CBNZ	R2, L___Lib_dlmalloc_sys_alloc292
; ?FLOC____Lib_dlmalloc_sys_alloc?T2643 start address is: 0 (R0)
0x240E	0x2000    MOVS	R0, #0
; ?FLOC____Lib_dlmalloc_sys_alloc?T2643 end address is: 0 (R0)
0x2410	0xE006    B	L___Lib_dlmalloc_sys_alloc293
L___Lib_dlmalloc_sys_alloc292:
0x2412	0x4A7D    LDR	R2, [PC, #500]
0x2414	0xF0020207  AND	R2, R2, #7
0x2418	0xF1C20008  RSB	R0, R2, #8
0x241C	0xF0000007  AND	R0, R0, #7
; ?FLOC____Lib_dlmalloc_sys_alloc?T2643 start address is: 0 (R0)
; ?FLOC____Lib_dlmalloc_sys_alloc?T2643 end address is: 0 (R0)
L___Lib_dlmalloc_sys_alloc293:
; ?FLOC____Lib_dlmalloc_sys_alloc?T2643 start address is: 0 (R0)
0x2420	0xF2000218  ADDW	R2, R0, #24
; ?FLOC____Lib_dlmalloc_sys_alloc?T2643 end address is: 0 (R0)
0x2424	0xF2020310  ADDW	R3, R2, #16
0x2428	0x9A06    LDR	R2, [SP, #24]
0x242A	0x1AD2    SUB	R2, R2, R3
0x242C	0x9905    LDR	R1, [SP, #20]
0x242E	0x4638    MOV	R0, R7
0x2430	0xF7FDFF04  BL	__Lib_dlmalloc_init_top+0
0x2434	0xE023    B	L___Lib_dlmalloc_sys_alloc294
L___Lib_dlmalloc_sys_alloc291:
;__Lib_dlmalloc.c, 4273 :: 		mchunkptr mn = next_chunk(mem2chunk(m));
0x2436	0xF2A70408  SUBW	R4, R7, #8
0x243A	0x1D22    ADDS	R2, R4, #4
0x243C	0x6813    LDR	R3, [R2, #0]
0x243E	0xF06F0207  MVN	R2, #7
0x2442	0xEA030202  AND	R2, R3, R2, LSL #0
0x2446	0x18A4    ADDS	R4, R4, R2
; mn start address is: 0 (R0)
0x2448	0x4620    MOV	R0, R4
;__Lib_dlmalloc.c, 4274 :: 		init_top(m, mn, (size_t)((tbase + tsize) - (uint8_t*)mn) -TOP_FOOT_SIZE);
0x244A	0x9B06    LDR	R3, [SP, #24]
0x244C	0x9A05    LDR	R2, [SP, #20]
0x244E	0x18D2    ADDS	R2, R2, R3
0x2450	0x1B12    SUB	R2, R2, R4
0x2452	0x4613    MOV	R3, R2
0x2454	0x4A6C    LDR	R2, [PC, #432]
0x2456	0xF0020207  AND	R2, R2, #7
0x245A	0xB90A    CBNZ	R2, L___Lib_dlmalloc_sys_alloc295
; ?FLOC____Lib_dlmalloc_sys_alloc?T2703 start address is: 4 (R1)
0x245C	0x2100    MOVS	R1, #0
; ?FLOC____Lib_dlmalloc_sys_alloc?T2703 end address is: 4 (R1)
0x245E	0xE006    B	L___Lib_dlmalloc_sys_alloc296
L___Lib_dlmalloc_sys_alloc295:
0x2460	0x4A69    LDR	R2, [PC, #420]
0x2462	0xF0020207  AND	R2, R2, #7
0x2466	0xF1C20108  RSB	R1, R2, #8
0x246A	0xF0010107  AND	R1, R1, #7
; ?FLOC____Lib_dlmalloc_sys_alloc?T2703 start address is: 4 (R1)
; ?FLOC____Lib_dlmalloc_sys_alloc?T2703 end address is: 4 (R1)
L___Lib_dlmalloc_sys_alloc296:
; ?FLOC____Lib_dlmalloc_sys_alloc?T2703 start address is: 4 (R1)
0x246E	0xF2010218  ADDW	R2, R1, #24
; ?FLOC____Lib_dlmalloc_sys_alloc?T2703 end address is: 4 (R1)
0x2472	0x3210    ADDS	R2, #16
0x2474	0x1A9A    SUB	R2, R3, R2
0x2476	0x4601    MOV	R1, R0
; mn end address is: 0 (R0)
0x2478	0x4638    MOV	R0, R7
0x247A	0xF7FDFEDF  BL	__Lib_dlmalloc_init_top+0
;__Lib_dlmalloc.c, 4275 :: 		}
L___Lib_dlmalloc_sys_alloc294:
;__Lib_dlmalloc.c, 4276 :: 		}
0x247E	0x4641    MOV	R1, R8
0x2480	0x4638    MOV	R0, R7
0x2482	0xE096    B	L___Lib_dlmalloc_sys_alloc297
L___Lib_dlmalloc_sys_alloc287:
;__Lib_dlmalloc.c, 4280 :: 		msegmentptr sp = &m->seg;
; mmap_flag start address is: 36 (R9)
0x2484	0xF5077AE0  ADD	R10, R7, #448
; sp start address is: 40 (R10)
; m end address is: 28 (R7)
; mmap_flag end address is: 36 (R9)
; sp end address is: 40 (R10)
; nb end address is: 32 (R8)
0x2488	0x463E    MOV	R6, R7
0x248A	0x464D    MOV	R5, R9
;__Lib_dlmalloc.c, 4282 :: 		while (sp != 0 && tbase != sp->base + sp->size)
L___Lib_dlmalloc_sys_alloc298:
; sp start address is: 40 (R10)
; mmap_flag start address is: 20 (R5)
; nb start address is: 32 (R8)
; m start address is: 24 (R6)
0x248C	0xF1BA0F00  CMP	R10, #0
0x2490	0xD00E    BEQ	L___Lib_dlmalloc_sys_alloc1183
0x2492	0xF10A0204  ADD	R2, R10, #4
0x2496	0x6813    LDR	R3, [R2, #0]
0x2498	0xF8DA2000  LDR	R2, [R10, #0]
0x249C	0x18D3    ADDS	R3, R2, R3
0x249E	0x9A05    LDR	R2, [SP, #20]
0x24A0	0x429A    CMP	R2, R3
0x24A2	0xD005    BEQ	L___Lib_dlmalloc_sys_alloc1182
L___Lib_dlmalloc_sys_alloc1148:
;__Lib_dlmalloc.c, 4283 :: 		sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp->next;
0x24A4	0xF10A0208  ADD	R2, R10, #8
; sp end address is: 40 (R10)
0x24A8	0x6812    LDR	R2, [R2, #0]
; sp start address is: 0 (R0)
0x24AA	0x4610    MOV	R0, R2
; sp end address is: 0 (R0)
0x24AC	0x4682    MOV	R10, R0
0x24AE	0xE7ED    B	L___Lib_dlmalloc_sys_alloc298
;__Lib_dlmalloc.c, 4282 :: 		while (sp != 0 && tbase != sp->base + sp->size)
L___Lib_dlmalloc_sys_alloc1183:
; sp start address is: 40 (R10)
L___Lib_dlmalloc_sys_alloc1182:
;__Lib_dlmalloc.c, 4285 :: 		!is_extern_segment(sp) &&
0x24B0	0xF1BA0F00  CMP	R10, #0
0x24B4	0xD034    BEQ	L___Lib_dlmalloc_sys_alloc1186
0x24B6	0xF10A020C  ADD	R2, R10, #12
0x24BA	0x6812    LDR	R2, [R2, #0]
0x24BC	0xF0020208  AND	R2, R2, #8
0x24C0	0xBB72    CBNZ	R2, L___Lib_dlmalloc_sys_alloc1185
;__Lib_dlmalloc.c, 4286 :: 		(sp->sflags & USE_MMAP_BIT) == mmap_flag &&
0x24C2	0xF10A020C  ADD	R2, R10, #12
0x24C6	0x6812    LDR	R2, [R2, #0]
0x24C8	0xF0020200  AND	R2, R2, #0
0x24CC	0x42AA    CMP	R2, R5
0x24CE	0xD127    BNE	L___Lib_dlmalloc_sys_alloc1184
;__Lib_dlmalloc.c, 4287 :: 		segment_holds(sp, m->top)) { /* append */
0x24D0	0xF2060218  ADDW	R2, R6, #24
0x24D4	0x6813    LDR	R3, [R2, #0]
0x24D6	0xF8DA2000  LDR	R2, [R10, #0]
0x24DA	0x4293    CMP	R3, R2
0x24DC	0xD320    BCC	L___Lib_dlmalloc_sys_alloc1188
0x24DE	0xF2060218  ADDW	R2, R6, #24
0x24E2	0x6814    LDR	R4, [R2, #0]
0x24E4	0xF10A0204  ADD	R2, R10, #4
0x24E8	0x6813    LDR	R3, [R2, #0]
0x24EA	0xF8DA2000  LDR	R2, [R10, #0]
0x24EE	0x18D2    ADDS	R2, R2, R3
0x24F0	0x4294    CMP	R4, R2
0x24F2	0xD215    BCS	L___Lib_dlmalloc_sys_alloc1187
; mmap_flag end address is: 20 (R5)
L___Lib_dlmalloc_sys_alloc1147:
L___Lib_dlmalloc_sys_alloc1146:
;__Lib_dlmalloc.c, 4288 :: 		sp->size += tsize;
0x24F4	0xF10A0404  ADD	R4, R10, #4
; sp end address is: 40 (R10)
0x24F8	0x6823    LDR	R3, [R4, #0]
0x24FA	0x9A06    LDR	R2, [SP, #24]
0x24FC	0x189A    ADDS	R2, R3, R2
0x24FE	0x6022    STR	R2, [R4, #0]
;__Lib_dlmalloc.c, 4289 :: 		init_top(m, m->top, m->topsize + tsize);
0x2500	0xF206020C  ADDW	R2, R6, #12
0x2504	0x6813    LDR	R3, [R2, #0]
0x2506	0x9A06    LDR	R2, [SP, #24]
0x2508	0x189B    ADDS	R3, R3, R2
0x250A	0xF2060218  ADDW	R2, R6, #24
0x250E	0x6812    LDR	R2, [R2, #0]
0x2510	0x4611    MOV	R1, R2
0x2512	0x461A    MOV	R2, R3
0x2514	0x4630    MOV	R0, R6
0x2516	0xF7FDFE91  BL	__Lib_dlmalloc_init_top+0
;__Lib_dlmalloc.c, 4290 :: 		}
0x251A	0x4630    MOV	R0, R6
0x251C	0x4641    MOV	R1, R8
0x251E	0xE048    B	L___Lib_dlmalloc_sys_alloc307
;__Lib_dlmalloc.c, 4287 :: 		segment_holds(sp, m->top)) { /* append */
L___Lib_dlmalloc_sys_alloc1188:
; mmap_flag start address is: 20 (R5)
L___Lib_dlmalloc_sys_alloc1187:
;__Lib_dlmalloc.c, 4285 :: 		!is_extern_segment(sp) &&
L___Lib_dlmalloc_sys_alloc1186:
L___Lib_dlmalloc_sys_alloc1185:
;__Lib_dlmalloc.c, 4286 :: 		(sp->sflags & USE_MMAP_BIT) == mmap_flag &&
L___Lib_dlmalloc_sys_alloc1184:
;__Lib_dlmalloc.c, 4292 :: 		if (tbase < m->least_addr)
0x2520	0xF2060210  ADDW	R2, R6, #16
0x2524	0x6813    LDR	R3, [R2, #0]
0x2526	0x9A05    LDR	R2, [SP, #20]
0x2528	0x429A    CMP	R2, R3
0x252A	0xD203    BCS	L___Lib_dlmalloc_sys_alloc308
;__Lib_dlmalloc.c, 4293 :: 		m->least_addr = tbase;
0x252C	0xF2060310  ADDW	R3, R6, #16
0x2530	0x9A05    LDR	R2, [SP, #20]
0x2532	0x601A    STR	R2, [R3, #0]
L___Lib_dlmalloc_sys_alloc308:
;__Lib_dlmalloc.c, 4294 :: 		sp = &m->seg;
0x2534	0xF5067CE0  ADD	R12, R6, #448
; sp start address is: 48 (R12)
; mmap_flag end address is: 20 (R5)
; nb end address is: 32 (R8)
; m end address is: 24 (R6)
; sp end address is: 48 (R12)
0x2538	0x462C    MOV	R4, R5
0x253A	0x4641    MOV	R1, R8
0x253C	0x4630    MOV	R0, R6
;__Lib_dlmalloc.c, 4295 :: 		while (sp != 0 && sp->base != tbase + tsize)
L___Lib_dlmalloc_sys_alloc309:
; sp start address is: 48 (R12)
; m start address is: 0 (R0)
; nb start address is: 4 (R1)
; mmap_flag start address is: 16 (R4)
0x253E	0xF1BC0F00  CMP	R12, #0
0x2542	0xD00B    BEQ	L___Lib_dlmalloc_sys_alloc1190
0x2544	0x9B06    LDR	R3, [SP, #24]
0x2546	0x9A05    LDR	R2, [SP, #20]
0x2548	0x18D3    ADDS	R3, R2, R3
0x254A	0xF8DC2000  LDR	R2, [R12, #0]
0x254E	0x429A    CMP	R2, R3
0x2550	0xD004    BEQ	L___Lib_dlmalloc_sys_alloc1189
L___Lib_dlmalloc_sys_alloc1145:
;__Lib_dlmalloc.c, 4296 :: 		sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp->next;
0x2552	0xF10C0208  ADD	R2, R12, #8
; sp end address is: 48 (R12)
0x2556	0x6812    LDR	R2, [R2, #0]
; sp start address is: 8 (R2)
; sp end address is: 8 (R2)
0x2558	0x4694    MOV	R12, R2
0x255A	0xE7F0    B	L___Lib_dlmalloc_sys_alloc309
;__Lib_dlmalloc.c, 4295 :: 		while (sp != 0 && sp->base != tbase + tsize)
L___Lib_dlmalloc_sys_alloc1190:
; sp start address is: 48 (R12)
L___Lib_dlmalloc_sys_alloc1189:
;__Lib_dlmalloc.c, 4298 :: 		!is_extern_segment(sp) &&
0x255C	0xF1BC0F00  CMP	R12, #0
0x2560	0xD01E    BEQ	L___Lib_dlmalloc_sys_alloc1193
0x2562	0xF10C020C  ADD	R2, R12, #12
0x2566	0x6812    LDR	R2, [R2, #0]
0x2568	0xF0020208  AND	R2, R2, #8
0x256C	0xB9C2    CBNZ	R2, L___Lib_dlmalloc_sys_alloc1192
;__Lib_dlmalloc.c, 4299 :: 		(sp->sflags & USE_MMAP_BIT) == mmap_flag) {
0x256E	0xF10C020C  ADD	R2, R12, #12
0x2572	0x6812    LDR	R2, [R2, #0]
0x2574	0xF0020200  AND	R2, R2, #0
0x2578	0x42A2    CMP	R2, R4
0x257A	0xD111    BNE	L___Lib_dlmalloc_sys_alloc1191
; mmap_flag end address is: 16 (R4)
L___Lib_dlmalloc_sys_alloc1144:
;__Lib_dlmalloc.c, 4300 :: 		uint8_t* oldbase = sp->base;
0x257C	0xF8DC2000  LDR	R2, [R12, #0]
; oldbase start address is: 20 (R5)
0x2580	0x4615    MOV	R5, R2
;__Lib_dlmalloc.c, 4301 :: 		sp->base = tbase;
0x2582	0x9A05    LDR	R2, [SP, #20]
0x2584	0xF8CC2000  STR	R2, [R12, #0]
;__Lib_dlmalloc.c, 4302 :: 		sp->size += tsize;
0x2588	0xF10C0404  ADD	R4, R12, #4
; sp end address is: 48 (R12)
0x258C	0x6823    LDR	R3, [R4, #0]
0x258E	0x9A06    LDR	R2, [SP, #24]
0x2590	0x189A    ADDS	R2, R3, R2
0x2592	0x6022    STR	R2, [R4, #0]
;__Lib_dlmalloc.c, 4303 :: 		return prepend_alloc(m, tbase, oldbase, nb);
0x2594	0x460B    MOV	R3, R1
; nb end address is: 4 (R1)
0x2596	0x462A    MOV	R2, R5
; oldbase end address is: 20 (R5)
0x2598	0x9905    LDR	R1, [SP, #20]
; m end address is: 0 (R0)
0x259A	0xF7FDFEEF  BL	__Lib_dlmalloc_prepend_alloc+0
0x259E	0xE02B    B	L_end_sys_alloc
;__Lib_dlmalloc.c, 4298 :: 		!is_extern_segment(sp) &&
L___Lib_dlmalloc_sys_alloc1193:
; nb start address is: 4 (R1)
; m start address is: 0 (R0)
; mmap_flag start address is: 16 (R4)
L___Lib_dlmalloc_sys_alloc1192:
;__Lib_dlmalloc.c, 4299 :: 		(sp->sflags & USE_MMAP_BIT) == mmap_flag) {
L___Lib_dlmalloc_sys_alloc1191:
;__Lib_dlmalloc.c, 4306 :: 		add_segment(m, tbase, tsize, mmap_flag);
0x25A0	0x9101    STR	R1, [SP, #4]
; mmap_flag end address is: 16 (R4)
0x25A2	0x9002    STR	R0, [SP, #8]
0x25A4	0x4623    MOV	R3, R4
0x25A6	0x9A06    LDR	R2, [SP, #24]
0x25A8	0x9905    LDR	R1, [SP, #20]
0x25AA	0xF7FEFAE7  BL	__Lib_dlmalloc_add_segment+0
; m end address is: 0 (R0)
; nb end address is: 4 (R1)
0x25AE	0x9802    LDR	R0, [SP, #8]
0x25B0	0x9901    LDR	R1, [SP, #4]
;__Lib_dlmalloc.c, 4307 :: 		}
L___Lib_dlmalloc_sys_alloc307:
;__Lib_dlmalloc.c, 4308 :: 		}
; nb start address is: 4 (R1)
; m start address is: 0 (R0)
; m end address is: 0 (R0)
; nb end address is: 4 (R1)
L___Lib_dlmalloc_sys_alloc297:
;__Lib_dlmalloc.c, 4310 :: 		if (nb < m->topsize) { /* Allocate from new or extended top space */
; m start address is: 0 (R0)
; nb start address is: 4 (R1)
0x25B2	0xF200020C  ADDW	R2, R0, #12
0x25B6	0x6812    LDR	R2, [R2, #0]
0x25B8	0x4291    CMP	R1, R2
0x25BA	0xD21C    BCS	L___Lib_dlmalloc_sys_alloc317
;__Lib_dlmalloc.c, 4311 :: 		size_t rsize = m->topsize -= nb;
0x25BC	0xF200030C  ADDW	R3, R0, #12
0x25C0	0x681A    LDR	R2, [R3, #0]
0x25C2	0x1A52    SUB	R2, R2, R1
0x25C4	0x601A    STR	R2, [R3, #0]
0x25C6	0x681A    LDR	R2, [R3, #0]
; rsize start address is: 20 (R5)
0x25C8	0x4615    MOV	R5, R2
;__Lib_dlmalloc.c, 4312 :: 		mchunkptr p = m->top;
0x25CA	0xF2000418  ADDW	R4, R0, #24
; m end address is: 0 (R0)
0x25CE	0x6822    LDR	R2, [R4, #0]
; p start address is: 0 (R0)
0x25D0	0x4610    MOV	R0, R2
;__Lib_dlmalloc.c, 4313 :: 		mchunkptr r = m->top = chunk_plus_offset(p, nb);
0x25D2	0x4623    MOV	R3, R4
0x25D4	0x1852    ADDS	R2, R2, R1
0x25D6	0x6022    STR	R2, [R4, #0]
0x25D8	0x681A    LDR	R2, [R3, #0]
;__Lib_dlmalloc.c, 4314 :: 		r->head = rsize | PINUSE_BIT;
0x25DA	0x1D13    ADDS	R3, R2, #4
0x25DC	0xF0450201  ORR	R2, R5, #1
; rsize end address is: 20 (R5)
0x25E0	0x601A    STR	R2, [R3, #0]
;__Lib_dlmalloc.c, 4315 :: 		set_size_and_pinuse_of_inuse_chunk(m, p, nb);
0x25E2	0x1D03    ADDS	R3, R0, #4
0x25E4	0xF0410201  ORR	R2, R1, #1
; nb end address is: 4 (R1)
0x25E8	0xF0420202  ORR	R2, R2, #2
0x25EC	0x601A    STR	R2, [R3, #0]
;__Lib_dlmalloc.c, 4318 :: 		return chunk2mem(p);
0x25EE	0xF2000208  ADDW	R2, R0, #8
; p end address is: 0 (R0)
0x25F2	0x4610    MOV	R0, R2
0x25F4	0xE000    B	L_end_sys_alloc
;__Lib_dlmalloc.c, 4319 :: 		}
L___Lib_dlmalloc_sys_alloc317:
;__Lib_dlmalloc.c, 4320 :: 		}
L___Lib_dlmalloc_sys_alloc285:
;__Lib_dlmalloc.c, 4323 :: 		return 0;
0x25F6	0x2000    MOVS	R0, #0
;__Lib_dlmalloc.c, 4324 :: 		}
L_end_sys_alloc:
0x25F8	0xF8DDE000  LDR	LR, [SP, #0]
0x25FC	0xB007    ADD	SP, SP, #28
0x25FE	0x4770    BX	LR
0x2600	0x21F02000  	__Lib_dlmalloc_mparams+0
0x2604	0x22082000  	__Lib_dlmalloc__gm_+0
0x2608	0x00080000  	#8
; end of __Lib_dlmalloc_sys_alloc
___CC2DW:
;__Lib_System_101_102_103.c, 28 :: 		
0x0FD8	0xB081    SUB	SP, SP, #4
;__Lib_System_101_102_103.c, 30 :: 		
L_loopDW:
;__Lib_System_101_102_103.c, 31 :: 		
0x0FDA	0xF81C9B01  LDRB	R9, [R12], #1
;__Lib_System_101_102_103.c, 32 :: 		
0x0FDE	0xF80B9B01  STRB	R9, [R11], #1
;__Lib_System_101_102_103.c, 33 :: 		
0x0FE2	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_101_102_103.c, 34 :: 		
0x0FE6	0xD1F8    BNE	L_loopDW
;__Lib_System_101_102_103.c, 36 :: 		
L_end___CC2DW:
0x0FE8	0xB001    ADD	SP, SP, #4
0x0FEA	0x4770    BX	LR
; end of ___CC2DW
__Lib_dlmalloc_init_mparams:
;__Lib_dlmalloc.c, 3183 :: 		static int32_t init_mparams(void) {
0x0FEC	0xB081    SUB	SP, SP, #4
;__Lib_dlmalloc.c, 3190 :: 		if (mparams.magic == 0) {
0x0FEE	0x4818    LDR	R0, [PC, #96]
0x0FF0	0x6800    LDR	R0, [R0, #0]
0x0FF2	0x2800    CMP	R0, #0
0x0FF4	0xD128    BNE	L___Lib_dlmalloc_init_mparams21
;__Lib_dlmalloc.c, 3196 :: 		psize = malloc_getpagesize;
; psize start address is: 4 (R1)
0x0FF6	0xF44F6180  MOV	R1, #1024
;__Lib_dlmalloc.c, 3197 :: 		gsize = ((DEFAULT_GRANULARITY != 0)? DEFAULT_GRANULARITY : psize);
; gsize start address is: 8 (R2)
0x0FFA	0xF44F6280  MOV	R2, #1024
;__Lib_dlmalloc.c, 3220 :: 		((gsize            & (gsize-SIZE_T_ONE))            != 0) ||
;__Lib_dlmalloc.c, 3221 :: 		((psize            & (psize-SIZE_T_ONE))            != 0))
0x0FFE	0x1E48    SUBS	R0, R1, #1
0x1000	0xEA010000  AND	R0, R1, R0, LSL #0
0x1004	0xB900    CBNZ	R0, L___Lib_dlmalloc_init_mparams1083
0x1006	0xE7FF    B	L___Lib_dlmalloc_init_mparams24
; psize end address is: 4 (R1)
; gsize end address is: 8 (R2)
L___Lib_dlmalloc_init_mparams1083:
;__Lib_dlmalloc.c, 3222 :: 		ABORT;
; gsize start address is: 8 (R2)
; psize start address is: 4 (R1)
L___Lib_dlmalloc_init_mparams24:
;__Lib_dlmalloc.c, 3223 :: 		mparams.granularity = gsize;
0x1008	0x4812    LDR	R0, [PC, #72]
0x100A	0x6002    STR	R2, [R0, #0]
; gsize end address is: 8 (R2)
;__Lib_dlmalloc.c, 3224 :: 		mparams.page_size = psize;
0x100C	0x4812    LDR	R0, [PC, #72]
0x100E	0x6001    STR	R1, [R0, #0]
; psize end address is: 4 (R1)
;__Lib_dlmalloc.c, 3225 :: 		mparams.mmap_threshold = DEFAULT_MMAP_THRESHOLD;
0x1010	0xF04F31FF  MOV	R1, #-1
0x1014	0x4811    LDR	R0, [PC, #68]
0x1016	0x6001    STR	R1, [R0, #0]
;__Lib_dlmalloc.c, 3226 :: 		mparams.trim_threshold = DEFAULT_TRIM_THRESHOLD;
0x1018	0xF44F2180  MOV	R1, #262144
0x101C	0x4810    LDR	R0, [PC, #64]
0x101E	0x6001    STR	R1, [R0, #0]
;__Lib_dlmalloc.c, 3228 :: 		mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT;
0x1020	0x2100    MOVS	R1, #0
0x1022	0x4810    LDR	R0, [PC, #64]
0x1024	0x6001    STR	R1, [R0, #0]
;__Lib_dlmalloc.c, 3235 :: 		gm->mflags = mparams.default_mflags;
0x1026	0xF04F0100  MOV	R1, #0
0x102A	0x480F    LDR	R0, [PC, #60]
0x102C	0x6001    STR	R1, [R0, #0]
;__Lib_dlmalloc.c, 3257 :: 		magic = (size_t)&magic ^ (size_t)0x55555555U;
0x102E	0xA800    ADD	R0, SP, #0
0x1030	0xF0803055  EOR	R0, R0, #1431655765
0x1034	0x9000    STR	R0, [SP, #0]
;__Lib_dlmalloc.c, 3261 :: 		magic |= (size_t)8U;    /* ensure nonzero */
0x1036	0xF0400108  ORR	R1, R0, #8
0x103A	0x9100    STR	R1, [SP, #0]
;__Lib_dlmalloc.c, 3262 :: 		magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
0x103C	0xF06F0007  MVN	R0, #7
0x1040	0x4001    ANDS	R1, R0
0x1042	0x9100    STR	R1, [SP, #0]
;__Lib_dlmalloc.c, 3264 :: 		(*(volatile size_t *)(&(mparams.magic))) = magic;
0x1044	0x4802    LDR	R0, [PC, #8]
0x1046	0x6001    STR	R1, [R0, #0]
;__Lib_dlmalloc.c, 3266 :: 		}
L___Lib_dlmalloc_init_mparams21:
;__Lib_dlmalloc.c, 3269 :: 		return 1;
0x1048	0x2001    MOVS	R0, #1
;__Lib_dlmalloc.c, 3270 :: 		}
L_end_init_mparams:
0x104A	0xB001    ADD	SP, SP, #4
0x104C	0x4770    BX	LR
0x104E	0xBF00    NOP
0x1050	0x21F02000  	__Lib_dlmalloc_mparams+0
0x1054	0x21F82000  	__Lib_dlmalloc_mparams+8
0x1058	0x21F42000  	__Lib_dlmalloc_mparams+4
0x105C	0x21FC2000  	__Lib_dlmalloc_mparams+12
0x1060	0x22002000  	__Lib_dlmalloc_mparams+16
0x1064	0x22042000  	__Lib_dlmalloc_mparams+20
0x1068	0x23C42000  	__Lib_dlmalloc__gm_+444
; end of __Lib_dlmalloc_init_mparams
__Lib_dlmalloc_mmap_alloc:
;__Lib_dlmalloc.c, 3907 :: 		static void* mmap_alloc(mstate m, size_t nb) {
; nb start address is: 4 (R1)
; m start address is: 0 (R0)
0x0EF0	0x460D    MOV	R5, R1
; nb end address is: 4 (R1)
; m end address is: 0 (R0)
; m start address is: 0 (R0)
; nb start address is: 20 (R5)
;__Lib_dlmalloc.c, 3908 :: 		size_t mmsize = mmap_align(nb + SIX_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
0x0EF2	0xF2050218  ADDW	R2, R5, #24
0x0EF6	0x1DD3    ADDS	R3, R2, #7
0x0EF8	0x4C34    LDR	R4, [PC, #208]
0x0EFA	0x6822    LDR	R2, [R4, #0]
0x0EFC	0x1E52    SUBS	R2, R2, #1
0x0EFE	0x189B    ADDS	R3, R3, R2
0x0F00	0x4622    MOV	R2, R4
0x0F02	0x6812    LDR	R2, [R2, #0]
0x0F04	0x1E52    SUBS	R2, R2, #1
0x0F06	0x43D2    MVN	R2, R2
0x0F08	0xEA030202  AND	R2, R3, R2, LSL #0
; mmsize start address is: 4 (R1)
0x0F0C	0x4611    MOV	R1, R2
;__Lib_dlmalloc.c, 3909 :: 		if (m->footprint_limit != 0) {
0x0F0E	0xF50072DC  ADD	R2, R0, #440
0x0F12	0x6812    LDR	R2, [R2, #0]
0x0F14	0xB172    CBZ	R2, L___Lib_dlmalloc_mmap_alloc74
;__Lib_dlmalloc.c, 3910 :: 		size_t fp = m->footprint + mmsize;
0x0F16	0xF50072D8  ADD	R2, R0, #432
0x0F1A	0x6813    LDR	R3, [R2, #0]
0x0F1C	0x185A    ADDS	R2, R3, R1
; fp start address is: 16 (R4)
0x0F1E	0x4614    MOV	R4, R2
;__Lib_dlmalloc.c, 3911 :: 		if (fp <= m->footprint || fp > m->footprint_limit)
0x0F20	0x429A    CMP	R2, R3
0x0F22	0xD905    BLS	L___Lib_dlmalloc_mmap_alloc1109
0x0F24	0xF50072DC  ADD	R2, R0, #440
0x0F28	0x6812    LDR	R2, [R2, #0]
0x0F2A	0x4294    CMP	R4, R2
0x0F2C	0xD800    BHI	L___Lib_dlmalloc_mmap_alloc1108
; fp end address is: 16 (R4)
0x0F2E	0xE001    B	L___Lib_dlmalloc_mmap_alloc77
; m end address is: 0 (R0)
; nb end address is: 20 (R5)
; mmsize end address is: 4 (R1)
L___Lib_dlmalloc_mmap_alloc1109:
L___Lib_dlmalloc_mmap_alloc1108:
;__Lib_dlmalloc.c, 3912 :: 		return 0;
0x0F30	0x2000    MOVS	R0, #0
0x0F32	0xE049    B	L_end_mmap_alloc
L___Lib_dlmalloc_mmap_alloc77:
;__Lib_dlmalloc.c, 3913 :: 		}
; mmsize start address is: 4 (R1)
; nb start address is: 20 (R5)
; m start address is: 0 (R0)
L___Lib_dlmalloc_mmap_alloc74:
;__Lib_dlmalloc.c, 3914 :: 		if (mmsize > nb) {     /* Check for wrap around 0 */
0x0F34	0x42A9    CMP	R1, R5
0x0F36	0xD946    BLS	L___Lib_dlmalloc_mmap_alloc78
; nb end address is: 20 (R5)
;__Lib_dlmalloc.c, 3915 :: 		uint8_t* mm = (uint8_t*)(CALL_DIRECT_MMAP(mmsize));
; mm start address is: 16 (R4)
0x0F38	0x4C25    LDR	R4, [PC, #148]
;__Lib_dlmalloc.c, 3916 :: 		if (mm != CMFAIL) {
0x0F3A	0x4A26    LDR	R2, [PC, #152]
0x0F3C	0x4294    CMP	R4, R2
0x0F3E	0xD042    BEQ	L___Lib_dlmalloc_mmap_alloc79
;__Lib_dlmalloc.c, 3917 :: 		size_t offset = align_offset(chunk2mem(mm));
0x0F40	0xF2040208  ADDW	R2, R4, #8
0x0F44	0xF0020207  AND	R2, R2, #7
0x0F48	0xB90A    CBNZ	R2, L___Lib_dlmalloc_mmap_alloc80
; ?FLOC____Lib_dlmalloc_mmap_alloc?T570 start address is: 12 (R3)
0x0F4A	0x2300    MOVS	R3, #0
; ?FLOC____Lib_dlmalloc_mmap_alloc?T570 end address is: 12 (R3)
0x0F4C	0xE007    B	L___Lib_dlmalloc_mmap_alloc81
L___Lib_dlmalloc_mmap_alloc80:
0x0F4E	0xF2040208  ADDW	R2, R4, #8
0x0F52	0xF0020207  AND	R2, R2, #7
0x0F56	0xF1C20308  RSB	R3, R2, #8
0x0F5A	0xF0030307  AND	R3, R3, #7
; ?FLOC____Lib_dlmalloc_mmap_alloc?T570 start address is: 12 (R3)
; ?FLOC____Lib_dlmalloc_mmap_alloc?T570 end address is: 12 (R3)
L___Lib_dlmalloc_mmap_alloc81:
;__Lib_dlmalloc.c, 3918 :: 		size_t psize = mmsize - offset - MMAP_FOOT_PAD;
; ?FLOC____Lib_dlmalloc_mmap_alloc?T570 start address is: 12 (R3)
0x0F5E	0x1ACA    SUB	R2, R1, R3
0x0F60	0x3A10    SUBS	R2, #16
; psize start address is: 20 (R5)
0x0F62	0x4615    MOV	R5, R2
;__Lib_dlmalloc.c, 3919 :: 		mchunkptr p = (mchunkptr)(mm + offset);
0x0F64	0x18E2    ADDS	R2, R4, R3
; p start address is: 24 (R6)
0x0F66	0x4616    MOV	R6, R2
;__Lib_dlmalloc.c, 3920 :: 		p->prev_foot = offset;
0x0F68	0x6013    STR	R3, [R2, #0]
; ?FLOC____Lib_dlmalloc_mmap_alloc?T570 end address is: 12 (R3)
;__Lib_dlmalloc.c, 3921 :: 		p->head = psize;
0x0F6A	0x1D32    ADDS	R2, R6, #4
0x0F6C	0x6015    STR	R5, [R2, #0]
;__Lib_dlmalloc.c, 3923 :: 		chunk_plus_offset(p, psize)->head = FENCEPOST_HEAD;
0x0F6E	0x1972    ADDS	R2, R6, R5
0x0F70	0x1D13    ADDS	R3, R2, #4
0x0F72	0xF04F0207  MOV	R2, #7
0x0F76	0x601A    STR	R2, [R3, #0]
;__Lib_dlmalloc.c, 3924 :: 		chunk_plus_offset(p, psize+SIZE_T_SIZE)->head = 0;
0x0F78	0x1D2A    ADDS	R2, R5, #4
; psize end address is: 20 (R5)
0x0F7A	0x18B2    ADDS	R2, R6, R2
0x0F7C	0x1D13    ADDS	R3, R2, #4
0x0F7E	0x2200    MOVS	R2, #0
0x0F80	0x601A    STR	R2, [R3, #0]
;__Lib_dlmalloc.c, 3926 :: 		if (m->least_addr == 0 || mm < m->least_addr)
0x0F82	0xF2000210  ADDW	R2, R0, #16
0x0F86	0x6812    LDR	R2, [R2, #0]
0x0F88	0xB12A    CBZ	R2, L___Lib_dlmalloc_mmap_alloc1111
0x0F8A	0xF2000210  ADDW	R2, R0, #16
0x0F8E	0x6812    LDR	R2, [R2, #0]
0x0F90	0x4294    CMP	R4, R2
0x0F92	0xD300    BCC	L___Lib_dlmalloc_mmap_alloc1110
; mm end address is: 16 (R4)
0x0F94	0xE002    B	L___Lib_dlmalloc_mmap_alloc84
L___Lib_dlmalloc_mmap_alloc1111:
; mm start address is: 16 (R4)
L___Lib_dlmalloc_mmap_alloc1110:
;__Lib_dlmalloc.c, 3927 :: 		m->least_addr = mm;
0x0F96	0xF2000210  ADDW	R2, R0, #16
0x0F9A	0x6014    STR	R4, [R2, #0]
; mm end address is: 16 (R4)
L___Lib_dlmalloc_mmap_alloc84:
;__Lib_dlmalloc.c, 3928 :: 		if ((m->footprint += mmsize) > m->max_footprint)
0x0F9C	0xF50073D8  ADD	R3, R0, #432
0x0FA0	0x681A    LDR	R2, [R3, #0]
0x0FA2	0x1852    ADDS	R2, R2, R1
; mmsize end address is: 4 (R1)
0x0FA4	0x601A    STR	R2, [R3, #0]
0x0FA6	0x681B    LDR	R3, [R3, #0]
0x0FA8	0xF50072DA  ADD	R2, R0, #436
0x0FAC	0x6812    LDR	R2, [R2, #0]
0x0FAE	0x4293    CMP	R3, R2
0x0FB0	0xD905    BLS	L___Lib_dlmalloc_mmap_alloc85
;__Lib_dlmalloc.c, 3929 :: 		m->max_footprint = m->footprint;
0x0FB2	0xF50073DA  ADD	R3, R0, #436
0x0FB6	0xF50072D8  ADD	R2, R0, #432
; m end address is: 0 (R0)
0x0FBA	0x6812    LDR	R2, [R2, #0]
0x0FBC	0x601A    STR	R2, [R3, #0]
L___Lib_dlmalloc_mmap_alloc85:
;__Lib_dlmalloc.c, 3932 :: 		return chunk2mem(p);
0x0FBE	0xF2060208  ADDW	R2, R6, #8
; p end address is: 24 (R6)
0x0FC2	0x4610    MOV	R0, R2
0x0FC4	0xE000    B	L_end_mmap_alloc
;__Lib_dlmalloc.c, 3933 :: 		}
L___Lib_dlmalloc_mmap_alloc79:
;__Lib_dlmalloc.c, 3934 :: 		}
L___Lib_dlmalloc_mmap_alloc78:
;__Lib_dlmalloc.c, 3935 :: 		return 0;
0x0FC6	0x2000    MOVS	R0, #0
;__Lib_dlmalloc.c, 3936 :: 		}
L_end_mmap_alloc:
0x0FC8	0x4770    BX	LR
0x0FCA	0xBF00    NOP
0x0FCC	0x21F42000  	__Lib_dlmalloc_mparams+4
0x0FD0	0xFFFFFFFF  	#4294967295
0x0FD4	0xFFFFFFFF  	#4294967295
; end of __Lib_dlmalloc_mmap_alloc
__Lib_dlmalloc_segment_holding:
;__Lib_dlmalloc.c, 2782 :: 		static msegmentptr segment_holding(mstate m, uint8_t* addr) {
; addr start address is: 4 (R1)
; m start address is: 0 (R0)
0x02D4	0xB081    SUB	SP, SP, #4
; addr end address is: 4 (R1)
; m end address is: 0 (R0)
; m start address is: 0 (R0)
; addr start address is: 4 (R1)
;__Lib_dlmalloc.c, 2783 :: 		msegmentptr sp = &m->seg;
0x02D6	0xF50072E0  ADD	R2, R0, #448
; m end address is: 0 (R0)
; sp start address is: 0 (R0)
0x02DA	0x4610    MOV	R0, R2
; addr end address is: 4 (R1)
; sp end address is: 0 (R0)
0x02DC	0x9000    STR	R0, [SP, #0]
0x02DE	0x4608    MOV	R0, R1
0x02E0	0x9900    LDR	R1, [SP, #0]
;__Lib_dlmalloc.c, 2784 :: 		for (;;) {
L___Lib_dlmalloc_segment_holding7:
;__Lib_dlmalloc.c, 2785 :: 		if (addr >= sp->base && addr < sp->base + sp->size)
; sp start address is: 4 (R1)
; addr start address is: 0 (R0)
0x02E2	0x680A    LDR	R2, [R1, #0]
0x02E4	0x4290    CMP	R0, R2
0x02E6	0xD307    BCC	L___Lib_dlmalloc_segment_holding1078
0x02E8	0x1D0A    ADDS	R2, R1, #4
0x02EA	0x6813    LDR	R3, [R2, #0]
0x02EC	0x680A    LDR	R2, [R1, #0]
0x02EE	0x18D2    ADDS	R2, R2, R3
0x02F0	0x4290    CMP	R0, R2
0x02F2	0xD201    BCS	L___Lib_dlmalloc_segment_holding1077
; addr end address is: 0 (R0)
L___Lib_dlmalloc_segment_holding1076:
;__Lib_dlmalloc.c, 2786 :: 		return sp;
0x02F4	0x4608    MOV	R0, R1
; sp end address is: 4 (R1)
0x02F6	0xE008    B	L_end_segment_holding
;__Lib_dlmalloc.c, 2785 :: 		if (addr >= sp->base && addr < sp->base + sp->size)
L___Lib_dlmalloc_segment_holding1078:
; sp start address is: 4 (R1)
; addr start address is: 0 (R0)
L___Lib_dlmalloc_segment_holding1077:
;__Lib_dlmalloc.c, 2787 :: 		if ((sp = sp->next) == 0)
0x02F8	0xF2010208  ADDW	R2, R1, #8
; sp end address is: 4 (R1)
0x02FC	0x6812    LDR	R2, [R2, #0]
; sp start address is: 4 (R1)
0x02FE	0x4611    MOV	R1, R2
0x0300	0x2A00    CMP	R2, #0
0x0302	0xD101    BNE	L___Lib_dlmalloc_segment_holding13
; addr end address is: 0 (R0)
; sp end address is: 4 (R1)
;__Lib_dlmalloc.c, 2788 :: 		return 0;
0x0304	0x2000    MOVS	R0, #0
0x0306	0xE000    B	L_end_segment_holding
L___Lib_dlmalloc_segment_holding13:
;__Lib_dlmalloc.c, 2789 :: 		}
; sp start address is: 4 (R1)
; addr start address is: 0 (R0)
; addr end address is: 0 (R0)
; sp end address is: 4 (R1)
0x0308	0xE7EB    B	L___Lib_dlmalloc_segment_holding7
;__Lib_dlmalloc.c, 2790 :: 		}
L_end_segment_holding:
0x030A	0xB001    ADD	SP, SP, #4
0x030C	0x4770    BX	LR
; end of __Lib_dlmalloc_segment_holding
__Lib_dlmalloc_mikroCMemAlloc:
;__Lib_dlmalloc.c, 579 :: 		static void*  mikroCMemAlloc(uint32_t size){
; size start address is: 0 (R0)
; size end address is: 0 (R0)
; size start address is: 0 (R0)
;__Lib_dlmalloc.c, 582 :: 		if(firstAlloc){
0x0310	0x4913    LDR	R1, [PC, #76]
0x0312	0x7809    LDRB	R1, [R1, #0]
0x0314	0xB141    CBZ	R1, L___Lib_dlmalloc_mikroCMemAlloc0
;__Lib_dlmalloc.c, 583 :: 		currentPtr = HEAP_START;
0x0316	0x4A13    LDR	R2, [PC, #76]
0x0318	0x4913    LDR	R1, [PC, #76]
0x031A	0x600A    STR	R2, [R1, #0]
;__Lib_dlmalloc.c, 585 :: 		currentSize = 0;
0x031C	0x2200    MOVS	R2, #0
0x031E	0x4913    LDR	R1, [PC, #76]
0x0320	0x600A    STR	R2, [R1, #0]
;__Lib_dlmalloc.c, 586 :: 		firstAlloc = 0;
0x0322	0x2200    MOVS	R2, #0
0x0324	0x490E    LDR	R1, [PC, #56]
0x0326	0x700A    STRB	R2, [R1, #0]
;__Lib_dlmalloc.c, 587 :: 		}
L___Lib_dlmalloc_mikroCMemAlloc0:
;__Lib_dlmalloc.c, 589 :: 		if(size > 0){
0x0328	0x2800    CMP	R0, #0
0x032A	0xD913    BLS	L___Lib_dlmalloc_mikroCMemAlloc1
;__Lib_dlmalloc.c, 590 :: 		if ((currentSize + size) > HEAP_SIZE){
0x032C	0x490F    LDR	R1, [PC, #60]
0x032E	0x6809    LDR	R1, [R1, #0]
0x0330	0x180A    ADDS	R2, R1, R0
0x0332	0x490F    LDR	R1, [PC, #60]
0x0334	0x428A    CMP	R2, R1
0x0336	0xD901    BLS	L___Lib_dlmalloc_mikroCMemAlloc2
; size end address is: 0 (R0)
;__Lib_dlmalloc.c, 591 :: 		res = (void*)(~(size_t)0);
; res start address is: 0 (R0)
0x0338	0x480E    LDR	R0, [PC, #56]
;__Lib_dlmalloc.c, 592 :: 		} else {
; res end address is: 0 (R0)
0x033A	0xE00A    B	L___Lib_dlmalloc_mikroCMemAlloc3
L___Lib_dlmalloc_mikroCMemAlloc2:
;__Lib_dlmalloc.c, 593 :: 		res = currentPtr;
; size start address is: 0 (R0)
0x033C	0x4A0A    LDR	R2, [PC, #40]
; res start address is: 12 (R3)
0x033E	0x6813    LDR	R3, [R2, #0]
;__Lib_dlmalloc.c, 594 :: 		currentPtr += size;
0x0340	0x4611    MOV	R1, R2
0x0342	0x6809    LDR	R1, [R1, #0]
0x0344	0x1809    ADDS	R1, R1, R0
0x0346	0x6011    STR	R1, [R2, #0]
;__Lib_dlmalloc.c, 595 :: 		currentSize += size;
0x0348	0x4A08    LDR	R2, [PC, #32]
0x034A	0x6811    LDR	R1, [R2, #0]
0x034C	0x1809    ADDS	R1, R1, R0
; size end address is: 0 (R0)
0x034E	0x6011    STR	R1, [R2, #0]
; res end address is: 12 (R3)
0x0350	0x4618    MOV	R0, R3
;__Lib_dlmalloc.c, 596 :: 		}
L___Lib_dlmalloc_mikroCMemAlloc3:
;__Lib_dlmalloc.c, 597 :: 		} else if (size == 0){
; res start address is: 0 (R0)
; res end address is: 0 (R0)
0x0352	0xE004    B	L___Lib_dlmalloc_mikroCMemAlloc4
L___Lib_dlmalloc_mikroCMemAlloc1:
; size start address is: 0 (R0)
0x0354	0xB910    CBNZ	R0, L___Lib_dlmalloc_mikroCMemAlloc5
; size end address is: 0 (R0)
;__Lib_dlmalloc.c, 598 :: 		res = currentPtr;
0x0356	0x4904    LDR	R1, [PC, #16]
; res start address is: 0 (R0)
0x0358	0x6808    LDR	R0, [R1, #0]
;__Lib_dlmalloc.c, 599 :: 		} else {
; res end address is: 0 (R0)
0x035A	0xE000    B	L___Lib_dlmalloc_mikroCMemAlloc6
L___Lib_dlmalloc_mikroCMemAlloc5:
;__Lib_dlmalloc.c, 600 :: 		res = (void*)(~(size_t)0);
; res start address is: 0 (R0)
0x035C	0x4806    LDR	R0, [PC, #24]
; res end address is: 0 (R0)
;__Lib_dlmalloc.c, 601 :: 		}
L___Lib_dlmalloc_mikroCMemAlloc6:
; res start address is: 0 (R0)
; res end address is: 0 (R0)
L___Lib_dlmalloc_mikroCMemAlloc4:
;__Lib_dlmalloc.c, 603 :: 		return res;
; res start address is: 0 (R0)
; res end address is: 0 (R0)
;__Lib_dlmalloc.c, 605 :: 		}
L_end_mikroCMemAlloc:
0x035E	0x4770    BX	LR
0x0360	0x00052000  	__Lib_dlmalloc_firstAlloc+0
0x0364	0x00402000  	_HEAP_START
0x0368	0x23E02000  	__Lib_dlmalloc_currentPtr+0
0x036C	0x23E42000  	__Lib_dlmalloc_currentSize+0
0x0370	0x20000000  	_HEAP_SIZE
0x0374	0xFFFFFFFF  	#4294967295
0x0378	0xFFFFFFFF  	#4294967295
; end of __Lib_dlmalloc_mikroCMemAlloc
__Lib_dlmalloc_init_bins:
;__Lib_dlmalloc.c, 3992 :: 		static void init_bins(mstate m) {
; m start address is: 0 (R0)
; m end address is: 0 (R0)
; m start address is: 0 (R0)
;__Lib_dlmalloc.c, 3995 :: 		for (i = 0; i < NSMALLBINS; ++i) {
; i start address is: 16 (R4)
0x02B0	0x2400    MOVS	R4, #0
; i end address is: 16 (R4)
L___Lib_dlmalloc_init_bins98:
; i start address is: 16 (R4)
; m start address is: 0 (R0)
; m end address is: 0 (R0)
0x02B2	0x2C20    CMP	R4, #32
0x02B4	0xD20D    BCS	L___Lib_dlmalloc_init_bins99
; m end address is: 0 (R0)
;__Lib_dlmalloc.c, 3996 :: 		sbinptr bin = smallbin_at(m,i);
; m start address is: 0 (R0)
0x02B6	0xF2000228  ADDW	R2, R0, #40
0x02BA	0x0061    LSLS	R1, R4, #1
0x02BC	0x0089    LSLS	R1, R1, #2
0x02BE	0x1853    ADDS	R3, R2, R1
;__Lib_dlmalloc.c, 3997 :: 		bin->fd = bin->bk = bin;
0x02C0	0xF2030208  ADDW	R2, R3, #8
0x02C4	0xF203010C  ADDW	R1, R3, #12
0x02C8	0x600B    STR	R3, [R1, #0]
0x02CA	0x6809    LDR	R1, [R1, #0]
0x02CC	0x6011    STR	R1, [R2, #0]
;__Lib_dlmalloc.c, 3995 :: 		for (i = 0; i < NSMALLBINS; ++i) {
0x02CE	0x1C64    ADDS	R4, R4, #1
;__Lib_dlmalloc.c, 3998 :: 		}
; m end address is: 0 (R0)
; i end address is: 16 (R4)
0x02D0	0xE7EF    B	L___Lib_dlmalloc_init_bins98
L___Lib_dlmalloc_init_bins99:
;__Lib_dlmalloc.c, 3999 :: 		}
L_end_init_bins:
0x02D2	0x4770    BX	LR
; end of __Lib_dlmalloc_init_bins
__Lib_dlmalloc_init_top:
;__Lib_dlmalloc.c, 3977 :: 		static void init_top(mstate m, mchunkptr p, size_t psize) {
; psize start address is: 8 (R2)
; p start address is: 4 (R1)
; m start address is: 0 (R0)
; psize end address is: 8 (R2)
; p end address is: 4 (R1)
; m end address is: 0 (R0)
; m start address is: 0 (R0)
; p start address is: 4 (R1)
; psize start address is: 8 (R2)
;__Lib_dlmalloc.c, 3979 :: 		size_t offset = align_offset(chunk2mem(p));
0x023C	0xF2010308  ADDW	R3, R1, #8
0x0240	0xF0030307  AND	R3, R3, #7
0x0244	0xB90B    CBNZ	R3, L___Lib_dlmalloc_init_top94
; ?FLOC____Lib_dlmalloc_init_top?T772 start address is: 20 (R5)
0x0246	0x2500    MOVS	R5, #0
; ?FLOC____Lib_dlmalloc_init_top?T772 end address is: 20 (R5)
0x0248	0xE007    B	L___Lib_dlmalloc_init_top95
L___Lib_dlmalloc_init_top94:
0x024A	0xF2010308  ADDW	R3, R1, #8
0x024E	0xF0030307  AND	R3, R3, #7
0x0252	0xF1C30508  RSB	R5, R3, #8
0x0256	0xF0050507  AND	R5, R5, #7
; ?FLOC____Lib_dlmalloc_init_top?T772 start address is: 20 (R5)
; ?FLOC____Lib_dlmalloc_init_top?T772 end address is: 20 (R5)
L___Lib_dlmalloc_init_top95:
;__Lib_dlmalloc.c, 3980 :: 		p = (mchunkptr)((uint8_t*)p + offset);
; ?FLOC____Lib_dlmalloc_init_top?T772 start address is: 20 (R5)
0x025A	0x194C    ADDS	R4, R1, R5
0x025C	0x4621    MOV	R1, R4
;__Lib_dlmalloc.c, 3981 :: 		psize -= offset;
0x025E	0x1B52    SUB	R2, R2, R5
; ?FLOC____Lib_dlmalloc_init_top?T772 end address is: 20 (R5)
;__Lib_dlmalloc.c, 3983 :: 		m->top = p;
0x0260	0xF2000318  ADDW	R3, R0, #24
0x0264	0x601C    STR	R4, [R3, #0]
;__Lib_dlmalloc.c, 3984 :: 		m->topsize = psize;
0x0266	0xF200030C  ADDW	R3, R0, #12
0x026A	0x601A    STR	R2, [R3, #0]
;__Lib_dlmalloc.c, 3985 :: 		p->head = psize | PINUSE_BIT;
0x026C	0x1D0C    ADDS	R4, R1, #4
0x026E	0xF0420301  ORR	R3, R2, #1
0x0272	0x6023    STR	R3, [R4, #0]
;__Lib_dlmalloc.c, 3987 :: 		chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
0x0274	0x188B    ADDS	R3, R1, R2
; p end address is: 4 (R1)
; psize end address is: 8 (R2)
0x0276	0x1D1C    ADDS	R4, R3, #4
0x0278	0x4B0B    LDR	R3, [PC, #44]
0x027A	0xF0030307  AND	R3, R3, #7
0x027E	0xB90B    CBNZ	R3, L___Lib_dlmalloc_init_top96
; ?FLOC____Lib_dlmalloc_init_top?T820 start address is: 4 (R1)
0x0280	0x2100    MOVS	R1, #0
; ?FLOC____Lib_dlmalloc_init_top?T820 end address is: 4 (R1)
0x0282	0xE006    B	L___Lib_dlmalloc_init_top97
L___Lib_dlmalloc_init_top96:
0x0284	0x4B08    LDR	R3, [PC, #32]
0x0286	0xF0030307  AND	R3, R3, #7
0x028A	0xF1C30108  RSB	R1, R3, #8
0x028E	0xF0010107  AND	R1, R1, #7
; ?FLOC____Lib_dlmalloc_init_top?T820 start address is: 4 (R1)
; ?FLOC____Lib_dlmalloc_init_top?T820 end address is: 4 (R1)
L___Lib_dlmalloc_init_top97:
; ?FLOC____Lib_dlmalloc_init_top?T820 start address is: 4 (R1)
0x0292	0xF2010318  ADDW	R3, R1, #24
; ?FLOC____Lib_dlmalloc_init_top?T820 end address is: 4 (R1)
0x0296	0x3310    ADDS	R3, #16
0x0298	0x6023    STR	R3, [R4, #0]
;__Lib_dlmalloc.c, 3988 :: 		m->trim_check = mparams.trim_threshold; /* reset on each update */
0x029A	0xF200041C  ADDW	R4, R0, #28
; m end address is: 0 (R0)
0x029E	0x4B03    LDR	R3, [PC, #12]
0x02A0	0x681B    LDR	R3, [R3, #0]
0x02A2	0x6023    STR	R3, [R4, #0]
;__Lib_dlmalloc.c, 3989 :: 		}
L_end_init_top:
0x02A4	0x4770    BX	LR
0x02A6	0xBF00    NOP
0x02A8	0x00080000  	#8
0x02AC	0x22002000  	__Lib_dlmalloc_mparams+16
; end of __Lib_dlmalloc_init_top
__Lib_dlmalloc_prepend_alloc:
;__Lib_dlmalloc.c, 4022 :: 		size_t nb) {
; nb start address is: 12 (R3)
; oldbase start address is: 8 (R2)
; newbase start address is: 4 (R1)
; m start address is: 0 (R0)
0x037C	0xB083    SUB	SP, SP, #12
0x037E	0x461E    MOV	R6, R3
; nb end address is: 12 (R3)
; oldbase end address is: 8 (R2)
; newbase end address is: 4 (R1)
; m end address is: 0 (R0)
; m start address is: 0 (R0)
; newbase start address is: 4 (R1)
; oldbase start address is: 8 (R2)
; nb start address is: 24 (R6)
;__Lib_dlmalloc.c, 4023 :: 		mchunkptr p = align_as_chunk(newbase);
0x0380	0xF2010408  ADDW	R4, R1, #8
0x0384	0xF0040407  AND	R4, R4, #7
0x0388	0xB90C    CBNZ	R4, L___Lib_dlmalloc_prepend_alloc101
; ?FLOC____Lib_dlmalloc_prepend_alloc?T882 start address is: 12 (R3)
0x038A	0x2300    MOVS	R3, #0
; ?FLOC____Lib_dlmalloc_prepend_alloc?T882 end address is: 12 (R3)
0x038C	0xE007    B	L___Lib_dlmalloc_prepend_alloc102
L___Lib_dlmalloc_prepend_alloc101:
0x038E	0xF2010408  ADDW	R4, R1, #8
0x0392	0xF0040407  AND	R4, R4, #7
0x0396	0xF1C40308  RSB	R3, R4, #8
0x039A	0xF0030307  AND	R3, R3, #7
; ?FLOC____Lib_dlmalloc_prepend_alloc?T882 start address is: 12 (R3)
; ?FLOC____Lib_dlmalloc_prepend_alloc?T882 end address is: 12 (R3)
L___Lib_dlmalloc_prepend_alloc102:
; ?FLOC____Lib_dlmalloc_prepend_alloc?T882 start address is: 12 (R3)
0x039E	0x18C9    ADDS	R1, R1, R3
; newbase end address is: 4 (R1)
; ?FLOC____Lib_dlmalloc_prepend_alloc?T882 end address is: 12 (R3)
; p start address is: 4 (R1)
;__Lib_dlmalloc.c, 4024 :: 		mchunkptr oldfirst = align_as_chunk(oldbase);
0x03A0	0xF2020408  ADDW	R4, R2, #8
0x03A4	0xF0040407  AND	R4, R4, #7
0x03A8	0xB90C    CBNZ	R4, L___Lib_dlmalloc_prepend_alloc103
; ?FLOC____Lib_dlmalloc_prepend_alloc?T908 start address is: 12 (R3)
0x03AA	0x2300    MOVS	R3, #0
; ?FLOC____Lib_dlmalloc_prepend_alloc?T908 end address is: 12 (R3)
0x03AC	0xE007    B	L___Lib_dlmalloc_prepend_alloc104
L___Lib_dlmalloc_prepend_alloc103:
0x03AE	0xF2020408  ADDW	R4, R2, #8
0x03B2	0xF0040407  AND	R4, R4, #7
0x03B6	0xF1C40308  RSB	R3, R4, #8
0x03BA	0xF0030307  AND	R3, R3, #7
; ?FLOC____Lib_dlmalloc_prepend_alloc?T908 start address is: 12 (R3)
; ?FLOC____Lib_dlmalloc_prepend_alloc?T908 end address is: 12 (R3)
L___Lib_dlmalloc_prepend_alloc104:
; ?FLOC____Lib_dlmalloc_prepend_alloc?T908 start address is: 12 (R3)
0x03BE	0x18D4    ADDS	R4, R2, R3
; oldbase end address is: 8 (R2)
; ?FLOC____Lib_dlmalloc_prepend_alloc?T908 end address is: 12 (R3)
; oldfirst start address is: 8 (R2)
0x03C0	0x4622    MOV	R2, R4
;__Lib_dlmalloc.c, 4025 :: 		size_t psize = (uint8_t*)oldfirst - (uint8_t*)p;
0x03C2	0x1A67    SUB	R7, R4, R1
;__Lib_dlmalloc.c, 4026 :: 		mchunkptr q = chunk_plus_offset(p, nb);
0x03C4	0x198B    ADDS	R3, R1, R6
; q start address is: 12 (R3)
;__Lib_dlmalloc.c, 4027 :: 		size_t qsize = psize - nb;
0x03C6	0x1BBF    SUB	R7, R7, R6
; qsize start address is: 28 (R7)
;__Lib_dlmalloc.c, 4028 :: 		set_size_and_pinuse_of_inuse_chunk(m, p, nb);
0x03C8	0x1D0D    ADDS	R5, R1, #4
0x03CA	0xF0460401  ORR	R4, R6, #1
; nb end address is: 24 (R6)
0x03CE	0xF0440402  ORR	R4, R4, #2
0x03D2	0x602C    STR	R4, [R5, #0]
;__Lib_dlmalloc.c, 4035 :: 		if (oldfirst == m->top) {
0x03D4	0xF2000418  ADDW	R4, R0, #24
0x03D8	0x6824    LDR	R4, [R4, #0]
0x03DA	0x42A2    CMP	R2, R4
0x03DC	0xD10F    BNE	L___Lib_dlmalloc_prepend_alloc105
; oldfirst end address is: 8 (R2)
;__Lib_dlmalloc.c, 4036 :: 		size_t tsize = m->topsize += qsize;
0x03DE	0xF200050C  ADDW	R5, R0, #12
0x03E2	0x682C    LDR	R4, [R5, #0]
0x03E4	0x19E4    ADDS	R4, R4, R7
; qsize end address is: 28 (R7)
0x03E6	0x602C    STR	R4, [R5, #0]
0x03E8	0x682C    LDR	R4, [R5, #0]
; tsize start address is: 8 (R2)
0x03EA	0x4622    MOV	R2, R4
;__Lib_dlmalloc.c, 4037 :: 		m->top = q;
0x03EC	0xF2000418  ADDW	R4, R0, #24
; m end address is: 0 (R0)
0x03F0	0x6023    STR	R3, [R4, #0]
;__Lib_dlmalloc.c, 4038 :: 		q->head = tsize | PINUSE_BIT;
0x03F2	0x1D1D    ADDS	R5, R3, #4
; q end address is: 12 (R3)
0x03F4	0xF0420401  ORR	R4, R2, #1
; tsize end address is: 8 (R2)
0x03F8	0x602C    STR	R4, [R5, #0]
;__Lib_dlmalloc.c, 4040 :: 		}
0x03FA	0x4608    MOV	R0, R1
0x03FC	0xE250    B	L___Lib_dlmalloc_prepend_alloc106
L___Lib_dlmalloc_prepend_alloc105:
;__Lib_dlmalloc.c, 4041 :: 		else if (oldfirst == m->dv) {
; m start address is: 0 (R0)
; oldfirst start address is: 8 (R2)
; q start address is: 12 (R3)
; qsize start address is: 28 (R7)
0x03FE	0xF2000414  ADDW	R4, R0, #20
0x0402	0x6824    LDR	R4, [R4, #0]
0x0404	0x42A2    CMP	R2, R4
0x0406	0xD111    BNE	L___Lib_dlmalloc_prepend_alloc107
; oldfirst end address is: 8 (R2)
;__Lib_dlmalloc.c, 4042 :: 		size_t dsize = m->dvsize += qsize;
0x0408	0xF2000508  ADDW	R5, R0, #8
0x040C	0x682C    LDR	R4, [R5, #0]
0x040E	0x19E4    ADDS	R4, R4, R7
; qsize end address is: 28 (R7)
0x0410	0x602C    STR	R4, [R5, #0]
0x0412	0x682C    LDR	R4, [R5, #0]
; dsize start address is: 8 (R2)
0x0414	0x4622    MOV	R2, R4
;__Lib_dlmalloc.c, 4043 :: 		m->dv = q;
0x0416	0xF2000414  ADDW	R4, R0, #20
; m end address is: 0 (R0)
0x041A	0x6023    STR	R3, [R4, #0]
;__Lib_dlmalloc.c, 4044 :: 		set_size_and_pinuse_of_free_chunk(q, dsize);
0x041C	0x1D1D    ADDS	R5, R3, #4
0x041E	0xF0420401  ORR	R4, R2, #1
0x0422	0x602C    STR	R4, [R5, #0]
0x0424	0x189C    ADDS	R4, R3, R2
; q end address is: 12 (R3)
0x0426	0x6022    STR	R2, [R4, #0]
; dsize end address is: 8 (R2)
;__Lib_dlmalloc.c, 4045 :: 		}
0x0428	0x4608    MOV	R0, R1
0x042A	0xE239    B	L___Lib_dlmalloc_prepend_alloc108
L___Lib_dlmalloc_prepend_alloc107:
;__Lib_dlmalloc.c, 4047 :: 		if (!is_inuse(oldfirst)) {
; m start address is: 0 (R0)
; oldfirst start address is: 8 (R2)
; q start address is: 12 (R3)
; qsize start address is: 28 (R7)
0x042C	0x1D14    ADDS	R4, R2, #4
0x042E	0x6824    LDR	R4, [R4, #0]
0x0430	0xF0040403  AND	R4, R4, #3
0x0434	0x2C01    CMP	R4, #1
0x0436	0xF0408129  BNE	L___Lib_dlmalloc_prepend_alloc1139
;__Lib_dlmalloc.c, 4048 :: 		size_t nsize = chunksize(oldfirst);
0x043A	0x1D14    ADDS	R4, R2, #4
0x043C	0x6825    LDR	R5, [R4, #0]
0x043E	0xF06F0407  MVN	R4, #7
0x0442	0xEA050404  AND	R4, R5, R4, LSL #0
; nsize start address is: 32 (R8)
0x0446	0x46A0    MOV	R8, R4
;__Lib_dlmalloc.c, 4049 :: 		unlink_chunk(m, oldfirst, nsize);
0x0448	0x08E4    LSRS	R4, R4, #3
0x044A	0x2C20    CMP	R4, #32
0x044C	0xD24B    BCS	L___Lib_dlmalloc_prepend_alloc110
0x044E	0xF2020408  ADDW	R4, R2, #8
0x0452	0x6826    LDR	R6, [R4, #0]
; F start address is: 36 (R9)
0x0454	0x46B1    MOV	R9, R6
0x0456	0xF202040C  ADDW	R4, R2, #12
0x045A	0x6824    LDR	R4, [R4, #0]
; B start address is: 40 (R10)
0x045C	0x46A2    MOV	R10, R4
0x045E	0xEA4F04D8  LSR	R4, R8, #3
; I start address is: 44 (R11)
0x0462	0x46A3    MOV	R11, R4
0x0464	0xF2000528  ADDW	R5, R0, #40
0x0468	0x0064    LSLS	R4, R4, #1
0x046A	0x00A4    LSLS	R4, R4, #2
0x046C	0x192C    ADDS	R4, R5, R4
0x046E	0x42A6    CMP	R6, R4
0x0470	0xD00B    BEQ	L___Lib_dlmalloc_prepend_alloc1125
0x0472	0xF2000410  ADDW	R4, R0, #16
0x0476	0x6824    LDR	R4, [R4, #0]
0x0478	0x45A1    CMP	R9, R4
0x047A	0xD305    BCC	L___Lib_dlmalloc_prepend_alloc1124
0x047C	0xF109040C  ADD	R4, R9, #12
0x0480	0x6824    LDR	R4, [R4, #0]
0x0482	0x4294    CMP	R4, R2
0x0484	0xD100    BNE	L___Lib_dlmalloc_prepend_alloc1123
0x0486	0xE000    B	L___Lib_dlmalloc_prepend_alloc1121
; F end address is: 36 (R9)
; B end address is: 40 (R10)
; I end address is: 44 (R11)
L___Lib_dlmalloc_prepend_alloc1124:
L___Lib_dlmalloc_prepend_alloc1123:
0x0488	0xE028    B	L___Lib_dlmalloc_prepend_alloc115
L___Lib_dlmalloc_prepend_alloc1121:
; I start address is: 44 (R11)
; B start address is: 40 (R10)
; F start address is: 36 (R9)
L___Lib_dlmalloc_prepend_alloc1125:
0x048A	0x45CA    CMP	R10, R9
0x048C	0xD108    BNE	L___Lib_dlmalloc_prepend_alloc116
; F end address is: 36 (R9)
; B end address is: 40 (R10)
0x048E	0xF04F0401  MOV	R4, #1
0x0492	0xFA04F40B  LSL	R4, R4, R11
; I end address is: 44 (R11)
0x0496	0x43E5    MVN	R5, R4
0x0498	0x6804    LDR	R4, [R0, #0]
0x049A	0x402C    ANDS	R4, R5
0x049C	0x6004    STR	R4, [R0, #0]
0x049E	0xE01C    B	L___Lib_dlmalloc_prepend_alloc117
L___Lib_dlmalloc_prepend_alloc116:
; I start address is: 44 (R11)
; B start address is: 40 (R10)
; F start address is: 36 (R9)
0x04A0	0xF2000528  ADDW	R5, R0, #40
0x04A4	0xEA4F044B  LSL	R4, R11, #1
; I end address is: 44 (R11)
0x04A8	0x00A4    LSLS	R4, R4, #2
0x04AA	0x192C    ADDS	R4, R5, R4
0x04AC	0x45A2    CMP	R10, R4
0x04AE	0xD00B    BEQ	L___Lib_dlmalloc_prepend_alloc1128
0x04B0	0xF2000410  ADDW	R4, R0, #16
0x04B4	0x6824    LDR	R4, [R4, #0]
0x04B6	0x45A2    CMP	R10, R4
0x04B8	0xD305    BCC	L___Lib_dlmalloc_prepend_alloc1127
0x04BA	0xF10A0408  ADD	R4, R10, #8
0x04BE	0x6824    LDR	R4, [R4, #0]
0x04C0	0x4294    CMP	R4, R2
0x04C2	0xD100    BNE	L___Lib_dlmalloc_prepend_alloc1126
0x04C4	0xE000    B	L___Lib_dlmalloc_prepend_alloc1119
; F end address is: 36 (R9)
; B end address is: 40 (R10)
L___Lib_dlmalloc_prepend_alloc1127:
L___Lib_dlmalloc_prepend_alloc1126:
0x04C6	0xE008    B	L___Lib_dlmalloc_prepend_alloc122
L___Lib_dlmalloc_prepend_alloc1119:
; B start address is: 40 (R10)
; F start address is: 36 (R9)
L___Lib_dlmalloc_prepend_alloc1128:
0x04C8	0xF109040C  ADD	R4, R9, #12
0x04CC	0xF8C4A000  STR	R10, [R4, #0]
0x04D0	0xF10A0408  ADD	R4, R10, #8
; B end address is: 40 (R10)
0x04D4	0xF8C49000  STR	R9, [R4, #0]
; F end address is: 36 (R9)
0x04D8	0xE7FF    B	L___Lib_dlmalloc_prepend_alloc123
L___Lib_dlmalloc_prepend_alloc122:
L___Lib_dlmalloc_prepend_alloc123:
L___Lib_dlmalloc_prepend_alloc117:
0x04DA	0xE7FF    B	L___Lib_dlmalloc_prepend_alloc124
L___Lib_dlmalloc_prepend_alloc115:
L___Lib_dlmalloc_prepend_alloc124:
0x04DC	0x4646    MOV	R6, R8
0x04DE	0x4615    MOV	R5, R2
0x04E0	0x461A    MOV	R2, R3
0x04E2	0x463B    MOV	R3, R7
0x04E4	0xE0CA    B	L___Lib_dlmalloc_prepend_alloc125
L___Lib_dlmalloc_prepend_alloc110:
; TP start address is: 24 (R6)
0x04E6	0x4616    MOV	R6, R2
0x04E8	0xF2020418  ADDW	R4, R2, #24
0x04EC	0xF8D49000  LDR	R9, [R4, #0]
; XP start address is: 36 (R9)
0x04F0	0xF202040C  ADDW	R4, R2, #12
0x04F4	0x6824    LDR	R4, [R4, #0]
0x04F6	0x4294    CMP	R4, R2
0x04F8	0xD022    BEQ	L___Lib_dlmalloc_prepend_alloc126
0x04FA	0xF2060408  ADDW	R4, R6, #8
0x04FE	0x6825    LDR	R5, [R4, #0]
; F start address is: 40 (R10)
0x0500	0x46AA    MOV	R10, R5
0x0502	0xF206040C  ADDW	R4, R6, #12
0x0506	0x6824    LDR	R4, [R4, #0]
; R start address is: 44 (R11)
0x0508	0x46A3    MOV	R11, R4
0x050A	0xF2000410  ADDW	R4, R0, #16
0x050E	0x6824    LDR	R4, [R4, #0]
0x0510	0x42A5    CMP	R5, R4
0x0512	0xD312    BCC	L___Lib_dlmalloc_prepend_alloc1131
0x0514	0xF10A040C  ADD	R4, R10, #12
0x0518	0x6824    LDR	R4, [R4, #0]
0x051A	0x42B4    CMP	R4, R6
0x051C	0xD10D    BNE	L___Lib_dlmalloc_prepend_alloc1130
0x051E	0xF10B0408  ADD	R4, R11, #8
0x0522	0x6824    LDR	R4, [R4, #0]
0x0524	0x42B4    CMP	R4, R6
0x0526	0xD108    BNE	L___Lib_dlmalloc_prepend_alloc1129
L___Lib_dlmalloc_prepend_alloc1118:
0x0528	0xF10A040C  ADD	R4, R10, #12
0x052C	0xF8C4B000  STR	R11, [R4, #0]
0x0530	0xF10B0408  ADD	R4, R11, #8
0x0534	0xF8C4A000  STR	R10, [R4, #0]
; F end address is: 40 (R10)
0x0538	0xE7FF    B	L___Lib_dlmalloc_prepend_alloc130
L___Lib_dlmalloc_prepend_alloc1131:
L___Lib_dlmalloc_prepend_alloc1130:
L___Lib_dlmalloc_prepend_alloc1129:
L___Lib_dlmalloc_prepend_alloc130:
; R end address is: 44 (R11)
0x053A	0x46DA    MOV	R10, R11
0x053C	0x46B3    MOV	R11, R6
0x053E	0xE032    B	L___Lib_dlmalloc_prepend_alloc131
L___Lib_dlmalloc_prepend_alloc126:
0x0540	0xF2060410  ADDW	R4, R6, #16
0x0544	0x1D24    ADDS	R4, R4, #4
; RP start address is: 20 (R5)
0x0546	0x4625    MOV	R5, R4
0x0548	0x6824    LDR	R4, [R4, #0]
; R start address is: 40 (R10)
0x054A	0x46A2    MOV	R10, R4
0x054C	0xB944    CBNZ	R4, L___Lib_dlmalloc_prepend_alloc1133
; RP end address is: 20 (R5)
; R end address is: 40 (R10)
0x054E	0xF2060410  ADDW	R4, R6, #16
; RP start address is: 40 (R10)
0x0552	0x46A2    MOV	R10, R4
0x0554	0x6824    LDR	R4, [R4, #0]
; R start address is: 20 (R5)
0x0556	0x4625    MOV	R5, R4
0x0558	0xB924    CBNZ	R4, L___Lib_dlmalloc_prepend_alloc1138
; RP end address is: 40 (R10)
0x055A	0x46AA    MOV	R10, R5
; R end address is: 20 (R5)
0x055C	0x46B3    MOV	R11, R6
0x055E	0xE022    B	L___Lib_dlmalloc_prepend_alloc134
L___Lib_dlmalloc_prepend_alloc1133:
; R start address is: 40 (R10)
; RP start address is: 20 (R5)
0x0560	0x462C    MOV	R4, R5
; R end address is: 40 (R10)
0x0562	0xE001    B	L___Lib_dlmalloc_prepend_alloc1132
; RP end address is: 20 (R5)
L___Lib_dlmalloc_prepend_alloc1138:
0x0564	0x4654    MOV	R4, R10
0x0566	0x46AA    MOV	R10, R5
L___Lib_dlmalloc_prepend_alloc1132:
; R start address is: 40 (R10)
; RP start address is: 16 (R4)
; RP end address is: 16 (R4)
; XP end address is: 36 (R9)
; R end address is: 40 (R10)
0x0568	0x464D    MOV	R5, R9
0x056A	0x46A1    MOV	R9, R4
L___Lib_dlmalloc_prepend_alloc135:
; RP start address is: 36 (R9)
; XP start address is: 20 (R5)
; R start address is: 40 (R10)
; XP start address is: 20 (R5)
; XP end address is: 20 (R5)
; TP start address is: 24 (R6)
; TP end address is: 24 (R6)
; nsize start address is: 32 (R8)
; nsize end address is: 32 (R8)
; qsize start address is: 28 (R7)
; qsize end address is: 28 (R7)
; q start address is: 12 (R3)
; q end address is: 12 (R3)
; oldfirst start address is: 8 (R2)
; oldfirst end address is: 8 (R2)
; p start address is: 4 (R1)
; p end address is: 4 (R1)
; m start address is: 0 (R0)
; m end address is: 0 (R0)
0x056C	0xF10A0410  ADD	R4, R10, #16
0x0570	0x1D24    ADDS	R4, R4, #4
0x0572	0x9401    STR	R4, [SP, #4]
0x0574	0x6824    LDR	R4, [R4, #0]
0x0576	0xB92C    CBNZ	R4, L___Lib_dlmalloc_prepend_alloc1135
; XP end address is: 20 (R5)
; TP end address is: 24 (R6)
; nsize end address is: 32 (R8)
; qsize end address is: 28 (R7)
; q end address is: 12 (R3)
; oldfirst end address is: 8 (R2)
; m end address is: 0 (R0)
; p end address is: 4 (R1)
; p start address is: 4 (R1)
; m start address is: 0 (R0)
; oldfirst start address is: 8 (R2)
; q start address is: 12 (R3)
; qsize start address is: 28 (R7)
; nsize start address is: 32 (R8)
; TP start address is: 24 (R6)
; XP start address is: 20 (R5)
0x0578	0xF10A0410  ADD	R4, R10, #16
0x057C	0x9401    STR	R4, [SP, #4]
0x057E	0x6824    LDR	R4, [R4, #0]
0x0580	0xB904    CBNZ	R4, L___Lib_dlmalloc_prepend_alloc1134
0x0582	0xE005    B	L___Lib_dlmalloc_prepend_alloc136
; RP end address is: 36 (R9)
; R end address is: 40 (R10)
L___Lib_dlmalloc_prepend_alloc1135:
L___Lib_dlmalloc_prepend_alloc1134:
; RP start address is: 36 (R9)
0x0584	0xF8DD9004  LDR	R9, [SP, #4]
0x0588	0x9C01    LDR	R4, [SP, #4]
0x058A	0x6824    LDR	R4, [R4, #0]
; R start address is: 40 (R10)
0x058C	0x46A2    MOV	R10, R4
0x058E	0xE7ED    B	L___Lib_dlmalloc_prepend_alloc135
L___Lib_dlmalloc_prepend_alloc136:
0x0590	0xF2000410  ADDW	R4, R0, #16
0x0594	0x6824    LDR	R4, [R4, #0]
0x0596	0x45A1    CMP	R9, R4
0x0598	0xD303    BCC	L___Lib_dlmalloc_prepend_alloc139
0x059A	0x2400    MOVS	R4, #0
0x059C	0xF8C94000  STR	R4, [R9, #0]
; RP end address is: 36 (R9)
0x05A0	0xE7FF    B	L___Lib_dlmalloc_prepend_alloc140
L___Lib_dlmalloc_prepend_alloc139:
L___Lib_dlmalloc_prepend_alloc140:
; TP end address is: 24 (R6)
; nsize end address is: 32 (R8)
; qsize end address is: 28 (R7)
; q end address is: 12 (R3)
; oldfirst end address is: 8 (R2)
; m end address is: 0 (R0)
; R end address is: 40 (R10)
; p end address is: 4 (R1)
0x05A2	0x46A9    MOV	R9, R5
0x05A4	0x46B3    MOV	R11, R6
L___Lib_dlmalloc_prepend_alloc134:
; XP end address is: 20 (R5)
; m start address is: 0 (R0)
; p start address is: 4 (R1)
; oldfirst start address is: 8 (R2)
; q start address is: 12 (R3)
; qsize start address is: 28 (R7)
; nsize start address is: 32 (R8)
; TP start address is: 44 (R11)
; XP start address is: 36 (R9)
; R start address is: 40 (R10)
; XP end address is: 36 (R9)
; TP end address is: 44 (R11)
; nsize end address is: 32 (R8)
; qsize end address is: 28 (R7)
; q end address is: 12 (R3)
; oldfirst end address is: 8 (R2)
; m end address is: 0 (R0)
; R end address is: 40 (R10)
; p end address is: 4 (R1)
L___Lib_dlmalloc_prepend_alloc131:
; R start address is: 40 (R10)
; XP start address is: 36 (R9)
; TP start address is: 44 (R11)
; nsize start address is: 32 (R8)
; qsize start address is: 28 (R7)
; q start address is: 12 (R3)
; oldfirst start address is: 8 (R2)
; p start address is: 4 (R1)
; m start address is: 0 (R0)
0x05A6	0xF1B90F00  CMP	R9, #0
0x05AA	0xF0008063  BEQ	L___Lib_dlmalloc_prepend_alloc141
0x05AE	0xF5007598  ADD	R5, R0, #304
0x05B2	0xF10B041C  ADD	R4, R11, #28
0x05B6	0x6824    LDR	R4, [R4, #0]
0x05B8	0x00A4    LSLS	R4, R4, #2
0x05BA	0x192C    ADDS	R4, R5, R4
; H start address is: 20 (R5)
0x05BC	0x4625    MOV	R5, R4
0x05BE	0x6824    LDR	R4, [R4, #0]
0x05C0	0x45A3    CMP	R11, R4
0x05C2	0xD10F    BNE	L___Lib_dlmalloc_prepend_alloc142
0x05C4	0xF8C5A000  STR	R10, [R5, #0]
0x05C8	0x682C    LDR	R4, [R5, #0]
; H end address is: 20 (R5)
0x05CA	0xB954    CBNZ	R4, L___Lib_dlmalloc_prepend_alloc143
0x05CC	0x1D06    ADDS	R6, R0, #4
0x05CE	0xF10B041C  ADD	R4, R11, #28
0x05D2	0x6825    LDR	R5, [R4, #0]
0x05D4	0xF04F0401  MOV	R4, #1
0x05D8	0x40AC    LSLS	R4, R5
0x05DA	0x43E5    MVN	R5, R4
0x05DC	0x6834    LDR	R4, [R6, #0]
0x05DE	0x402C    ANDS	R4, R5
0x05E0	0x6034    STR	R4, [R6, #0]
L___Lib_dlmalloc_prepend_alloc143:
0x05E2	0xE014    B	L___Lib_dlmalloc_prepend_alloc144
L___Lib_dlmalloc_prepend_alloc142:
0x05E4	0xF2000410  ADDW	R4, R0, #16
0x05E8	0x6824    LDR	R4, [R4, #0]
0x05EA	0x45A1    CMP	R9, R4
0x05EC	0xD30F    BCC	L___Lib_dlmalloc_prepend_alloc145
0x05EE	0xF1090410  ADD	R4, R9, #16
0x05F2	0x6824    LDR	R4, [R4, #0]
0x05F4	0x455C    CMP	R4, R11
0x05F6	0xD104    BNE	L___Lib_dlmalloc_prepend_alloc146
0x05F8	0xF1090410  ADD	R4, R9, #16
0x05FC	0xF8C4A000  STR	R10, [R4, #0]
0x0600	0xE004    B	L___Lib_dlmalloc_prepend_alloc147
L___Lib_dlmalloc_prepend_alloc146:
0x0602	0xF1090410  ADD	R4, R9, #16
0x0606	0x1D24    ADDS	R4, R4, #4
0x0608	0xF8C4A000  STR	R10, [R4, #0]
L___Lib_dlmalloc_prepend_alloc147:
0x060C	0xE7FF    B	L___Lib_dlmalloc_prepend_alloc148
L___Lib_dlmalloc_prepend_alloc145:
L___Lib_dlmalloc_prepend_alloc148:
L___Lib_dlmalloc_prepend_alloc144:
0x060E	0xF1BA0F00  CMP	R10, #0
0x0612	0xD02F    BEQ	L___Lib_dlmalloc_prepend_alloc149
0x0614	0xF2000410  ADDW	R4, R0, #16
0x0618	0x6824    LDR	R4, [R4, #0]
0x061A	0x45A2    CMP	R10, R4
0x061C	0xD32A    BCC	L___Lib_dlmalloc_prepend_alloc150
0x061E	0xF10A0418  ADD	R4, R10, #24
0x0622	0xF8C49000  STR	R9, [R4, #0]
; XP end address is: 36 (R9)
0x0626	0xF10B0410  ADD	R4, R11, #16
0x062A	0x6824    LDR	R4, [R4, #0]
; C0 start address is: 20 (R5)
0x062C	0x4625    MOV	R5, R4
0x062E	0xB164    CBZ	R4, L___Lib_dlmalloc_prepend_alloc151
0x0630	0xF2000410  ADDW	R4, R0, #16
0x0634	0x6824    LDR	R4, [R4, #0]
0x0636	0x42A5    CMP	R5, R4
0x0638	0xD307    BCC	L___Lib_dlmalloc_prepend_alloc152
0x063A	0xF10A0410  ADD	R4, R10, #16
0x063E	0x6025    STR	R5, [R4, #0]
0x0640	0xF2050418  ADDW	R4, R5, #24
; C0 end address is: 20 (R5)
0x0644	0xF8C4A000  STR	R10, [R4, #0]
0x0648	0xE7FF    B	L___Lib_dlmalloc_prepend_alloc153
L___Lib_dlmalloc_prepend_alloc152:
L___Lib_dlmalloc_prepend_alloc153:
L___Lib_dlmalloc_prepend_alloc151:
0x064A	0xF10B0410  ADD	R4, R11, #16
; TP end address is: 44 (R11)
0x064E	0x1D24    ADDS	R4, R4, #4
0x0650	0x6824    LDR	R4, [R4, #0]
; C1 start address is: 20 (R5)
0x0652	0x4625    MOV	R5, R4
0x0654	0xB16C    CBZ	R4, L___Lib_dlmalloc_prepend_alloc154
0x0656	0xF2000410  ADDW	R4, R0, #16
0x065A	0x6824    LDR	R4, [R4, #0]
0x065C	0x42A5    CMP	R5, R4
0x065E	0xD308    BCC	L___Lib_dlmalloc_prepend_alloc155
0x0660	0xF10A0410  ADD	R4, R10, #16
0x0664	0x1D24    ADDS	R4, R4, #4
0x0666	0x6025    STR	R5, [R4, #0]
0x0668	0xF2050418  ADDW	R4, R5, #24
; C1 end address is: 20 (R5)
0x066C	0xF8C4A000  STR	R10, [R4, #0]
; R end address is: 40 (R10)
0x0670	0xE7FF    B	L___Lib_dlmalloc_prepend_alloc156
L___Lib_dlmalloc_prepend_alloc155:
L___Lib_dlmalloc_prepend_alloc156:
L___Lib_dlmalloc_prepend_alloc154:
0x0672	0xE7FF    B	L___Lib_dlmalloc_prepend_alloc157
L___Lib_dlmalloc_prepend_alloc150:
L___Lib_dlmalloc_prepend_alloc157:
L___Lib_dlmalloc_prepend_alloc149:
L___Lib_dlmalloc_prepend_alloc141:
0x0674	0x4646    MOV	R6, R8
; qsize end address is: 28 (R7)
; q end address is: 12 (R3)
; oldfirst end address is: 8 (R2)
; m end address is: 0 (R0)
; p end address is: 4 (R1)
0x0676	0x4615    MOV	R5, R2
0x0678	0x461A    MOV	R2, R3
0x067A	0x463B    MOV	R3, R7
L___Lib_dlmalloc_prepend_alloc125:
; nsize end address is: 32 (R8)
;__Lib_dlmalloc.c, 4050 :: 		oldfirst = chunk_plus_offset(oldfirst, nsize);
; m start address is: 0 (R0)
; p start address is: 4 (R1)
; oldfirst start address is: 20 (R5)
; q start address is: 8 (R2)
; qsize start address is: 12 (R3)
; nsize start address is: 24 (R6)
0x067C	0x19AD    ADDS	R5, R5, R6
;__Lib_dlmalloc.c, 4051 :: 		qsize += nsize;
0x067E	0x199C    ADDS	R4, R3, R6
; nsize end address is: 24 (R6)
0x0680	0x4623    MOV	R3, R4
; m end address is: 0 (R0)
; q end address is: 8 (R2)
; oldfirst end address is: 20 (R5)
; qsize end address is: 12 (R3)
; p end address is: 4 (R1)
0x0682	0x4617    MOV	R7, R2
0x0684	0x4602    MOV	R2, R0
0x0686	0x4618    MOV	R0, R3
0x0688	0x462B    MOV	R3, R5
;__Lib_dlmalloc.c, 4052 :: 		}
0x068A	0xE004    B	L___Lib_dlmalloc_prepend_alloc109
L___Lib_dlmalloc_prepend_alloc1139:
;__Lib_dlmalloc.c, 4047 :: 		if (!is_inuse(oldfirst)) {
0x068C	0x9300    STR	R3, [SP, #0]
0x068E	0x4613    MOV	R3, R2
0x0690	0x4602    MOV	R2, R0
0x0692	0x4638    MOV	R0, R7
0x0694	0x9F00    LDR	R7, [SP, #0]
;__Lib_dlmalloc.c, 4052 :: 		}
L___Lib_dlmalloc_prepend_alloc109:
;__Lib_dlmalloc.c, 4053 :: 		set_free_with_pinuse(q, qsize, oldfirst);
; qsize start address is: 0 (R0)
; q start address is: 28 (R7)
; oldfirst start address is: 12 (R3)
; p start address is: 4 (R1)
; m start address is: 8 (R2)
0x0696	0x1D1E    ADDS	R6, R3, #4
; oldfirst end address is: 12 (R3)
0x0698	0x6835    LDR	R5, [R6, #0]
0x069A	0xF06F0401  MVN	R4, #1
0x069E	0xEA050404  AND	R4, R5, R4, LSL #0
0x06A2	0x6034    STR	R4, [R6, #0]
0x06A4	0x1D3D    ADDS	R5, R7, #4
0x06A6	0xF0400401  ORR	R4, R0, #1
0x06AA	0x602C    STR	R4, [R5, #0]
0x06AC	0x183C    ADDS	R4, R7, R0
0x06AE	0x6020    STR	R0, [R4, #0]
;__Lib_dlmalloc.c, 4054 :: 		insert_chunk(m, q, qsize);
0x06B0	0x08C4    LSRS	R4, R0, #3
0x06B2	0x2C20    CMP	R4, #32
0x06B4	0xD233    BCS	L___Lib_dlmalloc_prepend_alloc158
0x06B6	0x08C6    LSRS	R6, R0, #3
; qsize end address is: 0 (R0)
; I start address is: 12 (R3)
0x06B8	0x4633    MOV	R3, R6
0x06BA	0xF2020528  ADDW	R5, R2, #40
0x06BE	0x0074    LSLS	R4, R6, #1
0x06C0	0x00A4    LSLS	R4, R4, #2
0x06C2	0x192C    ADDS	R4, R5, R4
; B start address is: 0 (R0)
0x06C4	0x4620    MOV	R0, R4
; F start address is: 32 (R8)
0x06C6	0x46A0    MOV	R8, R4
0x06C8	0x6815    LDR	R5, [R2, #0]
0x06CA	0xF04F0401  MOV	R4, #1
0x06CE	0x40B4    LSLS	R4, R6
0x06D0	0xEA050404  AND	R4, R5, R4, LSL #0
0x06D4	0xB944    CBNZ	R4, L___Lib_dlmalloc_prepend_alloc159
0x06D6	0xF04F0401  MOV	R4, #1
0x06DA	0xFA04F503  LSL	R5, R4, R3
; I end address is: 12 (R3)
0x06DE	0x6814    LDR	R4, [R2, #0]
0x06E0	0x432C    ORRS	R4, R5
0x06E2	0x6014    STR	R4, [R2, #0]
; m end address is: 8 (R2)
0x06E4	0x4642    MOV	R2, R8
0x06E6	0xE00C    B	L___Lib_dlmalloc_prepend_alloc160
L___Lib_dlmalloc_prepend_alloc159:
; m start address is: 8 (R2)
0x06E8	0xF2000408  ADDW	R4, R0, #8
0x06EC	0x6825    LDR	R5, [R4, #0]
0x06EE	0xF2020410  ADDW	R4, R2, #16
; m end address is: 8 (R2)
0x06F2	0x6824    LDR	R4, [R4, #0]
0x06F4	0x42A5    CMP	R5, R4
0x06F6	0xD303    BCC	L___Lib_dlmalloc_prepend_alloc161
; F end address is: 32 (R8)
0x06F8	0xF2000408  ADDW	R4, R0, #8
0x06FC	0x6822    LDR	R2, [R4, #0]
; F start address is: 8 (R2)
; F end address is: 8 (R2)
0x06FE	0xE000    B	L___Lib_dlmalloc_prepend_alloc162
L___Lib_dlmalloc_prepend_alloc161:
; F start address is: 32 (R8)
0x0700	0x4642    MOV	R2, R8
L___Lib_dlmalloc_prepend_alloc162:
; F end address is: 32 (R8)
; F start address is: 8 (R2)
; F end address is: 8 (R2)
L___Lib_dlmalloc_prepend_alloc160:
; F start address is: 8 (R2)
0x0702	0xF2000408  ADDW	R4, R0, #8
0x0706	0x6027    STR	R7, [R4, #0]
0x0708	0xF202040C  ADDW	R4, R2, #12
0x070C	0x6027    STR	R7, [R4, #0]
0x070E	0xF2070408  ADDW	R4, R7, #8
0x0712	0x6022    STR	R2, [R4, #0]
; F end address is: 8 (R2)
0x0714	0xF207040C  ADDW	R4, R7, #12
; q end address is: 28 (R7)
0x0718	0x6020    STR	R0, [R4, #0]
; B end address is: 0 (R0)
0x071A	0x4608    MOV	R0, R1
0x071C	0xE0C0    B	L___Lib_dlmalloc_prepend_alloc163
L___Lib_dlmalloc_prepend_alloc158:
; qsize start address is: 0 (R0)
; m start address is: 8 (R2)
; TP start address is: 12 (R3)
; q start address is: 28 (R7)
0x071E	0x463B    MOV	R3, R7
; q end address is: 28 (R7)
0x0720	0x0A04    LSRS	R4, R0, #8
; X start address is: 28 (R7)
0x0722	0x4627    MOV	R7, R4
0x0724	0xB90C    CBNZ	R4, L___Lib_dlmalloc_prepend_alloc164
; X end address is: 28 (R7)
; I start address is: 28 (R7)
0x0726	0x2700    MOVS	R7, #0
; I end address is: 28 (R7)
0x0728	0xE02A    B	L___Lib_dlmalloc_prepend_alloc165
L___Lib_dlmalloc_prepend_alloc164:
; X start address is: 28 (R7)
0x072A	0x4C60    LDR	R4, [PC, #384]
0x072C	0x42A7    CMP	R7, R4
0x072E	0xD903    BLS	L___Lib_dlmalloc_prepend_alloc166
; X end address is: 28 (R7)
; I start address is: 16 (R4)
0x0730	0xF04F041F  MOV	R4, #31
0x0734	0x4627    MOV	R7, R4
; I end address is: 16 (R4)
0x0736	0xE023    B	L___Lib_dlmalloc_prepend_alloc167
L___Lib_dlmalloc_prepend_alloc166:
; X start address is: 28 (R7)
0x0738	0xF5A77480  SUB	R4, R7, #256
0x073C	0x0C24    LSRS	R4, R4, #16
0x073E	0xF0040508  AND	R5, R4, #8
0x0742	0xFA07F605  LSL	R6, R7, R5
; X end address is: 28 (R7)
0x0746	0xF5A65480  SUB	R4, R6, #4096
0x074A	0x0C24    LSRS	R4, R4, #16
0x074C	0xF0040404  AND	R4, R4, #4
0x0750	0x192D    ADDS	R5, R5, R4
0x0752	0xFA06F704  LSL	R7, R6, R4
0x0756	0xF5A74480  SUB	R4, R7, #16384
0x075A	0x0C24    LSRS	R4, R4, #16
0x075C	0xF0040602  AND	R6, R4, #2
0x0760	0x19AC    ADDS	R4, R5, R6
0x0762	0xF1C4050E  RSB	R5, R4, #14
0x0766	0xFA07F406  LSL	R4, R7, R6
0x076A	0x0BE4    LSRS	R4, R4, #15
0x076C	0x192C    ADDS	R4, R5, R4
0x076E	0x0065    LSLS	R5, R4, #1
0x0770	0x1DE4    ADDS	R4, R4, #7
0x0772	0xFA20F404  LSR	R4, R0, R4
0x0776	0xF0040401  AND	R4, R4, #1
0x077A	0x192C    ADDS	R4, R5, R4
; I start address is: 20 (R5)
0x077C	0x4625    MOV	R5, R4
; I end address is: 20 (R5)
0x077E	0x462F    MOV	R7, R5
L___Lib_dlmalloc_prepend_alloc167:
; I start address is: 28 (R7)
; I end address is: 28 (R7)
L___Lib_dlmalloc_prepend_alloc165:
; I start address is: 28 (R7)
0x0780	0xF5027598  ADD	R5, R2, #304
0x0784	0x00BC    LSLS	R4, R7, #2
0x0786	0x192C    ADDS	R4, R5, R4
; H start address is: 32 (R8)
0x0788	0x46A0    MOV	R8, R4
0x078A	0xF203041C  ADDW	R4, R3, #28
0x078E	0x6027    STR	R7, [R4, #0]
0x0790	0xF2030410  ADDW	R4, R3, #16
0x0794	0x4626    MOV	R6, R4
0x0796	0x1D25    ADDS	R5, R4, #4
0x0798	0x2400    MOVS	R4, #0
0x079A	0x602C    STR	R4, [R5, #0]
0x079C	0x682C    LDR	R4, [R5, #0]
0x079E	0x6034    STR	R4, [R6, #0]
0x07A0	0x1D14    ADDS	R4, R2, #4
0x07A2	0x6825    LDR	R5, [R4, #0]
0x07A4	0xF04F0401  MOV	R4, #1
0x07A8	0x40BC    LSLS	R4, R7
0x07AA	0xEA050404  AND	R4, R5, R4, LSL #0
0x07AE	0xB9B4    CBNZ	R4, L___Lib_dlmalloc_prepend_alloc168
; qsize end address is: 0 (R0)
0x07B0	0x1D16    ADDS	R6, R2, #4
; m end address is: 8 (R2)
0x07B2	0xF04F0401  MOV	R4, #1
0x07B6	0xFA04F507  LSL	R5, R4, R7
; I end address is: 28 (R7)
0x07BA	0x6834    LDR	R4, [R6, #0]
0x07BC	0x432C    ORRS	R4, R5
0x07BE	0x6034    STR	R4, [R6, #0]
0x07C0	0xF8C83000  STR	R3, [R8, #0]
0x07C4	0xF2030418  ADDW	R4, R3, #24
0x07C8	0xF8C48000  STR	R8, [R4, #0]
; H end address is: 32 (R8)
0x07CC	0xF2030508  ADDW	R5, R3, #8
0x07D0	0xF203040C  ADDW	R4, R3, #12
0x07D4	0x6023    STR	R3, [R4, #0]
; TP end address is: 12 (R3)
0x07D6	0x6824    LDR	R4, [R4, #0]
0x07D8	0x602C    STR	R4, [R5, #0]
0x07DA	0x4608    MOV	R0, R1
0x07DC	0xE060    B	L___Lib_dlmalloc_prepend_alloc169
L___Lib_dlmalloc_prepend_alloc168:
; qsize start address is: 0 (R0)
; m start address is: 8 (R2)
; H start address is: 32 (R8)
; I start address is: 28 (R7)
; TP start address is: 12 (R3)
0x07DE	0xF8D84000  LDR	R4, [R8, #0]
; H end address is: 32 (R8)
; T start address is: 20 (R5)
0x07E2	0x4625    MOV	R5, R4
0x07E4	0x2F1F    CMP	R7, #31
0x07E6	0xD101    BNE	L___Lib_dlmalloc_prepend_alloc170
; I end address is: 28 (R7)
; ?FLOC____Lib_dlmalloc_prepend_alloc?T1572 start address is: 24 (R6)
0x07E8	0x2600    MOVS	R6, #0
; ?FLOC____Lib_dlmalloc_prepend_alloc?T1572 end address is: 24 (R6)
0x07EA	0xE004    B	L___Lib_dlmalloc_prepend_alloc171
L___Lib_dlmalloc_prepend_alloc170:
; I start address is: 28 (R7)
0x07EC	0x087C    LSRS	R4, R7, #1
; I end address is: 28 (R7)
0x07EE	0x3408    ADDS	R4, #8
0x07F0	0x1EA4    SUBS	R4, R4, #2
0x07F2	0xF1C4061F  RSB	R6, R4, #31
; ?FLOC____Lib_dlmalloc_prepend_alloc?T1572 start address is: 24 (R6)
; ?FLOC____Lib_dlmalloc_prepend_alloc?T1572 end address is: 24 (R6)
L___Lib_dlmalloc_prepend_alloc171:
; ?FLOC____Lib_dlmalloc_prepend_alloc?T1572 start address is: 24 (R6)
0x07F6	0xFA00F706  LSL	R7, R0, R6
; ?FLOC____Lib_dlmalloc_prepend_alloc?T1572 end address is: 24 (R6)
; K start address is: 28 (R7)
; p end address is: 4 (R1)
; TP end address is: 12 (R3)
; T end address is: 20 (R5)
; m end address is: 8 (R2)
; qsize end address is: 0 (R0)
; K end address is: 28 (R7)
0x07FA	0x9300    STR	R3, [SP, #0]
0x07FC	0x460B    MOV	R3, R1
0x07FE	0x462E    MOV	R6, R5
0x0800	0x9900    LDR	R1, [SP, #0]
L___Lib_dlmalloc_prepend_alloc172:
; K start address is: 28 (R7)
; T start address is: 24 (R6)
; TP start address is: 4 (R1)
; m start address is: 8 (R2)
; p start address is: 12 (R3)
; qsize start address is: 0 (R0)
0x0802	0x1D34    ADDS	R4, R6, #4
0x0804	0x6825    LDR	R5, [R4, #0]
0x0806	0xF06F0407  MVN	R4, #7
0x080A	0xEA050404  AND	R4, R5, R4, LSL #0
0x080E	0x4284    CMP	R4, R0
0x0810	0xD023    BEQ	L___Lib_dlmalloc_prepend_alloc175
0x0812	0xF2060510  ADDW	R5, R6, #16
0x0816	0x0FFC    LSRS	R4, R7, #31
0x0818	0xF0040401  AND	R4, R4, #1
0x081C	0x00A4    LSLS	R4, R4, #2
0x081E	0x192D    ADDS	R5, R5, R4
0x0820	0x9502    STR	R5, [SP, #8]
0x0822	0x007F    LSLS	R7, R7, #1
0x0824	0x682C    LDR	R4, [R5, #0]
0x0826	0xB11C    CBZ	R4, L___Lib_dlmalloc_prepend_alloc176
; T end address is: 24 (R6)
0x0828	0x9C02    LDR	R4, [SP, #8]
0x082A	0x6824    LDR	R4, [R4, #0]
; T start address is: 24 (R6)
0x082C	0x4626    MOV	R6, R4
0x082E	0xE013    B	L___Lib_dlmalloc_prepend_alloc177
; qsize end address is: 0 (R0)
; K end address is: 28 (R7)
L___Lib_dlmalloc_prepend_alloc176:
0x0830	0xF2020410  ADDW	R4, R2, #16
; m end address is: 8 (R2)
0x0834	0x6825    LDR	R5, [R4, #0]
0x0836	0x9C02    LDR	R4, [SP, #8]
0x0838	0x42AC    CMP	R4, R5
0x083A	0xD30C    BCC	L___Lib_dlmalloc_prepend_alloc178
0x083C	0x9C02    LDR	R4, [SP, #8]
0x083E	0x6021    STR	R1, [R4, #0]
0x0840	0xF2010418  ADDW	R4, R1, #24
0x0844	0x6026    STR	R6, [R4, #0]
; T end address is: 24 (R6)
0x0846	0xF2010508  ADDW	R5, R1, #8
0x084A	0xF201040C  ADDW	R4, R1, #12
0x084E	0x6021    STR	R1, [R4, #0]
; TP end address is: 4 (R1)
0x0850	0x6824    LDR	R4, [R4, #0]
0x0852	0x602C    STR	R4, [R5, #0]
0x0854	0xE023    B	L___Lib_dlmalloc_prepend_alloc173
L___Lib_dlmalloc_prepend_alloc178:
0x0856	0xE022    B	L___Lib_dlmalloc_prepend_alloc173
L___Lib_dlmalloc_prepend_alloc177:
; T start address is: 24 (R6)
; K start address is: 28 (R7)
; qsize start address is: 0 (R0)
; m start address is: 8 (R2)
; TP start address is: 4 (R1)
0x0858	0xE020    B	L___Lib_dlmalloc_prepend_alloc180
; qsize end address is: 0 (R0)
; K end address is: 28 (R7)
L___Lib_dlmalloc_prepend_alloc175:
0x085A	0xF2060408  ADDW	R4, R6, #8
0x085E	0x6824    LDR	R4, [R4, #0]
; F start address is: 0 (R0)
0x0860	0x4620    MOV	R0, R4
0x0862	0xF2020410  ADDW	R4, R2, #16
0x0866	0x6824    LDR	R4, [R4, #0]
0x0868	0x42A6    CMP	R6, R4
0x086A	0xD316    BCC	L___Lib_dlmalloc_prepend_alloc1137
0x086C	0xF2020410  ADDW	R4, R2, #16
; m end address is: 8 (R2)
0x0870	0x6824    LDR	R4, [R4, #0]
0x0872	0x42A0    CMP	R0, R4
0x0874	0xD311    BCC	L___Lib_dlmalloc_prepend_alloc1136
L___Lib_dlmalloc_prepend_alloc1115:
0x0876	0xF2060508  ADDW	R5, R6, #8
0x087A	0xF200040C  ADDW	R4, R0, #12
0x087E	0x6021    STR	R1, [R4, #0]
0x0880	0x6824    LDR	R4, [R4, #0]
0x0882	0x602C    STR	R4, [R5, #0]
0x0884	0xF2010408  ADDW	R4, R1, #8
0x0888	0x6020    STR	R0, [R4, #0]
; F end address is: 0 (R0)
0x088A	0xF201040C  ADDW	R4, R1, #12
0x088E	0x6026    STR	R6, [R4, #0]
; T end address is: 24 (R6)
0x0890	0xF2010518  ADDW	R5, R1, #24
; TP end address is: 4 (R1)
0x0894	0x2400    MOVS	R4, #0
0x0896	0x602C    STR	R4, [R5, #0]
0x0898	0xE001    B	L___Lib_dlmalloc_prepend_alloc173
L___Lib_dlmalloc_prepend_alloc1137:
L___Lib_dlmalloc_prepend_alloc1136:
0x089A	0xE000    B	L___Lib_dlmalloc_prepend_alloc173
L___Lib_dlmalloc_prepend_alloc180:
; T start address is: 24 (R6)
; K start address is: 28 (R7)
; qsize start address is: 0 (R0)
; m start address is: 8 (R2)
; TP start address is: 4 (R1)
; TP end address is: 4 (R1)
; m end address is: 8 (R2)
; qsize end address is: 0 (R0)
; K end address is: 28 (R7)
; T end address is: 24 (R6)
0x089C	0xE7B1    B	L___Lib_dlmalloc_prepend_alloc172
L___Lib_dlmalloc_prepend_alloc173:
0x089E	0x4618    MOV	R0, R3
L___Lib_dlmalloc_prepend_alloc169:
; p end address is: 12 (R3)
; p start address is: 0 (R0)
; p end address is: 0 (R0)
L___Lib_dlmalloc_prepend_alloc163:
;__Lib_dlmalloc.c, 4056 :: 		}
; p start address is: 0 (R0)
; p end address is: 0 (R0)
L___Lib_dlmalloc_prepend_alloc108:
; p start address is: 0 (R0)
; p end address is: 0 (R0)
L___Lib_dlmalloc_prepend_alloc106:
;__Lib_dlmalloc.c, 4059 :: 		return chunk2mem(p);
; p start address is: 0 (R0)
0x08A0	0xF2000408  ADDW	R4, R0, #8
; p end address is: 0 (R0)
0x08A4	0x4620    MOV	R0, R4
;__Lib_dlmalloc.c, 4060 :: 		}
L_end_prepend_alloc:
0x08A6	0xB003    ADD	SP, SP, #12
0x08A8	0x4770    BX	LR
0x08AA	0xBF00    NOP
0x08AC	0xFFFF0000  	#65535
; end of __Lib_dlmalloc_prepend_alloc
__Lib_dlmalloc_add_segment:
;__Lib_dlmalloc.c, 4063 :: 		static void add_segment(mstate m, uint8_t* tbase, size_t tsize, flag_t mmapped) {
; mmapped start address is: 12 (R3)
; tsize start address is: 8 (R2)
; tbase start address is: 4 (R1)
; m start address is: 0 (R0)
0x0B7C	0xB087    SUB	SP, SP, #28
0x0B7E	0xF8CDE000  STR	LR, [SP, #0]
0x0B82	0x4680    MOV	R8, R0
0x0B84	0x4689    MOV	R9, R1
0x0B86	0x4692    MOV	R10, R2
0x0B88	0x469B    MOV	R11, R3
; mmapped end address is: 12 (R3)
; tsize end address is: 8 (R2)
; tbase end address is: 4 (R1)
; m end address is: 0 (R0)
; m start address is: 32 (R8)
; tbase start address is: 36 (R9)
; tsize start address is: 40 (R10)
; mmapped start address is: 44 (R11)
;__Lib_dlmalloc.c, 4065 :: 		uint8_t* old_top = (uint8_t*)m->top;
0x0B8A	0xF1080418  ADD	R4, R8, #24
0x0B8E	0x6824    LDR	R4, [R4, #0]
; old_top start address is: 48 (R12)
0x0B90	0x46A4    MOV	R12, R4
;__Lib_dlmalloc.c, 4066 :: 		msegmentptr oldsp = segment_holding(m, old_top);
0x0B92	0x4621    MOV	R1, R4
0x0B94	0x4640    MOV	R0, R8
0x0B96	0xF7FFFB9D  BL	__Lib_dlmalloc_segment_holding+0
;__Lib_dlmalloc.c, 4067 :: 		uint8_t* old_end = oldsp->base + oldsp->size;
0x0B9A	0x6805    LDR	R5, [R0, #0]
0x0B9C	0x1D04    ADDS	R4, R0, #4
0x0B9E	0x6824    LDR	R4, [R4, #0]
0x0BA0	0x192C    ADDS	R4, R5, R4
; old_end start address is: 0 (R0)
0x0BA2	0x4620    MOV	R0, R4
;__Lib_dlmalloc.c, 4068 :: 		size_t ssize = pad_request(sizeof(struct malloc_segment));
; ssize start address is: 24 (R6)
0x0BA4	0xF04F0618  MOV	R6, #24
;__Lib_dlmalloc.c, 4069 :: 		uint8_t* rawsp = old_end - (ssize + FOUR_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
0x0BA8	0xF2060410  ADDW	R4, R6, #16
0x0BAC	0x1DE4    ADDS	R4, R4, #7
0x0BAE	0x1B04    SUB	R4, R0, R4
; rawsp start address is: 4 (R1)
0x0BB0	0x4621    MOV	R1, R4
;__Lib_dlmalloc.c, 4070 :: 		size_t offset = align_offset(chunk2mem(rawsp));
0x0BB2	0x3408    ADDS	R4, #8
0x0BB4	0xF0040407  AND	R4, R4, #7
0x0BB8	0xB90C    CBNZ	R4, L___Lib_dlmalloc_add_segment185
; ?FLOC____Lib_dlmalloc_add_segment?T1723 start address is: 8 (R2)
0x0BBA	0x2200    MOVS	R2, #0
; ?FLOC____Lib_dlmalloc_add_segment?T1723 end address is: 8 (R2)
0x0BBC	0xE007    B	L___Lib_dlmalloc_add_segment186
L___Lib_dlmalloc_add_segment185:
0x0BBE	0xF2010408  ADDW	R4, R1, #8
0x0BC2	0xF0040407  AND	R4, R4, #7
0x0BC6	0xF1C40208  RSB	R2, R4, #8
0x0BCA	0xF0020207  AND	R2, R2, #7
; ?FLOC____Lib_dlmalloc_add_segment?T1723 start address is: 8 (R2)
; ?FLOC____Lib_dlmalloc_add_segment?T1723 end address is: 8 (R2)
L___Lib_dlmalloc_add_segment186:
;__Lib_dlmalloc.c, 4071 :: 		uint8_t* asp = rawsp + offset;
; ?FLOC____Lib_dlmalloc_add_segment?T1723 start address is: 8 (R2)
0x0BCE	0x188D    ADDS	R5, R1, R2
; rawsp end address is: 4 (R1)
; ?FLOC____Lib_dlmalloc_add_segment?T1723 end address is: 8 (R2)
; asp start address is: 4 (R1)
0x0BD0	0x4629    MOV	R1, R5
;__Lib_dlmalloc.c, 4072 :: 		uint8_t* csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
0x0BD2	0xF10C0410  ADD	R4, R12, #16
0x0BD6	0x42A5    CMP	R5, R4
0x0BD8	0xD201    BCS	L___Lib_dlmalloc_add_segment187
; asp end address is: 4 (R1)
; ?FLOC____Lib_dlmalloc_add_segment?T1747 start address is: 12 (R3)
0x0BDA	0x4663    MOV	R3, R12
; ?FLOC____Lib_dlmalloc_add_segment?T1747 end address is: 12 (R3)
0x0BDC	0xE000    B	L___Lib_dlmalloc_add_segment188
L___Lib_dlmalloc_add_segment187:
; ?FLOC____Lib_dlmalloc_add_segment?T1747 start address is: 12 (R3)
; asp start address is: 4 (R1)
0x0BDE	0x460B    MOV	R3, R1
; asp end address is: 4 (R1)
; ?FLOC____Lib_dlmalloc_add_segment?T1747 end address is: 12 (R3)
L___Lib_dlmalloc_add_segment188:
; ?FLOC____Lib_dlmalloc_add_segment?T1747 start address is: 12 (R3)
; csp start address is: 8 (R2)
0x0BE0	0x461A    MOV	R2, R3
;__Lib_dlmalloc.c, 4073 :: 		mchunkptr sp = (mchunkptr)csp;
; sp start address is: 28 (R7)
0x0BE2	0x461F    MOV	R7, R3
;__Lib_dlmalloc.c, 4074 :: 		msegmentptr ss = (msegmentptr)(chunk2mem(sp));
0x0BE4	0xF2030108  ADDW	R1, R3, #8
; ss start address is: 4 (R1)
;__Lib_dlmalloc.c, 4075 :: 		mchunkptr tnext = chunk_plus_offset(sp, ssize);
0x0BE8	0x199C    ADDS	R4, R3, R6
; ?FLOC____Lib_dlmalloc_add_segment?T1747 end address is: 12 (R3)
;__Lib_dlmalloc.c, 4076 :: 		mchunkptr p = tnext;
; p start address is: 12 (R3)
0x0BEA	0x4623    MOV	R3, R4
;__Lib_dlmalloc.c, 4077 :: 		int32_t nfences = 0;
;__Lib_dlmalloc.c, 4080 :: 		init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
0x0BEC	0x4CB4    LDR	R4, [PC, #720]
0x0BEE	0xF0040407  AND	R4, R4, #7
0x0BF2	0xB90C    CBNZ	R4, L___Lib_dlmalloc_add_segment189
; ?FLOC____Lib_dlmalloc_add_segment?T1766 start address is: 20 (R5)
0x0BF4	0x2500    MOVS	R5, #0
; ?FLOC____Lib_dlmalloc_add_segment?T1766 end address is: 20 (R5)
0x0BF6	0xE006    B	L___Lib_dlmalloc_add_segment190
L___Lib_dlmalloc_add_segment189:
0x0BF8	0x4CB1    LDR	R4, [PC, #708]
0x0BFA	0xF0040407  AND	R4, R4, #7
0x0BFE	0xF1C40508  RSB	R5, R4, #8
0x0C02	0xF0050507  AND	R5, R5, #7
; ?FLOC____Lib_dlmalloc_add_segment?T1766 start address is: 20 (R5)
; ?FLOC____Lib_dlmalloc_add_segment?T1766 end address is: 20 (R5)
L___Lib_dlmalloc_add_segment190:
; ?FLOC____Lib_dlmalloc_add_segment?T1766 start address is: 20 (R5)
0x0C06	0xF2050418  ADDW	R4, R5, #24
; ?FLOC____Lib_dlmalloc_add_segment?T1766 end address is: 20 (R5)
0x0C0A	0x3410    ADDS	R4, #16
0x0C0C	0xEBAA0404  SUB	R4, R10, R4, LSL #0
0x0C10	0x9301    STR	R3, [SP, #4]
0x0C12	0x9102    STR	R1, [SP, #8]
0x0C14	0x9203    STR	R2, [SP, #12]
0x0C16	0x9004    STR	R0, [SP, #16]
0x0C18	0x4622    MOV	R2, R4
0x0C1A	0x4649    MOV	R1, R9
0x0C1C	0x4640    MOV	R0, R8
0x0C1E	0xF7FFFB0D  BL	__Lib_dlmalloc_init_top+0
0x0C22	0x9804    LDR	R0, [SP, #16]
0x0C24	0x9A03    LDR	R2, [SP, #12]
0x0C26	0x9902    LDR	R1, [SP, #8]
0x0C28	0x9B01    LDR	R3, [SP, #4]
;__Lib_dlmalloc.c, 4084 :: 		set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
0x0C2A	0x1D3D    ADDS	R5, R7, #4
; sp end address is: 28 (R7)
0x0C2C	0xF0460401  ORR	R4, R6, #1
; ssize end address is: 24 (R6)
0x0C30	0xF0440402  ORR	R4, R4, #2
0x0C34	0x602C    STR	R4, [R5, #0]
;__Lib_dlmalloc.c, 4085 :: 		*ss = m->seg; /* Push current record */
0x0C36	0xF50874E0  ADD	R4, R8, #448
0x0C3A	0xF04F0710  MOV	R7, #16
0x0C3E	0x460E    MOV	R6, R1
0x0C40	0x4625    MOV	R5, R4
; mmapped end address is: 44 (R11)
; old_top end address is: 48 (R12)
; old_end end address is: 0 (R0)
; p end address is: 12 (R3)
0x0C42	0x9301    STR	R3, [SP, #4]
0x0C44	0xF8CDC008  STR	R12, [SP, #8]
0x0C48	0x46DC    MOV	R12, R11
0x0C4A	0x4603    MOV	R3, R0
0x0C4C	0xF8DDB008  LDR	R11, [SP, #8]
0x0C50	0x9801    LDR	R0, [SP, #4]
0x0C52	0xE7FF    B	L___Lib_dlmalloc_add_segment191
L___Lib_dlmalloc_add_segment1143:
L___Lib_dlmalloc_add_segment191:
; old_end start address is: 12 (R3)
; mmapped start address is: 48 (R12)
; old_top start address is: 44 (R11)
; p start address is: 0 (R0)
; p start address is: 0 (R0)
; p end address is: 0 (R0)
; ss start address is: 4 (R1)
; ss end address is: 4 (R1)
; csp start address is: 8 (R2)
; csp end address is: 8 (R2)
; old_end start address is: 12 (R3)
; old_end end address is: 12 (R3)
; old_top start address is: 44 (R11)
; old_top end address is: 44 (R11)
; mmapped start address is: 48 (R12)
; mmapped end address is: 48 (R12)
; tsize start address is: 40 (R10)
; tsize end address is: 40 (R10)
; tbase start address is: 36 (R9)
; tbase end address is: 36 (R9)
; m start address is: 32 (R8)
; m end address is: 32 (R8)
0x0C54	0x782C    LDRB	R4, [R5, #0]
0x0C56	0x7034    STRB	R4, [R6, #0]
0x0C58	0x1E7F    SUBS	R7, R7, #1
0x0C5A	0x1C6D    ADDS	R5, R5, #1
0x0C5C	0x1C76    ADDS	R6, R6, #1
0x0C5E	0x2F00    CMP	R7, #0
0x0C60	0xD1F8    BNE	L___Lib_dlmalloc_add_segment1143
; p end address is: 0 (R0)
; ss end address is: 4 (R1)
; csp end address is: 8 (R2)
; old_top end address is: 44 (R11)
; mmapped end address is: 48 (R12)
; tsize end address is: 40 (R10)
; tbase end address is: 36 (R9)
; m end address is: 32 (R8)
; old_end end address is: 12 (R3)
;__Lib_dlmalloc.c, 4086 :: 		m->seg.base = tbase;
; old_end start address is: 12 (R3)
; m start address is: 32 (R8)
; tbase start address is: 36 (R9)
; tsize start address is: 40 (R10)
; mmapped start address is: 48 (R12)
; old_top start address is: 44 (R11)
; csp start address is: 8 (R2)
; ss start address is: 4 (R1)
; p start address is: 0 (R0)
0x0C62	0xF50874E0  ADD	R4, R8, #448
0x0C66	0xF8C49000  STR	R9, [R4, #0]
; tbase end address is: 36 (R9)
;__Lib_dlmalloc.c, 4087 :: 		m->seg.size = tsize;
0x0C6A	0xF50874E0  ADD	R4, R8, #448
0x0C6E	0x1D24    ADDS	R4, R4, #4
0x0C70	0xF8C4A000  STR	R10, [R4, #0]
; tsize end address is: 40 (R10)
;__Lib_dlmalloc.c, 4088 :: 		m->seg.sflags = mmapped;
0x0C74	0xF50874E0  ADD	R4, R8, #448
0x0C78	0x340C    ADDS	R4, #12
0x0C7A	0xF8C4C000  STR	R12, [R4, #0]
; mmapped end address is: 48 (R12)
;__Lib_dlmalloc.c, 4089 :: 		m->seg.next = ss;
0x0C7E	0xF50874E0  ADD	R4, R8, #448
0x0C82	0x3408    ADDS	R4, #8
0x0C84	0x6021    STR	R1, [R4, #0]
; p end address is: 0 (R0)
; ss end address is: 4 (R1)
; csp end address is: 8 (R2)
; old_top end address is: 44 (R11)
; m end address is: 32 (R8)
; old_end end address is: 12 (R3)
0x0C86	0x4604    MOV	R4, R0
0x0C88	0x4640    MOV	R0, R8
0x0C8A	0x4611    MOV	R1, R2
0x0C8C	0x465A    MOV	R2, R11
;__Lib_dlmalloc.c, 4092 :: 		for (;;) {
L___Lib_dlmalloc_add_segment192:
;__Lib_dlmalloc.c, 4093 :: 		mchunkptr nextp = chunk_plus_offset(p, SIZE_T_SIZE);
; m start address is: 0 (R0)
; old_top start address is: 8 (R2)
; old_end start address is: 12 (R3)
; csp start address is: 4 (R1)
; p start address is: 16 (R4)
0x0C8E	0x1D25    ADDS	R5, R4, #4
; p end address is: 16 (R4)
0x0C90	0x9505    STR	R5, [SP, #20]
;__Lib_dlmalloc.c, 4094 :: 		p->head = FENCEPOST_HEAD;
0x0C92	0xF04F0407  MOV	R4, #7
0x0C96	0x602C    STR	R4, [R5, #0]
;__Lib_dlmalloc.c, 4096 :: 		if ((uint8_t*)(&(nextp->head)) < old_end)
0x0C98	0x9C05    LDR	R4, [SP, #20]
0x0C9A	0x1D24    ADDS	R4, R4, #4
0x0C9C	0x429C    CMP	R4, R3
0x0C9E	0xD201    BCS	L___Lib_dlmalloc_add_segment195
;__Lib_dlmalloc.c, 4097 :: 		p = nextp;
; p start address is: 16 (R4)
0x0CA0	0x9C05    LDR	R4, [SP, #20]
0x0CA2	0xE000    B	L___Lib_dlmalloc_add_segment196
; old_end end address is: 12 (R3)
; p end address is: 16 (R4)
L___Lib_dlmalloc_add_segment195:
;__Lib_dlmalloc.c, 4099 :: 		break;
0x0CA4	0xE000    B	L___Lib_dlmalloc_add_segment193
L___Lib_dlmalloc_add_segment196:
;__Lib_dlmalloc.c, 4100 :: 		}
; p start address is: 16 (R4)
; old_end start address is: 12 (R3)
; old_end end address is: 12 (R3)
; p end address is: 16 (R4)
0x0CA6	0xE7F2    B	L___Lib_dlmalloc_add_segment192
L___Lib_dlmalloc_add_segment193:
;__Lib_dlmalloc.c, 4104 :: 		if (csp != old_top) {
0x0CA8	0x4291    CMP	R1, R2
0x0CAA	0xF0008104  BEQ	L___Lib_dlmalloc_add_segment197
;__Lib_dlmalloc.c, 4105 :: 		mchunkptr q = (mchunkptr)old_top;
; q start address is: 12 (R3)
0x0CAE	0x4613    MOV	R3, R2
;__Lib_dlmalloc.c, 4106 :: 		size_t psize = csp - old_top;
0x0CB0	0x1A8C    SUB	R4, R1, R2
; csp end address is: 4 (R1)
; psize start address is: 4 (R1)
0x0CB2	0x4621    MOV	R1, R4
;__Lib_dlmalloc.c, 4107 :: 		mchunkptr tn = chunk_plus_offset(q, psize);
0x0CB4	0x1914    ADDS	R4, R2, R4
; old_top end address is: 8 (R2)
;__Lib_dlmalloc.c, 4108 :: 		set_free_with_pinuse(q, psize, tn);
0x0CB6	0x1D26    ADDS	R6, R4, #4
0x0CB8	0x6835    LDR	R5, [R6, #0]
0x0CBA	0xF06F0401  MVN	R4, #1
0x0CBE	0xEA050404  AND	R4, R5, R4, LSL #0
0x0CC2	0x6034    STR	R4, [R6, #0]
0x0CC4	0x1D1D    ADDS	R5, R3, #4
0x0CC6	0xF0410401  ORR	R4, R1, #1
0x0CCA	0x602C    STR	R4, [R5, #0]
0x0CCC	0x185C    ADDS	R4, R3, R1
0x0CCE	0x6021    STR	R1, [R4, #0]
;__Lib_dlmalloc.c, 4109 :: 		insert_chunk(m, q, psize);
0x0CD0	0x08CC    LSRS	R4, R1, #3
0x0CD2	0x2C20    CMP	R4, #32
0x0CD4	0xD232    BCS	L___Lib_dlmalloc_add_segment198
0x0CD6	0x08CE    LSRS	R6, R1, #3
; psize end address is: 4 (R1)
; I start address is: 8 (R2)
0x0CD8	0x4632    MOV	R2, R6
0x0CDA	0xF2000528  ADDW	R5, R0, #40
0x0CDE	0x0074    LSLS	R4, R6, #1
0x0CE0	0x00A4    LSLS	R4, R4, #2
0x0CE2	0x192C    ADDS	R4, R5, R4
; B start address is: 4 (R1)
0x0CE4	0x4621    MOV	R1, R4
; F start address is: 28 (R7)
0x0CE6	0x4627    MOV	R7, R4
0x0CE8	0x6805    LDR	R5, [R0, #0]
0x0CEA	0xF04F0401  MOV	R4, #1
0x0CEE	0x40B4    LSLS	R4, R6
0x0CF0	0xEA050404  AND	R4, R5, R4, LSL #0
0x0CF4	0xB944    CBNZ	R4, L___Lib_dlmalloc_add_segment199
0x0CF6	0xF04F0401  MOV	R4, #1
0x0CFA	0xFA04F502  LSL	R5, R4, R2
; I end address is: 8 (R2)
0x0CFE	0x6804    LDR	R4, [R0, #0]
0x0D00	0x432C    ORRS	R4, R5
0x0D02	0x6004    STR	R4, [R0, #0]
; m end address is: 0 (R0)
0x0D04	0x4638    MOV	R0, R7
0x0D06	0xE00C    B	L___Lib_dlmalloc_add_segment200
L___Lib_dlmalloc_add_segment199:
; m start address is: 0 (R0)
0x0D08	0xF2010408  ADDW	R4, R1, #8
0x0D0C	0x6825    LDR	R5, [R4, #0]
0x0D0E	0xF2000410  ADDW	R4, R0, #16
; m end address is: 0 (R0)
0x0D12	0x6824    LDR	R4, [R4, #0]
0x0D14	0x42A5    CMP	R5, R4
0x0D16	0xD303    BCC	L___Lib_dlmalloc_add_segment201
; F end address is: 28 (R7)
0x0D18	0xF2010408  ADDW	R4, R1, #8
0x0D1C	0x6820    LDR	R0, [R4, #0]
; F start address is: 0 (R0)
; F end address is: 0 (R0)
0x0D1E	0xE000    B	L___Lib_dlmalloc_add_segment202
L___Lib_dlmalloc_add_segment201:
; F start address is: 28 (R7)
0x0D20	0x4638    MOV	R0, R7
L___Lib_dlmalloc_add_segment202:
; F end address is: 28 (R7)
; F start address is: 0 (R0)
; F end address is: 0 (R0)
L___Lib_dlmalloc_add_segment200:
; F start address is: 0 (R0)
0x0D22	0xF2010408  ADDW	R4, R1, #8
0x0D26	0x6023    STR	R3, [R4, #0]
0x0D28	0xF200040C  ADDW	R4, R0, #12
0x0D2C	0x6023    STR	R3, [R4, #0]
0x0D2E	0xF2030408  ADDW	R4, R3, #8
0x0D32	0x6020    STR	R0, [R4, #0]
; F end address is: 0 (R0)
0x0D34	0xF203040C  ADDW	R4, R3, #12
; q end address is: 12 (R3)
0x0D38	0x6021    STR	R1, [R4, #0]
; B end address is: 4 (R1)
0x0D3A	0xE0BC    B	L___Lib_dlmalloc_add_segment203
L___Lib_dlmalloc_add_segment198:
; TP start address is: 8 (R2)
; psize start address is: 4 (R1)
; q start address is: 12 (R3)
; m start address is: 0 (R0)
0x0D3C	0x461A    MOV	R2, R3
; q end address is: 12 (R3)
0x0D3E	0x0A0C    LSRS	R4, R1, #8
; X start address is: 12 (R3)
0x0D40	0x4623    MOV	R3, R4
0x0D42	0xB90C    CBNZ	R4, L___Lib_dlmalloc_add_segment204
; X end address is: 12 (R3)
; I start address is: 28 (R7)
0x0D44	0x2700    MOVS	R7, #0
; I end address is: 28 (R7)
0x0D46	0xE02A    B	L___Lib_dlmalloc_add_segment205
L___Lib_dlmalloc_add_segment204:
; X start address is: 12 (R3)
0x0D48	0x4C5E    LDR	R4, [PC, #376]
0x0D4A	0x42A3    CMP	R3, R4
0x0D4C	0xD903    BLS	L___Lib_dlmalloc_add_segment206
; X end address is: 12 (R3)
; I start address is: 12 (R3)
0x0D4E	0xF04F031F  MOV	R3, #31
0x0D52	0x461F    MOV	R7, R3
; I end address is: 12 (R3)
0x0D54	0xE023    B	L___Lib_dlmalloc_add_segment207
L___Lib_dlmalloc_add_segment206:
; X start address is: 12 (R3)
0x0D56	0xF5A37480  SUB	R4, R3, #256
0x0D5A	0x0C24    LSRS	R4, R4, #16
0x0D5C	0xF0040508  AND	R5, R4, #8
0x0D60	0xFA03F605  LSL	R6, R3, R5
; X end address is: 12 (R3)
0x0D64	0xF5A65480  SUB	R4, R6, #4096
0x0D68	0x0C24    LSRS	R4, R4, #16
0x0D6A	0xF0040404  AND	R4, R4, #4
0x0D6E	0x192D    ADDS	R5, R5, R4
0x0D70	0xFA06F704  LSL	R7, R6, R4
0x0D74	0xF5A74480  SUB	R4, R7, #16384
0x0D78	0x0C24    LSRS	R4, R4, #16
0x0D7A	0xF0040602  AND	R6, R4, #2
0x0D7E	0x19AC    ADDS	R4, R5, R6
0x0D80	0xF1C4050E  RSB	R5, R4, #14
0x0D84	0xFA07F406  LSL	R4, R7, R6
0x0D88	0x0BE4    LSRS	R4, R4, #15
0x0D8A	0x192C    ADDS	R4, R5, R4
0x0D8C	0x0065    LSLS	R5, R4, #1
0x0D8E	0x1DE4    ADDS	R4, R4, #7
0x0D90	0xFA21F404  LSR	R4, R1, R4
0x0D94	0xF0040401  AND	R4, R4, #1
0x0D98	0x192C    ADDS	R4, R5, R4
; I start address is: 12 (R3)
0x0D9A	0x4623    MOV	R3, R4
; I end address is: 12 (R3)
0x0D9C	0x461F    MOV	R7, R3
L___Lib_dlmalloc_add_segment207:
; I start address is: 28 (R7)
; I end address is: 28 (R7)
L___Lib_dlmalloc_add_segment205:
; I start address is: 28 (R7)
0x0D9E	0xF5007598  ADD	R5, R0, #304
0x0DA2	0x00BC    LSLS	R4, R7, #2
0x0DA4	0x192C    ADDS	R4, R5, R4
; H start address is: 12 (R3)
0x0DA6	0x4623    MOV	R3, R4
0x0DA8	0xF202041C  ADDW	R4, R2, #28
0x0DAC	0x6027    STR	R7, [R4, #0]
0x0DAE	0xF2020410  ADDW	R4, R2, #16
0x0DB2	0x4626    MOV	R6, R4
0x0DB4	0x1D25    ADDS	R5, R4, #4
0x0DB6	0x2400    MOVS	R4, #0
0x0DB8	0x602C    STR	R4, [R5, #0]
0x0DBA	0x682C    LDR	R4, [R5, #0]
0x0DBC	0x6034    STR	R4, [R6, #0]
0x0DBE	0x1D04    ADDS	R4, R0, #4
0x0DC0	0x6825    LDR	R5, [R4, #0]
0x0DC2	0xF04F0401  MOV	R4, #1
0x0DC6	0x40BC    LSLS	R4, R7
0x0DC8	0xEA050404  AND	R4, R5, R4, LSL #0
0x0DCC	0xB99C    CBNZ	R4, L___Lib_dlmalloc_add_segment208
; psize end address is: 4 (R1)
0x0DCE	0x1D06    ADDS	R6, R0, #4
; m end address is: 0 (R0)
0x0DD0	0xF04F0401  MOV	R4, #1
0x0DD4	0xFA04F507  LSL	R5, R4, R7
; I end address is: 28 (R7)
0x0DD8	0x6834    LDR	R4, [R6, #0]
0x0DDA	0x432C    ORRS	R4, R5
0x0DDC	0x6034    STR	R4, [R6, #0]
0x0DDE	0x601A    STR	R2, [R3, #0]
0x0DE0	0xF2020418  ADDW	R4, R2, #24
0x0DE4	0x6023    STR	R3, [R4, #0]
; H end address is: 12 (R3)
0x0DE6	0xF2020508  ADDW	R5, R2, #8
0x0DEA	0xF202040C  ADDW	R4, R2, #12
0x0DEE	0x6022    STR	R2, [R4, #0]
; TP end address is: 8 (R2)
0x0DF0	0x6824    LDR	R4, [R4, #0]
0x0DF2	0x602C    STR	R4, [R5, #0]
0x0DF4	0xE05F    B	L___Lib_dlmalloc_add_segment209
L___Lib_dlmalloc_add_segment208:
; H start address is: 12 (R3)
; I start address is: 28 (R7)
; TP start address is: 8 (R2)
; psize start address is: 4 (R1)
; m start address is: 0 (R0)
0x0DF6	0x681C    LDR	R4, [R3, #0]
; H end address is: 12 (R3)
; T start address is: 12 (R3)
0x0DF8	0x4623    MOV	R3, R4
0x0DFA	0x2F1F    CMP	R7, #31
0x0DFC	0xD101    BNE	L___Lib_dlmalloc_add_segment210
; I end address is: 28 (R7)
; ?FLOC____Lib_dlmalloc_add_segment?T2048 start address is: 20 (R5)
0x0DFE	0x2500    MOVS	R5, #0
; ?FLOC____Lib_dlmalloc_add_segment?T2048 end address is: 20 (R5)
0x0E00	0xE004    B	L___Lib_dlmalloc_add_segment211
L___Lib_dlmalloc_add_segment210:
; I start address is: 28 (R7)
0x0E02	0x087C    LSRS	R4, R7, #1
; I end address is: 28 (R7)
0x0E04	0x3408    ADDS	R4, #8
0x0E06	0x1EA4    SUBS	R4, R4, #2
0x0E08	0xF1C4051F  RSB	R5, R4, #31
; ?FLOC____Lib_dlmalloc_add_segment?T2048 start address is: 20 (R5)
; ?FLOC____Lib_dlmalloc_add_segment?T2048 end address is: 20 (R5)
L___Lib_dlmalloc_add_segment211:
; ?FLOC____Lib_dlmalloc_add_segment?T2048 start address is: 20 (R5)
0x0E0C	0xFA01F605  LSL	R6, R1, R5
; ?FLOC____Lib_dlmalloc_add_segment?T2048 end address is: 20 (R5)
; K start address is: 24 (R6)
; m end address is: 0 (R0)
; psize end address is: 4 (R1)
; TP end address is: 8 (R2)
; T end address is: 12 (R3)
; K end address is: 24 (R6)
0x0E10	0x9201    STR	R2, [SP, #4]
0x0E12	0x461A    MOV	R2, R3
0x0E14	0x460B    MOV	R3, R1
0x0E16	0x4601    MOV	R1, R0
0x0E18	0x9801    LDR	R0, [SP, #4]
L___Lib_dlmalloc_add_segment212:
; K start address is: 24 (R6)
; T start address is: 8 (R2)
; TP start address is: 0 (R0)
; psize start address is: 12 (R3)
; m start address is: 4 (R1)
0x0E1A	0x1D14    ADDS	R4, R2, #4
0x0E1C	0x6825    LDR	R5, [R4, #0]
0x0E1E	0xF06F0407  MVN	R4, #7
0x0E22	0xEA050404  AND	R4, R5, R4, LSL #0
0x0E26	0x429C    CMP	R4, R3
0x0E28	0xD023    BEQ	L___Lib_dlmalloc_add_segment215
0x0E2A	0xF2020510  ADDW	R5, R2, #16
0x0E2E	0x0FF4    LSRS	R4, R6, #31
0x0E30	0xF0040401  AND	R4, R4, #1
0x0E34	0x00A4    LSLS	R4, R4, #2
0x0E36	0x192D    ADDS	R5, R5, R4
0x0E38	0x9506    STR	R5, [SP, #24]
0x0E3A	0x0076    LSLS	R6, R6, #1
0x0E3C	0x682C    LDR	R4, [R5, #0]
0x0E3E	0xB11C    CBZ	R4, L___Lib_dlmalloc_add_segment216
; T end address is: 8 (R2)
0x0E40	0x9C06    LDR	R4, [SP, #24]
0x0E42	0x6824    LDR	R4, [R4, #0]
; T start address is: 8 (R2)
0x0E44	0x4622    MOV	R2, R4
0x0E46	0xE013    B	L___Lib_dlmalloc_add_segment217
; psize end address is: 12 (R3)
; K end address is: 24 (R6)
L___Lib_dlmalloc_add_segment216:
0x0E48	0xF2010410  ADDW	R4, R1, #16
; m end address is: 4 (R1)
0x0E4C	0x6825    LDR	R5, [R4, #0]
0x0E4E	0x9C06    LDR	R4, [SP, #24]
0x0E50	0x42AC    CMP	R4, R5
0x0E52	0xD30C    BCC	L___Lib_dlmalloc_add_segment218
0x0E54	0x9C06    LDR	R4, [SP, #24]
0x0E56	0x6020    STR	R0, [R4, #0]
0x0E58	0xF2000418  ADDW	R4, R0, #24
0x0E5C	0x6022    STR	R2, [R4, #0]
; T end address is: 8 (R2)
0x0E5E	0xF2000508  ADDW	R5, R0, #8
0x0E62	0xF200040C  ADDW	R4, R0, #12
0x0E66	0x6020    STR	R0, [R4, #0]
; TP end address is: 0 (R0)
0x0E68	0x6824    LDR	R4, [R4, #0]
0x0E6A	0x602C    STR	R4, [R5, #0]
0x0E6C	0xE023    B	L___Lib_dlmalloc_add_segment213
L___Lib_dlmalloc_add_segment218:
0x0E6E	0xE022    B	L___Lib_dlmalloc_add_segment213
L___Lib_dlmalloc_add_segment217:
; T start address is: 8 (R2)
; K start address is: 24 (R6)
; m start address is: 4 (R1)
; psize start address is: 12 (R3)
; TP start address is: 0 (R0)
0x0E70	0xE020    B	L___Lib_dlmalloc_add_segment220
; psize end address is: 12 (R3)
; K end address is: 24 (R6)
L___Lib_dlmalloc_add_segment215:
0x0E72	0xF2020408  ADDW	R4, R2, #8
0x0E76	0x6824    LDR	R4, [R4, #0]
; F start address is: 12 (R3)
0x0E78	0x4623    MOV	R3, R4
0x0E7A	0xF2010410  ADDW	R4, R1, #16
0x0E7E	0x6824    LDR	R4, [R4, #0]
0x0E80	0x42A2    CMP	R2, R4
0x0E82	0xD316    BCC	L___Lib_dlmalloc_add_segment1142
0x0E84	0xF2010410  ADDW	R4, R1, #16
; m end address is: 4 (R1)
0x0E88	0x6824    LDR	R4, [R4, #0]
0x0E8A	0x42A3    CMP	R3, R4
0x0E8C	0xD311    BCC	L___Lib_dlmalloc_add_segment1141
L___Lib_dlmalloc_add_segment1140:
0x0E8E	0xF2020508  ADDW	R5, R2, #8
0x0E92	0xF203040C  ADDW	R4, R3, #12
0x0E96	0x6020    STR	R0, [R4, #0]
0x0E98	0x6824    LDR	R4, [R4, #0]
0x0E9A	0x602C    STR	R4, [R5, #0]
0x0E9C	0xF2000408  ADDW	R4, R0, #8
0x0EA0	0x6023    STR	R3, [R4, #0]
; F end address is: 12 (R3)
0x0EA2	0xF200040C  ADDW	R4, R0, #12
0x0EA6	0x6022    STR	R2, [R4, #0]
; T end address is: 8 (R2)
0x0EA8	0xF2000518  ADDW	R5, R0, #24
; TP end address is: 0 (R0)
0x0EAC	0x2400    MOVS	R4, #0
0x0EAE	0x602C    STR	R4, [R5, #0]
0x0EB0	0xE001    B	L___Lib_dlmalloc_add_segment213
L___Lib_dlmalloc_add_segment1142:
L___Lib_dlmalloc_add_segment1141:
0x0EB2	0xE000    B	L___Lib_dlmalloc_add_segment213
L___Lib_dlmalloc_add_segment220:
; T start address is: 8 (R2)
; K start address is: 24 (R6)
; m start address is: 4 (R1)
; psize start address is: 12 (R3)
; TP start address is: 0 (R0)
; TP end address is: 0 (R0)
; psize end address is: 12 (R3)
; m end address is: 4 (R1)
; K end address is: 24 (R6)
; T end address is: 8 (R2)
0x0EB4	0xE7B1    B	L___Lib_dlmalloc_add_segment212
L___Lib_dlmalloc_add_segment213:
L___Lib_dlmalloc_add_segment209:
L___Lib_dlmalloc_add_segment203:
;__Lib_dlmalloc.c, 4110 :: 		}
L___Lib_dlmalloc_add_segment197:
;__Lib_dlmalloc.c, 4113 :: 		}
L_end_add_segment:
0x0EB6	0xF8DDE000  LDR	LR, [SP, #0]
0x0EBA	0xB007    ADD	SP, SP, #28
0x0EBC	0x4770    BX	LR
0x0EBE	0xBF00    NOP
0x0EC0	0x00080000  	#8
0x0EC4	0xFFFF0000  	#65535
; end of __Lib_dlmalloc_add_segment
_xTaskResumeAll:
;tasks.c, 2017 :: 		BaseType_t xTaskResumeAll( void )
0x32B0	0xB084    SUB	SP, SP, #16
0x32B2	0xF8CDE000  STR	LR, [SP, #0]
;tasks.c, 2019 :: 		TCB_t *pxTCB = NULL;
0x32B6	0xF04F0000  MOV	R0, #0
0x32BA	0x9002    STR	R0, [SP, #8]
;tasks.c, 2020 :: 		BaseType_t xAlreadyYielded = pdFALSE;
0x32BC	0xF04F0000  MOV	R0, #0
0x32C0	0x9003    STR	R0, [SP, #12]
;tasks.c, 2024 :: 		configASSERT( uxSchedulerSuspended );
0x32C2	0x4848    LDR	R0, [PC, #288]
0x32C4	0x6800    LDR	R0, [R0, #0]
0x32C6	0xB910    CBNZ	R0, L_xTaskResumeAll161
0x32C8	0xF000F99A  BL	tasks_vPortRaiseBASEPRI+0
L_xTaskResumeAll162:
0x32CC	0xE7FE    B	L_xTaskResumeAll162
L_xTaskResumeAll161:
;tasks.c, 2031 :: 		taskENTER_CRITICAL();
0x32CE	0xF7FDFF0F  BL	_vPortEnterCritical+0
;tasks.c, 2033 :: 		--uxSchedulerSuspended;
0x32D2	0x4844    LDR	R0, [PC, #272]
0x32D4	0x6800    LDR	R0, [R0, #0]
0x32D6	0x1E41    SUBS	R1, R0, #1
0x32D8	0x4842    LDR	R0, [PC, #264]
0x32DA	0x6001    STR	R1, [R0, #0]
;tasks.c, 2035 :: 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
0x32DC	0x4841    LDR	R0, [PC, #260]
0x32DE	0x6800    LDR	R0, [R0, #0]
0x32E0	0x2800    CMP	R0, #0
0x32E2	0xF0408078  BNE	L_xTaskResumeAll164
;tasks.c, 2037 :: 		if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
0x32E6	0x4840    LDR	R0, [PC, #256]
0x32E8	0x6800    LDR	R0, [R0, #0]
0x32EA	0x2800    CMP	R0, #0
0x32EC	0xF2408072  BLS	L_xTaskResumeAll165
;tasks.c, 2041 :: 		while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
L_xTaskResumeAll166:
0x32F0	0x483E    LDR	R0, [PC, #248]
0x32F2	0x6800    LDR	R0, [R0, #0]
0x32F4	0x2800    CMP	R0, #0
0x32F6	0xF2400000  MOVW	R0, #0
0x32FA	0xD100    BNE	L__xTaskResumeAll421
0x32FC	0x2001    MOVS	R0, #1
L__xTaskResumeAll421:
0x32FE	0x2800    CMP	R0, #0
0x3300	0xD13A    BNE	L_xTaskResumeAll167
;tasks.c, 2043 :: 		pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
0x3302	0x483B    LDR	R0, [PC, #236]
0x3304	0x6800    LDR	R0, [R0, #0]
0x3306	0x300C    ADDS	R0, #12
0x3308	0x6800    LDR	R0, [R0, #0]
0x330A	0x9002    STR	R0, [SP, #8]
;tasks.c, 2044 :: 		( void ) uxListRemove( &( pxTCB->xEventListItem ) );
0x330C	0x9802    LDR	R0, [SP, #8]
0x330E	0x3018    ADDS	R0, #24
0x3310	0xB401    PUSH	(R0)
0x3312	0xF000F933  BL	_uxListRemove+0
0x3316	0xB001    ADD	SP, SP, #4
;tasks.c, 2045 :: 		( void ) uxListRemove( &( pxTCB->xStateListItem ) );
0x3318	0x9802    LDR	R0, [SP, #8]
0x331A	0x1D00    ADDS	R0, R0, #4
0x331C	0xB401    PUSH	(R0)
0x331E	0xF000F92D  BL	_uxListRemove+0
0x3322	0xB001    ADD	SP, SP, #4
;tasks.c, 2046 :: 		prvAddTaskToReadyList( pxTCB );
0x3324	0x9802    LDR	R0, [SP, #8]
0x3326	0x302C    ADDS	R0, #44
0x3328	0x6801    LDR	R1, [R0, #0]
0x332A	0xF04F0001  MOV	R0, #1
0x332E	0xFA00F101  LSL	R1, R0, R1
0x3332	0x4830    LDR	R0, [PC, #192]
0x3334	0x6800    LDR	R0, [R0, #0]
0x3336	0xEA400101  ORR	R1, R0, R1, LSL #0
0x333A	0x482E    LDR	R0, [PC, #184]
0x333C	0x6001    STR	R1, [R0, #0]
0x333E	0x9802    LDR	R0, [SP, #8]
0x3340	0x1D00    ADDS	R0, R0, #4
0x3342	0xB401    PUSH	(R0)
0x3344	0x9803    LDR	R0, [SP, #12]
0x3346	0x302C    ADDS	R0, #44
0x3348	0x6801    LDR	R1, [R0, #0]
0x334A	0x2014    MOVS	R0, #20
0x334C	0x4341    MULS	R1, R0, R1
0x334E	0x482A    LDR	R0, [PC, #168]
0x3350	0x1840    ADDS	R0, R0, R1
0x3352	0xB401    PUSH	(R0)
0x3354	0xF000F8C8  BL	_vListInsertEnd+0
0x3358	0xB002    ADD	SP, SP, #8
;tasks.c, 2050 :: 		if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
0x335A	0x9802    LDR	R0, [SP, #8]
0x335C	0x302C    ADDS	R0, #44
0x335E	0x6801    LDR	R1, [R0, #0]
0x3360	0x4826    LDR	R0, [PC, #152]
0x3362	0x6800    LDR	R0, [R0, #0]
0x3364	0x302C    ADDS	R0, #44
0x3366	0x6800    LDR	R0, [R0, #0]
0x3368	0x4281    CMP	R1, R0
0x336A	0xD304    BCC	L_xTaskResumeAll168
;tasks.c, 2052 :: 		xYieldPending = pdTRUE;
0x336C	0xF04F0101  MOV	R1, #1
0x3370	0x4823    LDR	R0, [PC, #140]
0x3372	0x6001    STR	R1, [R0, #0]
;tasks.c, 2053 :: 		}
0x3374	0xE7FF    B	L_xTaskResumeAll169
L_xTaskResumeAll168:
;tasks.c, 2057 :: 		}
L_xTaskResumeAll169:
;tasks.c, 2058 :: 		}
0x3376	0xE7BB    B	L_xTaskResumeAll166
L_xTaskResumeAll167:
;tasks.c, 2060 :: 		if( pxTCB != NULL )
0x3378	0x9802    LDR	R0, [SP, #8]
0x337A	0xB108    CBZ	R0, L_xTaskResumeAll170
;tasks.c, 2068 :: 		prvResetNextTaskUnblockTime();
0x337C	0xF000F8DC  BL	tasks_prvResetNextTaskUnblockTime+0
;tasks.c, 2069 :: 		}
L_xTaskResumeAll170:
;tasks.c, 2076 :: 		UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
0x3380	0x4820    LDR	R0, [PC, #128]
0x3382	0x6800    LDR	R0, [R0, #0]
0x3384	0x9001    STR	R0, [SP, #4]
;tasks.c, 2078 :: 		if( uxPendedCounts > ( UBaseType_t ) 0U )
0x3386	0x9801    LDR	R0, [SP, #4]
0x3388	0x2800    CMP	R0, #0
0x338A	0xD911    BLS	L_xTaskResumeAll171
;tasks.c, 2080 :: 		do
L_xTaskResumeAll172:
;tasks.c, 2082 :: 		if( xTaskIncrementTick() != pdFALSE )
0x338C	0xF000FBAA  BL	_xTaskIncrementTick+0
0x3390	0xB120    CBZ	R0, L_xTaskResumeAll175
;tasks.c, 2084 :: 		xYieldPending = pdTRUE;
0x3392	0xF04F0101  MOV	R1, #1
0x3396	0x481A    LDR	R0, [PC, #104]
0x3398	0x6001    STR	R1, [R0, #0]
;tasks.c, 2085 :: 		}
0x339A	0xE7FF    B	L_xTaskResumeAll176
L_xTaskResumeAll175:
;tasks.c, 2089 :: 		}
L_xTaskResumeAll176:
;tasks.c, 2090 :: 		--uxPendedCounts;
0x339C	0x9801    LDR	R0, [SP, #4]
0x339E	0x1E40    SUBS	R0, R0, #1
0x33A0	0x9001    STR	R0, [SP, #4]
;tasks.c, 2091 :: 		} while( uxPendedCounts > ( UBaseType_t ) 0U );
0x33A2	0x9801    LDR	R0, [SP, #4]
0x33A4	0x2800    CMP	R0, #0
0x33A6	0xD8F1    BHI	L_xTaskResumeAll172
;tasks.c, 2093 :: 		uxPendedTicks = 0;
0x33A8	0x2100    MOVS	R1, #0
0x33AA	0x4816    LDR	R0, [PC, #88]
0x33AC	0x6001    STR	R1, [R0, #0]
;tasks.c, 2094 :: 		}
0x33AE	0xE7FF    B	L_xTaskResumeAll177
L_xTaskResumeAll171:
;tasks.c, 2098 :: 		}
L_xTaskResumeAll177:
;tasks.c, 2101 :: 		if( xYieldPending != pdFALSE )
0x33B0	0x4813    LDR	R0, [PC, #76]
0x33B2	0x6800    LDR	R0, [R0, #0]
0x33B4	0xB170    CBZ	R0, L_xTaskResumeAll178
;tasks.c, 2105 :: 		xAlreadyYielded = pdTRUE;
0x33B6	0xF04F0001  MOV	R0, #1
0x33BA	0x9003    STR	R0, [SP, #12]
;tasks.c, 2108 :: 		taskYIELD_IF_USING_PREEMPTION();
0x33BC	0x2201    MOVS	R2, #1
0x33BE	0xB252    SXTB	R2, R2
0x33C0	0x4911    LDR	R1, [PC, #68]
0x33C2	0x6808    LDR	R0, [R1, #0]
0x33C4	0xF362701C  BFI	R0, R2, BitPos(PENDSVSET_bit+0), #1
0x33C8	0x6008    STR	R0, [R1, #0]
0x33CA	0xF3BF8F4F  DSB	#15
0x33CE	0xF3BF8F6F  ISB	#15
;tasks.c, 2109 :: 		}
0x33D2	0xE7FF    B	L_xTaskResumeAll179
L_xTaskResumeAll178:
;tasks.c, 2113 :: 		}
L_xTaskResumeAll179:
;tasks.c, 2114 :: 		}
L_xTaskResumeAll165:
;tasks.c, 2115 :: 		}
0x33D4	0xE7FF    B	L_xTaskResumeAll180
L_xTaskResumeAll164:
;tasks.c, 2119 :: 		}
L_xTaskResumeAll180:
;tasks.c, 2121 :: 		taskEXIT_CRITICAL();
0x33D6	0xF7FDFEAF  BL	_vPortExitCritical+0
;tasks.c, 2123 :: 		return xAlreadyYielded;
0x33DA	0x9803    LDR	R0, [SP, #12]
;tasks.c, 2124 :: 		}
L_end_xTaskResumeAll:
0x33DC	0xF8DDE000  LDR	LR, [SP, #0]
0x33E0	0xB004    ADD	SP, SP, #16
0x33E2	0x4770    BX	LR
0x33E4	0x000C2000  	tasks_uxSchedulerSuspended+0
0x33E8	0x00342000  	tasks_uxCurrentNumberOfTasks+0
0x33EC	0x21B42000  	tasks_xPendingReadyList+0
0x33F0	0x21C02000  	tasks_xPendingReadyList+12
0x33F4	0x001C2000  	tasks_uxTopReadyPriority+0
0x33F8	0x204C2000  	tasks_pxReadyTasksLists+0
0x33FC	0x00202000  	_pxCurrentTCB+0
0x3400	0x00282000  	tasks_xYieldPending+0
0x3404	0x00242000  	tasks_uxPendedTicks+0
0x3408	0xED04E000  	PENDSVSET_bit+0
; end of _xTaskResumeAll
tasks_vPortRaiseBASEPRI:
;portmacro.h, 239 :: 		portFORCE_INLINE static void vPortRaiseBASEPRI( void )
0x3600	0xB081    SUB	SP, SP, #4
;portmacro.h, 243 :: 		ulNewBASEPRI = configMAX_SYSCALL_INTERRUPT_PRIORITY;
0x3602	0x2010    MOVS	R0, #16
0x3604	0x9000    STR	R0, [SP, #0]
;portmacro.h, 244 :: 		CPU_REG_SET(CPU_BASEPRI, ulNewBASEPRI);
0x3606	0x9800    LDR	R0, [SP, #0]
0x3608	0x4684    MOV	R12, R0
0x360A	0xF38C8811  MSR	#17, R12
;portmacro.h, 246 :: 		asm ISB;
0x360E	0xF3BF8F6F  ISB	#15
;portmacro.h, 247 :: 		asm DSB;
0x3612	0xF3BF8F4F  DSB	#15
;portmacro.h, 248 :: 		}
L_end_vPortRaiseBASEPRI:
0x3616	0xB001    ADD	SP, SP, #4
0x3618	0x4770    BX	LR
; end of tasks_vPortRaiseBASEPRI
_vPortEnterCritical:
;port.c, 388 :: 		void vPortEnterCritical()
0x10F0	0xB081    SUB	SP, SP, #4
0x10F2	0xF8CDE000  STR	LR, [SP, #0]
;port.c, 390 :: 		portDISABLE_INTERRUPTS();
0x10F6	0xF002FE0D  BL	port_vPortRaiseBASEPRI+0
;port.c, 391 :: 		uxCriticalNesting++;
0x10FA	0x480D    LDR	R0, [PC, #52]
0x10FC	0x6800    LDR	R0, [R0, #0]
0x10FE	0x1C41    ADDS	R1, R0, #1
0x1100	0x480B    LDR	R0, [PC, #44]
0x1102	0x6001    STR	R1, [R0, #0]
;port.c, 398 :: 		if(uxCriticalNesting == 1)
0x1104	0x480A    LDR	R0, [PC, #40]
0x1106	0x6800    LDR	R0, [R0, #0]
0x1108	0x2801    CMP	R0, #1
0x110A	0xD10C    BNE	L_vPortEnterCritical15
;port.c, 400 :: 		configASSERT((SCB_ICSR & portVECTACTIVE_MASK ) == 0);
0x110C	0x4809    LDR	R0, [PC, #36]
0x110E	0x6800    LDR	R0, [R0, #0]
0x1110	0xF00000FF  AND	R0, R0, #255
0x1114	0x2800    CMP	R0, #0
0x1116	0xF2400000  MOVW	R0, #0
0x111A	0xD100    BNE	L__vPortEnterCritical45
0x111C	0x2001    MOVS	R0, #1
L__vPortEnterCritical45:
0x111E	0xB910    CBNZ	R0, L_vPortEnterCritical16
0x1120	0xF002FDF8  BL	port_vPortRaiseBASEPRI+0
L_vPortEnterCritical17:
0x1124	0xE7FE    B	L_vPortEnterCritical17
L_vPortEnterCritical16:
;port.c, 401 :: 		}
L_vPortEnterCritical15:
;port.c, 402 :: 		}
L_end_vPortEnterCritical:
0x1126	0xF8DDE000  LDR	LR, [SP, #0]
0x112A	0xB001    ADD	SP, SP, #4
0x112C	0x4770    BX	LR
0x112E	0xBF00    NOP
0x1130	0x00002000  	port_uxCriticalNesting+0
0x1134	0xED04E000  	SCB_ICSR+0
; end of _vPortEnterCritical
port_vPortRaiseBASEPRI:
;portmacro.h, 239 :: 		portFORCE_INLINE static void vPortRaiseBASEPRI( void )
0x3D14	0xB081    SUB	SP, SP, #4
;portmacro.h, 243 :: 		ulNewBASEPRI = configMAX_SYSCALL_INTERRUPT_PRIORITY;
0x3D16	0x2010    MOVS	R0, #16
0x3D18	0x9000    STR	R0, [SP, #0]
;portmacro.h, 244 :: 		CPU_REG_SET(CPU_BASEPRI, ulNewBASEPRI);
0x3D1A	0x9800    LDR	R0, [SP, #0]
0x3D1C	0x4684    MOV	R12, R0
0x3D1E	0xF38C8811  MSR	#17, R12
;portmacro.h, 246 :: 		asm ISB;
0x3D22	0xF3BF8F6F  ISB	#15
;portmacro.h, 247 :: 		asm DSB;
0x3D26	0xF3BF8F4F  DSB	#15
;portmacro.h, 248 :: 		}
L_end_vPortRaiseBASEPRI:
0x3D2A	0xB001    ADD	SP, SP, #4
0x3D2C	0x4770    BX	LR
; end of port_vPortRaiseBASEPRI
_uxListRemove:
;list.c, 216 :: 		UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
0x357C	0xB081    SUB	SP, SP, #4
;list.c, 220 :: 		List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
0x357E	0x9801    LDR	R0, [SP, #4]
0x3580	0x3010    ADDS	R0, #16
0x3582	0x6800    LDR	R0, [R0, #0]
0x3584	0x9000    STR	R0, [SP, #0]
;list.c, 222 :: 		pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
0x3586	0x9801    LDR	R0, [SP, #4]
0x3588	0x1D00    ADDS	R0, R0, #4
0x358A	0x6800    LDR	R0, [R0, #0]
0x358C	0xF2000108  ADDW	R1, R0, #8
0x3590	0x9801    LDR	R0, [SP, #4]
0x3592	0x3008    ADDS	R0, #8
0x3594	0x6800    LDR	R0, [R0, #0]
0x3596	0x6008    STR	R0, [R1, #0]
;list.c, 223 :: 		pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
0x3598	0x9801    LDR	R0, [SP, #4]
0x359A	0x3008    ADDS	R0, #8
0x359C	0x6800    LDR	R0, [R0, #0]
0x359E	0x1D01    ADDS	R1, R0, #4
0x35A0	0x9801    LDR	R0, [SP, #4]
0x35A2	0x1D00    ADDS	R0, R0, #4
0x35A4	0x6800    LDR	R0, [R0, #0]
0x35A6	0x6008    STR	R0, [R1, #0]
;list.c, 229 :: 		if( pxList->pxIndex == pxItemToRemove )
0x35A8	0x9800    LDR	R0, [SP, #0]
0x35AA	0x1D00    ADDS	R0, R0, #4
0x35AC	0x6801    LDR	R1, [R0, #0]
0x35AE	0x9801    LDR	R0, [SP, #4]
0x35B0	0x4281    CMP	R1, R0
0x35B2	0xD106    BNE	L_uxListRemove7
;list.c, 231 :: 		pxList->pxIndex = pxItemToRemove->pxPrevious;
0x35B4	0x9800    LDR	R0, [SP, #0]
0x35B6	0x1D01    ADDS	R1, R0, #4
0x35B8	0x9801    LDR	R0, [SP, #4]
0x35BA	0x3008    ADDS	R0, #8
0x35BC	0x6800    LDR	R0, [R0, #0]
0x35BE	0x6008    STR	R0, [R1, #0]
;list.c, 232 :: 		}
0x35C0	0xE7FF    B	L_uxListRemove8
L_uxListRemove7:
;list.c, 236 :: 		}
L_uxListRemove8:
;list.c, 238 :: 		pxItemToRemove->pvContainer = NULL;
0x35C2	0x9801    LDR	R0, [SP, #4]
0x35C4	0xF2000110  ADDW	R1, R0, #16
0x35C8	0x2000    MOVS	R0, #0
0x35CA	0x6008    STR	R0, [R1, #0]
;list.c, 239 :: 		( pxList->uxNumberOfItems )--;
0x35CC	0x9800    LDR	R0, [SP, #0]
0x35CE	0x4601    MOV	R1, R0
0x35D0	0x6808    LDR	R0, [R1, #0]
0x35D2	0x1E40    SUBS	R0, R0, #1
0x35D4	0x6008    STR	R0, [R1, #0]
;list.c, 241 :: 		return pxList->uxNumberOfItems;
0x35D6	0x9800    LDR	R0, [SP, #0]
0x35D8	0x6800    LDR	R0, [R0, #0]
;list.c, 242 :: 		}
L_end_uxListRemove:
0x35DA	0xB001    ADD	SP, SP, #4
0x35DC	0x4770    BX	LR
; end of _uxListRemove
_vListInsertEnd:
;list.c, 116 :: 		void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
0x34E8	0xB081    SUB	SP, SP, #4
;list.c, 118 :: 		ListItem_t * const pxIndex = pxList->pxIndex;
0x34EA	0x9801    LDR	R0, [SP, #4]
0x34EC	0x1D00    ADDS	R0, R0, #4
0x34EE	0x6800    LDR	R0, [R0, #0]
0x34F0	0x9000    STR	R0, [SP, #0]
;list.c, 129 :: 		pxNewListItem->pxNext = pxIndex;
0x34F2	0x9802    LDR	R0, [SP, #8]
0x34F4	0x1D01    ADDS	R1, R0, #4
0x34F6	0x9800    LDR	R0, [SP, #0]
0x34F8	0x6008    STR	R0, [R1, #0]
;list.c, 130 :: 		pxNewListItem->pxPrevious = pxIndex->pxPrevious;
0x34FA	0x9802    LDR	R0, [SP, #8]
0x34FC	0xF2000108  ADDW	R1, R0, #8
0x3500	0x9800    LDR	R0, [SP, #0]
0x3502	0x3008    ADDS	R0, #8
0x3504	0x6800    LDR	R0, [R0, #0]
0x3506	0x6008    STR	R0, [R1, #0]
;list.c, 135 :: 		pxIndex->pxPrevious->pxNext = pxNewListItem;
0x3508	0x9800    LDR	R0, [SP, #0]
0x350A	0x3008    ADDS	R0, #8
0x350C	0x6800    LDR	R0, [R0, #0]
0x350E	0x1D01    ADDS	R1, R0, #4
0x3510	0x9802    LDR	R0, [SP, #8]
0x3512	0x6008    STR	R0, [R1, #0]
;list.c, 136 :: 		pxIndex->pxPrevious = pxNewListItem;
0x3514	0x9800    LDR	R0, [SP, #0]
0x3516	0xF2000108  ADDW	R1, R0, #8
0x351A	0x9802    LDR	R0, [SP, #8]
0x351C	0x6008    STR	R0, [R1, #0]
;list.c, 139 :: 		pxNewListItem->pvContainer = ( void * ) pxList;
0x351E	0x9802    LDR	R0, [SP, #8]
0x3520	0xF2000110  ADDW	R1, R0, #16
0x3524	0x9801    LDR	R0, [SP, #4]
0x3526	0x6008    STR	R0, [R1, #0]
;list.c, 141 :: 		( pxList->uxNumberOfItems )++;
0x3528	0x9801    LDR	R0, [SP, #4]
0x352A	0x4601    MOV	R1, R0
0x352C	0x6808    LDR	R0, [R1, #0]
0x352E	0x1C40    ADDS	R0, R0, #1
0x3530	0x6008    STR	R0, [R1, #0]
;list.c, 142 :: 		}
L_end_vListInsertEnd:
0x3532	0xB001    ADD	SP, SP, #4
0x3534	0x4770    BX	LR
; end of _vListInsertEnd
tasks_prvResetNextTaskUnblockTime:
;tasks.c, 3635 :: 		static void prvResetNextTaskUnblockTime( void )
0x3538	0xB081    SUB	SP, SP, #4
;tasks.c, 3639 :: 		if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
0x353A	0x480E    LDR	R0, [PC, #56]
0x353C	0x6800    LDR	R0, [R0, #0]
0x353E	0x6800    LDR	R0, [R0, #0]
0x3540	0x2800    CMP	R0, #0
0x3542	0xF2400000  MOVW	R0, #0
0x3546	0xD100    BNE	L_tasks_prvResetNextTaskUnblockTime446
0x3548	0x2001    MOVS	R0, #1
L_tasks_prvResetNextTaskUnblockTime446:
0x354A	0xB120    CBZ	R0, L_tasks_prvResetNextTaskUnblockTime268
;tasks.c, 3645 :: 		xNextTaskUnblockTime = portMAX_DELAY;
0x354C	0xF04F31FF  MOV	R1, #-1
0x3550	0x4809    LDR	R0, [PC, #36]
0x3552	0x6001    STR	R1, [R0, #0]
;tasks.c, 3646 :: 		}
0x3554	0xE00C    B	L_tasks_prvResetNextTaskUnblockTime269
L_tasks_prvResetNextTaskUnblockTime268:
;tasks.c, 3653 :: 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
0x3556	0x4807    LDR	R0, [PC, #28]
0x3558	0x6800    LDR	R0, [R0, #0]
0x355A	0x3008    ADDS	R0, #8
0x355C	0x1D00    ADDS	R0, R0, #4
0x355E	0x6800    LDR	R0, [R0, #0]
0x3560	0x300C    ADDS	R0, #12
0x3562	0x6800    LDR	R0, [R0, #0]
0x3564	0x9000    STR	R0, [SP, #0]
;tasks.c, 3654 :: 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
0x3566	0x9800    LDR	R0, [SP, #0]
0x3568	0x1D00    ADDS	R0, R0, #4
0x356A	0x6801    LDR	R1, [R0, #0]
0x356C	0x4802    LDR	R0, [PC, #8]
0x356E	0x6001    STR	R1, [R0, #0]
;tasks.c, 3655 :: 		}
L_tasks_prvResetNextTaskUnblockTime269:
;tasks.c, 3656 :: 		}
L_end_prvResetNextTaskUnblockTime:
0x3570	0xB001    ADD	SP, SP, #4
0x3572	0x4770    BX	LR
0x3574	0x20442000  	tasks_pxDelayedTaskList+0
0x3578	0x00182000  	tasks_xNextTaskUnblockTime+0
; end of tasks_prvResetNextTaskUnblockTime
_xTaskIncrementTick:
;tasks.c, 2499 :: 		BaseType_t xTaskIncrementTick( void )
0x3AE4	0xB086    SUB	SP, SP, #24
0x3AE6	0xF8CDE000  STR	LR, [SP, #0]
;tasks.c, 2503 :: 		BaseType_t xSwitchRequired = pdFALSE;
0x3AEA	0xF04F0000  MOV	R0, #0
0x3AEE	0x9005    STR	R0, [SP, #20]
;tasks.c, 2509 :: 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
0x3AF0	0x4857    LDR	R0, [PC, #348]
0x3AF2	0x6800    LDR	R0, [R0, #0]
0x3AF4	0x2800    CMP	R0, #0
0x3AF6	0xF040809A  BNE	L_xTaskIncrementTick186
;tasks.c, 2513 :: 		const TickType_t xConstTickCount = xTickCount + 1;
0x3AFA	0x4856    LDR	R0, [PC, #344]
0x3AFC	0x6800    LDR	R0, [R0, #0]
0x3AFE	0x1C40    ADDS	R0, R0, #1
0x3B00	0x9002    STR	R0, [SP, #8]
;tasks.c, 2517 :: 		xTickCount = xConstTickCount;
0x3B02	0x9902    LDR	R1, [SP, #8]
0x3B04	0x4853    LDR	R0, [PC, #332]
0x3B06	0x6001    STR	R1, [R0, #0]
;tasks.c, 2519 :: 		if( xConstTickCount == ( TickType_t ) 0U )
0x3B08	0x9802    LDR	R0, [SP, #8]
0x3B0A	0xB9E8    CBNZ	R0, L_xTaskIncrementTick187
;tasks.c, 2521 :: 		taskSWITCH_DELAYED_LISTS();
0x3B0C	0x4852    LDR	R0, [PC, #328]
0x3B0E	0x6800    LDR	R0, [R0, #0]
0x3B10	0x6800    LDR	R0, [R0, #0]
0x3B12	0x2800    CMP	R0, #0
0x3B14	0xF2400000  MOVW	R0, #0
0x3B18	0xD100    BNE	L__xTaskIncrementTick427
0x3B1A	0x2001    MOVS	R0, #1
L__xTaskIncrementTick427:
0x3B1C	0xB910    CBNZ	R0, L_xTaskIncrementTick188
0x3B1E	0xF7FFFD6F  BL	tasks_vPortRaiseBASEPRI+0
L_xTaskIncrementTick189:
0x3B22	0xE7FE    B	L_xTaskIncrementTick189
L_xTaskIncrementTick188:
0x3B24	0x484C    LDR	R0, [PC, #304]
0x3B26	0x6800    LDR	R0, [R0, #0]
0x3B28	0x9001    STR	R0, [SP, #4]
0x3B2A	0x484C    LDR	R0, [PC, #304]
0x3B2C	0x6801    LDR	R1, [R0, #0]
0x3B2E	0x484A    LDR	R0, [PC, #296]
0x3B30	0x6001    STR	R1, [R0, #0]
0x3B32	0x9901    LDR	R1, [SP, #4]
0x3B34	0x4849    LDR	R0, [PC, #292]
0x3B36	0x6001    STR	R1, [R0, #0]
0x3B38	0x4849    LDR	R0, [PC, #292]
0x3B3A	0x6800    LDR	R0, [R0, #0]
0x3B3C	0x1C41    ADDS	R1, R0, #1
0x3B3E	0x4848    LDR	R0, [PC, #288]
0x3B40	0x6001    STR	R1, [R0, #0]
0x3B42	0xF7FFFCF9  BL	tasks_prvResetNextTaskUnblockTime+0
;tasks.c, 2522 :: 		}
0x3B46	0xE7FF    B	L_xTaskIncrementTick191
L_xTaskIncrementTick187:
;tasks.c, 2526 :: 		}
L_xTaskIncrementTick191:
;tasks.c, 2532 :: 		if( xConstTickCount >= xNextTaskUnblockTime )
0x3B48	0x4846    LDR	R0, [PC, #280]
0x3B4A	0x6801    LDR	R1, [R0, #0]
0x3B4C	0x9802    LDR	R0, [SP, #8]
0x3B4E	0x4288    CMP	R0, R1
0x3B50	0xF0C0805D  BCC	L_xTaskIncrementTick192
;tasks.c, 2534 :: 		for( ;; )
L_xTaskIncrementTick193:
;tasks.c, 2536 :: 		if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
0x3B54	0x4840    LDR	R0, [PC, #256]
0x3B56	0x6800    LDR	R0, [R0, #0]
0x3B58	0x6800    LDR	R0, [R0, #0]
0x3B5A	0x2800    CMP	R0, #0
0x3B5C	0xF2400000  MOVW	R0, #0
0x3B60	0xD100    BNE	L__xTaskIncrementTick428
0x3B62	0x2001    MOVS	R0, #1
L__xTaskIncrementTick428:
0x3B64	0xB120    CBZ	R0, L_xTaskIncrementTick196
;tasks.c, 2543 :: 		xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
0x3B66	0xF04F31FF  MOV	R1, #-1
0x3B6A	0x483E    LDR	R0, [PC, #248]
0x3B6C	0x6001    STR	R1, [R0, #0]
;tasks.c, 2544 :: 		break;
0x3B6E	0xE04E    B	L_xTaskIncrementTick194
;tasks.c, 2545 :: 		}
L_xTaskIncrementTick196:
;tasks.c, 2552 :: 		pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
0x3B70	0x4839    LDR	R0, [PC, #228]
0x3B72	0x6800    LDR	R0, [R0, #0]
0x3B74	0x3008    ADDS	R0, #8
0x3B76	0x1D00    ADDS	R0, R0, #4
0x3B78	0x6800    LDR	R0, [R0, #0]
0x3B7A	0x300C    ADDS	R0, #12
0x3B7C	0x6800    LDR	R0, [R0, #0]
0x3B7E	0x9003    STR	R0, [SP, #12]
;tasks.c, 2553 :: 		xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
0x3B80	0x9803    LDR	R0, [SP, #12]
0x3B82	0x1D00    ADDS	R0, R0, #4
0x3B84	0x6800    LDR	R0, [R0, #0]
0x3B86	0x9004    STR	R0, [SP, #16]
;tasks.c, 2555 :: 		if( xConstTickCount < xItemValue )
0x3B88	0x9904    LDR	R1, [SP, #16]
0x3B8A	0x9802    LDR	R0, [SP, #8]
0x3B8C	0x4288    CMP	R0, R1
0x3B8E	0xD203    BCS	L_xTaskIncrementTick198
;tasks.c, 2562 :: 		xNextTaskUnblockTime = xItemValue;
0x3B90	0x9904    LDR	R1, [SP, #16]
0x3B92	0x4834    LDR	R0, [PC, #208]
0x3B94	0x6001    STR	R1, [R0, #0]
;tasks.c, 2563 :: 		break;
0x3B96	0xE03A    B	L_xTaskIncrementTick194
;tasks.c, 2564 :: 		}
L_xTaskIncrementTick198:
;tasks.c, 2571 :: 		( void ) uxListRemove( &( pxTCB->xStateListItem ) );
0x3B98	0x9803    LDR	R0, [SP, #12]
0x3B9A	0x1D00    ADDS	R0, R0, #4
0x3B9C	0xB401    PUSH	(R0)
0x3B9E	0xF7FFFCED  BL	_uxListRemove+0
0x3BA2	0xB001    ADD	SP, SP, #4
;tasks.c, 2575 :: 		if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
0x3BA4	0x9803    LDR	R0, [SP, #12]
0x3BA6	0x3018    ADDS	R0, #24
0x3BA8	0x3010    ADDS	R0, #16
0x3BAA	0x6800    LDR	R0, [R0, #0]
0x3BAC	0xB130    CBZ	R0, L_xTaskIncrementTick200
;tasks.c, 2577 :: 		( void ) uxListRemove( &( pxTCB->xEventListItem ) );
0x3BAE	0x9803    LDR	R0, [SP, #12]
0x3BB0	0x3018    ADDS	R0, #24
0x3BB2	0xB401    PUSH	(R0)
0x3BB4	0xF7FFFCE2  BL	_uxListRemove+0
0x3BB8	0xB001    ADD	SP, SP, #4
;tasks.c, 2578 :: 		}
0x3BBA	0xE7FF    B	L_xTaskIncrementTick201
L_xTaskIncrementTick200:
;tasks.c, 2582 :: 		}
L_xTaskIncrementTick201:
;tasks.c, 2586 :: 		prvAddTaskToReadyList( pxTCB );
0x3BBC	0x9803    LDR	R0, [SP, #12]
0x3BBE	0x302C    ADDS	R0, #44
0x3BC0	0x6801    LDR	R1, [R0, #0]
0x3BC2	0xF04F0001  MOV	R0, #1
0x3BC6	0xFA00F101  LSL	R1, R0, R1
0x3BCA	0x4827    LDR	R0, [PC, #156]
0x3BCC	0x6800    LDR	R0, [R0, #0]
0x3BCE	0xEA400101  ORR	R1, R0, R1, LSL #0
0x3BD2	0x4825    LDR	R0, [PC, #148]
0x3BD4	0x6001    STR	R1, [R0, #0]
0x3BD6	0x9803    LDR	R0, [SP, #12]
0x3BD8	0x1D00    ADDS	R0, R0, #4
0x3BDA	0xB401    PUSH	(R0)
0x3BDC	0x9804    LDR	R0, [SP, #16]
0x3BDE	0x302C    ADDS	R0, #44
0x3BE0	0x6801    LDR	R1, [R0, #0]
0x3BE2	0x2014    MOVS	R0, #20
0x3BE4	0x4341    MULS	R1, R0, R1
0x3BE6	0x4821    LDR	R0, [PC, #132]
0x3BE8	0x1840    ADDS	R0, R0, R1
0x3BEA	0xB401    PUSH	(R0)
0x3BEC	0xF7FFFC7C  BL	_vListInsertEnd+0
0x3BF0	0xB002    ADD	SP, SP, #8
;tasks.c, 2596 :: 		if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
0x3BF2	0x9803    LDR	R0, [SP, #12]
0x3BF4	0x302C    ADDS	R0, #44
0x3BF6	0x6801    LDR	R1, [R0, #0]
0x3BF8	0x481D    LDR	R0, [PC, #116]
0x3BFA	0x6800    LDR	R0, [R0, #0]
0x3BFC	0x302C    ADDS	R0, #44
0x3BFE	0x6800    LDR	R0, [R0, #0]
0x3C00	0x4281    CMP	R1, R0
0x3C02	0xD303    BCC	L_xTaskIncrementTick202
;tasks.c, 2598 :: 		xSwitchRequired = pdTRUE;
0x3C04	0xF04F0001  MOV	R0, #1
0x3C08	0x9005    STR	R0, [SP, #20]
;tasks.c, 2599 :: 		}
0x3C0A	0xE7FF    B	L_xTaskIncrementTick203
L_xTaskIncrementTick202:
;tasks.c, 2603 :: 		}
L_xTaskIncrementTick203:
;tasks.c, 2607 :: 		}
0x3C0C	0xE7A2    B	L_xTaskIncrementTick193
L_xTaskIncrementTick194:
;tasks.c, 2608 :: 		}
L_xTaskIncrementTick192:
;tasks.c, 2615 :: 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
0x3C0E	0x4818    LDR	R0, [PC, #96]
0x3C10	0x6800    LDR	R0, [R0, #0]
0x3C12	0x302C    ADDS	R0, #44
0x3C14	0x6801    LDR	R1, [R0, #0]
0x3C16	0x2014    MOVS	R0, #20
0x3C18	0x4341    MULS	R1, R0, R1
0x3C1A	0x4814    LDR	R0, [PC, #80]
0x3C1C	0x1840    ADDS	R0, R0, R1
0x3C1E	0x6800    LDR	R0, [R0, #0]
0x3C20	0x2801    CMP	R0, #1
0x3C22	0xD903    BLS	L_xTaskIncrementTick204
;tasks.c, 2617 :: 		xSwitchRequired = pdTRUE;
0x3C24	0xF04F0001  MOV	R0, #1
0x3C28	0x9005    STR	R0, [SP, #20]
;tasks.c, 2618 :: 		}
0x3C2A	0xE7FF    B	L_xTaskIncrementTick205
L_xTaskIncrementTick204:
;tasks.c, 2622 :: 		}
L_xTaskIncrementTick205:
;tasks.c, 2640 :: 		}
0x3C2C	0xE004    B	L_xTaskIncrementTick206
L_xTaskIncrementTick186:
;tasks.c, 2643 :: 		++uxPendedTicks;
0x3C2E	0x4811    LDR	R0, [PC, #68]
0x3C30	0x6800    LDR	R0, [R0, #0]
0x3C32	0x1C41    ADDS	R1, R0, #1
0x3C34	0x480F    LDR	R0, [PC, #60]
0x3C36	0x6001    STR	R1, [R0, #0]
;tasks.c, 2652 :: 		}
L_xTaskIncrementTick206:
;tasks.c, 2656 :: 		if( xYieldPending != pdFALSE )
0x3C38	0x480F    LDR	R0, [PC, #60]
0x3C3A	0x6800    LDR	R0, [R0, #0]
0x3C3C	0xB118    CBZ	R0, L_xTaskIncrementTick207
;tasks.c, 2658 :: 		xSwitchRequired = pdTRUE;
0x3C3E	0xF04F0001  MOV	R0, #1
0x3C42	0x9005    STR	R0, [SP, #20]
;tasks.c, 2659 :: 		}
0x3C44	0xE7FF    B	L_xTaskIncrementTick208
L_xTaskIncrementTick207:
;tasks.c, 2663 :: 		}
L_xTaskIncrementTick208:
;tasks.c, 2667 :: 		return xSwitchRequired;
0x3C46	0x9805    LDR	R0, [SP, #20]
;tasks.c, 2668 :: 		}
L_end_xTaskIncrementTick:
0x3C48	0xF8DDE000  LDR	LR, [SP, #0]
0x3C4C	0xB006    ADD	SP, SP, #24
0x3C4E	0x4770    BX	LR
0x3C50	0x000C2000  	tasks_uxSchedulerSuspended+0
0x3C54	0x00102000  	tasks_xTickCount+0
0x3C58	0x20442000  	tasks_pxDelayedTaskList+0
0x3C5C	0x20482000  	tasks_pxOverflowDelayedTaskList+0
0x3C60	0x00142000  	tasks_xNumOfOverflows+0
0x3C64	0x00182000  	tasks_xNextTaskUnblockTime+0
0x3C68	0x001C2000  	tasks_uxTopReadyPriority+0
0x3C6C	0x204C2000  	tasks_pxReadyTasksLists+0
0x3C70	0x00202000  	_pxCurrentTCB+0
0x3C74	0x00242000  	tasks_uxPendedTicks+0
0x3C78	0x00282000  	tasks_xYieldPending+0
; end of _xTaskIncrementTick
_vPortExitCritical:
;port.c, 405 :: 		void vPortExitCritical()
0x1138	0xB081    SUB	SP, SP, #4
0x113A	0xF8CDE000  STR	LR, [SP, #0]
;port.c, 407 :: 		configASSERT(uxCriticalNesting);
0x113E	0x480B    LDR	R0, [PC, #44]
0x1140	0x6800    LDR	R0, [R0, #0]
0x1142	0xB910    CBNZ	R0, L_vPortExitCritical19
0x1144	0xF002FDE6  BL	port_vPortRaiseBASEPRI+0
L_vPortExitCritical20:
0x1148	0xE7FE    B	L_vPortExitCritical20
L_vPortExitCritical19:
;port.c, 408 :: 		uxCriticalNesting--;
0x114A	0x4808    LDR	R0, [PC, #32]
0x114C	0x6800    LDR	R0, [R0, #0]
0x114E	0x1E41    SUBS	R1, R0, #1
0x1150	0x4806    LDR	R0, [PC, #24]
0x1152	0x6001    STR	R1, [R0, #0]
;port.c, 409 :: 		if(uxCriticalNesting == 0)
0x1154	0x4805    LDR	R0, [PC, #20]
0x1156	0x6800    LDR	R0, [R0, #0]
0x1158	0xB920    CBNZ	R0, L_vPortExitCritical22
;port.c, 411 :: 		portENABLE_INTERRUPTS();
0x115A	0x2000    MOVS	R0, #0
0x115C	0xB401    PUSH	(R0)
0x115E	0xF002FD8D  BL	port_vPortSetBASEPRI+0
0x1162	0xB001    ADD	SP, SP, #4
;port.c, 412 :: 		}
L_vPortExitCritical22:
;port.c, 413 :: 		}
L_end_vPortExitCritical:
0x1164	0xF8DDE000  LDR	LR, [SP, #0]
0x1168	0xB001    ADD	SP, SP, #4
0x116A	0x4770    BX	LR
0x116C	0x00002000  	port_uxCriticalNesting+0
; end of _vPortExitCritical
port_vPortSetBASEPRI:
;portmacro.h, 268 :: 		portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
;portmacro.h, 270 :: 		CPU_REG_SET(CPU_BASEPRI, ulNewMaskValue);
0x3C7C	0x9800    LDR	R0, [SP, #0]
0x3C7E	0x4684    MOV	R12, R0
0x3C80	0xF38C8811  MSR	#17, R12
;portmacro.h, 271 :: 		}
L_end_vPortSetBASEPRI:
0x3C84	0x4770    BX	LR
; end of port_vPortSetBASEPRI
_vPortFree:
;heap_3.c, 127 :: 		void vPortFree( void *pv )
0x38EC	0xB081    SUB	SP, SP, #4
0x38EE	0xF8CDE000  STR	LR, [SP, #0]
;heap_3.c, 129 :: 		if( pv )
0x38F2	0x9801    LDR	R0, [SP, #4]
0x38F4	0xB130    CBZ	R0, L_vPortFree2
;heap_3.c, 131 :: 		vTaskSuspendAll();
0x38F6	0xF7FFFB1B  BL	_vTaskSuspendAll+0
;heap_3.c, 133 :: 		free( pv );
0x38FA	0x9801    LDR	R0, [SP, #4]
0x38FC	0xF7FEFF3C  BL	_free+0
;heap_3.c, 136 :: 		( void ) xTaskResumeAll();
0x3900	0xF7FFFCD6  BL	_xTaskResumeAll+0
;heap_3.c, 137 :: 		}
L_vPortFree2:
;heap_3.c, 138 :: 		}
L_end_vPortFree:
0x3904	0xF8DDE000  LDR	LR, [SP, #0]
0x3908	0xB001    ADD	SP, SP, #4
0x390A	0x4770    BX	LR
; end of _vPortFree
_free:
;__Lib_dlmalloc.c, 4763 :: 		void dlfree(void* mem) {
; mem start address is: 0 (R0)
0x2778	0xB085    SUB	SP, SP, #20
0x277A	0xF8CDE000  STR	LR, [SP, #0]
; mem end address is: 0 (R0)
; mem start address is: 0 (R0)
;__Lib_dlmalloc.c, 4770 :: 		if (mem != 0) {
0x277E	0x2800    CMP	R0, #0
0x2780	0xF00083CB  BEQ	L_free738
;__Lib_dlmalloc.c, 4771 :: 		mchunkptr p  = mem2chunk(mem);
0x2784	0xF2A00208  SUBW	R2, R0, #8
; mem end address is: 0 (R0)
; p start address is: 12 (R3)
0x2788	0x4613    MOV	R3, R2
;__Lib_dlmalloc.c, 4783 :: 		if (RTCHECK(ok_address(fm, p) && ok_inuse(p))) {
0x278A	0x49D6    LDR	R1, [PC, #856]
0x278C	0x6809    LDR	R1, [R1, #0]
0x278E	0x428A    CMP	R2, R1
0x2790	0xF0C083C3  BCC	L__free1391
0x2794	0x1D19    ADDS	R1, R3, #4
0x2796	0x6809    LDR	R1, [R1, #0]
0x2798	0xF0010103  AND	R1, R1, #3
0x279C	0x2901    CMP	R1, #1
0x279E	0xF00083BC  BEQ	L__free1390
L__free1359:
;__Lib_dlmalloc.c, 4784 :: 		size_t psize = chunksize(p);
0x27A2	0x1D19    ADDS	R1, R3, #4
0x27A4	0x680A    LDR	R2, [R1, #0]
0x27A6	0xF06F0107  MVN	R1, #7
0x27AA	0xEA020101  AND	R1, R2, R1, LSL #0
; psize start address is: 28 (R7)
0x27AE	0x460F    MOV	R7, R1
;__Lib_dlmalloc.c, 4785 :: 		mchunkptr next = chunk_plus_offset(p, psize);
0x27B0	0x1858    ADDS	R0, R3, R1
; next start address is: 0 (R0)
;__Lib_dlmalloc.c, 4786 :: 		if (!pinuse(p)) {
0x27B2	0xF0020101  AND	R1, R2, #1
0x27B6	0x2900    CMP	R1, #0
0x27B8	0xF0408133  BNE	L__free1393
;__Lib_dlmalloc.c, 4787 :: 		size_t prevsize = p->prev_foot;
0x27BC	0x6819    LDR	R1, [R3, #0]
; prevsize start address is: 24 (R6)
0x27BE	0x460E    MOV	R6, R1
;__Lib_dlmalloc.c, 4788 :: 		if (is_mmapped(p)) {
0x27C0	0x1D19    ADDS	R1, R3, #4
0x27C2	0x6809    LDR	R1, [R1, #0]
0x27C4	0xF0010103  AND	R1, R1, #3
0x27C8	0xB909    CBNZ	R1, L_free744
; p end address is: 12 (R3)
; prevsize end address is: 24 (R6)
; next end address is: 0 (R0)
; psize end address is: 28 (R7)
;__Lib_dlmalloc.c, 4791 :: 		fm->footprint -= psize;
L_free745:
;__Lib_dlmalloc.c, 4792 :: 		goto postaction;
0x27CA	0xF000BBA6  B	___free_postaction
;__Lib_dlmalloc.c, 4793 :: 		}
L_free744:
;__Lib_dlmalloc.c, 4795 :: 		mchunkptr prev = chunk_minus_offset(p, prevsize);
; psize start address is: 28 (R7)
; next start address is: 0 (R0)
; prevsize start address is: 24 (R6)
; p start address is: 12 (R3)
0x27CE	0x1B9A    SUB	R2, R3, R6
; p end address is: 12 (R3)
;__Lib_dlmalloc.c, 4796 :: 		psize += prevsize;
0x27D0	0x19BC    ADDS	R4, R7, R6
; psize end address is: 28 (R7)
; psize start address is: 16 (R4)
;__Lib_dlmalloc.c, 4797 :: 		p = prev;
; p start address is: 20 (R5)
0x27D2	0x4615    MOV	R5, R2
;__Lib_dlmalloc.c, 4798 :: 		if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
0x27D4	0x49C3    LDR	R1, [PC, #780]
0x27D6	0x6809    LDR	R1, [R1, #0]
0x27D8	0x428A    CMP	R2, R1
0x27DA	0xF0C0811F  BCC	L_free747
;__Lib_dlmalloc.c, 4799 :: 		if (p != fm->dv) {
0x27DE	0x49C2    LDR	R1, [PC, #776]
0x27E0	0x6809    LDR	R1, [R1, #0]
0x27E2	0x428D    CMP	R5, R1
0x27E4	0xF0008100  BEQ	L_free748
;__Lib_dlmalloc.c, 4800 :: 		unlink_chunk(fm, p, prevsize);
0x27E8	0x08F1    LSRS	R1, R6, #3
0x27EA	0x2920    CMP	R1, #32
0x27EC	0xD242    BCS	L_free749
0x27EE	0xF2050108  ADDW	R1, R5, #8
0x27F2	0x680B    LDR	R3, [R1, #0]
; F start address is: 28 (R7)
0x27F4	0x461F    MOV	R7, R3
0x27F6	0xF205010C  ADDW	R1, R5, #12
0x27FA	0x6809    LDR	R1, [R1, #0]
; B start address is: 32 (R8)
0x27FC	0x4688    MOV	R8, R1
0x27FE	0x08F1    LSRS	R1, R6, #3
; prevsize end address is: 24 (R6)
; I start address is: 24 (R6)
0x2800	0x460E    MOV	R6, R1
0x2802	0x0049    LSLS	R1, R1, #1
0x2804	0x008A    LSLS	R2, R1, #2
0x2806	0x49B9    LDR	R1, [PC, #740]
0x2808	0x1889    ADDS	R1, R1, R2
0x280A	0x428B    CMP	R3, R1
0x280C	0xD00A    BEQ	L__free1362
0x280E	0x49B5    LDR	R1, [PC, #724]
0x2810	0x6809    LDR	R1, [R1, #0]
0x2812	0x428F    CMP	R7, R1
0x2814	0xD305    BCC	L__free1361
0x2816	0xF207010C  ADDW	R1, R7, #12
0x281A	0x6809    LDR	R1, [R1, #0]
0x281C	0x42A9    CMP	R1, R5
0x281E	0xD100    BNE	L__free1360
0x2820	0xE000    B	L__free1357
; F end address is: 28 (R7)
; B end address is: 32 (R8)
; I end address is: 24 (R6)
L__free1361:
L__free1360:
0x2822	0xE024    B	L_free754
L__free1357:
; I start address is: 24 (R6)
; B start address is: 32 (R8)
; F start address is: 28 (R7)
L__free1362:
0x2824	0x45B8    CMP	R8, R7
0x2826	0xD108    BNE	L_free755
; F end address is: 28 (R7)
; B end address is: 32 (R8)
0x2828	0xF04F0101  MOV	R1, #1
0x282C	0x40B1    LSLS	R1, R6
; I end address is: 24 (R6)
0x282E	0x43CB    MVN	R3, R1
0x2830	0x4AAF    LDR	R2, [PC, #700]
0x2832	0x6811    LDR	R1, [R2, #0]
0x2834	0x4019    ANDS	R1, R3
0x2836	0x6011    STR	R1, [R2, #0]
0x2838	0xE018    B	L_free756
L_free755:
; I start address is: 24 (R6)
; B start address is: 32 (R8)
; F start address is: 28 (R7)
0x283A	0x0071    LSLS	R1, R6, #1
; I end address is: 24 (R6)
0x283C	0x008A    LSLS	R2, R1, #2
0x283E	0x49AB    LDR	R1, [PC, #684]
0x2840	0x1889    ADDS	R1, R1, R2
0x2842	0x4588    CMP	R8, R1
0x2844	0xD00A    BEQ	L__free1365
0x2846	0x49A7    LDR	R1, [PC, #668]
0x2848	0x6809    LDR	R1, [R1, #0]
0x284A	0x4588    CMP	R8, R1
0x284C	0xD305    BCC	L__free1364
0x284E	0xF1080108  ADD	R1, R8, #8
0x2852	0x6809    LDR	R1, [R1, #0]
0x2854	0x42A9    CMP	R1, R5
0x2856	0xD100    BNE	L__free1363
0x2858	0xE000    B	L__free1355
; F end address is: 28 (R7)
; B end address is: 32 (R8)
L__free1364:
L__free1363:
0x285A	0xE007    B	L_free761
L__free1355:
; B start address is: 32 (R8)
; F start address is: 28 (R7)
L__free1365:
0x285C	0xF207010C  ADDW	R1, R7, #12
0x2860	0xF8C18000  STR	R8, [R1, #0]
0x2864	0xF1080108  ADD	R1, R8, #8
; B end address is: 32 (R8)
0x2868	0x600F    STR	R7, [R1, #0]
; F end address is: 28 (R7)
0x286A	0xE7FF    B	L_free762
L_free761:
L_free762:
L_free756:
0x286C	0xE7FF    B	L_free763
L_free754:
L_free763:
0x286E	0x462A    MOV	R2, R5
0x2870	0x4621    MOV	R1, R4
0x2872	0xE0B5    B	L_free764
L_free749:
; TP start address is: 12 (R3)
0x2874	0x462B    MOV	R3, R5
0x2876	0xF2050118  ADDW	R1, R5, #24
0x287A	0x680E    LDR	R6, [R1, #0]
; XP start address is: 24 (R6)
0x287C	0xF205010C  ADDW	R1, R5, #12
0x2880	0x6809    LDR	R1, [R1, #0]
0x2882	0x42A9    CMP	R1, R5
0x2884	0xD020    BEQ	L_free765
0x2886	0xF2030108  ADDW	R1, R3, #8
0x288A	0x680A    LDR	R2, [R1, #0]
; F start address is: 28 (R7)
0x288C	0x4617    MOV	R7, R2
0x288E	0xF203010C  ADDW	R1, R3, #12
0x2892	0x6809    LDR	R1, [R1, #0]
; R start address is: 32 (R8)
0x2894	0x4688    MOV	R8, R1
0x2896	0x4993    LDR	R1, [PC, #588]
0x2898	0x6809    LDR	R1, [R1, #0]
0x289A	0x428A    CMP	R2, R1
0x289C	0xD311    BCC	L__free1368
0x289E	0xF207010C  ADDW	R1, R7, #12
0x28A2	0x6809    LDR	R1, [R1, #0]
0x28A4	0x4299    CMP	R1, R3
0x28A6	0xD10C    BNE	L__free1367
0x28A8	0xF1080108  ADD	R1, R8, #8
0x28AC	0x6809    LDR	R1, [R1, #0]
0x28AE	0x4299    CMP	R1, R3
0x28B0	0xD107    BNE	L__free1366
L__free1354:
0x28B2	0xF207010C  ADDW	R1, R7, #12
0x28B6	0xF8C18000  STR	R8, [R1, #0]
0x28BA	0xF1080108  ADD	R1, R8, #8
0x28BE	0x600F    STR	R7, [R1, #0]
; F end address is: 28 (R7)
0x28C0	0xE7FF    B	L_free769
L__free1368:
L__free1367:
L__free1366:
L_free769:
; R end address is: 32 (R8)
0x28C2	0x4647    MOV	R7, R8
0x28C4	0x4698    MOV	R8, R3
0x28C6	0xE02F    B	L_free770
L_free765:
0x28C8	0xF2030110  ADDW	R1, R3, #16
0x28CC	0x1D09    ADDS	R1, R1, #4
; RP start address is: 8 (R2)
0x28CE	0x460A    MOV	R2, R1
0x28D0	0x6809    LDR	R1, [R1, #0]
; R start address is: 28 (R7)
0x28D2	0x460F    MOV	R7, R1
0x28D4	0xB941    CBNZ	R1, L__free1370
; RP end address is: 8 (R2)
; R end address is: 28 (R7)
0x28D6	0xF2030110  ADDW	R1, R3, #16
; RP start address is: 28 (R7)
0x28DA	0x460F    MOV	R7, R1
0x28DC	0x6809    LDR	R1, [R1, #0]
; R start address is: 8 (R2)
0x28DE	0x460A    MOV	R2, R1
0x28E0	0xB921    CBNZ	R1, L__free1392
; RP end address is: 28 (R7)
0x28E2	0x4617    MOV	R7, R2
; R end address is: 8 (R2)
0x28E4	0x4698    MOV	R8, R3
0x28E6	0xE01F    B	L_free773
L__free1370:
; R start address is: 28 (R7)
; RP start address is: 8 (R2)
0x28E8	0x4611    MOV	R1, R2
; R end address is: 28 (R7)
0x28EA	0xE001    B	L__free1369
; RP end address is: 8 (R2)
L__free1392:
0x28EC	0x4639    MOV	R1, R7
0x28EE	0x4617    MOV	R7, R2
L__free1369:
; R start address is: 28 (R7)
; RP start address is: 4 (R1)
; RP end address is: 4 (R1)
; XP end address is: 24 (R6)
; R end address is: 28 (R7)
0x28F0	0x4632    MOV	R2, R6
0x28F2	0x460E    MOV	R6, R1
L_free774:
; RP start address is: 24 (R6)
; XP start address is: 8 (R2)
; R start address is: 28 (R7)
; XP start address is: 8 (R2)
; XP end address is: 8 (R2)
; TP start address is: 12 (R3)
; TP end address is: 12 (R3)
; p start address is: 20 (R5)
; p end address is: 20 (R5)
; psize start address is: 16 (R4)
; psize end address is: 16 (R4)
; next start address is: 0 (R0)
; next end address is: 0 (R0)
0x28F4	0xF2070110  ADDW	R1, R7, #16
0x28F8	0x1D09    ADDS	R1, R1, #4
0x28FA	0x9102    STR	R1, [SP, #8]
0x28FC	0x6809    LDR	R1, [R1, #0]
0x28FE	0xB929    CBNZ	R1, L__free1372
; XP end address is: 8 (R2)
; TP end address is: 12 (R3)
; p end address is: 20 (R5)
; next end address is: 0 (R0)
; psize end address is: 16 (R4)
; psize start address is: 16 (R4)
; next start address is: 0 (R0)
; p start address is: 20 (R5)
; TP start address is: 12 (R3)
; XP start address is: 8 (R2)
0x2900	0xF2070110  ADDW	R1, R7, #16
0x2904	0x9102    STR	R1, [SP, #8]
0x2906	0x6809    LDR	R1, [R1, #0]
0x2908	0xB901    CBNZ	R1, L__free1371
0x290A	0xE004    B	L_free775
; RP end address is: 24 (R6)
; R end address is: 28 (R7)
L__free1372:
L__free1371:
; RP start address is: 24 (R6)
0x290C	0x9E02    LDR	R6, [SP, #8]
0x290E	0x9902    LDR	R1, [SP, #8]
0x2910	0x6809    LDR	R1, [R1, #0]
; R start address is: 28 (R7)
0x2912	0x460F    MOV	R7, R1
0x2914	0xE7EE    B	L_free774
L_free775:
0x2916	0x4973    LDR	R1, [PC, #460]
0x2918	0x6809    LDR	R1, [R1, #0]
0x291A	0x428E    CMP	R6, R1
0x291C	0xD302    BCC	L_free778
0x291E	0x2100    MOVS	R1, #0
0x2920	0x6031    STR	R1, [R6, #0]
; RP end address is: 24 (R6)
0x2922	0xE7FF    B	L_free779
L_free778:
L_free779:
; TP end address is: 12 (R3)
; p end address is: 20 (R5)
; next end address is: 0 (R0)
; R end address is: 28 (R7)
; psize end address is: 16 (R4)
0x2924	0x4616    MOV	R6, R2
0x2926	0x4698    MOV	R8, R3
L_free773:
; XP end address is: 8 (R2)
; next start address is: 0 (R0)
; psize start address is: 16 (R4)
; p start address is: 20 (R5)
; TP start address is: 32 (R8)
; XP start address is: 24 (R6)
; R start address is: 28 (R7)
; XP end address is: 24 (R6)
; TP end address is: 32 (R8)
; p end address is: 20 (R5)
; next end address is: 0 (R0)
; R end address is: 28 (R7)
; psize end address is: 16 (R4)
L_free770:
; R start address is: 28 (R7)
; XP start address is: 24 (R6)
; TP start address is: 32 (R8)
; p start address is: 20 (R5)
; psize start address is: 16 (R4)
; next start address is: 0 (R0)
0x2928	0x2E00    CMP	R6, #0
0x292A	0xF0008057  BEQ	L_free780
0x292E	0xF108011C  ADD	R1, R8, #28
0x2932	0x6809    LDR	R1, [R1, #0]
0x2934	0x008A    LSLS	R2, R1, #2
0x2936	0x496F    LDR	R1, [PC, #444]
0x2938	0x1889    ADDS	R1, R1, R2
; H start address is: 8 (R2)
0x293A	0x460A    MOV	R2, R1
0x293C	0x6809    LDR	R1, [R1, #0]
0x293E	0x4588    CMP	R8, R1
0x2940	0xD10E    BNE	L_free781
0x2942	0x6017    STR	R7, [R2, #0]
0x2944	0x6811    LDR	R1, [R2, #0]
; H end address is: 8 (R2)
0x2946	0xB951    CBNZ	R1, L_free782
0x2948	0xF108011C  ADD	R1, R8, #28
0x294C	0x680A    LDR	R2, [R1, #0]
0x294E	0xF04F0101  MOV	R1, #1
0x2952	0x4091    LSLS	R1, R2
0x2954	0x43CB    MVN	R3, R1
0x2956	0x4A68    LDR	R2, [PC, #416]
0x2958	0x6811    LDR	R1, [R2, #0]
0x295A	0x4019    ANDS	R1, R3
0x295C	0x6011    STR	R1, [R2, #0]
L_free782:
0x295E	0xE011    B	L_free783
L_free781:
0x2960	0x4960    LDR	R1, [PC, #384]
0x2962	0x6809    LDR	R1, [R1, #0]
0x2964	0x428E    CMP	R6, R1
0x2966	0xD30D    BCC	L_free784
0x2968	0xF2060110  ADDW	R1, R6, #16
0x296C	0x6809    LDR	R1, [R1, #0]
0x296E	0x4541    CMP	R1, R8
0x2970	0xD103    BNE	L_free785
0x2972	0xF2060110  ADDW	R1, R6, #16
0x2976	0x600F    STR	R7, [R1, #0]
0x2978	0xE003    B	L_free786
L_free785:
0x297A	0xF2060110  ADDW	R1, R6, #16
0x297E	0x1D09    ADDS	R1, R1, #4
0x2980	0x600F    STR	R7, [R1, #0]
L_free786:
0x2982	0xE7FF    B	L_free787
L_free784:
L_free787:
L_free783:
0x2984	0x2F00    CMP	R7, #0
0x2986	0xD029    BEQ	L_free788
0x2988	0x4956    LDR	R1, [PC, #344]
0x298A	0x6809    LDR	R1, [R1, #0]
0x298C	0x428F    CMP	R7, R1
0x298E	0xD325    BCC	L_free789
0x2990	0xF2070118  ADDW	R1, R7, #24
0x2994	0x600E    STR	R6, [R1, #0]
; XP end address is: 24 (R6)
0x2996	0xF1080110  ADD	R1, R8, #16
0x299A	0x6809    LDR	R1, [R1, #0]
; C0 start address is: 8 (R2)
0x299C	0x460A    MOV	R2, R1
0x299E	0xB151    CBZ	R1, L_free790
0x29A0	0x4950    LDR	R1, [PC, #320]
0x29A2	0x6809    LDR	R1, [R1, #0]
0x29A4	0x428A    CMP	R2, R1
0x29A6	0xD306    BCC	L_free791
0x29A8	0xF2070110  ADDW	R1, R7, #16
0x29AC	0x600A    STR	R2, [R1, #0]
0x29AE	0xF2020118  ADDW	R1, R2, #24
; C0 end address is: 8 (R2)
0x29B2	0x600F    STR	R7, [R1, #0]
0x29B4	0xE7FF    B	L_free792
L_free791:
L_free792:
L_free790:
0x29B6	0xF1080110  ADD	R1, R8, #16
; TP end address is: 32 (R8)
0x29BA	0x1D09    ADDS	R1, R1, #4
0x29BC	0x6809    LDR	R1, [R1, #0]
; C1 start address is: 8 (R2)
0x29BE	0x460A    MOV	R2, R1
0x29C0	0xB159    CBZ	R1, L_free793
0x29C2	0x4948    LDR	R1, [PC, #288]
0x29C4	0x6809    LDR	R1, [R1, #0]
0x29C6	0x428A    CMP	R2, R1
0x29C8	0xD307    BCC	L_free794
0x29CA	0xF2070110  ADDW	R1, R7, #16
0x29CE	0x1D09    ADDS	R1, R1, #4
0x29D0	0x600A    STR	R2, [R1, #0]
0x29D2	0xF2020118  ADDW	R1, R2, #24
; C1 end address is: 8 (R2)
0x29D6	0x600F    STR	R7, [R1, #0]
; R end address is: 28 (R7)
0x29D8	0xE7FF    B	L_free795
L_free794:
L_free795:
L_free793:
0x29DA	0xE7FF    B	L_free796
L_free789:
L_free796:
L_free788:
L_free780:
0x29DC	0x462A    MOV	R2, R5
; next end address is: 0 (R0)
; psize end address is: 16 (R4)
0x29DE	0x4621    MOV	R1, R4
L_free764:
; p end address is: 20 (R5)
;__Lib_dlmalloc.c, 4801 :: 		}
; next start address is: 0 (R0)
; psize start address is: 4 (R1)
; p start address is: 8 (R2)
0x29E0	0x4606    MOV	R6, R0
; psize end address is: 4 (R1)
; p end address is: 8 (R2)
0x29E2	0x460F    MOV	R7, R1
0x29E4	0x4611    MOV	R1, R2
0x29E6	0xE018    B	L_free797
L_free748:
;__Lib_dlmalloc.c, 4802 :: 		else if ((next->head & INUSE_BITS) == INUSE_BITS) {
; psize start address is: 16 (R4)
; p start address is: 20 (R5)
0x29E8	0x1D01    ADDS	R1, R0, #4
0x29EA	0x6809    LDR	R1, [R1, #0]
0x29EC	0xF0010103  AND	R1, R1, #3
0x29F0	0x2903    CMP	R1, #3
0x29F2	0xD10F    BNE	L_free798
;__Lib_dlmalloc.c, 4803 :: 		fm->dvsize = psize;
0x29F4	0x4941    LDR	R1, [PC, #260]
0x29F6	0x600C    STR	R4, [R1, #0]
;__Lib_dlmalloc.c, 4804 :: 		set_free_with_pinuse(p, psize, next);
0x29F8	0x1D03    ADDS	R3, R0, #4
; next end address is: 0 (R0)
0x29FA	0x681A    LDR	R2, [R3, #0]
0x29FC	0xF06F0101  MVN	R1, #1
0x2A00	0xEA020101  AND	R1, R2, R1, LSL #0
0x2A04	0x6019    STR	R1, [R3, #0]
0x2A06	0x1D2A    ADDS	R2, R5, #4
0x2A08	0xF0440101  ORR	R1, R4, #1
0x2A0C	0x6011    STR	R1, [R2, #0]
0x2A0E	0x1929    ADDS	R1, R5, R4
; p end address is: 20 (R5)
0x2A10	0x600C    STR	R4, [R1, #0]
; psize end address is: 16 (R4)
;__Lib_dlmalloc.c, 4805 :: 		goto postaction;
0x2A12	0xE282    B	___free_postaction
;__Lib_dlmalloc.c, 4806 :: 		}
L_free798:
; psize start address is: 16 (R4)
; next start address is: 0 (R0)
; p start address is: 20 (R5)
0x2A14	0x4606    MOV	R6, R0
; next end address is: 0 (R0)
; psize end address is: 16 (R4)
0x2A16	0x4627    MOV	R7, R4
0x2A18	0x4629    MOV	R1, R5
L_free797:
; p end address is: 20 (R5)
;__Lib_dlmalloc.c, 4807 :: 		}
; p start address is: 4 (R1)
; psize start address is: 28 (R7)
; next start address is: 24 (R6)
0x2A1A	0xE000    B	L_free799
; p end address is: 4 (R1)
; next end address is: 24 (R6)
; psize end address is: 28 (R7)
L_free747:
;__Lib_dlmalloc.c, 4809 :: 		goto erroraction;
0x2A1C	0xE27D    B	___free_erroraction
L_free799:
;__Lib_dlmalloc.c, 4811 :: 		}
; psize start address is: 28 (R7)
; next start address is: 24 (R6)
; p start address is: 4 (R1)
0x2A1E	0x4608    MOV	R0, R1
; next end address is: 24 (R6)
; psize end address is: 28 (R7)
0x2A20	0xE001    B	L_free743
; p end address is: 4 (R1)
L__free1393:
;__Lib_dlmalloc.c, 4786 :: 		if (!pinuse(p)) {
0x2A22	0x4606    MOV	R6, R0
0x2A24	0x4618    MOV	R0, R3
;__Lib_dlmalloc.c, 4811 :: 		}
L_free743:
;__Lib_dlmalloc.c, 4813 :: 		if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
; next start address is: 24 (R6)
; psize start address is: 28 (R7)
; p start address is: 0 (R0)
0x2A26	0x42B0    CMP	R0, R6
0x2A28	0xF0808277  BCS	L__free1389
0x2A2C	0x1D31    ADDS	R1, R6, #4
0x2A2E	0x6809    LDR	R1, [R1, #0]
0x2A30	0xF0010101  AND	R1, R1, #1
0x2A34	0x2900    CMP	R1, #0
0x2A36	0xF0008270  BEQ	L__free1388
L__free1351:
;__Lib_dlmalloc.c, 4814 :: 		if (!cinuse(next)) {  /* consolidate forward */
0x2A3A	0x1D31    ADDS	R1, R6, #4
0x2A3C	0x6809    LDR	R1, [R1, #0]
0x2A3E	0xF0010102  AND	R1, R1, #2
0x2A42	0x2900    CMP	R1, #0
0x2A44	0xF040814F  BNE	L_free803
;__Lib_dlmalloc.c, 4815 :: 		if (next == fm->top) {
0x2A48	0x492D    LDR	R1, [PC, #180]
0x2A4A	0x6809    LDR	R1, [R1, #0]
0x2A4C	0x428E    CMP	R6, R1
0x2A4E	0xD114    BNE	L_free804
; next end address is: 24 (R6)
;__Lib_dlmalloc.c, 4816 :: 		size_t tsize = fm->topsize += psize;
0x2A50	0x4A2C    LDR	R2, [PC, #176]
0x2A52	0x6811    LDR	R1, [R2, #0]
0x2A54	0x19CB    ADDS	R3, R1, R7
; psize end address is: 28 (R7)
0x2A56	0x6013    STR	R3, [R2, #0]
;__Lib_dlmalloc.c, 4817 :: 		fm->top = p;
0x2A58	0x4929    LDR	R1, [PC, #164]
0x2A5A	0x6008    STR	R0, [R1, #0]
;__Lib_dlmalloc.c, 4818 :: 		p->head = tsize | PINUSE_BIT;
0x2A5C	0x1D02    ADDS	R2, R0, #4
0x2A5E	0xF0430101  ORR	R1, R3, #1
0x2A62	0x6011    STR	R1, [R2, #0]
;__Lib_dlmalloc.c, 4819 :: 		if (p == fm->dv) {
0x2A64	0x4920    LDR	R1, [PC, #128]
0x2A66	0x6809    LDR	R1, [R1, #0]
0x2A68	0x4288    CMP	R0, R1
0x2A6A	0xD105    BNE	L_free805
; p end address is: 0 (R0)
;__Lib_dlmalloc.c, 4820 :: 		fm->dv = 0;
0x2A6C	0x2200    MOVS	R2, #0
0x2A6E	0x491E    LDR	R1, [PC, #120]
0x2A70	0x600A    STR	R2, [R1, #0]
;__Lib_dlmalloc.c, 4821 :: 		fm->dvsize = 0;
0x2A72	0x2200    MOVS	R2, #0
0x2A74	0x4921    LDR	R1, [PC, #132]
0x2A76	0x600A    STR	R2, [R1, #0]
;__Lib_dlmalloc.c, 4822 :: 		}
L_free805:
;__Lib_dlmalloc.c, 4824 :: 		sys_trim(fm, 0);
L_free806:
;__Lib_dlmalloc.c, 4825 :: 		goto postaction;
0x2A78	0xE24F    B	___free_postaction
;__Lib_dlmalloc.c, 4826 :: 		}
L_free804:
;__Lib_dlmalloc.c, 4827 :: 		else if (next == fm->dv) {
; p start address is: 0 (R0)
; psize start address is: 28 (R7)
; next start address is: 24 (R6)
0x2A7A	0x491B    LDR	R1, [PC, #108]
0x2A7C	0x6809    LDR	R1, [R1, #0]
0x2A7E	0x428E    CMP	R6, R1
0x2A80	0xD10D    BNE	L_free808
; next end address is: 24 (R6)
;__Lib_dlmalloc.c, 4828 :: 		size_t dsize = fm->dvsize += psize;
0x2A82	0x4A1E    LDR	R2, [PC, #120]
0x2A84	0x6811    LDR	R1, [R2, #0]
0x2A86	0x19CB    ADDS	R3, R1, R7
; psize end address is: 28 (R7)
0x2A88	0x6013    STR	R3, [R2, #0]
; dsize start address is: 16 (R4)
0x2A8A	0x461C    MOV	R4, R3
;__Lib_dlmalloc.c, 4829 :: 		fm->dv = p;
0x2A8C	0x4916    LDR	R1, [PC, #88]
0x2A8E	0x6008    STR	R0, [R1, #0]
;__Lib_dlmalloc.c, 4830 :: 		set_size_and_pinuse_of_free_chunk(p, dsize);
0x2A90	0x1D02    ADDS	R2, R0, #4
0x2A92	0xF0430101  ORR	R1, R3, #1
0x2A96	0x6011    STR	R1, [R2, #0]
0x2A98	0x1901    ADDS	R1, R0, R4
; p end address is: 0 (R0)
0x2A9A	0x600C    STR	R4, [R1, #0]
; dsize end address is: 16 (R4)
;__Lib_dlmalloc.c, 4831 :: 		goto postaction;
0x2A9C	0xE23D    B	___free_postaction
;__Lib_dlmalloc.c, 4832 :: 		}
L_free808:
;__Lib_dlmalloc.c, 4834 :: 		size_t nsize = chunksize(next);
; p start address is: 0 (R0)
; psize start address is: 28 (R7)
; next start address is: 24 (R6)
0x2A9E	0x1D31    ADDS	R1, R6, #4
0x2AA0	0x680A    LDR	R2, [R1, #0]
0x2AA2	0xF06F0107  MVN	R1, #7
0x2AA6	0x400A    ANDS	R2, R1
; nsize start address is: 20 (R5)
0x2AA8	0x4615    MOV	R5, R2
;__Lib_dlmalloc.c, 4835 :: 		psize += nsize;
0x2AAA	0x18BC    ADDS	R4, R7, R2
; psize end address is: 28 (R7)
; psize start address is: 16 (R4)
;__Lib_dlmalloc.c, 4836 :: 		unlink_chunk(fm, next, nsize);
0x2AAC	0x08D1    LSRS	R1, R2, #3
0x2AAE	0x2920    CMP	R1, #32
0x2AB0	0xD255    BCS	L_free810
0x2AB2	0xF2060108  ADDW	R1, R6, #8
0x2AB6	0x680B    LDR	R3, [R1, #0]
; F start address is: 28 (R7)
0x2AB8	0x461F    MOV	R7, R3
0x2ABA	0xF206010C  ADDW	R1, R6, #12
0x2ABE	0x6809    LDR	R1, [R1, #0]
; B start address is: 32 (R8)
0x2AC0	0x4688    MOV	R8, R1
0x2AC2	0x08E9    LSRS	R1, R5, #3
; nsize end address is: 20 (R5)
; I start address is: 20 (R5)
0x2AC4	0x460D    MOV	R5, R1
0x2AC6	0x0049    LSLS	R1, R1, #1
0x2AC8	0x008A    LSLS	R2, R1, #2
0x2ACA	0x4908    LDR	R1, [PC, #32]
0x2ACC	0x1889    ADDS	R1, R1, R2
0x2ACE	0x428B    CMP	R3, R1
0x2AD0	0xD01E    BEQ	L__free1375
0x2AD2	0x4904    LDR	R1, [PC, #16]
0x2AD4	0x6809    LDR	R1, [R1, #0]
0x2AD6	0x428F    CMP	R7, R1
0x2AD8	0xD319    BCC	L__free1374
0x2ADA	0xF207010C  ADDW	R1, R7, #12
0x2ADE	0x6809    LDR	R1, [R1, #0]
0x2AE0	0xF000B812  B	#36
0x2AE4	0x22182000  	__Lib_dlmalloc__gm_+16
0x2AE8	0x221C2000  	__Lib_dlmalloc__gm_+20
0x2AEC	0x22302000  	__Lib_dlmalloc__gm_+40
0x2AF0	0x22082000  	__Lib_dlmalloc__gm_+0
0x2AF4	0x23382000  	__Lib_dlmalloc__gm_+304
0x2AF8	0x220C2000  	__Lib_dlmalloc__gm_+4
0x2AFC	0x22102000  	__Lib_dlmalloc__gm_+8
0x2B00	0x22202000  	__Lib_dlmalloc__gm_+24
0x2B04	0x22142000  	__Lib_dlmalloc__gm_+12
0x2B08	0x42B1    CMP	R1, R6
0x2B0A	0xD100    BNE	L__free1373
0x2B0C	0xE000    B	L__free1349
; next end address is: 24 (R6)
; F end address is: 28 (R7)
; B end address is: 32 (R8)
; I end address is: 20 (R5)
L__free1374:
L__free1373:
0x2B0E	0xE024    B	L_free815
L__free1349:
; I start address is: 20 (R5)
; B start address is: 32 (R8)
; F start address is: 28 (R7)
; next start address is: 24 (R6)
L__free1375:
0x2B10	0x45B8    CMP	R8, R7
0x2B12	0xD108    BNE	L_free816
; next end address is: 24 (R6)
; F end address is: 28 (R7)
; B end address is: 32 (R8)
0x2B14	0xF04F0101  MOV	R1, #1
0x2B18	0x40A9    LSLS	R1, R5
; I end address is: 20 (R5)
0x2B1A	0x43CB    MVN	R3, R1
0x2B1C	0x4ADF    LDR	R2, [PC, #892]
0x2B1E	0x6811    LDR	R1, [R2, #0]
0x2B20	0x4019    ANDS	R1, R3
0x2B22	0x6011    STR	R1, [R2, #0]
0x2B24	0xE018    B	L_free817
L_free816:
; I start address is: 20 (R5)
; B start address is: 32 (R8)
; F start address is: 28 (R7)
; next start address is: 24 (R6)
0x2B26	0x0069    LSLS	R1, R5, #1
; I end address is: 20 (R5)
0x2B28	0x008A    LSLS	R2, R1, #2
0x2B2A	0x49DD    LDR	R1, [PC, #884]
0x2B2C	0x1889    ADDS	R1, R1, R2
0x2B2E	0x4588    CMP	R8, R1
0x2B30	0xD00A    BEQ	L__free1378
0x2B32	0x49DC    LDR	R1, [PC, #880]
0x2B34	0x6809    LDR	R1, [R1, #0]
0x2B36	0x4588    CMP	R8, R1
0x2B38	0xD305    BCC	L__free1377
0x2B3A	0xF1080108  ADD	R1, R8, #8
0x2B3E	0x6809    LDR	R1, [R1, #0]
0x2B40	0x42B1    CMP	R1, R6
0x2B42	0xD100    BNE	L__free1376
; next end address is: 24 (R6)
0x2B44	0xE000    B	L__free1347
; F end address is: 28 (R7)
; B end address is: 32 (R8)
L__free1377:
L__free1376:
0x2B46	0xE007    B	L_free822
L__free1347:
; B start address is: 32 (R8)
; F start address is: 28 (R7)
L__free1378:
0x2B48	0xF207010C  ADDW	R1, R7, #12
0x2B4C	0xF8C18000  STR	R8, [R1, #0]
0x2B50	0xF1080108  ADD	R1, R8, #8
; B end address is: 32 (R8)
0x2B54	0x600F    STR	R7, [R1, #0]
; F end address is: 28 (R7)
0x2B56	0xE7FF    B	L_free823
L_free822:
L_free823:
L_free817:
0x2B58	0xE7FF    B	L_free824
L_free815:
L_free824:
0x2B5A	0x4623    MOV	R3, R4
0x2B5C	0xE0B3    B	L_free825
L_free810:
; TP start address is: 12 (R3)
; next start address is: 24 (R6)
0x2B5E	0x4633    MOV	R3, R6
0x2B60	0xF2060118  ADDW	R1, R6, #24
0x2B64	0x680D    LDR	R5, [R1, #0]
; XP start address is: 20 (R5)
0x2B66	0xF206010C  ADDW	R1, R6, #12
0x2B6A	0x6809    LDR	R1, [R1, #0]
0x2B6C	0x42B1    CMP	R1, R6
0x2B6E	0xD01F    BEQ	L_free826
; next end address is: 24 (R6)
0x2B70	0xF2030108  ADDW	R1, R3, #8
0x2B74	0x680A    LDR	R2, [R1, #0]
; F start address is: 24 (R6)
0x2B76	0x4616    MOV	R6, R2
0x2B78	0xF203010C  ADDW	R1, R3, #12
0x2B7C	0x6809    LDR	R1, [R1, #0]
; R start address is: 28 (R7)
0x2B7E	0x460F    MOV	R7, R1
0x2B80	0x49C8    LDR	R1, [PC, #800]
0x2B82	0x6809    LDR	R1, [R1, #0]
0x2B84	0x428A    CMP	R2, R1
0x2B86	0xD310    BCC	L__free1381
0x2B88	0xF206010C  ADDW	R1, R6, #12
0x2B8C	0x6809    LDR	R1, [R1, #0]
0x2B8E	0x4299    CMP	R1, R3
0x2B90	0xD10B    BNE	L__free1380
0x2B92	0xF2070108  ADDW	R1, R7, #8
0x2B96	0x6809    LDR	R1, [R1, #0]
0x2B98	0x4299    CMP	R1, R3
0x2B9A	0xD106    BNE	L__free1379
L__free1346:
0x2B9C	0xF206010C  ADDW	R1, R6, #12
0x2BA0	0x600F    STR	R7, [R1, #0]
0x2BA2	0xF2070108  ADDW	R1, R7, #8
0x2BA6	0x600E    STR	R6, [R1, #0]
; F end address is: 24 (R6)
0x2BA8	0xE7FF    B	L_free830
L__free1381:
L__free1380:
L__free1379:
L_free830:
; R end address is: 28 (R7)
0x2BAA	0x463E    MOV	R6, R7
0x2BAC	0x461F    MOV	R7, R3
0x2BAE	0xE02F    B	L_free831
L_free826:
0x2BB0	0xF2030110  ADDW	R1, R3, #16
0x2BB4	0x1D09    ADDS	R1, R1, #4
; RP start address is: 8 (R2)
0x2BB6	0x460A    MOV	R2, R1
0x2BB8	0x6809    LDR	R1, [R1, #0]
; R start address is: 24 (R6)
0x2BBA	0x460E    MOV	R6, R1
0x2BBC	0xB941    CBNZ	R1, L__free1383
; RP end address is: 8 (R2)
; R end address is: 24 (R6)
0x2BBE	0xF2030110  ADDW	R1, R3, #16
; RP start address is: 24 (R6)
0x2BC2	0x460E    MOV	R6, R1
0x2BC4	0x6809    LDR	R1, [R1, #0]
; R start address is: 8 (R2)
0x2BC6	0x460A    MOV	R2, R1
0x2BC8	0xB921    CBNZ	R1, L__free1394
; RP end address is: 24 (R6)
0x2BCA	0x4616    MOV	R6, R2
; R end address is: 8 (R2)
0x2BCC	0x461F    MOV	R7, R3
0x2BCE	0xE01F    B	L_free834
L__free1383:
; R start address is: 24 (R6)
; RP start address is: 8 (R2)
0x2BD0	0x4611    MOV	R1, R2
; R end address is: 24 (R6)
0x2BD2	0xE001    B	L__free1382
; RP end address is: 8 (R2)
L__free1394:
0x2BD4	0x4631    MOV	R1, R6
0x2BD6	0x4616    MOV	R6, R2
L__free1382:
; R start address is: 24 (R6)
; RP start address is: 4 (R1)
; RP end address is: 4 (R1)
; XP end address is: 20 (R5)
; R end address is: 24 (R6)
0x2BD8	0x462A    MOV	R2, R5
0x2BDA	0x460D    MOV	R5, R1
L_free835:
; RP start address is: 20 (R5)
; XP start address is: 8 (R2)
; R start address is: 24 (R6)
; XP start address is: 8 (R2)
; XP end address is: 8 (R2)
; TP start address is: 12 (R3)
; TP end address is: 12 (R3)
; psize start address is: 16 (R4)
; psize end address is: 16 (R4)
; p start address is: 0 (R0)
; p end address is: 0 (R0)
0x2BDC	0xF2060110  ADDW	R1, R6, #16
0x2BE0	0x1D09    ADDS	R1, R1, #4
0x2BE2	0x9103    STR	R1, [SP, #12]
0x2BE4	0x6809    LDR	R1, [R1, #0]
0x2BE6	0xB929    CBNZ	R1, L__free1385
; XP end address is: 8 (R2)
; TP end address is: 12 (R3)
; psize end address is: 16 (R4)
; p end address is: 0 (R0)
; p start address is: 0 (R0)
; psize start address is: 16 (R4)
; TP start address is: 12 (R3)
; XP start address is: 8 (R2)
0x2BE8	0xF2060110  ADDW	R1, R6, #16
0x2BEC	0x9103    STR	R1, [SP, #12]
0x2BEE	0x6809    LDR	R1, [R1, #0]
0x2BF0	0xB901    CBNZ	R1, L__free1384
0x2BF2	0xE004    B	L_free836
; RP end address is: 20 (R5)
; R end address is: 24 (R6)
L__free1385:
L__free1384:
; RP start address is: 20 (R5)
0x2BF4	0x9D03    LDR	R5, [SP, #12]
0x2BF6	0x9903    LDR	R1, [SP, #12]
0x2BF8	0x6809    LDR	R1, [R1, #0]
; R start address is: 24 (R6)
0x2BFA	0x460E    MOV	R6, R1
0x2BFC	0xE7EE    B	L_free835
L_free836:
0x2BFE	0x49A9    LDR	R1, [PC, #676]
0x2C00	0x6809    LDR	R1, [R1, #0]
0x2C02	0x428D    CMP	R5, R1
0x2C04	0xD302    BCC	L_free839
0x2C06	0x2100    MOVS	R1, #0
0x2C08	0x6029    STR	R1, [R5, #0]
; RP end address is: 20 (R5)
0x2C0A	0xE7FF    B	L_free840
L_free839:
L_free840:
; TP end address is: 12 (R3)
; psize end address is: 16 (R4)
; p end address is: 0 (R0)
; R end address is: 24 (R6)
0x2C0C	0x4615    MOV	R5, R2
0x2C0E	0x461F    MOV	R7, R3
L_free834:
; XP end address is: 8 (R2)
; p start address is: 0 (R0)
; psize start address is: 16 (R4)
; TP start address is: 28 (R7)
; XP start address is: 20 (R5)
; R start address is: 24 (R6)
; XP end address is: 20 (R5)
; TP end address is: 28 (R7)
; psize end address is: 16 (R4)
; p end address is: 0 (R0)
; R end address is: 24 (R6)
L_free831:
; R start address is: 24 (R6)
; XP start address is: 20 (R5)
; TP start address is: 28 (R7)
; psize start address is: 16 (R4)
; p start address is: 0 (R0)
0x2C10	0x2D00    CMP	R5, #0
0x2C12	0xF0008057  BEQ	L_free841
0x2C16	0xF207011C  ADDW	R1, R7, #28
0x2C1A	0x6809    LDR	R1, [R1, #0]
0x2C1C	0x008A    LSLS	R2, R1, #2
0x2C1E	0x49A2    LDR	R1, [PC, #648]
0x2C20	0x1889    ADDS	R1, R1, R2
; H start address is: 8 (R2)
0x2C22	0x460A    MOV	R2, R1
0x2C24	0x6809    LDR	R1, [R1, #0]
0x2C26	0x428F    CMP	R7, R1
0x2C28	0xD10E    BNE	L_free842
0x2C2A	0x6016    STR	R6, [R2, #0]
0x2C2C	0x6811    LDR	R1, [R2, #0]
; H end address is: 8 (R2)
0x2C2E	0xB951    CBNZ	R1, L_free843
0x2C30	0xF207011C  ADDW	R1, R7, #28
0x2C34	0x680A    LDR	R2, [R1, #0]
0x2C36	0xF04F0101  MOV	R1, #1
0x2C3A	0x4091    LSLS	R1, R2
0x2C3C	0x43CB    MVN	R3, R1
0x2C3E	0x4A9B    LDR	R2, [PC, #620]
0x2C40	0x6811    LDR	R1, [R2, #0]
0x2C42	0x4019    ANDS	R1, R3
0x2C44	0x6011    STR	R1, [R2, #0]
L_free843:
0x2C46	0xE011    B	L_free844
L_free842:
0x2C48	0x4996    LDR	R1, [PC, #600]
0x2C4A	0x6809    LDR	R1, [R1, #0]
0x2C4C	0x428D    CMP	R5, R1
0x2C4E	0xD30D    BCC	L_free845
0x2C50	0xF2050110  ADDW	R1, R5, #16
0x2C54	0x6809    LDR	R1, [R1, #0]
0x2C56	0x42B9    CMP	R1, R7
0x2C58	0xD103    BNE	L_free846
0x2C5A	0xF2050110  ADDW	R1, R5, #16
0x2C5E	0x600E    STR	R6, [R1, #0]
0x2C60	0xE003    B	L_free847
L_free846:
0x2C62	0xF2050110  ADDW	R1, R5, #16
0x2C66	0x1D09    ADDS	R1, R1, #4
0x2C68	0x600E    STR	R6, [R1, #0]
L_free847:
0x2C6A	0xE7FF    B	L_free848
L_free845:
L_free848:
L_free844:
0x2C6C	0x2E00    CMP	R6, #0
0x2C6E	0xD029    BEQ	L_free849
0x2C70	0x498C    LDR	R1, [PC, #560]
0x2C72	0x6809    LDR	R1, [R1, #0]
0x2C74	0x428E    CMP	R6, R1
0x2C76	0xD325    BCC	L_free850
0x2C78	0xF2060118  ADDW	R1, R6, #24
0x2C7C	0x600D    STR	R5, [R1, #0]
; XP end address is: 20 (R5)
0x2C7E	0xF2070110  ADDW	R1, R7, #16
0x2C82	0x6809    LDR	R1, [R1, #0]
; C0 start address is: 8 (R2)
0x2C84	0x460A    MOV	R2, R1
0x2C86	0xB151    CBZ	R1, L_free851
0x2C88	0x4986    LDR	R1, [PC, #536]
0x2C8A	0x6809    LDR	R1, [R1, #0]
0x2C8C	0x428A    CMP	R2, R1
0x2C8E	0xD306    BCC	L_free852
0x2C90	0xF2060110  ADDW	R1, R6, #16
0x2C94	0x600A    STR	R2, [R1, #0]
0x2C96	0xF2020118  ADDW	R1, R2, #24
; C0 end address is: 8 (R2)
0x2C9A	0x600E    STR	R6, [R1, #0]
0x2C9C	0xE7FF    B	L_free853
L_free852:
L_free853:
L_free851:
0x2C9E	0xF2070110  ADDW	R1, R7, #16
; TP end address is: 28 (R7)
0x2CA2	0x1D09    ADDS	R1, R1, #4
0x2CA4	0x6809    LDR	R1, [R1, #0]
; C1 start address is: 8 (R2)
0x2CA6	0x460A    MOV	R2, R1
0x2CA8	0xB159    CBZ	R1, L_free854
0x2CAA	0x497E    LDR	R1, [PC, #504]
0x2CAC	0x6809    LDR	R1, [R1, #0]
0x2CAE	0x428A    CMP	R2, R1
0x2CB0	0xD307    BCC	L_free855
0x2CB2	0xF2060110  ADDW	R1, R6, #16
0x2CB6	0x1D09    ADDS	R1, R1, #4
0x2CB8	0x600A    STR	R2, [R1, #0]
0x2CBA	0xF2020118  ADDW	R1, R2, #24
; C1 end address is: 8 (R2)
0x2CBE	0x600E    STR	R6, [R1, #0]
; R end address is: 24 (R6)
0x2CC0	0xE7FF    B	L_free856
L_free855:
L_free856:
L_free854:
0x2CC2	0xE7FF    B	L_free857
L_free850:
L_free857:
L_free849:
L_free841:
0x2CC4	0x4623    MOV	R3, R4
; p end address is: 0 (R0)
L_free825:
; psize end address is: 16 (R4)
;__Lib_dlmalloc.c, 4837 :: 		set_size_and_pinuse_of_free_chunk(p, psize);
; p start address is: 0 (R0)
; psize start address is: 12 (R3)
0x2CC6	0x1D02    ADDS	R2, R0, #4
0x2CC8	0xF0430101  ORR	R1, R3, #1
0x2CCC	0x6011    STR	R1, [R2, #0]
0x2CCE	0x18C1    ADDS	R1, R0, R3
0x2CD0	0x600B    STR	R3, [R1, #0]
;__Lib_dlmalloc.c, 4838 :: 		if (p == fm->dv) {
0x2CD2	0x4977    LDR	R1, [PC, #476]
0x2CD4	0x6809    LDR	R1, [R1, #0]
0x2CD6	0x4288    CMP	R0, R1
0x2CD8	0xD102    BNE	L_free858
; p end address is: 0 (R0)
;__Lib_dlmalloc.c, 4839 :: 		fm->dvsize = psize;
0x2CDA	0x4976    LDR	R1, [PC, #472]
0x2CDC	0x600B    STR	R3, [R1, #0]
; psize end address is: 12 (R3)
;__Lib_dlmalloc.c, 4840 :: 		goto postaction;
0x2CDE	0xE11C    B	___free_postaction
;__Lib_dlmalloc.c, 4841 :: 		}
L_free858:
;__Lib_dlmalloc.c, 4843 :: 		}
; psize start address is: 12 (R3)
; p start address is: 0 (R0)
0x2CE0	0x4604    MOV	R4, R0
; psize end address is: 12 (R3)
0x2CE2	0x4618    MOV	R0, R3
0x2CE4	0xE00E    B	L_free859
L_free803:
;__Lib_dlmalloc.c, 4845 :: 		set_free_with_pinuse(p, psize, next);
; psize start address is: 28 (R7)
; next start address is: 24 (R6)
0x2CE6	0x1D33    ADDS	R3, R6, #4
; next end address is: 24 (R6)
0x2CE8	0x681A    LDR	R2, [R3, #0]
0x2CEA	0xF06F0101  MVN	R1, #1
0x2CEE	0xEA020101  AND	R1, R2, R1, LSL #0
0x2CF2	0x6019    STR	R1, [R3, #0]
0x2CF4	0x1D02    ADDS	R2, R0, #4
0x2CF6	0xF0470101  ORR	R1, R7, #1
0x2CFA	0x6011    STR	R1, [R2, #0]
0x2CFC	0x19C1    ADDS	R1, R0, R7
0x2CFE	0x600F    STR	R7, [R1, #0]
; psize end address is: 28 (R7)
; p end address is: 0 (R0)
0x2D00	0x4604    MOV	R4, R0
0x2D02	0x4638    MOV	R0, R7
L_free859:
;__Lib_dlmalloc.c, 4847 :: 		if (is_small(psize)) {
; p start address is: 16 (R4)
; psize start address is: 0 (R0)
0x2D04	0x08C1    LSRS	R1, R0, #3
0x2D06	0x2920    CMP	R1, #32
0x2D08	0xD233    BCS	L_free860
;__Lib_dlmalloc.c, 4848 :: 		insert_small_chunk(fm, p, psize);
0x2D0A	0x08C3    LSRS	R3, R0, #3
; psize end address is: 0 (R0)
; I start address is: 20 (R5)
0x2D0C	0x461D    MOV	R5, R3
0x2D0E	0x0059    LSLS	R1, R3, #1
0x2D10	0x008A    LSLS	R2, R1, #2
0x2D12	0x4963    LDR	R1, [PC, #396]
0x2D14	0x1889    ADDS	R1, R1, R2
; B start address is: 0 (R0)
0x2D16	0x4608    MOV	R0, R1
; F start address is: 24 (R6)
0x2D18	0x460E    MOV	R6, R1
0x2D1A	0xF04F0101  MOV	R1, #1
0x2D1E	0xFA01F203  LSL	R2, R1, R3
0x2D22	0x495E    LDR	R1, [PC, #376]
0x2D24	0x6809    LDR	R1, [R1, #0]
0x2D26	0x4011    ANDS	R1, R2
0x2D28	0xB949    CBNZ	R1, L_free861
0x2D2A	0xF04F0101  MOV	R1, #1
0x2D2E	0xFA01F305  LSL	R3, R1, R5
; I end address is: 20 (R5)
0x2D32	0x4A5A    LDR	R2, [PC, #360]
0x2D34	0x6811    LDR	R1, [R2, #0]
0x2D36	0x4319    ORRS	R1, R3
0x2D38	0x6011    STR	R1, [R2, #0]
0x2D3A	0x4632    MOV	R2, R6
0x2D3C	0xE00C    B	L_free862
L_free861:
0x2D3E	0xF2000108  ADDW	R1, R0, #8
0x2D42	0x680A    LDR	R2, [R1, #0]
0x2D44	0x4957    LDR	R1, [PC, #348]
0x2D46	0x6809    LDR	R1, [R1, #0]
0x2D48	0x428A    CMP	R2, R1
0x2D4A	0xD304    BCC	L_free863
; F end address is: 24 (R6)
0x2D4C	0xF2000108  ADDW	R1, R0, #8
0x2D50	0x6809    LDR	R1, [R1, #0]
; F start address is: 4 (R1)
0x2D52	0x460A    MOV	R2, R1
; F end address is: 4 (R1)
0x2D54	0xE000    B	L_free864
L_free863:
; F start address is: 24 (R6)
0x2D56	0x4632    MOV	R2, R6
L_free864:
; F end address is: 24 (R6)
; F start address is: 8 (R2)
; F end address is: 8 (R2)
L_free862:
; F start address is: 8 (R2)
0x2D58	0xF2000108  ADDW	R1, R0, #8
0x2D5C	0x600C    STR	R4, [R1, #0]
0x2D5E	0xF202010C  ADDW	R1, R2, #12
0x2D62	0x600C    STR	R4, [R1, #0]
0x2D64	0xF2040108  ADDW	R1, R4, #8
0x2D68	0x600A    STR	R2, [R1, #0]
; F end address is: 8 (R2)
0x2D6A	0xF204010C  ADDW	R1, R4, #12
; p end address is: 16 (R4)
0x2D6E	0x6008    STR	R0, [R1, #0]
; B end address is: 0 (R0)
;__Lib_dlmalloc.c, 4850 :: 		}
0x2D70	0xE0D2    B	L_free865
L_free860:
;__Lib_dlmalloc.c, 4852 :: 		tchunkptr tp = (tchunkptr)p;
; psize start address is: 0 (R0)
; tp start address is: 20 (R5)
; p start address is: 16 (R4)
0x2D72	0x4625    MOV	R5, R4
; p end address is: 16 (R4)
;__Lib_dlmalloc.c, 4853 :: 		insert_large_chunk(fm, tp, psize);
0x2D74	0x0A01    LSRS	R1, R0, #8
; X start address is: 16 (R4)
0x2D76	0x460C    MOV	R4, R1
0x2D78	0xB909    CBNZ	R1, L_free866
; X end address is: 16 (R4)
; I start address is: 16 (R4)
0x2D7A	0x2400    MOVS	R4, #0
; I end address is: 16 (R4)
0x2D7C	0xE02A    B	L_free867
L_free866:
; X start address is: 16 (R4)
0x2D7E	0x494E    LDR	R1, [PC, #312]
0x2D80	0x428C    CMP	R4, R1
0x2D82	0xD903    BLS	L_free868
; X end address is: 16 (R4)
; I start address is: 4 (R1)
0x2D84	0xF04F011F  MOV	R1, #31
0x2D88	0x460C    MOV	R4, R1
; I end address is: 4 (R1)
0x2D8A	0xE023    B	L_free869
L_free868:
; X start address is: 16 (R4)
0x2D8C	0xF5A47180  SUB	R1, R4, #256
0x2D90	0x0C09    LSRS	R1, R1, #16
0x2D92	0xF0010208  AND	R2, R1, #8
0x2D96	0xFA04F302  LSL	R3, R4, R2
; X end address is: 16 (R4)
0x2D9A	0xF5A35180  SUB	R1, R3, #4096
0x2D9E	0x0C09    LSRS	R1, R1, #16
0x2DA0	0xF0010104  AND	R1, R1, #4
0x2DA4	0x1852    ADDS	R2, R2, R1
0x2DA6	0xFA03F401  LSL	R4, R3, R1
0x2DAA	0xF5A44180  SUB	R1, R4, #16384
0x2DAE	0x0C09    LSRS	R1, R1, #16
0x2DB0	0xF0010302  AND	R3, R1, #2
0x2DB4	0x18D1    ADDS	R1, R2, R3
0x2DB6	0xF1C1020E  RSB	R2, R1, #14
0x2DBA	0xFA04F103  LSL	R1, R4, R3
0x2DBE	0x0BC9    LSRS	R1, R1, #15
0x2DC0	0x1851    ADDS	R1, R2, R1
0x2DC2	0x004A    LSLS	R2, R1, #1
0x2DC4	0x1DC9    ADDS	R1, R1, #7
0x2DC6	0xFA20F101  LSR	R1, R0, R1
0x2DCA	0xF0010101  AND	R1, R1, #1
0x2DCE	0x1851    ADDS	R1, R2, R1
; I start address is: 8 (R2)
0x2DD0	0x460A    MOV	R2, R1
; I end address is: 8 (R2)
0x2DD2	0x4614    MOV	R4, R2
L_free869:
; I start address is: 16 (R4)
; I end address is: 16 (R4)
L_free867:
; I start address is: 16 (R4)
0x2DD4	0x00A2    LSLS	R2, R4, #2
0x2DD6	0x4934    LDR	R1, [PC, #208]
0x2DD8	0x1889    ADDS	R1, R1, R2
; H start address is: 24 (R6)
0x2DDA	0x460E    MOV	R6, R1
0x2DDC	0xF205011C  ADDW	R1, R5, #28
0x2DE0	0x600C    STR	R4, [R1, #0]
0x2DE2	0xF2050110  ADDW	R1, R5, #16
0x2DE6	0x460B    MOV	R3, R1
0x2DE8	0x1D0A    ADDS	R2, R1, #4
0x2DEA	0x2100    MOVS	R1, #0
0x2DEC	0x6011    STR	R1, [R2, #0]
0x2DEE	0x6811    LDR	R1, [R2, #0]
0x2DF0	0x6019    STR	R1, [R3, #0]
0x2DF2	0xF04F0101  MOV	R1, #1
0x2DF6	0xFA01F204  LSL	R2, R1, R4
0x2DFA	0x492C    LDR	R1, [PC, #176]
0x2DFC	0x6809    LDR	R1, [R1, #0]
0x2DFE	0x4011    ANDS	R1, R2
0x2E00	0xB999    CBNZ	R1, L_free870
; psize end address is: 0 (R0)
0x2E02	0xF04F0101  MOV	R1, #1
0x2E06	0xFA01F304  LSL	R3, R1, R4
; I end address is: 16 (R4)
0x2E0A	0x4A28    LDR	R2, [PC, #160]
0x2E0C	0x6811    LDR	R1, [R2, #0]
0x2E0E	0x4319    ORRS	R1, R3
0x2E10	0x6011    STR	R1, [R2, #0]
0x2E12	0x6035    STR	R5, [R6, #0]
0x2E14	0xF2050118  ADDW	R1, R5, #24
0x2E18	0x600E    STR	R6, [R1, #0]
; H end address is: 24 (R6)
0x2E1A	0xF2050208  ADDW	R2, R5, #8
0x2E1E	0xF205010C  ADDW	R1, R5, #12
0x2E22	0x600D    STR	R5, [R1, #0]
; tp end address is: 20 (R5)
0x2E24	0x6809    LDR	R1, [R1, #0]
0x2E26	0x6011    STR	R1, [R2, #0]
0x2E28	0xE06E    B	L_free871
L_free870:
; psize start address is: 0 (R0)
; H start address is: 24 (R6)
; I start address is: 16 (R4)
; tp start address is: 20 (R5)
0x2E2A	0x6831    LDR	R1, [R6, #0]
; H end address is: 24 (R6)
; T start address is: 8 (R2)
0x2E2C	0x460A    MOV	R2, R1
0x2E2E	0x2C1F    CMP	R4, #31
0x2E30	0xD101    BNE	L_free872
; I end address is: 16 (R4)
; ?FLOC___free?T7649 start address is: 12 (R3)
0x2E32	0x2300    MOVS	R3, #0
; ?FLOC___free?T7649 end address is: 12 (R3)
0x2E34	0xE004    B	L_free873
L_free872:
; I start address is: 16 (R4)
0x2E36	0x0861    LSRS	R1, R4, #1
; I end address is: 16 (R4)
0x2E38	0x3108    ADDS	R1, #8
0x2E3A	0x1E89    SUBS	R1, R1, #2
0x2E3C	0xF1C1031F  RSB	R3, R1, #31
; ?FLOC___free?T7649 start address is: 12 (R3)
; ?FLOC___free?T7649 end address is: 12 (R3)
L_free873:
; ?FLOC___free?T7649 start address is: 12 (R3)
0x2E40	0xFA00F103  LSL	R1, R0, R3
; ?FLOC___free?T7649 end address is: 12 (R3)
; K start address is: 12 (R3)
0x2E44	0x460B    MOV	R3, R1
; tp end address is: 20 (R5)
; T end address is: 8 (R2)
; K end address is: 12 (R3)
; psize end address is: 0 (R0)
0x2E46	0x9301    STR	R3, [SP, #4]
0x2E48	0x462B    MOV	R3, R5
0x2E4A	0x4614    MOV	R4, R2
0x2E4C	0x9D01    LDR	R5, [SP, #4]
L_free874:
; K start address is: 20 (R5)
; T start address is: 16 (R4)
; tp start address is: 12 (R3)
; psize start address is: 0 (R0)
0x2E4E	0x1D21    ADDS	R1, R4, #4
0x2E50	0x680A    LDR	R2, [R1, #0]
0x2E52	0xF06F0107  MVN	R1, #7
0x2E56	0xEA020101  AND	R1, R2, R1, LSL #0
0x2E5A	0x4281    CMP	R1, R0
0x2E5C	0xD034    BEQ	L_free877
0x2E5E	0xF2040210  ADDW	R2, R4, #16
0x2E62	0x0FE9    LSRS	R1, R5, #31
0x2E64	0xF0010101  AND	R1, R1, #1
0x2E68	0x0089    LSLS	R1, R1, #2
0x2E6A	0x1852    ADDS	R2, R2, R1
0x2E6C	0x9204    STR	R2, [SP, #16]
0x2E6E	0x006D    LSLS	R5, R5, #1
0x2E70	0x6811    LDR	R1, [R2, #0]
0x2E72	0xB119    CBZ	R1, L_free878
; T end address is: 16 (R4)
0x2E74	0x9904    LDR	R1, [SP, #16]
0x2E76	0x6809    LDR	R1, [R1, #0]
; T start address is: 16 (R4)
0x2E78	0x460C    MOV	R4, R1
0x2E7A	0xE024    B	L_free879
; psize end address is: 0 (R0)
; K end address is: 20 (R5)
L_free878:
0x2E7C	0x4909    LDR	R1, [PC, #36]
0x2E7E	0x680A    LDR	R2, [R1, #0]
0x2E80	0x9904    LDR	R1, [SP, #16]
0x2E82	0x4291    CMP	R1, R2
0x2E84	0xD31E    BCC	L_free880
0x2E86	0x9904    LDR	R1, [SP, #16]
0x2E88	0x600B    STR	R3, [R1, #0]
0x2E8A	0xF2030118  ADDW	R1, R3, #24
0x2E8E	0x600C    STR	R4, [R1, #0]
; T end address is: 16 (R4)
0x2E90	0xF2030208  ADDW	R2, R3, #8
0x2E94	0xF203010C  ADDW	R1, R3, #12
0x2E98	0xF000B810  B	#32
0x2E9C	0x22082000  	__Lib_dlmalloc__gm_+0
0x2EA0	0x22302000  	__Lib_dlmalloc__gm_+40
0x2EA4	0x22182000  	__Lib_dlmalloc__gm_+16
0x2EA8	0x23382000  	__Lib_dlmalloc__gm_+304
0x2EAC	0x220C2000  	__Lib_dlmalloc__gm_+4
0x2EB0	0x221C2000  	__Lib_dlmalloc__gm_+20
0x2EB4	0x22102000  	__Lib_dlmalloc__gm_+8
0x2EB8	0xFFFF0000  	#65535
0x2EBC	0x600B    STR	R3, [R1, #0]
; tp end address is: 12 (R3)
0x2EBE	0x6809    LDR	R1, [R1, #0]
0x2EC0	0x6011    STR	R1, [R2, #0]
0x2EC2	0xE021    B	L_free875
L_free880:
0x2EC4	0xE020    B	L_free875
L_free879:
; T start address is: 16 (R4)
; K start address is: 20 (R5)
; psize start address is: 0 (R0)
; tp start address is: 12 (R3)
0x2EC6	0xE01E    B	L_free882
; psize end address is: 0 (R0)
; K end address is: 20 (R5)
L_free877:
0x2EC8	0xF2040108  ADDW	R1, R4, #8
0x2ECC	0x6809    LDR	R1, [R1, #0]
; F start address is: 0 (R0)
0x2ECE	0x4608    MOV	R0, R1
0x2ED0	0x4914    LDR	R1, [PC, #80]
0x2ED2	0x6809    LDR	R1, [R1, #0]
0x2ED4	0x428C    CMP	R4, R1
0x2ED6	0xD315    BCC	L__free1387
0x2ED8	0x4912    LDR	R1, [PC, #72]
0x2EDA	0x6809    LDR	R1, [R1, #0]
0x2EDC	0x4288    CMP	R0, R1
0x2EDE	0xD311    BCC	L__free1386
L__free1343:
0x2EE0	0xF2040208  ADDW	R2, R4, #8
0x2EE4	0xF200010C  ADDW	R1, R0, #12
0x2EE8	0x600B    STR	R3, [R1, #0]
0x2EEA	0x6809    LDR	R1, [R1, #0]
0x2EEC	0x6011    STR	R1, [R2, #0]
0x2EEE	0xF2030108  ADDW	R1, R3, #8
0x2EF2	0x6008    STR	R0, [R1, #0]
; F end address is: 0 (R0)
0x2EF4	0xF203010C  ADDW	R1, R3, #12
0x2EF8	0x600C    STR	R4, [R1, #0]
; T end address is: 16 (R4)
0x2EFA	0xF2030218  ADDW	R2, R3, #24
; tp end address is: 12 (R3)
0x2EFE	0x2100    MOVS	R1, #0
0x2F00	0x6011    STR	R1, [R2, #0]
0x2F02	0xE001    B	L_free875
L__free1387:
L__free1386:
0x2F04	0xE000    B	L_free875
L_free882:
; T start address is: 16 (R4)
; K start address is: 20 (R5)
; psize start address is: 0 (R0)
; tp start address is: 12 (R3)
; tp end address is: 12 (R3)
; psize end address is: 0 (R0)
; K end address is: 20 (R5)
; T end address is: 16 (R4)
0x2F06	0xE7A2    B	L_free874
L_free875:
L_free871:
;__Lib_dlmalloc.c, 4855 :: 		if (--fm->release_checks == 0)
0x2F08	0x4A07    LDR	R2, [PC, #28]
0x2F0A	0x6811    LDR	R1, [R2, #0]
0x2F0C	0x1E49    SUBS	R1, R1, #1
0x2F0E	0x6011    STR	R1, [R2, #0]
0x2F10	0xB911    CBNZ	R1, L_free887
;__Lib_dlmalloc.c, 4856 :: 		release_unused_segments(fm);
0x2F12	0x4806    LDR	R0, [PC, #24]
0x2F14	0xF7FEF964  BL	__Lib_dlmalloc_release_unused_segments+0
L_free887:
;__Lib_dlmalloc.c, 4857 :: 		}
L_free865:
;__Lib_dlmalloc.c, 4858 :: 		goto postaction;
0x2F18	0xE7FF    B	___free_postaction
;__Lib_dlmalloc.c, 4813 :: 		if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
L__free1389:
L__free1388:
;__Lib_dlmalloc.c, 4783 :: 		if (RTCHECK(ok_address(fm, p) && ok_inuse(p))) {
L__free1391:
L__free1390:
;__Lib_dlmalloc.c, 4861 :: 		erroraction:
___free_erroraction:
;__Lib_dlmalloc.c, 4863 :: 		postaction:
___free_postaction:
;__Lib_dlmalloc.c, 4866 :: 		}
L_free738:
;__Lib_dlmalloc.c, 4870 :: 		}
L_end_free:
0x2F1A	0xF8DDE000  LDR	LR, [SP, #0]
0x2F1E	0xB005    ADD	SP, SP, #20
0x2F20	0x4770    BX	LR
0x2F22	0xBF00    NOP
0x2F24	0x22182000  	__Lib_dlmalloc__gm_+16
0x2F28	0x22282000  	__Lib_dlmalloc__gm_+32
0x2F2C	0x22082000  	__Lib_dlmalloc__gm_+0
; end of _free
__Lib_dlmalloc_release_unused_segments:
;__Lib_dlmalloc.c, 4329 :: 		static size_t release_unused_segments(mstate m) {
; m start address is: 0 (R0)
0x11E0	0xB096    SUB	SP, SP, #88
0x11E2	0x4604    MOV	R4, R0
; m end address is: 0 (R0)
; m start address is: 16 (R4)
;__Lib_dlmalloc.c, 4330 :: 		size_t released = 0;
; released start address is: 0 (R0)
0x11E4	0xF04F0000  MOV	R0, #0
;__Lib_dlmalloc.c, 4331 :: 		int32_t nsegs = 0;
; nsegs start address is: 12 (R3)
0x11E8	0xF04F0300  MOV	R3, #0
;__Lib_dlmalloc.c, 4332 :: 		msegmentptr pred = &m->seg;
0x11EC	0xF50471E0  ADD	R1, R4, #448
;__Lib_dlmalloc.c, 4333 :: 		msegmentptr sp = pred->next;
0x11F0	0x3108    ADDS	R1, #8
0x11F2	0x680A    LDR	R2, [R1, #0]
; sp start address is: 8 (R2)
; nsegs end address is: 12 (R3)
; m end address is: 16 (R4)
; released end address is: 0 (R0)
; sp end address is: 8 (R2)
;__Lib_dlmalloc.c, 4334 :: 		while (sp != 0) {
L___Lib_dlmalloc_release_unused_segments318:
; sp start address is: 8 (R2)
; nsegs start address is: 12 (R3)
; released start address is: 0 (R0)
; m start address is: 16 (R4)
0x11F4	0x2A00    CMP	R2, #0
0x11F6	0xF0008246  BEQ	L___Lib_dlmalloc_release_unused_segments319
;__Lib_dlmalloc.c, 4335 :: 		uint8_t* base = sp->base;
0x11FA	0x6811    LDR	R1, [R2, #0]
; base start address is: 28 (R7)
0x11FC	0x460F    MOV	R7, R1
;__Lib_dlmalloc.c, 4336 :: 		size_t size = sp->size;
0x11FE	0x1D11    ADDS	R1, R2, #4
0x1200	0x6809    LDR	R1, [R1, #0]
; size start address is: 32 (R8)
0x1202	0x4688    MOV	R8, R1
;__Lib_dlmalloc.c, 4337 :: 		msegmentptr next = sp->next;
0x1204	0xF2020108  ADDW	R1, R2, #8
0x1208	0x680D    LDR	R5, [R1, #0]
; next start address is: 20 (R5)
;__Lib_dlmalloc.c, 4338 :: 		++nsegs;
0x120A	0x1C5E    ADDS	R6, R3, #1
; nsegs end address is: 12 (R3)
; nsegs start address is: 24 (R6)
;__Lib_dlmalloc.c, 4339 :: 		if (is_mmapped_segment(sp) && !is_extern_segment(sp)) {
0x120C	0xF202010C  ADDW	R1, R2, #12
0x1210	0x6809    LDR	R1, [R1, #0]
0x1212	0xF0010100  AND	R1, R1, #0
0x1216	0x2900    CMP	R1, #0
0x1218	0xF000822E  BEQ	L___Lib_dlmalloc_release_unused_segments1221
0x121C	0xF202010C  ADDW	R1, R2, #12
; sp end address is: 8 (R2)
0x1220	0x6809    LDR	R1, [R1, #0]
0x1222	0xF0010108  AND	R1, R1, #8
0x1226	0x2900    CMP	R1, #0
0x1228	0xF0408229  BNE	L___Lib_dlmalloc_release_unused_segments1222
L___Lib_dlmalloc_release_unused_segments1205:
;__Lib_dlmalloc.c, 4340 :: 		mchunkptr p = align_as_chunk(base);
0x122C	0xF2070108  ADDW	R1, R7, #8
0x1230	0xF0010107  AND	R1, R1, #7
0x1234	0xB911    CBNZ	R1, L___Lib_dlmalloc_release_unused_segments323
0x1236	0x2100    MOVS	R1, #0
0x1238	0x9101    STR	R1, [SP, #4]
0x123A	0xE008    B	L___Lib_dlmalloc_release_unused_segments324
L___Lib_dlmalloc_release_unused_segments323:
0x123C	0xF2070108  ADDW	R1, R7, #8
0x1240	0xF0010107  AND	R1, R1, #7
0x1244	0xF1C10108  RSB	R1, R1, #8
0x1248	0xF0010107  AND	R1, R1, #7
0x124C	0x9101    STR	R1, [SP, #4]
L___Lib_dlmalloc_release_unused_segments324:
0x124E	0x9901    LDR	R1, [SP, #4]
0x1250	0x1879    ADDS	R1, R7, R1
0x1252	0x9114    STR	R1, [SP, #80]
;__Lib_dlmalloc.c, 4341 :: 		size_t psize = chunksize(p);
0x1254	0x1D0B    ADDS	R3, R1, #4
0x1256	0x681A    LDR	R2, [R3, #0]
0x1258	0xF06F0107  MVN	R1, #7
0x125C	0xEA020101  AND	R1, R2, R1, LSL #0
0x1260	0x9115    STR	R1, [SP, #84]
;__Lib_dlmalloc.c, 4343 :: 		if (!is_inuse(p) && (uint8_t*)p + psize >= base + size - TOP_FOOT_SIZE) {
0x1262	0x6819    LDR	R1, [R3, #0]
0x1264	0xF0010103  AND	R1, R1, #3
0x1268	0x2901    CMP	R1, #1
0x126A	0xF04081F4  BNE	L___Lib_dlmalloc_release_unused_segments1219
0x126E	0x9A15    LDR	R2, [SP, #84]
0x1270	0x9914    LDR	R1, [SP, #80]
0x1272	0x188B    ADDS	R3, R1, R2
0x1274	0xEB070208  ADD	R2, R7, R8, LSL #0
; base end address is: 28 (R7)
; size end address is: 32 (R8)
0x1278	0x49FB    LDR	R1, [PC, #1004]
0x127A	0xF0010107  AND	R1, R1, #7
0x127E	0xB911    CBNZ	R1, L___Lib_dlmalloc_release_unused_segments325
0x1280	0x2100    MOVS	R1, #0
0x1282	0x9102    STR	R1, [SP, #8]
0x1284	0xE007    B	L___Lib_dlmalloc_release_unused_segments326
L___Lib_dlmalloc_release_unused_segments325:
0x1286	0x49F8    LDR	R1, [PC, #992]
0x1288	0xF0010107  AND	R1, R1, #7
0x128C	0xF1C10108  RSB	R1, R1, #8
0x1290	0xF0010107  AND	R1, R1, #7
0x1294	0x9102    STR	R1, [SP, #8]
L___Lib_dlmalloc_release_unused_segments326:
0x1296	0x9902    LDR	R1, [SP, #8]
0x1298	0x3118    ADDS	R1, #24
0x129A	0x3110    ADDS	R1, #16
0x129C	0x1A51    SUB	R1, R2, R1
0x129E	0x428B    CMP	R3, R1
0x12A0	0xF0C081DD  BCC	L___Lib_dlmalloc_release_unused_segments1220
L___Lib_dlmalloc_release_unused_segments1204:
;__Lib_dlmalloc.c, 4344 :: 		tchunkptr tp = (tchunkptr)p;
0x12A4	0x9914    LDR	R1, [SP, #80]
0x12A6	0x9113    STR	R1, [SP, #76]
;__Lib_dlmalloc.c, 4346 :: 		if (p == m->dv) {
0x12A8	0xF2040114  ADDW	R1, R4, #20
0x12AC	0x680A    LDR	R2, [R1, #0]
0x12AE	0x9914    LDR	R1, [SP, #80]
0x12B0	0x4291    CMP	R1, R2
0x12B2	0xD109    BNE	L___Lib_dlmalloc_release_unused_segments330
;__Lib_dlmalloc.c, 4347 :: 		m->dv = 0;
0x12B4	0xF2040214  ADDW	R2, R4, #20
0x12B8	0x2100    MOVS	R1, #0
0x12BA	0x6011    STR	R1, [R2, #0]
;__Lib_dlmalloc.c, 4348 :: 		m->dvsize = 0;
0x12BC	0xF2040208  ADDW	R2, R4, #8
0x12C0	0x2100    MOVS	R1, #0
0x12C2	0x6011    STR	R1, [R2, #0]
;__Lib_dlmalloc.c, 4349 :: 		}
0x12C4	0x4627    MOV	R7, R4
0x12C6	0xE0D3    B	L___Lib_dlmalloc_release_unused_segments331
L___Lib_dlmalloc_release_unused_segments330:
;__Lib_dlmalloc.c, 4351 :: 		unlink_large_chunk(m, tp);
0x12C8	0x9913    LDR	R1, [SP, #76]
0x12CA	0x3118    ADDS	R1, #24
0x12CC	0x6809    LDR	R1, [R1, #0]
0x12CE	0x9109    STR	R1, [SP, #36]
0x12D0	0x9913    LDR	R1, [SP, #76]
0x12D2	0x310C    ADDS	R1, #12
0x12D4	0x680A    LDR	R2, [R1, #0]
0x12D6	0x9913    LDR	R1, [SP, #76]
0x12D8	0x428A    CMP	R2, R1
0x12DA	0xD025    BEQ	L___Lib_dlmalloc_release_unused_segments332
0x12DC	0x9913    LDR	R1, [SP, #76]
0x12DE	0x3108    ADDS	R1, #8
0x12E0	0x680A    LDR	R2, [R1, #0]
0x12E2	0x9203    STR	R2, [SP, #12]
0x12E4	0x9913    LDR	R1, [SP, #76]
0x12E6	0x310C    ADDS	R1, #12
0x12E8	0x6809    LDR	R1, [R1, #0]
0x12EA	0x910A    STR	R1, [SP, #40]
0x12EC	0xF2040110  ADDW	R1, R4, #16
0x12F0	0x6809    LDR	R1, [R1, #0]
0x12F2	0x428A    CMP	R2, R1
0x12F4	0xD316    BCC	L___Lib_dlmalloc_release_unused_segments1208
0x12F6	0x9903    LDR	R1, [SP, #12]
0x12F8	0x310C    ADDS	R1, #12
0x12FA	0x680A    LDR	R2, [R1, #0]
0x12FC	0x9913    LDR	R1, [SP, #76]
0x12FE	0x428A    CMP	R2, R1
0x1300	0xD110    BNE	L___Lib_dlmalloc_release_unused_segments1207
0x1302	0x990A    LDR	R1, [SP, #40]
0x1304	0x3108    ADDS	R1, #8
0x1306	0x680A    LDR	R2, [R1, #0]
0x1308	0x9913    LDR	R1, [SP, #76]
0x130A	0x428A    CMP	R2, R1
0x130C	0xD10A    BNE	L___Lib_dlmalloc_release_unused_segments1206
L___Lib_dlmalloc_release_unused_segments1203:
0x130E	0x9903    LDR	R1, [SP, #12]
0x1310	0xF201020C  ADDW	R2, R1, #12
0x1314	0x990A    LDR	R1, [SP, #40]
0x1316	0x6011    STR	R1, [R2, #0]
0x1318	0x990A    LDR	R1, [SP, #40]
0x131A	0xF2010208  ADDW	R2, R1, #8
0x131E	0x9903    LDR	R1, [SP, #12]
0x1320	0x6011    STR	R1, [R2, #0]
0x1322	0xE7FF    B	L___Lib_dlmalloc_release_unused_segments336
L___Lib_dlmalloc_release_unused_segments1208:
L___Lib_dlmalloc_release_unused_segments1207:
L___Lib_dlmalloc_release_unused_segments1206:
L___Lib_dlmalloc_release_unused_segments336:
0x1324	0x4627    MOV	R7, R4
0x1326	0xE02D    B	L___Lib_dlmalloc_release_unused_segments337
L___Lib_dlmalloc_release_unused_segments332:
0x1328	0x9913    LDR	R1, [SP, #76]
0x132A	0x3110    ADDS	R1, #16
0x132C	0x1D09    ADDS	R1, R1, #4
0x132E	0x9105    STR	R1, [SP, #20]
0x1330	0x6809    LDR	R1, [R1, #0]
0x1332	0x910A    STR	R1, [SP, #40]
0x1334	0xB939    CBNZ	R1, L___Lib_dlmalloc_release_unused_segments1210
0x1336	0x9913    LDR	R1, [SP, #76]
0x1338	0x3110    ADDS	R1, #16
0x133A	0x9105    STR	R1, [SP, #20]
0x133C	0x6809    LDR	R1, [R1, #0]
0x133E	0x910A    STR	R1, [SP, #40]
0x1340	0xB909    CBNZ	R1, L___Lib_dlmalloc_release_unused_segments1209
0x1342	0x4627    MOV	R7, R4
0x1344	0xE01E    B	L___Lib_dlmalloc_release_unused_segments340
L___Lib_dlmalloc_release_unused_segments1210:
L___Lib_dlmalloc_release_unused_segments1209:
; nsegs end address is: 24 (R6)
0x1346	0x4633    MOV	R3, R6
L___Lib_dlmalloc_release_unused_segments341:
; nsegs start address is: 12 (R3)
; nsegs start address is: 12 (R3)
; nsegs end address is: 12 (R3)
; next start address is: 20 (R5)
; next end address is: 20 (R5)
; m start address is: 16 (R4)
; m end address is: 16 (R4)
; released start address is: 0 (R0)
; released end address is: 0 (R0)
0x1348	0x990A    LDR	R1, [SP, #40]
0x134A	0x3110    ADDS	R1, #16
0x134C	0x1D09    ADDS	R1, R1, #4
0x134E	0x9104    STR	R1, [SP, #16]
0x1350	0x6809    LDR	R1, [R1, #0]
0x1352	0xB929    CBNZ	R1, L___Lib_dlmalloc_release_unused_segments1212
; next end address is: 20 (R5)
; nsegs end address is: 12 (R3)
; m end address is: 16 (R4)
; released end address is: 0 (R0)
; released start address is: 0 (R0)
; m start address is: 16 (R4)
; nsegs start address is: 12 (R3)
; next start address is: 20 (R5)
0x1354	0x990A    LDR	R1, [SP, #40]
0x1356	0x3110    ADDS	R1, #16
0x1358	0x9104    STR	R1, [SP, #16]
0x135A	0x6809    LDR	R1, [R1, #0]
0x135C	0xB901    CBNZ	R1, L___Lib_dlmalloc_release_unused_segments1211
0x135E	0xE005    B	L___Lib_dlmalloc_release_unused_segments342
L___Lib_dlmalloc_release_unused_segments1212:
L___Lib_dlmalloc_release_unused_segments1211:
0x1360	0x9904    LDR	R1, [SP, #16]
0x1362	0x9105    STR	R1, [SP, #20]
0x1364	0x9904    LDR	R1, [SP, #16]
0x1366	0x6809    LDR	R1, [R1, #0]
0x1368	0x910A    STR	R1, [SP, #40]
0x136A	0xE7ED    B	L___Lib_dlmalloc_release_unused_segments341
L___Lib_dlmalloc_release_unused_segments342:
0x136C	0xF2040110  ADDW	R1, R4, #16
0x1370	0x680A    LDR	R2, [R1, #0]
0x1372	0x9905    LDR	R1, [SP, #20]
0x1374	0x4291    CMP	R1, R2
0x1376	0xD303    BCC	L___Lib_dlmalloc_release_unused_segments345
0x1378	0x2200    MOVS	R2, #0
0x137A	0x9905    LDR	R1, [SP, #20]
0x137C	0x600A    STR	R2, [R1, #0]
0x137E	0xE7FF    B	L___Lib_dlmalloc_release_unused_segments346
L___Lib_dlmalloc_release_unused_segments345:
L___Lib_dlmalloc_release_unused_segments346:
0x1380	0x461E    MOV	R6, R3
; nsegs end address is: 12 (R3)
; m end address is: 16 (R4)
; released end address is: 0 (R0)
0x1382	0x4627    MOV	R7, R4
L___Lib_dlmalloc_release_unused_segments340:
; next end address is: 20 (R5)
; released start address is: 0 (R0)
; m start address is: 28 (R7)
; next start address is: 20 (R5)
; nsegs start address is: 24 (R6)
; m end address is: 28 (R7)
; next end address is: 20 (R5)
; nsegs end address is: 24 (R6)
; released end address is: 0 (R0)
L___Lib_dlmalloc_release_unused_segments337:
; nsegs start address is: 24 (R6)
; next start address is: 20 (R5)
; m start address is: 28 (R7)
; released start address is: 0 (R0)
0x1384	0x9909    LDR	R1, [SP, #36]
0x1386	0x2900    CMP	R1, #0
0x1388	0xF0008072  BEQ	L___Lib_dlmalloc_release_unused_segments347
0x138C	0xF5077298  ADD	R2, R7, #304
0x1390	0x9913    LDR	R1, [SP, #76]
0x1392	0x311C    ADDS	R1, #28
0x1394	0x6809    LDR	R1, [R1, #0]
0x1396	0x0089    LSLS	R1, R1, #2
0x1398	0x1851    ADDS	R1, R2, R1
0x139A	0x9108    STR	R1, [SP, #32]
0x139C	0x680A    LDR	R2, [R1, #0]
0x139E	0x9913    LDR	R1, [SP, #76]
0x13A0	0x4291    CMP	R1, R2
0x13A2	0xD111    BNE	L___Lib_dlmalloc_release_unused_segments348
0x13A4	0x9A0A    LDR	R2, [SP, #40]
0x13A6	0x9908    LDR	R1, [SP, #32]
0x13A8	0x600A    STR	R2, [R1, #0]
0x13AA	0x9908    LDR	R1, [SP, #32]
0x13AC	0x6809    LDR	R1, [R1, #0]
0x13AE	0xB951    CBNZ	R1, L___Lib_dlmalloc_release_unused_segments349
0x13B0	0x1D3B    ADDS	R3, R7, #4
0x13B2	0x9913    LDR	R1, [SP, #76]
0x13B4	0x311C    ADDS	R1, #28
0x13B6	0x680A    LDR	R2, [R1, #0]
0x13B8	0xF04F0101  MOV	R1, #1
0x13BC	0x4091    LSLS	R1, R2
0x13BE	0x43CA    MVN	R2, R1
0x13C0	0x6819    LDR	R1, [R3, #0]
0x13C2	0x4011    ANDS	R1, R2
0x13C4	0x6019    STR	R1, [R3, #0]
L___Lib_dlmalloc_release_unused_segments349:
0x13C6	0xE017    B	L___Lib_dlmalloc_release_unused_segments350
L___Lib_dlmalloc_release_unused_segments348:
0x13C8	0xF2070110  ADDW	R1, R7, #16
0x13CC	0x680A    LDR	R2, [R1, #0]
0x13CE	0x9909    LDR	R1, [SP, #36]
0x13D0	0x4291    CMP	R1, R2
0x13D2	0xD311    BCC	L___Lib_dlmalloc_release_unused_segments351
0x13D4	0x9909    LDR	R1, [SP, #36]
0x13D6	0x3110    ADDS	R1, #16
0x13D8	0x680A    LDR	R2, [R1, #0]
0x13DA	0x9913    LDR	R1, [SP, #76]
0x13DC	0x428A    CMP	R2, R1
0x13DE	0xD105    BNE	L___Lib_dlmalloc_release_unused_segments352
0x13E0	0x9909    LDR	R1, [SP, #36]
0x13E2	0xF2010210  ADDW	R2, R1, #16
0x13E6	0x990A    LDR	R1, [SP, #40]
0x13E8	0x6011    STR	R1, [R2, #0]
0x13EA	0xE004    B	L___Lib_dlmalloc_release_unused_segments353
L___Lib_dlmalloc_release_unused_segments352:
0x13EC	0x9909    LDR	R1, [SP, #36]
0x13EE	0x3110    ADDS	R1, #16
0x13F0	0x1D0A    ADDS	R2, R1, #4
0x13F2	0x990A    LDR	R1, [SP, #40]
0x13F4	0x6011    STR	R1, [R2, #0]
L___Lib_dlmalloc_release_unused_segments353:
0x13F6	0xE7FF    B	L___Lib_dlmalloc_release_unused_segments354
L___Lib_dlmalloc_release_unused_segments351:
L___Lib_dlmalloc_release_unused_segments354:
L___Lib_dlmalloc_release_unused_segments350:
0x13F8	0x990A    LDR	R1, [SP, #40]
0x13FA	0x2900    CMP	R1, #0
0x13FC	0xD038    BEQ	L___Lib_dlmalloc_release_unused_segments355
0x13FE	0xF2070110  ADDW	R1, R7, #16
0x1402	0x680A    LDR	R2, [R1, #0]
0x1404	0x990A    LDR	R1, [SP, #40]
0x1406	0x4291    CMP	R1, R2
0x1408	0xD332    BCC	L___Lib_dlmalloc_release_unused_segments356
0x140A	0x990A    LDR	R1, [SP, #40]
0x140C	0xF2010218  ADDW	R2, R1, #24
0x1410	0x9909    LDR	R1, [SP, #36]
0x1412	0x6011    STR	R1, [R2, #0]
0x1414	0x9913    LDR	R1, [SP, #76]
0x1416	0x3110    ADDS	R1, #16
0x1418	0x6809    LDR	R1, [R1, #0]
0x141A	0x9106    STR	R1, [SP, #24]
0x141C	0xB181    CBZ	R1, L___Lib_dlmalloc_release_unused_segments357
0x141E	0xF2070110  ADDW	R1, R7, #16
0x1422	0x680A    LDR	R2, [R1, #0]
0x1424	0x9906    LDR	R1, [SP, #24]
0x1426	0x4291    CMP	R1, R2
0x1428	0xD30A    BCC	L___Lib_dlmalloc_release_unused_segments358
0x142A	0x990A    LDR	R1, [SP, #40]
0x142C	0xF2010210  ADDW	R2, R1, #16
0x1430	0x9906    LDR	R1, [SP, #24]
0x1432	0x6011    STR	R1, [R2, #0]
0x1434	0x9906    LDR	R1, [SP, #24]
0x1436	0xF2010218  ADDW	R2, R1, #24
0x143A	0x990A    LDR	R1, [SP, #40]
0x143C	0x6011    STR	R1, [R2, #0]
0x143E	0xE7FF    B	L___Lib_dlmalloc_release_unused_segments359
L___Lib_dlmalloc_release_unused_segments358:
L___Lib_dlmalloc_release_unused_segments359:
L___Lib_dlmalloc_release_unused_segments357:
0x1440	0x9913    LDR	R1, [SP, #76]
0x1442	0x3110    ADDS	R1, #16
0x1444	0x1D09    ADDS	R1, R1, #4
0x1446	0x6809    LDR	R1, [R1, #0]
0x1448	0x9107    STR	R1, [SP, #28]
0x144A	0xB181    CBZ	R1, L___Lib_dlmalloc_release_unused_segments360
0x144C	0xF2070110  ADDW	R1, R7, #16
0x1450	0x680A    LDR	R2, [R1, #0]
0x1452	0x9907    LDR	R1, [SP, #28]
0x1454	0x4291    CMP	R1, R2
0x1456	0xD30A    BCC	L___Lib_dlmalloc_release_unused_segments361
0x1458	0x990A    LDR	R1, [SP, #40]
0x145A	0x3110    ADDS	R1, #16
0x145C	0x1D0A    ADDS	R2, R1, #4
0x145E	0x9907    LDR	R1, [SP, #28]
0x1460	0x6011    STR	R1, [R2, #0]
0x1462	0x9907    LDR	R1, [SP, #28]
0x1464	0xF2010218  ADDW	R2, R1, #24
0x1468	0x990A    LDR	R1, [SP, #40]
0x146A	0x6011    STR	R1, [R2, #0]
0x146C	0xE7FF    B	L___Lib_dlmalloc_release_unused_segments362
L___Lib_dlmalloc_release_unused_segments361:
L___Lib_dlmalloc_release_unused_segments362:
L___Lib_dlmalloc_release_unused_segments360:
0x146E	0xE7FF    B	L___Lib_dlmalloc_release_unused_segments363
L___Lib_dlmalloc_release_unused_segments356:
L___Lib_dlmalloc_release_unused_segments363:
L___Lib_dlmalloc_release_unused_segments355:
L___Lib_dlmalloc_release_unused_segments347:
;__Lib_dlmalloc.c, 4352 :: 		}
; m end address is: 28 (R7)
; next end address is: 20 (R5)
; nsegs end address is: 24 (R6)
; released end address is: 0 (R0)
L___Lib_dlmalloc_release_unused_segments331:
;__Lib_dlmalloc.c, 4353 :: 		if (CALL_MUNMAP(base, size) == 0) {
; released start address is: 0 (R0)
; m start address is: 28 (R7)
; next start address is: 20 (R5)
; nsegs start address is: 24 (R6)
;__Lib_dlmalloc.c, 4359 :: 		}
L___Lib_dlmalloc_release_unused_segments364:
;__Lib_dlmalloc.c, 4361 :: 		insert_large_chunk(m, tp, psize);
0x1470	0x9915    LDR	R1, [SP, #84]
0x1472	0x0A09    LSRS	R1, R1, #8
0x1474	0x910B    STR	R1, [SP, #44]
0x1476	0xB911    CBNZ	R1, L___Lib_dlmalloc_release_unused_segments366
0x1478	0x2100    MOVS	R1, #0
0x147A	0x9112    STR	R1, [SP, #72]
0x147C	0xE02C    B	L___Lib_dlmalloc_release_unused_segments367
L___Lib_dlmalloc_release_unused_segments366:
0x147E	0x9A0B    LDR	R2, [SP, #44]
0x1480	0x497A    LDR	R1, [PC, #488]
0x1482	0x428A    CMP	R2, R1
0x1484	0xD903    BLS	L___Lib_dlmalloc_release_unused_segments368
0x1486	0xF04F011F  MOV	R1, #31
0x148A	0x9112    STR	R1, [SP, #72]
0x148C	0xE024    B	L___Lib_dlmalloc_release_unused_segments369
L___Lib_dlmalloc_release_unused_segments368:
0x148E	0x990B    LDR	R1, [SP, #44]
0x1490	0xF5A17180  SUB	R1, R1, #256
0x1494	0x0C09    LSRS	R1, R1, #16
0x1496	0xF0010208  AND	R2, R1, #8
0x149A	0x990B    LDR	R1, [SP, #44]
0x149C	0xFA01F302  LSL	R3, R1, R2
0x14A0	0xF5A35180  SUB	R1, R3, #4096
0x14A4	0x0C09    LSRS	R1, R1, #16
0x14A6	0xF0010104  AND	R1, R1, #4
0x14AA	0x1852    ADDS	R2, R2, R1
0x14AC	0xFA03F401  LSL	R4, R3, R1
0x14B0	0xF5A44180  SUB	R1, R4, #16384
0x14B4	0x0C09    LSRS	R1, R1, #16
0x14B6	0xF0010302  AND	R3, R1, #2
0x14BA	0x18D1    ADDS	R1, R2, R3
0x14BC	0xF1C1020E  RSB	R2, R1, #14
0x14C0	0xFA04F103  LSL	R1, R4, R3
0x14C4	0x0BC9    LSRS	R1, R1, #15
0x14C6	0x1851    ADDS	R1, R2, R1
0x14C8	0x004B    LSLS	R3, R1, #1
0x14CA	0x1DCA    ADDS	R2, R1, #7
0x14CC	0x9915    LDR	R1, [SP, #84]
0x14CE	0x40D1    LSRS	R1, R2
0x14D0	0xF0010101  AND	R1, R1, #1
0x14D4	0x1859    ADDS	R1, R3, R1
0x14D6	0x9112    STR	R1, [SP, #72]
L___Lib_dlmalloc_release_unused_segments369:
L___Lib_dlmalloc_release_unused_segments367:
0x14D8	0xF5077298  ADD	R2, R7, #304
0x14DC	0x9912    LDR	R1, [SP, #72]
0x14DE	0x0089    LSLS	R1, R1, #2
0x14E0	0x1851    ADDS	R1, R2, R1
0x14E2	0x9111    STR	R1, [SP, #68]
0x14E4	0x9913    LDR	R1, [SP, #76]
0x14E6	0xF201021C  ADDW	R2, R1, #28
0x14EA	0x9912    LDR	R1, [SP, #72]
0x14EC	0x6011    STR	R1, [R2, #0]
0x14EE	0x9913    LDR	R1, [SP, #76]
0x14F0	0x3110    ADDS	R1, #16
0x14F2	0x460B    MOV	R3, R1
0x14F4	0x1D0A    ADDS	R2, R1, #4
0x14F6	0x2100    MOVS	R1, #0
0x14F8	0x6011    STR	R1, [R2, #0]
0x14FA	0x6811    LDR	R1, [R2, #0]
0x14FC	0x6019    STR	R1, [R3, #0]
0x14FE	0x1D39    ADDS	R1, R7, #4
0x1500	0x680B    LDR	R3, [R1, #0]
0x1502	0x9A12    LDR	R2, [SP, #72]
0x1504	0xF04F0101  MOV	R1, #1
0x1508	0x4091    LSLS	R1, R2
0x150A	0xEA030101  AND	R1, R3, R1, LSL #0
0x150E	0xB9F1    CBNZ	R1, L___Lib_dlmalloc_release_unused_segments370
0x1510	0x1D3B    ADDS	R3, R7, #4
0x1512	0x9A12    LDR	R2, [SP, #72]
0x1514	0xF04F0101  MOV	R1, #1
0x1518	0xFA01F202  LSL	R2, R1, R2
0x151C	0x6819    LDR	R1, [R3, #0]
0x151E	0x4311    ORRS	R1, R2
0x1520	0x6019    STR	R1, [R3, #0]
0x1522	0x9A13    LDR	R2, [SP, #76]
0x1524	0x9911    LDR	R1, [SP, #68]
0x1526	0x600A    STR	R2, [R1, #0]
0x1528	0x9913    LDR	R1, [SP, #76]
0x152A	0xF2010218  ADDW	R2, R1, #24
0x152E	0x9911    LDR	R1, [SP, #68]
0x1530	0x6011    STR	R1, [R2, #0]
0x1532	0x9913    LDR	R1, [SP, #76]
0x1534	0xF2010308  ADDW	R3, R1, #8
0x1538	0x9913    LDR	R1, [SP, #76]
0x153A	0xF201020C  ADDW	R2, R1, #12
0x153E	0x9913    LDR	R1, [SP, #76]
0x1540	0x6011    STR	R1, [R2, #0]
0x1542	0x6811    LDR	R1, [R2, #0]
0x1544	0x6019    STR	R1, [R3, #0]
0x1546	0x4633    MOV	R3, R6
0x1548	0x462A    MOV	R2, R5
0x154A	0x4639    MOV	R1, R7
0x154C	0xE07F    B	L___Lib_dlmalloc_release_unused_segments371
L___Lib_dlmalloc_release_unused_segments370:
0x154E	0x9911    LDR	R1, [SP, #68]
0x1550	0x6809    LDR	R1, [R1, #0]
0x1552	0x910F    STR	R1, [SP, #60]
0x1554	0x9912    LDR	R1, [SP, #72]
0x1556	0x291F    CMP	R1, #31
0x1558	0xD102    BNE	L___Lib_dlmalloc_release_unused_segments372
0x155A	0x2100    MOVS	R1, #0
0x155C	0x910C    STR	R1, [SP, #48]
0x155E	0xE006    B	L___Lib_dlmalloc_release_unused_segments373
L___Lib_dlmalloc_release_unused_segments372:
0x1560	0x9912    LDR	R1, [SP, #72]
0x1562	0x0849    LSRS	R1, R1, #1
0x1564	0x3108    ADDS	R1, #8
0x1566	0x1E89    SUBS	R1, R1, #2
0x1568	0xF1C1011F  RSB	R1, R1, #31
0x156C	0x910C    STR	R1, [SP, #48]
L___Lib_dlmalloc_release_unused_segments373:
0x156E	0x9A0C    LDR	R2, [SP, #48]
0x1570	0x9915    LDR	R1, [SP, #84]
0x1572	0x4091    LSLS	R1, R2
0x1574	0x9110    STR	R1, [SP, #64]
; m end address is: 28 (R7)
; next end address is: 20 (R5)
; nsegs end address is: 24 (R6)
; released end address is: 0 (R0)
0x1576	0x9600    STR	R6, [SP, #0]
0x1578	0x4606    MOV	R6, R0
0x157A	0x462C    MOV	R4, R5
0x157C	0x463D    MOV	R5, R7
0x157E	0x9800    LDR	R0, [SP, #0]
L___Lib_dlmalloc_release_unused_segments374:
; nsegs start address is: 0 (R0)
; next start address is: 16 (R4)
; m start address is: 20 (R5)
; released start address is: 24 (R6)
0x1580	0x990F    LDR	R1, [SP, #60]
0x1582	0x1D09    ADDS	R1, R1, #4
0x1584	0x680A    LDR	R2, [R1, #0]
0x1586	0xF06F0107  MVN	R1, #7
0x158A	0x400A    ANDS	R2, R1
0x158C	0x9915    LDR	R1, [SP, #84]
0x158E	0x428A    CMP	R2, R1
0x1590	0xD02D    BEQ	L___Lib_dlmalloc_release_unused_segments377
0x1592	0x990F    LDR	R1, [SP, #60]
0x1594	0xF2010210  ADDW	R2, R1, #16
0x1598	0x9910    LDR	R1, [SP, #64]
0x159A	0x0FC9    LSRS	R1, R1, #31
0x159C	0xF0010101  AND	R1, R1, #1
0x15A0	0x0089    LSLS	R1, R1, #2
0x15A2	0x1852    ADDS	R2, R2, R1
0x15A4	0x920D    STR	R2, [SP, #52]
0x15A6	0x9910    LDR	R1, [SP, #64]
0x15A8	0x0049    LSLS	R1, R1, #1
0x15AA	0x9110    STR	R1, [SP, #64]
0x15AC	0x6811    LDR	R1, [R2, #0]
0x15AE	0xB119    CBZ	R1, L___Lib_dlmalloc_release_unused_segments378
0x15B0	0x990D    LDR	R1, [SP, #52]
0x15B2	0x6809    LDR	R1, [R1, #0]
0x15B4	0x910F    STR	R1, [SP, #60]
0x15B6	0xE019    B	L___Lib_dlmalloc_release_unused_segments379
L___Lib_dlmalloc_release_unused_segments378:
0x15B8	0xF2050110  ADDW	R1, R5, #16
0x15BC	0x680A    LDR	R2, [R1, #0]
0x15BE	0x990D    LDR	R1, [SP, #52]
0x15C0	0x4291    CMP	R1, R2
0x15C2	0xD312    BCC	L___Lib_dlmalloc_release_unused_segments380
0x15C4	0x9A13    LDR	R2, [SP, #76]
0x15C6	0x990D    LDR	R1, [SP, #52]
0x15C8	0x600A    STR	R2, [R1, #0]
0x15CA	0x9913    LDR	R1, [SP, #76]
0x15CC	0xF2010218  ADDW	R2, R1, #24
0x15D0	0x990F    LDR	R1, [SP, #60]
0x15D2	0x6011    STR	R1, [R2, #0]
0x15D4	0x9913    LDR	R1, [SP, #76]
0x15D6	0xF2010308  ADDW	R3, R1, #8
0x15DA	0x9913    LDR	R1, [SP, #76]
0x15DC	0xF201020C  ADDW	R2, R1, #12
0x15E0	0x9913    LDR	R1, [SP, #76]
0x15E2	0x6011    STR	R1, [R2, #0]
0x15E4	0x6811    LDR	R1, [R2, #0]
0x15E6	0x6019    STR	R1, [R3, #0]
0x15E8	0xE02D    B	L___Lib_dlmalloc_release_unused_segments375
L___Lib_dlmalloc_release_unused_segments380:
0x15EA	0xE02C    B	L___Lib_dlmalloc_release_unused_segments375
L___Lib_dlmalloc_release_unused_segments379:
0x15EC	0xE02A    B	L___Lib_dlmalloc_release_unused_segments382
L___Lib_dlmalloc_release_unused_segments377:
0x15EE	0x990F    LDR	R1, [SP, #60]
0x15F0	0x3108    ADDS	R1, #8
0x15F2	0x6809    LDR	R1, [R1, #0]
0x15F4	0x910E    STR	R1, [SP, #56]
0x15F6	0xF2050110  ADDW	R1, R5, #16
0x15FA	0x680A    LDR	R2, [R1, #0]
0x15FC	0x990F    LDR	R1, [SP, #60]
0x15FE	0x4291    CMP	R1, R2
0x1600	0xD31F    BCC	L___Lib_dlmalloc_release_unused_segments1214
0x1602	0xF2050110  ADDW	R1, R5, #16
0x1606	0x680A    LDR	R2, [R1, #0]
0x1608	0x990E    LDR	R1, [SP, #56]
0x160A	0x4291    CMP	R1, R2
0x160C	0xD319    BCC	L___Lib_dlmalloc_release_unused_segments1213
L___Lib_dlmalloc_release_unused_segments1200:
0x160E	0x990F    LDR	R1, [SP, #60]
0x1610	0xF2010308  ADDW	R3, R1, #8
0x1614	0x990E    LDR	R1, [SP, #56]
0x1616	0xF201020C  ADDW	R2, R1, #12
0x161A	0x9913    LDR	R1, [SP, #76]
0x161C	0x6011    STR	R1, [R2, #0]
0x161E	0x6811    LDR	R1, [R2, #0]
0x1620	0x6019    STR	R1, [R3, #0]
0x1622	0x9913    LDR	R1, [SP, #76]
0x1624	0xF2010208  ADDW	R2, R1, #8
0x1628	0x990E    LDR	R1, [SP, #56]
0x162A	0x6011    STR	R1, [R2, #0]
0x162C	0x9913    LDR	R1, [SP, #76]
0x162E	0xF201020C  ADDW	R2, R1, #12
0x1632	0x990F    LDR	R1, [SP, #60]
0x1634	0x6011    STR	R1, [R2, #0]
0x1636	0x9913    LDR	R1, [SP, #76]
0x1638	0xF2010218  ADDW	R2, R1, #24
0x163C	0x2100    MOVS	R1, #0
0x163E	0x6011    STR	R1, [R2, #0]
0x1640	0xE001    B	L___Lib_dlmalloc_release_unused_segments375
L___Lib_dlmalloc_release_unused_segments1214:
L___Lib_dlmalloc_release_unused_segments1213:
0x1642	0xE000    B	L___Lib_dlmalloc_release_unused_segments375
L___Lib_dlmalloc_release_unused_segments382:
0x1644	0xE79C    B	L___Lib_dlmalloc_release_unused_segments374
L___Lib_dlmalloc_release_unused_segments375:
0x1646	0x4603    MOV	R3, R0
; nsegs end address is: 0 (R0)
; next end address is: 16 (R4)
; m end address is: 20 (R5)
; released end address is: 24 (R6)
0x1648	0x4630    MOV	R0, R6
0x164A	0x4622    MOV	R2, R4
0x164C	0x4629    MOV	R1, R5
L___Lib_dlmalloc_release_unused_segments371:
;__Lib_dlmalloc.c, 4343 :: 		if (!is_inuse(p) && (uint8_t*)p + psize >= base + size - TOP_FOOT_SIZE) {
; released start address is: 0 (R0)
; m start address is: 4 (R1)
; next start address is: 8 (R2)
; nsegs start address is: 12 (R3)
0x164E	0x9300    STR	R3, [SP, #0]
; m end address is: 4 (R1)
; next end address is: 8 (R2)
; nsegs end address is: 12 (R3)
; released end address is: 0 (R0)
0x1650	0x460B    MOV	R3, R1
0x1652	0x9900    LDR	R1, [SP, #0]
0x1654	0xE002    B	L___Lib_dlmalloc_release_unused_segments1216
L___Lib_dlmalloc_release_unused_segments1219:
0x1656	0x4631    MOV	R1, R6
0x1658	0x462A    MOV	R2, R5
0x165A	0x4623    MOV	R3, R4
L___Lib_dlmalloc_release_unused_segments1216:
; nsegs start address is: 4 (R1)
; next start address is: 8 (R2)
; m start address is: 12 (R3)
; released start address is: 0 (R0)
; nsegs end address is: 4 (R1)
; next end address is: 8 (R2)
; m end address is: 12 (R3)
; released end address is: 0 (R0)
0x165C	0xE008    B	L___Lib_dlmalloc_release_unused_segments1215
L___Lib_dlmalloc_release_unused_segments1220:
0x165E	0x4631    MOV	R1, R6
0x1660	0x462A    MOV	R2, R5
0x1662	0x4623    MOV	R3, R4
0x1664	0xF000B804  B	#8
0x1668	0x00080000  	#8
0x166C	0xFFFF0000  	#65535
L___Lib_dlmalloc_release_unused_segments1215:
;__Lib_dlmalloc.c, 4339 :: 		if (is_mmapped_segment(sp) && !is_extern_segment(sp)) {
; nsegs start address is: 4 (R1)
; next start address is: 8 (R2)
; m start address is: 12 (R3)
; released start address is: 0 (R0)
; nsegs end address is: 4 (R1)
; next end address is: 8 (R2)
; m end address is: 12 (R3)
; released end address is: 0 (R0)
0x1670	0x461C    MOV	R4, R3
0x1672	0x460B    MOV	R3, R1
0x1674	0x4611    MOV	R1, R2
0x1676	0xE001    B	L___Lib_dlmalloc_release_unused_segments1218
L___Lib_dlmalloc_release_unused_segments1221:
0x1678	0x4633    MOV	R3, R6
0x167A	0x4629    MOV	R1, R5
L___Lib_dlmalloc_release_unused_segments1218:
; nsegs start address is: 12 (R3)
; next start address is: 4 (R1)
; m start address is: 16 (R4)
; released start address is: 0 (R0)
; nsegs end address is: 12 (R3)
; next end address is: 4 (R1)
; m end address is: 16 (R4)
; released end address is: 0 (R0)
0x167C	0xE001    B	L___Lib_dlmalloc_release_unused_segments1217
L___Lib_dlmalloc_release_unused_segments1222:
0x167E	0x4633    MOV	R3, R6
0x1680	0x4629    MOV	R1, R5
L___Lib_dlmalloc_release_unused_segments1217:
;__Lib_dlmalloc.c, 4365 :: 		if (NO_SEGMENT_TRAVERSAL) /* scan only first segment */
; nsegs start address is: 12 (R3)
; next start address is: 4 (R1)
; m start address is: 16 (R4)
; released start address is: 0 (R0)
;__Lib_dlmalloc.c, 4366 :: 		break;
L___Lib_dlmalloc_release_unused_segments387:
;__Lib_dlmalloc.c, 4368 :: 		sp = next;
; sp start address is: 8 (R2)
0x1682	0x460A    MOV	R2, R1
; next end address is: 4 (R1)
;__Lib_dlmalloc.c, 4369 :: 		}
; sp end address is: 8 (R2)
0x1684	0xE5B6    B	L___Lib_dlmalloc_release_unused_segments318
L___Lib_dlmalloc_release_unused_segments319:
;__Lib_dlmalloc.c, 4371 :: 		m->release_checks = (((size_t) nsegs > (size_t) MAX_RELEASE_CHECK_RATE)?
0x1686	0xF2040220  ADDW	R2, R4, #32
; m end address is: 16 (R4)
0x168A	0xF1B33FFF  CMP	R3, #-1
0x168E	0xD901    BLS	L___Lib_dlmalloc_release_unused_segments388
;__Lib_dlmalloc.c, 4372 :: 		(size_t) nsegs : (size_t) MAX_RELEASE_CHECK_RATE);
; ?FLOC____Lib_dlmalloc_release_unused_segments?T3569 start address is: 4 (R1)
0x1690	0x4619    MOV	R1, R3
; nsegs end address is: 12 (R3)
; ?FLOC____Lib_dlmalloc_release_unused_segments?T3569 end address is: 4 (R1)
0x1692	0xE001    B	L___Lib_dlmalloc_release_unused_segments389
L___Lib_dlmalloc_release_unused_segments388:
; ?FLOC____Lib_dlmalloc_release_unused_segments?T3569 start address is: 4 (R1)
0x1694	0xF04F31FF  MOV	R1, #-1
; ?FLOC____Lib_dlmalloc_release_unused_segments?T3569 end address is: 4 (R1)
L___Lib_dlmalloc_release_unused_segments389:
; ?FLOC____Lib_dlmalloc_release_unused_segments?T3569 start address is: 4 (R1)
0x1698	0x6011    STR	R1, [R2, #0]
; ?FLOC____Lib_dlmalloc_release_unused_segments?T3569 end address is: 4 (R1)
;__Lib_dlmalloc.c, 4373 :: 		return released;
; released end address is: 0 (R0)
;__Lib_dlmalloc.c, 4374 :: 		}
L_end_release_unused_segments:
0x169A	0xB016    ADD	SP, SP, #88
0x169C	0x4770    BX	LR
; end of __Lib_dlmalloc_release_unused_segments
tasks_prvInitialiseNewTask:
;tasks.c, 774 :: 		const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
0x361C	0xB084    SUB	SP, SP, #16
0x361E	0xF8CDE000  STR	LR, [SP, #0]
;tasks.c, 807 :: 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
0x3622	0x980A    LDR	R0, [SP, #40]
0x3624	0x3030    ADDS	R0, #48
0x3626	0x6802    LDR	R2, [R0, #0]
0x3628	0x9806    LDR	R0, [SP, #24]
0x362A	0x1E41    SUBS	R1, R0, #1
0x362C	0x2004    MOVS	R0, #4
0x362E	0x4348    MULS	R0, R1, R0
0x3630	0x1810    ADDS	R0, R2, R0
0x3632	0x9001    STR	R0, [SP, #4]
;tasks.c, 808 :: 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
0x3634	0x9901    LDR	R1, [SP, #4]
0x3636	0xF06F0007  MVN	R0, #7
0x363A	0xEA010000  AND	R0, R1, R0, LSL #0
0x363E	0x9001    STR	R0, [SP, #4]
;tasks.c, 811 :: 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
0x3640	0x9801    LDR	R0, [SP, #4]
0x3642	0xF0000007  AND	R0, R0, #7
0x3646	0x2800    CMP	R0, #0
0x3648	0xF2400000  MOVW	R0, #0
0x364C	0xD100    BNE	L_tasks_prvInitialiseNewTask394
0x364E	0x2001    MOVS	R0, #1
L_tasks_prvInitialiseNewTask394:
0x3650	0xB910    CBNZ	R0, L_tasks_prvInitialiseNewTask8
0x3652	0xF7FFFFD5  BL	tasks_vPortRaiseBASEPRI+0
L_tasks_prvInitialiseNewTask9:
0x3656	0xE7FE    B	L_tasks_prvInitialiseNewTask9
L_tasks_prvInitialiseNewTask8:
;tasks.c, 827 :: 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
0x3658	0xF04F0000  MOV	R0, #0
0x365C	0x9002    STR	R0, [SP, #8]
L_tasks_prvInitialiseNewTask11:
0x365E	0x9802    LDR	R0, [SP, #8]
0x3660	0x2810    CMP	R0, #16
0x3662	0xD213    BCS	L_tasks_prvInitialiseNewTask12
;tasks.c, 829 :: 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
0x3664	0x980A    LDR	R0, [SP, #40]
0x3666	0x3034    ADDS	R0, #52
0x3668	0x4601    MOV	R1, R0
0x366A	0x9802    LDR	R0, [SP, #8]
0x366C	0x180A    ADDS	R2, R1, R0
0x366E	0x9902    LDR	R1, [SP, #8]
0x3670	0x9805    LDR	R0, [SP, #20]
0x3672	0x1840    ADDS	R0, R0, R1
0x3674	0x7800    LDRB	R0, [R0, #0]
0x3676	0x7010    STRB	R0, [R2, #0]
;tasks.c, 834 :: 		if( pcName[ x ] == 0x00 )
0x3678	0x9902    LDR	R1, [SP, #8]
0x367A	0x9805    LDR	R0, [SP, #20]
0x367C	0x1840    ADDS	R0, R0, R1
0x367E	0x7800    LDRB	R0, [R0, #0]
0x3680	0xB900    CBNZ	R0, L_tasks_prvInitialiseNewTask14
;tasks.c, 836 :: 		break;
0x3682	0xE003    B	L_tasks_prvInitialiseNewTask12
;tasks.c, 837 :: 		}
L_tasks_prvInitialiseNewTask14:
;tasks.c, 827 :: 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
0x3684	0x9802    LDR	R0, [SP, #8]
0x3686	0x1C40    ADDS	R0, R0, #1
0x3688	0x9002    STR	R0, [SP, #8]
;tasks.c, 842 :: 		}
0x368A	0xE7E8    B	L_tasks_prvInitialiseNewTask11
L_tasks_prvInitialiseNewTask12:
;tasks.c, 846 :: 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
0x368C	0x980A    LDR	R0, [SP, #40]
0x368E	0x3034    ADDS	R0, #52
0x3690	0xF200010F  ADDW	R1, R0, #15
0x3694	0x2000    MOVS	R0, #0
0x3696	0x7008    STRB	R0, [R1, #0]
;tasks.c, 850 :: 		if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
0x3698	0x9808    LDR	R0, [SP, #32]
0x369A	0x2810    CMP	R0, #16
0x369C	0xD303    BCC	L_tasks_prvInitialiseNewTask16
;tasks.c, 852 :: 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
0x369E	0xF04F000F  MOV	R0, #15
0x36A2	0x9008    STR	R0, [SP, #32]
;tasks.c, 853 :: 		}
0x36A4	0xE7FF    B	L_tasks_prvInitialiseNewTask17
L_tasks_prvInitialiseNewTask16:
;tasks.c, 857 :: 		}
L_tasks_prvInitialiseNewTask17:
;tasks.c, 859 :: 		pxNewTCB->uxPriority = uxPriority;
0x36A6	0x980A    LDR	R0, [SP, #40]
0x36A8	0xF200012C  ADDW	R1, R0, #44
0x36AC	0x9808    LDR	R0, [SP, #32]
0x36AE	0x6008    STR	R0, [R1, #0]
;tasks.c, 862 :: 		pxNewTCB->uxBasePriority = uxPriority;
0x36B0	0x980A    LDR	R0, [SP, #40]
0x36B2	0xF2000144  ADDW	R1, R0, #68
0x36B6	0x9808    LDR	R0, [SP, #32]
0x36B8	0x6008    STR	R0, [R1, #0]
;tasks.c, 863 :: 		pxNewTCB->uxMutexesHeld = 0;
0x36BA	0x980A    LDR	R0, [SP, #40]
0x36BC	0xF2000148  ADDW	R1, R0, #72
0x36C0	0x2000    MOVS	R0, #0
0x36C2	0x6008    STR	R0, [R1, #0]
;tasks.c, 867 :: 		vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
0x36C4	0x980A    LDR	R0, [SP, #40]
0x36C6	0x1D00    ADDS	R0, R0, #4
0x36C8	0xB401    PUSH	(R0)
0x36CA	0xF7FEFF9F  BL	_vListInitialiseItem+0
0x36CE	0xB001    ADD	SP, SP, #4
;tasks.c, 868 :: 		vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
0x36D0	0x980A    LDR	R0, [SP, #40]
0x36D2	0x3018    ADDS	R0, #24
0x36D4	0xB401    PUSH	(R0)
0x36D6	0xF7FEFF99  BL	_vListInitialiseItem+0
0x36DA	0xB001    ADD	SP, SP, #4
;tasks.c, 872 :: 		listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
0x36DC	0x980A    LDR	R0, [SP, #40]
0x36DE	0x1D00    ADDS	R0, R0, #4
0x36E0	0xF200010C  ADDW	R1, R0, #12
0x36E4	0x980A    LDR	R0, [SP, #40]
0x36E6	0x6008    STR	R0, [R1, #0]
;tasks.c, 875 :: 		listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
0x36E8	0x980A    LDR	R0, [SP, #40]
0x36EA	0x3018    ADDS	R0, #24
0x36EC	0x4601    MOV	R1, R0
0x36EE	0x9808    LDR	R0, [SP, #32]
0x36F0	0xF1C00010  RSB	R0, R0, #16
0x36F4	0x6008    STR	R0, [R1, #0]
;tasks.c, 876 :: 		listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
0x36F6	0x980A    LDR	R0, [SP, #40]
0x36F8	0x3018    ADDS	R0, #24
0x36FA	0xF200010C  ADDW	R1, R0, #12
0x36FE	0x980A    LDR	R0, [SP, #40]
0x3700	0x6008    STR	R0, [R1, #0]
;tasks.c, 918 :: 		pxNewTCB->ulNotifiedValue = 0;
0x3702	0x980A    LDR	R0, [SP, #40]
0x3704	0xF200014C  ADDW	R1, R0, #76
0x3708	0x2000    MOVS	R0, #0
0x370A	0x6008    STR	R0, [R1, #0]
;tasks.c, 919 :: 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
0x370C	0x980A    LDR	R0, [SP, #40]
0x370E	0xF2000150  ADDW	R1, R0, #80
0x3712	0x2000    MOVS	R0, #0
0x3714	0x7008    STRB	R0, [R1, #0]
;tasks.c, 946 :: 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
0x3716	0x980A    LDR	R0, [SP, #40]
0x3718	0x9003    STR	R0, [SP, #12]
0x371A	0x9807    LDR	R0, [SP, #28]
0x371C	0xB401    PUSH	(R0)
0x371E	0x9805    LDR	R0, [SP, #20]
0x3720	0xB401    PUSH	(R0)
0x3722	0x9803    LDR	R0, [SP, #12]
0x3724	0xB401    PUSH	(R0)
0x3726	0xF7FEFFDF  BL	_pxPortInitialiseStack+0
0x372A	0xB003    ADD	SP, SP, #12
0x372C	0x9903    LDR	R1, [SP, #12]
0x372E	0x6008    STR	R0, [R1, #0]
;tasks.c, 950 :: 		if( ( void * ) pxCreatedTask != NULL )
0x3730	0x9809    LDR	R0, [SP, #36]
0x3732	0xB118    CBZ	R0, L_tasks_prvInitialiseNewTask18
;tasks.c, 954 :: 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
0x3734	0x990A    LDR	R1, [SP, #40]
0x3736	0x9809    LDR	R0, [SP, #36]
0x3738	0x6001    STR	R1, [R0, #0]
;tasks.c, 955 :: 		}
0x373A	0xE7FF    B	L_tasks_prvInitialiseNewTask19
L_tasks_prvInitialiseNewTask18:
;tasks.c, 959 :: 		}
L_tasks_prvInitialiseNewTask19:
;tasks.c, 960 :: 		}
L_end_prvInitialiseNewTask:
0x373C	0xF8DDE000  LDR	LR, [SP, #0]
0x3740	0xB004    ADD	SP, SP, #16
0x3742	0x4770    BX	LR
; end of tasks_prvInitialiseNewTask
_vListInitialiseItem:
;list.c, 104 :: 		void vListInitialiseItem( ListItem_t * const pxItem )
;list.c, 107 :: 		pxItem->pvContainer = NULL;
0x260C	0x9800    LDR	R0, [SP, #0]
0x260E	0xF2000110  ADDW	R1, R0, #16
0x2612	0x2000    MOVS	R0, #0
0x2614	0x6008    STR	R0, [R1, #0]
;list.c, 113 :: 		}
L_end_vListInitialiseItem:
0x2616	0x4770    BX	LR
; end of _vListInitialiseItem
_pxPortInitialiseStack:
;port.c, 181 :: 		StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters)
;port.c, 188 :: 		pxTopOfStack--;
0x26E8	0x9800    LDR	R0, [SP, #0]
0x26EA	0x1F00    SUBS	R0, R0, #4
0x26EC	0x9000    STR	R0, [SP, #0]
;port.c, 190 :: 		*pxTopOfStack = portINITIAL_XPSR;                               // xPSR
0x26EE	0xF04F7180  MOV	R1, #16777216
0x26F2	0x9800    LDR	R0, [SP, #0]
0x26F4	0x6001    STR	R1, [R0, #0]
;port.c, 191 :: 		pxTopOfStack--;
0x26F6	0x9800    LDR	R0, [SP, #0]
0x26F8	0x1F00    SUBS	R0, R0, #4
0x26FA	0x9000    STR	R0, [SP, #0]
;port.c, 192 :: 		*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; // PC
0x26FC	0x9901    LDR	R1, [SP, #4]
0x26FE	0xF06F0001  MVN	R0, #1
0x2702	0x4001    ANDS	R1, R0
0x2704	0x9800    LDR	R0, [SP, #0]
0x2706	0x6001    STR	R1, [R0, #0]
;port.c, 193 :: 		pxTopOfStack--;
0x2708	0x9800    LDR	R0, [SP, #0]
0x270A	0x1F00    SUBS	R0, R0, #4
0x270C	0x9000    STR	R0, [SP, #0]
;port.c, 194 :: 		*pxTopOfStack = (StackType_t) portTASK_RETURN_ADDRESS;        // LR
0x270E	0x490A    LDR	R1, [PC, #40]
0x2710	0x9800    LDR	R0, [SP, #0]
0x2712	0x6001    STR	R1, [R0, #0]
;port.c, 195 :: 		pxTopOfStack -= 5;        // R12, R3, R2 and R1.
0x2714	0x2105    MOVS	R1, #5
0x2716	0x2004    MOVS	R0, #4
0x2718	0x4341    MULS	R1, R0, R1
0x271A	0x9800    LDR	R0, [SP, #0]
0x271C	0x1A40    SUB	R0, R0, R1
0x271E	0x9000    STR	R0, [SP, #0]
;port.c, 196 :: 		*pxTopOfStack = (StackType_t) pvParameters;                   // R0
0x2720	0x9902    LDR	R1, [SP, #8]
0x2722	0x9800    LDR	R0, [SP, #0]
0x2724	0x6001    STR	R1, [R0, #0]
;port.c, 197 :: 		pxTopOfStack -= 8;        // R11, R10, R9, R8, R7, R6, R5 and R4.
0x2726	0x2108    MOVS	R1, #8
0x2728	0x2004    MOVS	R0, #4
0x272A	0x4341    MULS	R1, R0, R1
0x272C	0x9800    LDR	R0, [SP, #0]
0x272E	0x1A40    SUB	R0, R0, R1
0x2730	0x9000    STR	R0, [SP, #0]
;port.c, 199 :: 		return pxTopOfStack;
0x2732	0x9800    LDR	R0, [SP, #0]
;port.c, 200 :: 		}
L_end_pxPortInitialiseStack:
0x2734	0x4770    BX	LR
0x2736	0xBF00    NOP
0x2738	0x273D0000  	port_prvTaskExitError+0
; end of _pxPortInitialiseStack
tasks_prvAddNewTaskToReadyList:
;tasks.c, 963 :: 		static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
0x3744	0xB081    SUB	SP, SP, #4
0x3746	0xF8CDE000  STR	LR, [SP, #0]
;tasks.c, 967 :: 		taskENTER_CRITICAL();
0x374A	0xF7FDFCD1  BL	_vPortEnterCritical+0
;tasks.c, 969 :: 		uxCurrentNumberOfTasks++;
0x374E	0x4831    LDR	R0, [PC, #196]
0x3750	0x6800    LDR	R0, [R0, #0]
0x3752	0x1C41    ADDS	R1, R0, #1
0x3754	0x482F    LDR	R0, [PC, #188]
0x3756	0x6001    STR	R1, [R0, #0]
;tasks.c, 970 :: 		if( pxCurrentTCB == NULL )
0x3758	0x482F    LDR	R0, [PC, #188]
0x375A	0x6800    LDR	R0, [R0, #0]
0x375C	0xB950    CBNZ	R0, L_tasks_prvAddNewTaskToReadyList20
;tasks.c, 974 :: 		pxCurrentTCB = pxNewTCB;
0x375E	0x9901    LDR	R1, [SP, #4]
0x3760	0x482D    LDR	R0, [PC, #180]
0x3762	0x6001    STR	R1, [R0, #0]
;tasks.c, 976 :: 		if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
0x3764	0x482B    LDR	R0, [PC, #172]
0x3766	0x6800    LDR	R0, [R0, #0]
0x3768	0x2801    CMP	R0, #1
0x376A	0xD102    BNE	L_tasks_prvAddNewTaskToReadyList21
;tasks.c, 981 :: 		prvInitialiseTaskLists();
0x376C	0xF7FEFF54  BL	tasks_prvInitialiseTaskLists+0
;tasks.c, 982 :: 		}
0x3770	0xE7FF    B	L_tasks_prvAddNewTaskToReadyList22
L_tasks_prvAddNewTaskToReadyList21:
;tasks.c, 986 :: 		}
L_tasks_prvAddNewTaskToReadyList22:
;tasks.c, 987 :: 		}
0x3772	0xE010    B	L_tasks_prvAddNewTaskToReadyList23
L_tasks_prvAddNewTaskToReadyList20:
;tasks.c, 993 :: 		if( xSchedulerRunning == pdFALSE )
0x3774	0x4829    LDR	R0, [PC, #164]
0x3776	0x6800    LDR	R0, [R0, #0]
0x3778	0xB968    CBNZ	R0, L_tasks_prvAddNewTaskToReadyList24
;tasks.c, 995 :: 		if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
0x377A	0x4827    LDR	R0, [PC, #156]
0x377C	0x6800    LDR	R0, [R0, #0]
0x377E	0x302C    ADDS	R0, #44
0x3780	0x6801    LDR	R1, [R0, #0]
0x3782	0x9801    LDR	R0, [SP, #4]
0x3784	0x302C    ADDS	R0, #44
0x3786	0x6800    LDR	R0, [R0, #0]
0x3788	0x4281    CMP	R1, R0
0x378A	0xD803    BHI	L_tasks_prvAddNewTaskToReadyList25
;tasks.c, 997 :: 		pxCurrentTCB = pxNewTCB;
0x378C	0x9901    LDR	R1, [SP, #4]
0x378E	0x4822    LDR	R0, [PC, #136]
0x3790	0x6001    STR	R1, [R0, #0]
;tasks.c, 998 :: 		}
0x3792	0xE7FF    B	L_tasks_prvAddNewTaskToReadyList26
L_tasks_prvAddNewTaskToReadyList25:
;tasks.c, 1002 :: 		}
L_tasks_prvAddNewTaskToReadyList26:
;tasks.c, 1003 :: 		}
0x3794	0xE7FF    B	L_tasks_prvAddNewTaskToReadyList27
L_tasks_prvAddNewTaskToReadyList24:
;tasks.c, 1007 :: 		}
L_tasks_prvAddNewTaskToReadyList27:
;tasks.c, 1008 :: 		}
L_tasks_prvAddNewTaskToReadyList23:
;tasks.c, 1010 :: 		uxTaskNumber++;
0x3796	0x4822    LDR	R0, [PC, #136]
0x3798	0x6800    LDR	R0, [R0, #0]
0x379A	0x1C41    ADDS	R1, R0, #1
0x379C	0x4820    LDR	R0, [PC, #128]
0x379E	0x6001    STR	R1, [R0, #0]
;tasks.c, 1020 :: 		prvAddTaskToReadyList( pxNewTCB );
0x37A0	0x9801    LDR	R0, [SP, #4]
0x37A2	0x302C    ADDS	R0, #44
0x37A4	0x6801    LDR	R1, [R0, #0]
0x37A6	0xF04F0001  MOV	R0, #1
0x37AA	0xFA00F101  LSL	R1, R0, R1
0x37AE	0x481D    LDR	R0, [PC, #116]
0x37B0	0x6800    LDR	R0, [R0, #0]
0x37B2	0xEA400101  ORR	R1, R0, R1, LSL #0
0x37B6	0x481B    LDR	R0, [PC, #108]
0x37B8	0x6001    STR	R1, [R0, #0]
0x37BA	0x9801    LDR	R0, [SP, #4]
0x37BC	0x1D00    ADDS	R0, R0, #4
0x37BE	0xB401    PUSH	(R0)
0x37C0	0x9802    LDR	R0, [SP, #8]
0x37C2	0x302C    ADDS	R0, #44
0x37C4	0x6801    LDR	R1, [R0, #0]
0x37C6	0x2014    MOVS	R0, #20
0x37C8	0x4341    MULS	R1, R0, R1
0x37CA	0x4817    LDR	R0, [PC, #92]
0x37CC	0x1840    ADDS	R0, R0, R1
0x37CE	0xB401    PUSH	(R0)
0x37D0	0xF7FFFE8A  BL	_vListInsertEnd+0
0x37D4	0xB002    ADD	SP, SP, #8
;tasks.c, 1024 :: 		taskEXIT_CRITICAL();
0x37D6	0xF7FDFCAF  BL	_vPortExitCritical+0
;tasks.c, 1026 :: 		if( xSchedulerRunning != pdFALSE )
0x37DA	0x4810    LDR	R0, [PC, #64]
0x37DC	0x6800    LDR	R0, [R0, #0]
0x37DE	0xB1A8    CBZ	R0, L_tasks_prvAddNewTaskToReadyList28
;tasks.c, 1030 :: 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
0x37E0	0x480D    LDR	R0, [PC, #52]
0x37E2	0x6800    LDR	R0, [R0, #0]
0x37E4	0x302C    ADDS	R0, #44
0x37E6	0x6801    LDR	R1, [R0, #0]
0x37E8	0x9801    LDR	R0, [SP, #4]
0x37EA	0x302C    ADDS	R0, #44
0x37EC	0x6800    LDR	R0, [R0, #0]
0x37EE	0x4281    CMP	R1, R0
0x37F0	0xD20B    BCS	L_tasks_prvAddNewTaskToReadyList29
;tasks.c, 1032 :: 		taskYIELD_IF_USING_PREEMPTION();
0x37F2	0x2201    MOVS	R2, #1
0x37F4	0xB252    SXTB	R2, R2
0x37F6	0x490D    LDR	R1, [PC, #52]
0x37F8	0x6808    LDR	R0, [R1, #0]
0x37FA	0xF362701C  BFI	R0, R2, BitPos(PENDSVSET_bit+0), #1
0x37FE	0x6008    STR	R0, [R1, #0]
0x3800	0xF3BF8F4F  DSB	#15
0x3804	0xF3BF8F6F  ISB	#15
;tasks.c, 1033 :: 		}
0x3808	0xE7FF    B	L_tasks_prvAddNewTaskToReadyList30
L_tasks_prvAddNewTaskToReadyList29:
;tasks.c, 1037 :: 		}
L_tasks_prvAddNewTaskToReadyList30:
;tasks.c, 1038 :: 		}
0x380A	0xE7FF    B	L_tasks_prvAddNewTaskToReadyList31
L_tasks_prvAddNewTaskToReadyList28:
;tasks.c, 1042 :: 		}
L_tasks_prvAddNewTaskToReadyList31:
;tasks.c, 1043 :: 		}
L_end_prvAddNewTaskToReadyList:
0x380C	0xF8DDE000  LDR	LR, [SP, #0]
0x3810	0xB001    ADD	SP, SP, #4
0x3812	0x4770    BX	LR
0x3814	0x00342000  	tasks_uxCurrentNumberOfTasks+0
0x3818	0x00202000  	_pxCurrentTCB+0
0x381C	0x00302000  	tasks_xSchedulerRunning+0
0x3820	0x00382000  	tasks_uxTaskNumber+0
0x3824	0x001C2000  	tasks_uxTopReadyPriority+0
0x3828	0x204C2000  	tasks_pxReadyTasksLists+0
0x382C	0xED04E000  	PENDSVSET_bit+0
; end of tasks_prvAddNewTaskToReadyList
tasks_prvInitialiseTaskLists:
;tasks.c, 3333 :: 		static void prvInitialiseTaskLists( void )
0x2618	0xB082    SUB	SP, SP, #8
0x261A	0xF8CDE000  STR	LR, [SP, #0]
;tasks.c, 3337 :: 		for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
0x261E	0xF04F0000  MOV	R0, #0
0x2622	0x9001    STR	R0, [SP, #4]
L_tasks_prvInitialiseTaskLists261:
0x2624	0x9801    LDR	R0, [SP, #4]
0x2626	0x2810    CMP	R0, #16
0x2628	0xD20C    BCS	L_tasks_prvInitialiseTaskLists262
;tasks.c, 3339 :: 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
0x262A	0x9901    LDR	R1, [SP, #4]
0x262C	0x2014    MOVS	R0, #20
0x262E	0x4341    MULS	R1, R0, R1
0x2630	0x4816    LDR	R0, [PC, #88]
0x2632	0x1840    ADDS	R0, R0, R1
0x2634	0xB401    PUSH	(R0)
0x2636	0xF7FFF833  BL	_vListInitialise+0
0x263A	0xB001    ADD	SP, SP, #4
;tasks.c, 3337 :: 		for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
0x263C	0x9801    LDR	R0, [SP, #4]
0x263E	0x1C40    ADDS	R0, R0, #1
0x2640	0x9001    STR	R0, [SP, #4]
;tasks.c, 3340 :: 		}
0x2642	0xE7EF    B	L_tasks_prvInitialiseTaskLists261
L_tasks_prvInitialiseTaskLists262:
;tasks.c, 3342 :: 		vListInitialise( &xDelayedTaskList1 );
0x2644	0x4812    LDR	R0, [PC, #72]
0x2646	0xB401    PUSH	(R0)
0x2648	0xF7FFF82A  BL	_vListInitialise+0
0x264C	0xB001    ADD	SP, SP, #4
;tasks.c, 3343 :: 		vListInitialise( &xDelayedTaskList2 );
0x264E	0x4811    LDR	R0, [PC, #68]
0x2650	0xB401    PUSH	(R0)
0x2652	0xF7FFF825  BL	_vListInitialise+0
0x2656	0xB001    ADD	SP, SP, #4
;tasks.c, 3344 :: 		vListInitialise( &xPendingReadyList );
0x2658	0x480F    LDR	R0, [PC, #60]
0x265A	0xB401    PUSH	(R0)
0x265C	0xF7FFF820  BL	_vListInitialise+0
0x2660	0xB001    ADD	SP, SP, #4
;tasks.c, 3348 :: 		vListInitialise( &xTasksWaitingTermination );
0x2662	0x480E    LDR	R0, [PC, #56]
0x2664	0xB401    PUSH	(R0)
0x2666	0xF7FFF81B  BL	_vListInitialise+0
0x266A	0xB001    ADD	SP, SP, #4
;tasks.c, 3354 :: 		vListInitialise( &xSuspendedTaskList );
0x266C	0x480C    LDR	R0, [PC, #48]
0x266E	0xB401    PUSH	(R0)
0x2670	0xF7FFF816  BL	_vListInitialise+0
0x2674	0xB001    ADD	SP, SP, #4
;tasks.c, 3360 :: 		pxDelayedTaskList = &xDelayedTaskList1;
0x2676	0x4906    LDR	R1, [PC, #24]
0x2678	0x480A    LDR	R0, [PC, #40]
0x267A	0x6001    STR	R1, [R0, #0]
;tasks.c, 3361 :: 		pxOverflowDelayedTaskList = &xDelayedTaskList2;
0x267C	0x4905    LDR	R1, [PC, #20]
0x267E	0x480A    LDR	R0, [PC, #40]
0x2680	0x6001    STR	R1, [R0, #0]
;tasks.c, 3362 :: 		}
L_end_prvInitialiseTaskLists:
0x2682	0xF8DDE000  LDR	LR, [SP, #0]
0x2686	0xB002    ADD	SP, SP, #8
0x2688	0x4770    BX	LR
0x268A	0xBF00    NOP
0x268C	0x204C2000  	tasks_pxReadyTasksLists+0
0x2690	0x218C2000  	tasks_xDelayedTaskList1+0
0x2694	0x21A02000  	tasks_xDelayedTaskList2+0
0x2698	0x21B42000  	tasks_xPendingReadyList+0
0x269C	0x21C82000  	tasks_xTasksWaitingTermination+0
0x26A0	0x21DC2000  	tasks_xSuspendedTaskList+0
0x26A4	0x20442000  	tasks_pxDelayedTaskList+0
0x26A8	0x20482000  	tasks_pxOverflowDelayedTaskList+0
; end of tasks_prvInitialiseTaskLists
_vListInitialise:
;list.c, 79 :: 		void vListInitialise( List_t * const pxList )
;list.c, 84 :: 		pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );                        /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
0x16A0	0x9800    LDR	R0, [SP, #0]
0x16A2	0x1D01    ADDS	R1, R0, #4
0x16A4	0x9800    LDR	R0, [SP, #0]
0x16A6	0x3008    ADDS	R0, #8
0x16A8	0x6008    STR	R0, [R1, #0]
;list.c, 88 :: 		pxList->xListEnd.xItemValue = portMAX_DELAY;
0x16AA	0x9800    LDR	R0, [SP, #0]
0x16AC	0x3008    ADDS	R0, #8
0x16AE	0x4601    MOV	R1, R0
0x16B0	0xF04F30FF  MOV	R0, #-1
0x16B4	0x6008    STR	R0, [R1, #0]
;list.c, 92 :: 		pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );        /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
0x16B6	0x9800    LDR	R0, [SP, #0]
0x16B8	0x3008    ADDS	R0, #8
0x16BA	0x1D01    ADDS	R1, R0, #4
0x16BC	0x9800    LDR	R0, [SP, #0]
0x16BE	0x3008    ADDS	R0, #8
0x16C0	0x6008    STR	R0, [R1, #0]
;list.c, 93 :: 		pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
0x16C2	0x9800    LDR	R0, [SP, #0]
0x16C4	0x3008    ADDS	R0, #8
0x16C6	0xF2000108  ADDW	R1, R0, #8
0x16CA	0x9800    LDR	R0, [SP, #0]
0x16CC	0x3008    ADDS	R0, #8
0x16CE	0x6008    STR	R0, [R1, #0]
;list.c, 95 :: 		pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
0x16D0	0x9800    LDR	R0, [SP, #0]
0x16D2	0x4601    MOV	R1, R0
0x16D4	0xF04F0000  MOV	R0, #0
0x16D8	0x6008    STR	R0, [R1, #0]
;list.c, 101 :: 		}
L_end_vListInitialise:
0x16DA	0x4770    BX	LR
; end of _vListInitialise
_vTaskStartScheduler:
;tasks.c, 1826 :: 		void vTaskStartScheduler( void )
0x3C88	0xB082    SUB	SP, SP, #8
0x3C8A	0xF8CDE000  STR	LR, [SP, #0]
;tasks.c, 1864 :: 		&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
0x3C8E	0x481B    LDR	R0, [PC, #108]
0x3C90	0xB401    PUSH	(R0)
;tasks.c, 1863 :: 		( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
0x3C92	0xF04F0000  MOV	R0, #0
0x3C96	0xB401    PUSH	(R0)
;tasks.c, 1862 :: 		( void * ) NULL,
0x3C98	0x2000    MOVS	R0, #0
0x3C9A	0xB401    PUSH	(R0)
;tasks.c, 1861 :: 		"IDLE", configMINIMAL_STACK_SIZE,
0x3C9C	0x2080    MOVS	R0, #128
0x3C9E	0xB401    PUSH	(R0)
0x3CA0	0x4817    LDR	R0, [PC, #92]
0x3CA2	0xB401    PUSH	(R0)
;tasks.c, 1860 :: 		xReturn = xTaskCreate(        prvIdleTask,
0x3CA4	0x4817    LDR	R0, [PC, #92]
0x3CA6	0xB401    PUSH	(R0)
;tasks.c, 1864 :: 		&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
0x3CA8	0xF7FFFE30  BL	_xTaskCreate+0
0x3CAC	0xB006    ADD	SP, SP, #24
0x3CAE	0x9001    STR	R0, [SP, #4]
;tasks.c, 1881 :: 		if( xReturn == pdPASS )
0x3CB0	0x9801    LDR	R0, [SP, #4]
0x3CB2	0x2801    CMP	R0, #1
0x3CB4	0xD113    BNE	L_vTaskStartScheduler154
;tasks.c, 1888 :: 		portDISABLE_INTERRUPTS();
0x3CB6	0xF7FFFCA3  BL	tasks_vPortRaiseBASEPRI+0
;tasks.c, 1898 :: 		xNextTaskUnblockTime = portMAX_DELAY;
0x3CBA	0xF04F31FF  MOV	R1, #-1
0x3CBE	0x4812    LDR	R0, [PC, #72]
0x3CC0	0x6001    STR	R1, [R0, #0]
;tasks.c, 1899 :: 		xSchedulerRunning = pdTRUE;
0x3CC2	0xF04F0101  MOV	R1, #1
0x3CC6	0x4811    LDR	R0, [PC, #68]
0x3CC8	0x6001    STR	R1, [R0, #0]
;tasks.c, 1900 :: 		xTickCount = ( TickType_t ) 0U;
0x3CCA	0xF04F0100  MOV	R1, #0
0x3CCE	0x4810    LDR	R0, [PC, #64]
0x3CD0	0x6001    STR	R1, [R0, #0]
;tasks.c, 1909 :: 		if( xPortStartScheduler() != pdFALSE )
0x3CD2	0xF7FFFDAD  BL	_xPortStartScheduler+0
0x3CD6	0x2800    CMP	R0, #0
0x3CD8	0xD000    BEQ	L_vTaskStartScheduler155
;tasks.c, 1913 :: 		}
0x3CDA	0xE7FF    B	L_vTaskStartScheduler156
L_vTaskStartScheduler155:
;tasks.c, 1917 :: 		}
L_vTaskStartScheduler156:
;tasks.c, 1918 :: 		}
0x3CDC	0xE00A    B	L_vTaskStartScheduler157
L_vTaskStartScheduler154:
;tasks.c, 1924 :: 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
0x3CDE	0x9801    LDR	R0, [SP, #4]
0x3CE0	0xF1B03FFF  CMP	R0, #-1
0x3CE4	0xF2400000  MOVW	R0, #0
0x3CE8	0xD000    BEQ	L__vTaskStartScheduler417
0x3CEA	0x2001    MOVS	R0, #1
L__vTaskStartScheduler417:
0x3CEC	0xB910    CBNZ	R0, L_vTaskStartScheduler158
0x3CEE	0xF7FFFC87  BL	tasks_vPortRaiseBASEPRI+0
L_vTaskStartScheduler159:
0x3CF2	0xE7FE    B	L_vTaskStartScheduler159
L_vTaskStartScheduler158:
;tasks.c, 1925 :: 		}
L_vTaskStartScheduler157:
;tasks.c, 1930 :: 		}
L_end_vTaskStartScheduler:
0x3CF4	0xF8DDE000  LDR	LR, [SP, #0]
0x3CF8	0xB002    ADD	SP, SP, #8
0x3CFA	0x4770    BX	LR
0x3CFC	0x002C2000  	tasks_xIdleTaskHandle+0
0x3D00	0x3FF20000  	?lstr_1_tasks+0
0x3D04	0x2F410000  	tasks_prvIdleTask+0
0x3D08	0x00182000  	tasks_xNextTaskUnblockTime+0
0x3D0C	0x00302000  	tasks_xSchedulerRunning+0
0x3D10	0x00102000  	tasks_xTickCount+0
; end of _vTaskStartScheduler
_xPortStartScheduler:
;port.c, 273 :: 		BaseType_t xPortStartScheduler()
0x3830	0xB084    SUB	SP, SP, #16
0x3832	0xF8CDE000  STR	LR, [SP, #0]
;port.c, 277 :: 		configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
L_xPortStartScheduler7:
;port.c, 283 :: 		(volatile uint8_t * const)(&NVIC_IPR0);
0x3836	0x4828    LDR	R0, [PC, #160]
0x3838	0x9003    STR	R0, [SP, #12]
;port.c, 293 :: 		ulOriginalPriority = *pucFirstUserPriorityRegister;
0x383A	0x9803    LDR	R0, [SP, #12]
0x383C	0x7800    LDRB	R0, [R0, #0]
0x383E	0x9001    STR	R0, [SP, #4]
;port.c, 297 :: 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
0x3840	0x21FF    MOVS	R1, #255
0x3842	0x9803    LDR	R0, [SP, #12]
0x3844	0x7001    STRB	R1, [R0, #0]
;port.c, 300 :: 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
0x3846	0x9803    LDR	R0, [SP, #12]
0x3848	0x7800    LDRB	R0, [R0, #0]
0x384A	0xF88D0008  STRB	R0, [SP, #8]
;port.c, 304 :: 		configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
0x384E	0xF89D0008  LDRB	R0, [SP, #8]
0x3852	0xF0000110  AND	R1, R0, #16
0x3856	0x4821    LDR	R0, [PC, #132]
0x3858	0x7001    STRB	R1, [R0, #0]
;port.c, 308 :: 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
0x385A	0x2107    MOVS	R1, #7
0x385C	0x4820    LDR	R0, [PC, #128]
0x385E	0x6001    STR	R1, [R0, #0]
;port.c, 309 :: 		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE)
L_xPortStartScheduler10:
0x3860	0xF89D0008  LDRB	R0, [SP, #8]
0x3864	0xF0000080  AND	R0, R0, #128
0x3868	0xB2C0    UXTB	R0, R0
;port.c, 310 :: 		== portTOP_BIT_OF_BYTE)
0x386A	0x2880    CMP	R0, #128
0x386C	0xD10A    BNE	L_xPortStartScheduler11
;port.c, 312 :: 		ulMaxPRIGROUPValue--;
0x386E	0x481C    LDR	R0, [PC, #112]
0x3870	0x6800    LDR	R0, [R0, #0]
0x3872	0x1E41    SUBS	R1, R0, #1
0x3874	0x481A    LDR	R0, [PC, #104]
0x3876	0x6001    STR	R1, [R0, #0]
;port.c, 313 :: 		ucMaxPriorityValue <<= (uint8_t)0x01;
0x3878	0xF89D0008  LDRB	R0, [SP, #8]
0x387C	0x0040    LSLS	R0, R0, #1
0x387E	0xF88D0008  STRB	R0, [SP, #8]
;port.c, 314 :: 		}
0x3882	0xE7ED    B	L_xPortStartScheduler10
L_xPortStartScheduler11:
;port.c, 338 :: 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
0x3884	0x4816    LDR	R0, [PC, #88]
0x3886	0x6800    LDR	R0, [R0, #0]
0x3888	0x0201    LSLS	R1, R0, #8
0x388A	0x4815    LDR	R0, [PC, #84]
0x388C	0x6001    STR	R1, [R0, #0]
;port.c, 339 :: 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
0x388E	0x4814    LDR	R0, [PC, #80]
0x3890	0x6800    LDR	R0, [R0, #0]
0x3892	0xF40061E0  AND	R1, R0, #1792
0x3896	0x4812    LDR	R0, [PC, #72]
0x3898	0x6001    STR	R1, [R0, #0]
;port.c, 343 :: 		*pucFirstUserPriorityRegister = ulOriginalPriority;
0x389A	0x9901    LDR	R1, [SP, #4]
0x389C	0x9803    LDR	R0, [SP, #12]
0x389E	0x7001    STRB	R1, [R0, #0]
;port.c, 348 :: 		SCB_SHPR3 |= portNVIC_PENDSV_PRI;
0x38A0	0x4810    LDR	R0, [PC, #64]
0x38A2	0x6800    LDR	R0, [R0, #0]
0x38A4	0xF440017F  ORR	R1, R0, #16711680
0x38A8	0x480E    LDR	R0, [PC, #56]
0x38AA	0x6001    STR	R1, [R0, #0]
;port.c, 349 :: 		SCB_SHPR3 |= portNVIC_SYSTICK_PRI;
0x38AC	0x480D    LDR	R0, [PC, #52]
0x38AE	0x6800    LDR	R0, [R0, #0]
0x38B0	0xF040417F  ORR	R1, R0, #-16777216
0x38B4	0x480B    LDR	R0, [PC, #44]
0x38B6	0x6001    STR	R1, [R0, #0]
;port.c, 353 :: 		vPortSetupTimerInterrupt();
0x38B8	0xF7FFFDDA  BL	_vPortSetupTimerInterrupt+0
;port.c, 356 :: 		uxCriticalNesting = 0;
0x38BC	0x2100    MOVS	R1, #0
0x38BE	0x480A    LDR	R0, [PC, #40]
0x38C0	0x6001    STR	R1, [R0, #0]
;port.c, 359 :: 		prvPortStartFirstTask();
0x38C2	0xF7FFFDC1  BL	port_prvPortStartFirstTask+0
;port.c, 367 :: 		vTaskSwitchContext();
0x38C6	0xF000F8B3  BL	_vTaskSwitchContext+0
;port.c, 368 :: 		prvTaskExitError();
0x38CA	0xF7FEFF37  BL	port_prvTaskExitError+0
;port.c, 371 :: 		return 0;
0x38CE	0x2000    MOVS	R0, #0
;port.c, 372 :: 		}
L_end_xPortStartScheduler:
0x38D0	0xF8DDE000  LDR	LR, [SP, #0]
0x38D4	0xB004    ADD	SP, SP, #16
0x38D6	0x4770    BX	LR
0x38D8	0xE400E000  	NVIC_IPR0+0
0x38DC	0x00042000  	port_ucMaxSysCallPriority+0
0x38E0	0x00082000  	port_ulMaxPRIGROUPValue+0
0x38E4	0xED20E000  	SCB_SHPR3+0
0x38E8	0x00002000  	port_uxCriticalNesting+0
; end of _xPortStartScheduler
_task1:
;main.c, 26 :: 		void task1(void *pvParameters)
0x26AC	0xB081    SUB	SP, SP, #4
0x26AE	0xF8CDE000  STR	LR, [SP, #0]
;main.c, 29 :: 		GPIO_Digital_Output(&GPIOB_ODR, _GPIO_PINMASK_5);
0x26B2	0xF2400120  MOVW	R1, #32
0x26B6	0x480A    LDR	R0, [PC, #40]
0x26B8	0xF7FFFC94  BL	_GPIO_Digital_Output+0
;main.c, 31 :: 		while (1)
L_task12:
;main.c, 33 :: 		vTaskDelay(pdMS_TO_TICKS(250));
0x26BC	0xF04F00FA  MOV	R0, #250
0x26C0	0xB401    PUSH	(R0)
0x26C2	0xF7FEFD55  BL	_vTaskDelay+0
0x26C6	0xB001    ADD	SP, SP, #4
;main.c, 34 :: 		GPIOB_ODR.B5 = ~GPIOB_ODR.B5;
0x26C8	0x4806    LDR	R0, [PC, #24]
0x26CA	0x6800    LDR	R0, [R0, #0]
0x26CC	0xF0800101  EOR	R1, R0, #1
0x26D0	0xB2C9    UXTB	R1, R1
0x26D2	0x4804    LDR	R0, [PC, #16]
0x26D4	0x6001    STR	R1, [R0, #0]
;main.c, 35 :: 		}
0x26D6	0xE7F1    B	L_task12
;main.c, 36 :: 		}
L_end_task1:
0x26D8	0xF8DDE000  LDR	LR, [SP, #0]
0x26DC	0xB001    ADD	SP, SP, #4
0x26DE	0x4770    BX	LR
0x26E0	0x0C0C4001  	GPIOB_ODR+0
0x26E4	0x81944221  	GPIOB_ODR+0
; end of _task1
_GPIO_Digital_Output:
;__Lib_GPIO_32F10x.c, 365 :: 		
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x1FE4	0xB081    SUB	SP, SP, #4
0x1FE6	0xF8CDE000  STR	LR, [SP, #0]
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 366 :: 		
0x1FEA	0x4A04    LDR	R2, [PC, #16]
0x1FEC	0xB289    UXTH	R1, R1
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
0x1FEE	0xF7FEFCCB  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 367 :: 		
L_end_GPIO_Digital_Output:
0x1FF2	0xF8DDE000  LDR	LR, [SP, #0]
0x1FF6	0xB001    ADD	SP, SP, #4
0x1FF8	0x4770    BX	LR
0x1FFA	0xBF00    NOP
0x1FFC	0x00140008  	#524308
; end of _GPIO_Digital_Output
_GPIO_Config:
;__Lib_GPIO_32F10x.c, 124 :: 		
; config start address is: 8 (R2)
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x0988	0xB081    SUB	SP, SP, #4
0x098A	0xF8CDE000  STR	LR, [SP, #0]
0x098E	0xB28C    UXTH	R4, R1
0x0990	0x4615    MOV	R5, R2
; config end address is: 8 (R2)
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 16 (R4)
; config start address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 129 :: 		
0x0992	0x4B77    LDR	R3, [PC, #476]
0x0994	0xEA000303  AND	R3, R0, R3, LSL #0
; port end address is: 0 (R0)
; port start address is: 24 (R6)
0x0998	0x461E    MOV	R6, R3
;__Lib_GPIO_32F10x.c, 131 :: 		
0x099A	0x4618    MOV	R0, R3
0x099C	0xF7FFFC08  BL	_GPIO_Clk_Enable+0
;__Lib_GPIO_32F10x.c, 134 :: 		
0x09A0	0xF1B40FFF  CMP	R4, #255
0x09A4	0xD10C    BNE	L_GPIO_Config18
;__Lib_GPIO_32F10x.c, 135 :: 		
0x09A6	0x4B73    LDR	R3, [PC, #460]
0x09A8	0x429D    CMP	R5, R3
0x09AA	0xD103    BNE	L_GPIO_Config19
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 136 :: 		
0x09AC	0xF04F3333  MOV	R3, #858993459
0x09B0	0x6033    STR	R3, [R6, #0]
; port end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 137 :: 		
0x09B2	0xE0D9    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 138 :: 		
L_GPIO_Config19:
;__Lib_GPIO_32F10x.c, 139 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
0x09B4	0x2D42    CMP	R5, #66
0x09B6	0xD103    BNE	L_GPIO_Config20
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 140 :: 		
0x09B8	0xF04F3344  MOV	R3, #1145324612
0x09BC	0x6033    STR	R3, [R6, #0]
; port end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 141 :: 		
0x09BE	0xE0D3    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 142 :: 		
L_GPIO_Config20:
;__Lib_GPIO_32F10x.c, 143 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
L_GPIO_Config18:
;__Lib_GPIO_32F10x.c, 145 :: 		
0x09C0	0xF64F73FF  MOVW	R3, #65535
0x09C4	0x429C    CMP	R4, R3
0x09C6	0xD114    BNE	L_GPIO_Config21
;__Lib_GPIO_32F10x.c, 146 :: 		
0x09C8	0x4B6A    LDR	R3, [PC, #424]
0x09CA	0x429D    CMP	R5, R3
0x09CC	0xD107    BNE	L_GPIO_Config22
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 147 :: 		
0x09CE	0xF04F3333  MOV	R3, #858993459
0x09D2	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F10x.c, 148 :: 		
0x09D4	0x1D34    ADDS	R4, R6, #4
; port end address is: 24 (R6)
0x09D6	0xF04F3333  MOV	R3, #858993459
0x09DA	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 149 :: 		
0x09DC	0xE0C4    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 150 :: 		
L_GPIO_Config22:
;__Lib_GPIO_32F10x.c, 151 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
0x09DE	0x2D42    CMP	R5, #66
0x09E0	0xD107    BNE	L_GPIO_Config23
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 152 :: 		
0x09E2	0xF04F3344  MOV	R3, #1145324612
0x09E6	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F10x.c, 153 :: 		
0x09E8	0x1D34    ADDS	R4, R6, #4
; port end address is: 24 (R6)
0x09EA	0xF04F3344  MOV	R3, #1145324612
0x09EE	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 154 :: 		
0x09F0	0xE0BA    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 155 :: 		
L_GPIO_Config23:
;__Lib_GPIO_32F10x.c, 156 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
L_GPIO_Config21:
;__Lib_GPIO_32F10x.c, 158 :: 		
; currentmode start address is: 4 (R1)
0x09F2	0x2100    MOVS	R1, #0
;__Lib_GPIO_32F10x.c, 159 :: 		
; speed start address is: 0 (R0)
0x09F4	0x2000    MOVS	R0, #0
;__Lib_GPIO_32F10x.c, 161 :: 		
0x09F6	0xF0050301  AND	R3, R5, #1
0x09FA	0xB10B    CBZ	R3, L_GPIO_Config24
;__Lib_GPIO_32F10x.c, 162 :: 		
0x09FC	0x2100    MOVS	R1, #0
0x09FE	0xE01D    B	L_GPIO_Config25
L_GPIO_Config24:
;__Lib_GPIO_32F10x.c, 163 :: 		
0x0A00	0xF0050302  AND	R3, R5, #2
0x0A04	0xB133    CBZ	R3, L_GPIO_Config26
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 164 :: 		
0x0A06	0xF40573C0  AND	R3, R5, #384
0x0A0A	0xB10B    CBZ	R3, L_GPIO_Config27
;__Lib_GPIO_32F10x.c, 165 :: 		
; currentmode start address is: 4 (R1)
0x0A0C	0x2108    MOVS	R1, #8
; currentmode end address is: 4 (R1)
0x0A0E	0xE000    B	L_GPIO_Config28
L_GPIO_Config27:
;__Lib_GPIO_32F10x.c, 167 :: 		
; currentmode start address is: 4 (R1)
0x0A10	0x2104    MOVS	R1, #4
; currentmode end address is: 4 (R1)
L_GPIO_Config28:
;__Lib_GPIO_32F10x.c, 168 :: 		
; currentmode start address is: 4 (R1)
0x0A12	0xE013    B	L_GPIO_Config29
L_GPIO_Config26:
;__Lib_GPIO_32F10x.c, 169 :: 		
0x0A14	0xF0050304  AND	R3, R5, #4
0x0A18	0xB133    CBZ	R3, L_GPIO_Config30
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 170 :: 		
0x0A1A	0xF0050320  AND	R3, R5, #32
0x0A1E	0xB10B    CBZ	R3, L_GPIO_Config31
;__Lib_GPIO_32F10x.c, 171 :: 		
; currentmode start address is: 4 (R1)
0x0A20	0x2104    MOVS	R1, #4
; currentmode end address is: 4 (R1)
0x0A22	0xE000    B	L_GPIO_Config32
L_GPIO_Config31:
;__Lib_GPIO_32F10x.c, 173 :: 		
; currentmode start address is: 4 (R1)
0x0A24	0x2100    MOVS	R1, #0
; currentmode end address is: 4 (R1)
L_GPIO_Config32:
;__Lib_GPIO_32F10x.c, 174 :: 		
; currentmode start address is: 4 (R1)
0x0A26	0xE009    B	L_GPIO_Config33
L_GPIO_Config30:
;__Lib_GPIO_32F10x.c, 175 :: 		
0x0A28	0xF0050308  AND	R3, R5, #8
0x0A2C	0xB133    CBZ	R3, L__GPIO_Config100
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 176 :: 		
0x0A2E	0xF0050320  AND	R3, R5, #32
0x0A32	0xB10B    CBZ	R3, L_GPIO_Config35
;__Lib_GPIO_32F10x.c, 177 :: 		
; currentmode start address is: 4 (R1)
0x0A34	0x210C    MOVS	R1, #12
; currentmode end address is: 4 (R1)
0x0A36	0xE000    B	L_GPIO_Config36
L_GPIO_Config35:
;__Lib_GPIO_32F10x.c, 179 :: 		
; currentmode start address is: 4 (R1)
0x0A38	0x2108    MOVS	R1, #8
; currentmode end address is: 4 (R1)
L_GPIO_Config36:
;__Lib_GPIO_32F10x.c, 180 :: 		
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
0x0A3A	0xE7FF    B	L_GPIO_Config34
L__GPIO_Config100:
;__Lib_GPIO_32F10x.c, 175 :: 		
;__Lib_GPIO_32F10x.c, 180 :: 		
L_GPIO_Config34:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config33:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config29:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config25:
;__Lib_GPIO_32F10x.c, 182 :: 		
; currentmode start address is: 4 (R1)
0x0A3C	0x4B4E    LDR	R3, [PC, #312]
0x0A3E	0xEA050303  AND	R3, R5, R3, LSL #0
0x0A42	0xB10B    CBZ	R3, L_GPIO_Config37
;__Lib_GPIO_32F10x.c, 183 :: 		
0x0A44	0x2003    MOVS	R0, #3
0x0A46	0xE009    B	L_GPIO_Config38
L_GPIO_Config37:
;__Lib_GPIO_32F10x.c, 184 :: 		
0x0A48	0xF4057300  AND	R3, R5, #512
0x0A4C	0xB10B    CBZ	R3, L_GPIO_Config39
;__Lib_GPIO_32F10x.c, 185 :: 		
0x0A4E	0x2002    MOVS	R0, #2
0x0A50	0xE004    B	L_GPIO_Config40
L_GPIO_Config39:
;__Lib_GPIO_32F10x.c, 186 :: 		
0x0A52	0xF4056380  AND	R3, R5, #1024
0x0A56	0xB10B    CBZ	R3, L__GPIO_Config101
;__Lib_GPIO_32F10x.c, 187 :: 		
0x0A58	0x2001    MOVS	R0, #1
; speed end address is: 0 (R0)
0x0A5A	0xE7FF    B	L_GPIO_Config41
L__GPIO_Config101:
;__Lib_GPIO_32F10x.c, 186 :: 		
;__Lib_GPIO_32F10x.c, 187 :: 		
L_GPIO_Config41:
; speed start address is: 0 (R0)
; speed end address is: 0 (R0)
L_GPIO_Config40:
; speed start address is: 0 (R0)
; speed end address is: 0 (R0)
L_GPIO_Config38:
;__Lib_GPIO_32F10x.c, 189 :: 		
; speed start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 195 :: 		
0x0A5C	0xF005030C  AND	R3, R5, #12
0x0A60	0xB10B    CBZ	R3, L__GPIO_Config102
;__Lib_GPIO_32F10x.c, 198 :: 		
0x0A62	0x4301    ORRS	R1, R0
; speed end address is: 0 (R0)
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 199 :: 		
0x0A64	0xE7FF    B	L_GPIO_Config42
L__GPIO_Config102:
;__Lib_GPIO_32F10x.c, 195 :: 		
;__Lib_GPIO_32F10x.c, 199 :: 		
L_GPIO_Config42:
;__Lib_GPIO_32F10x.c, 201 :: 		
; currentmode start address is: 4 (R1)
0x0A66	0xF00403FF  AND	R3, R4, #255
0x0A6A	0xB29B    UXTH	R3, R3
0x0A6C	0x2B00    CMP	R3, #0
0x0A6E	0xD03B    BEQ	L__GPIO_Config104
;__Lib_GPIO_32F10x.c, 202 :: 		
0x0A70	0x6837    LDR	R7, [R6, #0]
; tmpreg start address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 204 :: 		
; pinpos start address is: 0 (R0)
0x0A72	0x2000    MOVS	R0, #0
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
; currentmode end address is: 4 (R1)
; tmpreg end address is: 28 (R7)
; pinpos end address is: 0 (R0)
; port end address is: 24 (R6)
0x0A74	0xFA1FF884  UXTH	R8, R4
0x0A78	0x4632    MOV	R2, R6
0x0A7A	0x462E    MOV	R6, R5
L_GPIO_Config44:
; pinpos start address is: 0 (R0)
; tmpreg start address is: 28 (R7)
; currentmode start address is: 4 (R1)
; port start address is: 8 (R2)
; config start address is: 24 (R6)
; pin_mask start address is: 32 (R8)
0x0A7C	0x2808    CMP	R0, #8
0x0A7E	0xD22C    BCS	L_GPIO_Config45
;__Lib_GPIO_32F10x.c, 206 :: 		
0x0A80	0xF04F0301  MOV	R3, #1
0x0A84	0xFA03F400  LSL	R4, R3, R0
;__Lib_GPIO_32F10x.c, 208 :: 		
0x0A88	0xEA080304  AND	R3, R8, R4, LSL #0
;__Lib_GPIO_32F10x.c, 210 :: 		
0x0A8C	0x42A3    CMP	R3, R4
0x0A8E	0xD122    BNE	L__GPIO_Config103
;__Lib_GPIO_32F10x.c, 212 :: 		
0x0A90	0x0085    LSLS	R5, R0, #2
;__Lib_GPIO_32F10x.c, 214 :: 		
0x0A92	0xF04F030F  MOV	R3, #15
0x0A96	0x40AB    LSLS	R3, R5
;__Lib_GPIO_32F10x.c, 215 :: 		
0x0A98	0x43DB    MVN	R3, R3
0x0A9A	0xEA070403  AND	R4, R7, R3, LSL #0
; tmpreg end address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 218 :: 		
0x0A9E	0xFA01F305  LSL	R3, R1, R5
0x0AA2	0xEA440303  ORR	R3, R4, R3, LSL #0
; tmpreg start address is: 20 (R5)
0x0AA6	0x461D    MOV	R5, R3
;__Lib_GPIO_32F10x.c, 221 :: 		
0x0AA8	0xF4067381  AND	R3, R6, #258
0x0AAC	0xF5B37F81  CMP	R3, #258
0x0AB0	0xD105    BNE	L_GPIO_Config48
;__Lib_GPIO_32F10x.c, 223 :: 		
0x0AB2	0xF2020414  ADDW	R4, R2, #20
0x0AB6	0xF04F0301  MOV	R3, #1
0x0ABA	0x4083    LSLS	R3, R0
0x0ABC	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 224 :: 		
L_GPIO_Config48:
;__Lib_GPIO_32F10x.c, 226 :: 		
0x0ABE	0xF0060382  AND	R3, R6, #130
0x0AC2	0x2B82    CMP	R3, #130
0x0AC4	0xD105    BNE	L_GPIO_Config49
;__Lib_GPIO_32F10x.c, 228 :: 		
0x0AC6	0xF2020410  ADDW	R4, R2, #16
0x0ACA	0xF04F0301  MOV	R3, #1
0x0ACE	0x4083    LSLS	R3, R0
0x0AD0	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 229 :: 		
L_GPIO_Config49:
;__Lib_GPIO_32F10x.c, 230 :: 		
0x0AD2	0x462F    MOV	R7, R5
0x0AD4	0xE7FF    B	L_GPIO_Config47
; tmpreg end address is: 20 (R5)
L__GPIO_Config103:
;__Lib_GPIO_32F10x.c, 210 :: 		
;__Lib_GPIO_32F10x.c, 230 :: 		
L_GPIO_Config47:
;__Lib_GPIO_32F10x.c, 204 :: 		
; tmpreg start address is: 28 (R7)
0x0AD6	0x1C40    ADDS	R0, R0, #1
;__Lib_GPIO_32F10x.c, 231 :: 		
; pinpos end address is: 0 (R0)
0x0AD8	0xE7D0    B	L_GPIO_Config44
L_GPIO_Config45:
;__Lib_GPIO_32F10x.c, 232 :: 		
0x0ADA	0x6017    STR	R7, [R2, #0]
; currentmode end address is: 4 (R1)
; port end address is: 8 (R2)
; config end address is: 24 (R6)
; pin_mask end address is: 32 (R8)
; tmpreg end address is: 28 (R7)
0x0ADC	0xFA1FF088  UXTH	R0, R8
0x0AE0	0x460F    MOV	R7, R1
0x0AE2	0x4631    MOV	R1, R6
0x0AE4	0x4616    MOV	R6, R2
;__Lib_GPIO_32F10x.c, 234 :: 		
0x0AE6	0xE002    B	L_GPIO_Config43
L__GPIO_Config104:
;__Lib_GPIO_32F10x.c, 201 :: 		
0x0AE8	0x460F    MOV	R7, R1
0x0AEA	0x4629    MOV	R1, R5
0x0AEC	0xB2A0    UXTH	R0, R4
;__Lib_GPIO_32F10x.c, 234 :: 		
L_GPIO_Config43:
;__Lib_GPIO_32F10x.c, 238 :: 		
; currentmode start address is: 28 (R7)
; port start address is: 24 (R6)
; config start address is: 4 (R1)
; pin_mask start address is: 0 (R0)
0x0AEE	0xF1B00FFF  CMP	R0, #255
0x0AF2	0xD939    BLS	L_GPIO_Config50
;__Lib_GPIO_32F10x.c, 240 :: 		
0x0AF4	0x1D33    ADDS	R3, R6, #4
0x0AF6	0xF8D38000  LDR	R8, [R3, #0]
; tmpreg start address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 241 :: 		
; pinpos start address is: 8 (R2)
0x0AFA	0x2200    MOVS	R2, #0
; port end address is: 24 (R6)
; tmpreg end address is: 32 (R8)
; pinpos end address is: 8 (R2)
L_GPIO_Config51:
; pinpos start address is: 8 (R2)
; tmpreg start address is: 32 (R8)
; pin_mask start address is: 0 (R0)
; pin_mask end address is: 0 (R0)
; config start address is: 4 (R1)
; config end address is: 4 (R1)
; port start address is: 24 (R6)
; currentmode start address is: 28 (R7)
; currentmode end address is: 28 (R7)
0x0AFC	0x2A08    CMP	R2, #8
0x0AFE	0xD230    BCS	L_GPIO_Config52
; pin_mask end address is: 0 (R0)
; config end address is: 4 (R1)
; currentmode end address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 243 :: 		
; currentmode start address is: 28 (R7)
; config start address is: 4 (R1)
; pin_mask start address is: 0 (R0)
0x0B00	0xF2020408  ADDW	R4, R2, #8
0x0B04	0xF04F0301  MOV	R3, #1
0x0B08	0xFA03F404  LSL	R4, R3, R4
;__Lib_GPIO_32F10x.c, 245 :: 		
0x0B0C	0xEA000304  AND	R3, R0, R4, LSL #0
;__Lib_GPIO_32F10x.c, 246 :: 		
0x0B10	0x42A3    CMP	R3, R4
0x0B12	0xD124    BNE	L__GPIO_Config105
;__Lib_GPIO_32F10x.c, 248 :: 		
0x0B14	0x0095    LSLS	R5, R2, #2
;__Lib_GPIO_32F10x.c, 250 :: 		
0x0B16	0xF04F030F  MOV	R3, #15
0x0B1A	0x40AB    LSLS	R3, R5
;__Lib_GPIO_32F10x.c, 251 :: 		
0x0B1C	0x43DB    MVN	R3, R3
0x0B1E	0xEA080803  AND	R8, R8, R3, LSL #0
; tmpreg end address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 254 :: 		
0x0B22	0xFA07F305  LSL	R3, R7, R5
0x0B26	0xEA480803  ORR	R8, R8, R3, LSL #0
; tmpreg start address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 257 :: 		
0x0B2A	0xF4017381  AND	R3, R1, #258
0x0B2E	0xF5B37F81  CMP	R3, #258
0x0B32	0xD107    BNE	L_GPIO_Config55
;__Lib_GPIO_32F10x.c, 259 :: 		
0x0B34	0xF2060514  ADDW	R5, R6, #20
0x0B38	0xF2020408  ADDW	R4, R2, #8
0x0B3C	0xF04F0301  MOV	R3, #1
0x0B40	0x40A3    LSLS	R3, R4
0x0B42	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F10x.c, 260 :: 		
L_GPIO_Config55:
;__Lib_GPIO_32F10x.c, 262 :: 		
0x0B44	0xF0010382  AND	R3, R1, #130
0x0B48	0x2B82    CMP	R3, #130
0x0B4A	0xD107    BNE	L_GPIO_Config56
;__Lib_GPIO_32F10x.c, 264 :: 		
0x0B4C	0xF2060510  ADDW	R5, R6, #16
0x0B50	0xF2020408  ADDW	R4, R2, #8
0x0B54	0xF04F0301  MOV	R3, #1
0x0B58	0x40A3    LSLS	R3, R4
0x0B5A	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F10x.c, 265 :: 		
L_GPIO_Config56:
;__Lib_GPIO_32F10x.c, 266 :: 		
0x0B5C	0xE7FF    B	L_GPIO_Config54
; tmpreg end address is: 32 (R8)
L__GPIO_Config105:
;__Lib_GPIO_32F10x.c, 246 :: 		
;__Lib_GPIO_32F10x.c, 266 :: 		
L_GPIO_Config54:
;__Lib_GPIO_32F10x.c, 241 :: 		
; tmpreg start address is: 32 (R8)
0x0B5E	0x1C52    ADDS	R2, R2, #1
;__Lib_GPIO_32F10x.c, 267 :: 		
; pin_mask end address is: 0 (R0)
; config end address is: 4 (R1)
; currentmode end address is: 28 (R7)
; pinpos end address is: 8 (R2)
0x0B60	0xE7CC    B	L_GPIO_Config51
L_GPIO_Config52:
;__Lib_GPIO_32F10x.c, 268 :: 		
0x0B62	0x1D33    ADDS	R3, R6, #4
; port end address is: 24 (R6)
0x0B64	0xF8C38000  STR	R8, [R3, #0]
; tmpreg end address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 269 :: 		
L_GPIO_Config50:
;__Lib_GPIO_32F10x.c, 270 :: 		
L_end_GPIO_Config:
0x0B68	0xF8DDE000  LDR	LR, [SP, #0]
0x0B6C	0xB001    ADD	SP, SP, #4
0x0B6E	0x4770    BX	LR
0x0B70	0xFC00FFFF  	#-1024
0x0B74	0x00140008  	#524308
0x0B78	0x08000008  	#526336
; end of _GPIO_Config
_GPIO_Clk_Enable:
;__Lib_GPIO_32F10x.c, 83 :: 		
; gpio_port start address is: 0 (R0)
0x01B0	0xB081    SUB	SP, SP, #4
; gpio_port end address is: 0 (R0)
; gpio_port start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 85 :: 		
0x01B2	0x4919    LDR	R1, [PC, #100]
0x01B4	0xEA000101  AND	R1, R0, R1, LSL #0
; gpio_port end address is: 0 (R0)
; prt start address is: 0 (R0)
0x01B8	0x4608    MOV	R0, R1
;__Lib_GPIO_32F10x.c, 86 :: 		
; pos start address is: 8 (R2)
0x01BA	0x2200    MOVS	R2, #0
;__Lib_GPIO_32F10x.c, 87 :: 		
0x01BC	0xE00E    B	L_GPIO_Clk_Enable0
; prt end address is: 0 (R0)
; pos end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 88 :: 		
L_GPIO_Clk_Enable2:
; pos start address is: 0 (R0)
0x01BE	0x2004    MOVS	R0, #4
; pos end address is: 0 (R0)
0x01C0	0xE022    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 89 :: 		
L_GPIO_Clk_Enable3:
; pos start address is: 0 (R0)
0x01C2	0x2008    MOVS	R0, #8
; pos end address is: 0 (R0)
0x01C4	0xE020    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 90 :: 		
L_GPIO_Clk_Enable4:
; pos start address is: 0 (R0)
0x01C6	0x2010    MOVS	R0, #16
; pos end address is: 0 (R0)
0x01C8	0xE01E    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 91 :: 		
L_GPIO_Clk_Enable5:
; pos start address is: 0 (R0)
0x01CA	0x2020    MOVS	R0, #32
; pos end address is: 0 (R0)
0x01CC	0xE01C    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 92 :: 		
L_GPIO_Clk_Enable6:
; pos start address is: 0 (R0)
0x01CE	0x2040    MOVS	R0, #64
; pos end address is: 0 (R0)
0x01D0	0xE01A    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 93 :: 		
L_GPIO_Clk_Enable7:
; pos start address is: 0 (R0)
0x01D2	0x2080    MOVS	R0, #128
; pos end address is: 0 (R0)
0x01D4	0xE018    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 94 :: 		
L_GPIO_Clk_Enable8:
; pos start address is: 0 (R0)
0x01D6	0xF2401000  MOVW	R0, #256
; pos end address is: 0 (R0)
0x01DA	0xE015    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 95 :: 		
L_GPIO_Clk_Enable0:
; pos start address is: 8 (R2)
; prt start address is: 0 (R0)
0x01DC	0x490F    LDR	R1, [PC, #60]
0x01DE	0x4288    CMP	R0, R1
0x01E0	0xD0ED    BEQ	L_GPIO_Clk_Enable2
0x01E2	0x490F    LDR	R1, [PC, #60]
0x01E4	0x4288    CMP	R0, R1
0x01E6	0xD0EC    BEQ	L_GPIO_Clk_Enable3
0x01E8	0x490E    LDR	R1, [PC, #56]
0x01EA	0x4288    CMP	R0, R1
0x01EC	0xD0EB    BEQ	L_GPIO_Clk_Enable4
0x01EE	0x490E    LDR	R1, [PC, #56]
0x01F0	0x4288    CMP	R0, R1
0x01F2	0xD0EA    BEQ	L_GPIO_Clk_Enable5
0x01F4	0x490D    LDR	R1, [PC, #52]
0x01F6	0x4288    CMP	R0, R1
0x01F8	0xD0E9    BEQ	L_GPIO_Clk_Enable6
0x01FA	0x490D    LDR	R1, [PC, #52]
0x01FC	0x4288    CMP	R0, R1
0x01FE	0xD0E8    BEQ	L_GPIO_Clk_Enable7
0x0200	0x490C    LDR	R1, [PC, #48]
0x0202	0x4288    CMP	R0, R1
0x0204	0xD0E7    BEQ	L_GPIO_Clk_Enable8
; prt end address is: 0 (R0)
; pos end address is: 8 (R2)
0x0206	0x4610    MOV	R0, R2
L_GPIO_Clk_Enable1:
;__Lib_GPIO_32F10x.c, 97 :: 		
; pos start address is: 0 (R0)
0x0208	0x490B    LDR	R1, [PC, #44]
0x020A	0x6809    LDR	R1, [R1, #0]
0x020C	0xEA410200  ORR	R2, R1, R0, LSL #0
; pos end address is: 0 (R0)
0x0210	0x4909    LDR	R1, [PC, #36]
0x0212	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 98 :: 		
L_end_GPIO_Clk_Enable:
0x0214	0xB001    ADD	SP, SP, #4
0x0216	0x4770    BX	LR
0x0218	0xFC00FFFF  	#-1024
0x021C	0x08004001  	#1073809408
0x0220	0x0C004001  	#1073810432
0x0224	0x10004001  	#1073811456
0x0228	0x14004001  	#1073812480
0x022C	0x18004001  	#1073813504
0x0230	0x1C004001  	#1073814528
0x0234	0x20004001  	#1073815552
0x0238	0x10184002  	RCC_APB2ENR+0
; end of _GPIO_Clk_Enable
_vTaskDelay:
;tasks.c, 1224 :: 		void vTaskDelay( const TickType_t xTicksToDelay )
0x1170	0xB082    SUB	SP, SP, #8
0x1172	0xF8CDE000  STR	LR, [SP, #0]
;tasks.c, 1226 :: 		BaseType_t xAlreadyYielded = pdFALSE;
0x1176	0xF04F0000  MOV	R0, #0
0x117A	0x9001    STR	R0, [SP, #4]
;tasks.c, 1229 :: 		if( xTicksToDelay > ( TickType_t ) 0U )
0x117C	0x9802    LDR	R0, [SP, #8]
0x117E	0x2800    CMP	R0, #0
0x1180	0xD918    BLS	L_vTaskDelay70
;tasks.c, 1231 :: 		configASSERT( uxSchedulerSuspended == 0 );
0x1182	0x4815    LDR	R0, [PC, #84]
0x1184	0x6800    LDR	R0, [R0, #0]
0x1186	0x2800    CMP	R0, #0
0x1188	0xF2400000  MOVW	R0, #0
0x118C	0xD100    BNE	L__vTaskDelay402
0x118E	0x2001    MOVS	R0, #1
L__vTaskDelay402:
0x1190	0xB910    CBNZ	R0, L_vTaskDelay71
0x1192	0xF002FA35  BL	tasks_vPortRaiseBASEPRI+0
L_vTaskDelay72:
0x1196	0xE7FE    B	L_vTaskDelay72
L_vTaskDelay71:
;tasks.c, 1232 :: 		vTaskSuspendAll();
0x1198	0xF001FECA  BL	_vTaskSuspendAll+0
;tasks.c, 1243 :: 		prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
0x119C	0xF04F0000  MOV	R0, #0
0x11A0	0xB401    PUSH	(R0)
0x11A2	0x9803    LDR	R0, [SP, #12]
0x11A4	0xB401    PUSH	(R0)
0x11A6	0xF7FFFB83  BL	tasks_prvAddCurrentTaskToDelayedList+0
0x11AA	0xB002    ADD	SP, SP, #8
;tasks.c, 1245 :: 		xAlreadyYielded = xTaskResumeAll();
0x11AC	0xF002F880  BL	_xTaskResumeAll+0
0x11B0	0x9001    STR	R0, [SP, #4]
;tasks.c, 1246 :: 		}
0x11B2	0xE7FF    B	L_vTaskDelay74
L_vTaskDelay70:
;tasks.c, 1250 :: 		}
L_vTaskDelay74:
;tasks.c, 1254 :: 		if( xAlreadyYielded == pdFALSE )
0x11B4	0x9801    LDR	R0, [SP, #4]
0x11B6	0xB958    CBNZ	R0, L_vTaskDelay75
;tasks.c, 1256 :: 		portYIELD_WITHIN_API();
0x11B8	0x2201    MOVS	R2, #1
0x11BA	0xB252    SXTB	R2, R2
0x11BC	0x4907    LDR	R1, [PC, #28]
0x11BE	0x6808    LDR	R0, [R1, #0]
0x11C0	0xF362701C  BFI	R0, R2, BitPos(PENDSVSET_bit+0), #1
0x11C4	0x6008    STR	R0, [R1, #0]
0x11C6	0xF3BF8F4F  DSB	#15
0x11CA	0xF3BF8F6F  ISB	#15
;tasks.c, 1257 :: 		}
0x11CE	0xE7FF    B	L_vTaskDelay76
L_vTaskDelay75:
;tasks.c, 1261 :: 		}
L_vTaskDelay76:
;tasks.c, 1262 :: 		}
L_end_vTaskDelay:
0x11D0	0xF8DDE000  LDR	LR, [SP, #0]
0x11D4	0xB002    ADD	SP, SP, #8
0x11D6	0x4770    BX	LR
0x11D8	0x000C2000  	tasks_uxSchedulerSuspended+0
0x11DC	0xED04E000  	PENDSVSET_bit+0
; end of _vTaskDelay
tasks_prvAddCurrentTaskToDelayedList:
;tasks.c, 4692 :: 		static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
0x08B0	0xB083    SUB	SP, SP, #12
0x08B2	0xF8CDE000  STR	LR, [SP, #0]
;tasks.c, 4695 :: 		const TickType_t xConstTickCount = xTickCount;
0x08B6	0x482D    LDR	R0, [PC, #180]
0x08B8	0x6800    LDR	R0, [R0, #0]
0x08BA	0x9002    STR	R0, [SP, #8]
;tasks.c, 4708 :: 		if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
0x08BC	0x482C    LDR	R0, [PC, #176]
0x08BE	0x6800    LDR	R0, [R0, #0]
0x08C0	0x1D00    ADDS	R0, R0, #4
0x08C2	0xB401    PUSH	(R0)
0x08C4	0xF002FE5A  BL	_uxListRemove+0
0x08C8	0xB001    ADD	SP, SP, #4
0x08CA	0xB970    CBNZ	R0, L_tasks_prvAddCurrentTaskToDelayedList372
;tasks.c, 4712 :: 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
0x08CC	0x4828    LDR	R0, [PC, #160]
0x08CE	0x6800    LDR	R0, [R0, #0]
0x08D0	0x302C    ADDS	R0, #44
0x08D2	0x6801    LDR	R1, [R0, #0]
0x08D4	0xF04F0001  MOV	R0, #1
0x08D8	0x4088    LSLS	R0, R1
0x08DA	0x43C1    MVN	R1, R0
0x08DC	0x4825    LDR	R0, [PC, #148]
0x08DE	0x6800    LDR	R0, [R0, #0]
0x08E0	0xEA000101  AND	R1, R0, R1, LSL #0
0x08E4	0x4823    LDR	R0, [PC, #140]
0x08E6	0x6001    STR	R1, [R0, #0]
;tasks.c, 4713 :: 		}
0x08E8	0xE7FF    B	L_tasks_prvAddCurrentTaskToDelayedList373
L_tasks_prvAddCurrentTaskToDelayedList372:
;tasks.c, 4717 :: 		}
L_tasks_prvAddCurrentTaskToDelayedList373:
;tasks.c, 4721 :: 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
0x08EA	0x9803    LDR	R0, [SP, #12]
0x08EC	0xF1B03FFF  CMP	R0, #-1
0x08F0	0xD10B    BNE	L_tasks_prvAddCurrentTaskToDelayedList376
0x08F2	0x9804    LDR	R0, [SP, #16]
0x08F4	0xB148    CBZ	R0, L_tasks_prvAddCurrentTaskToDelayedList376
L_tasks_prvAddCurrentTaskToDelayedList386:
;tasks.c, 4726 :: 		vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
0x08F6	0x481E    LDR	R0, [PC, #120]
0x08F8	0x6800    LDR	R0, [R0, #0]
0x08FA	0x1D00    ADDS	R0, R0, #4
0x08FC	0xB401    PUSH	(R0)
0x08FE	0x481E    LDR	R0, [PC, #120]
0x0900	0xB401    PUSH	(R0)
0x0902	0xF002FDF1  BL	_vListInsertEnd+0
0x0906	0xB002    ADD	SP, SP, #8
;tasks.c, 4727 :: 		}
0x0908	0xE02B    B	L_tasks_prvAddCurrentTaskToDelayedList377
L_tasks_prvAddCurrentTaskToDelayedList376:
;tasks.c, 4733 :: 		xTimeToWake = xConstTickCount + xTicksToWait;
0x090A	0x9903    LDR	R1, [SP, #12]
0x090C	0x9802    LDR	R0, [SP, #8]
0x090E	0x1840    ADDS	R0, R0, R1
0x0910	0x9001    STR	R0, [SP, #4]
;tasks.c, 4736 :: 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
0x0912	0x4817    LDR	R0, [PC, #92]
0x0914	0x6800    LDR	R0, [R0, #0]
0x0916	0x1D00    ADDS	R0, R0, #4
0x0918	0x4601    MOV	R1, R0
0x091A	0x9801    LDR	R0, [SP, #4]
0x091C	0x6008    STR	R0, [R1, #0]
;tasks.c, 4738 :: 		if( xTimeToWake < xConstTickCount )
0x091E	0x9902    LDR	R1, [SP, #8]
0x0920	0x9801    LDR	R0, [SP, #4]
0x0922	0x4288    CMP	R0, R1
0x0924	0xD20A    BCS	L_tasks_prvAddCurrentTaskToDelayedList378
;tasks.c, 4742 :: 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
0x0926	0x4812    LDR	R0, [PC, #72]
0x0928	0x6800    LDR	R0, [R0, #0]
0x092A	0x1D00    ADDS	R0, R0, #4
0x092C	0xB401    PUSH	(R0)
0x092E	0x4813    LDR	R0, [PC, #76]
0x0930	0x6800    LDR	R0, [R0, #0]
0x0932	0xB401    PUSH	(R0)
0x0934	0xF7FFFBFC  BL	_vListInsert+0
0x0938	0xB002    ADD	SP, SP, #8
;tasks.c, 4743 :: 		}
0x093A	0xE012    B	L_tasks_prvAddCurrentTaskToDelayedList379
L_tasks_prvAddCurrentTaskToDelayedList378:
;tasks.c, 4748 :: 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
0x093C	0x480C    LDR	R0, [PC, #48]
0x093E	0x6800    LDR	R0, [R0, #0]
0x0940	0x1D00    ADDS	R0, R0, #4
0x0942	0xB401    PUSH	(R0)
0x0944	0x480E    LDR	R0, [PC, #56]
0x0946	0x6800    LDR	R0, [R0, #0]
0x0948	0xB401    PUSH	(R0)
0x094A	0xF7FFFBF1  BL	_vListInsert+0
0x094E	0xB002    ADD	SP, SP, #8
;tasks.c, 4753 :: 		if( xTimeToWake < xNextTaskUnblockTime )
0x0950	0x480C    LDR	R0, [PC, #48]
0x0952	0x6801    LDR	R1, [R0, #0]
0x0954	0x9801    LDR	R0, [SP, #4]
0x0956	0x4288    CMP	R0, R1
0x0958	0xD203    BCS	L_tasks_prvAddCurrentTaskToDelayedList380
;tasks.c, 4755 :: 		xNextTaskUnblockTime = xTimeToWake;
0x095A	0x9901    LDR	R1, [SP, #4]
0x095C	0x4809    LDR	R0, [PC, #36]
0x095E	0x6001    STR	R1, [R0, #0]
;tasks.c, 4756 :: 		}
0x0960	0xE7FF    B	L_tasks_prvAddCurrentTaskToDelayedList381
L_tasks_prvAddCurrentTaskToDelayedList380:
;tasks.c, 4760 :: 		}
L_tasks_prvAddCurrentTaskToDelayedList381:
;tasks.c, 4761 :: 		}
L_tasks_prvAddCurrentTaskToDelayedList379:
;tasks.c, 4762 :: 		}
L_tasks_prvAddCurrentTaskToDelayedList377:
;tasks.c, 4801 :: 		}
L_end_prvAddCurrentTaskToDelayedList:
0x0962	0xF8DDE000  LDR	LR, [SP, #0]
0x0966	0xB003    ADD	SP, SP, #12
0x0968	0x4770    BX	LR
0x096A	0xBF00    NOP
0x096C	0x00102000  	tasks_xTickCount+0
0x0970	0x00202000  	_pxCurrentTCB+0
0x0974	0x001C2000  	tasks_uxTopReadyPriority+0
0x0978	0x21DC2000  	tasks_xSuspendedTaskList+0
0x097C	0x20482000  	tasks_pxOverflowDelayedTaskList+0
0x0980	0x20442000  	tasks_pxDelayedTaskList+0
0x0984	0x00182000  	tasks_xNextTaskUnblockTime+0
; end of tasks_prvAddCurrentTaskToDelayedList
_vListInsert:
;list.c, 145 :: 		void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
0x0130	0xB082    SUB	SP, SP, #8
;list.c, 148 :: 		const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
0x0132	0x9803    LDR	R0, [SP, #12]
0x0134	0x6800    LDR	R0, [R0, #0]
0x0136	0x9001    STR	R0, [SP, #4]
;list.c, 164 :: 		if( xValueOfInsertion == portMAX_DELAY )
0x0138	0x9801    LDR	R0, [SP, #4]
0x013A	0xF1B03FFF  CMP	R0, #-1
0x013E	0xD105    BNE	L_vListInsert2
;list.c, 166 :: 		pxIterator = pxList->xListEnd.pxPrevious;
0x0140	0x9802    LDR	R0, [SP, #8]
0x0142	0x3008    ADDS	R0, #8
0x0144	0x3008    ADDS	R0, #8
0x0146	0x6800    LDR	R0, [R0, #0]
0x0148	0x9000    STR	R0, [SP, #0]
;list.c, 167 :: 		}
0x014A	0xE00E    B	L_vListInsert3
L_vListInsert2:
;list.c, 192 :: 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
0x014C	0x9802    LDR	R0, [SP, #8]
0x014E	0x3008    ADDS	R0, #8
0x0150	0x9000    STR	R0, [SP, #0]
L_vListInsert4:
0x0152	0x9800    LDR	R0, [SP, #0]
0x0154	0x1D00    ADDS	R0, R0, #4
0x0156	0x6800    LDR	R0, [R0, #0]
0x0158	0x6801    LDR	R1, [R0, #0]
0x015A	0x9801    LDR	R0, [SP, #4]
0x015C	0x4281    CMP	R1, R0
0x015E	0xD804    BHI	L_vListInsert5
0x0160	0x9800    LDR	R0, [SP, #0]
0x0162	0x1D00    ADDS	R0, R0, #4
0x0164	0x6800    LDR	R0, [R0, #0]
0x0166	0x9000    STR	R0, [SP, #0]
;list.c, 196 :: 		}
0x0168	0xE7F3    B	L_vListInsert4
L_vListInsert5:
;list.c, 197 :: 		}
L_vListInsert3:
;list.c, 199 :: 		pxNewListItem->pxNext = pxIterator->pxNext;
0x016A	0x9803    LDR	R0, [SP, #12]
0x016C	0x1D01    ADDS	R1, R0, #4
0x016E	0x9800    LDR	R0, [SP, #0]
0x0170	0x1D00    ADDS	R0, R0, #4
0x0172	0x6800    LDR	R0, [R0, #0]
0x0174	0x6008    STR	R0, [R1, #0]
;list.c, 200 :: 		pxNewListItem->pxNext->pxPrevious = pxNewListItem;
0x0176	0x9803    LDR	R0, [SP, #12]
0x0178	0x1D00    ADDS	R0, R0, #4
0x017A	0x6800    LDR	R0, [R0, #0]
0x017C	0xF2000108  ADDW	R1, R0, #8
0x0180	0x9803    LDR	R0, [SP, #12]
0x0182	0x6008    STR	R0, [R1, #0]
;list.c, 201 :: 		pxNewListItem->pxPrevious = pxIterator;
0x0184	0x9803    LDR	R0, [SP, #12]
0x0186	0xF2000108  ADDW	R1, R0, #8
0x018A	0x9800    LDR	R0, [SP, #0]
0x018C	0x6008    STR	R0, [R1, #0]
;list.c, 202 :: 		pxIterator->pxNext = pxNewListItem;
0x018E	0x9800    LDR	R0, [SP, #0]
0x0190	0x1D01    ADDS	R1, R0, #4
0x0192	0x9803    LDR	R0, [SP, #12]
0x0194	0x6008    STR	R0, [R1, #0]
;list.c, 210 :: 		pxNewListItem->pvContainer = ( void * ) pxList;
0x0196	0x9803    LDR	R0, [SP, #12]
0x0198	0xF2000110  ADDW	R1, R0, #16
0x019C	0x9802    LDR	R0, [SP, #8]
0x019E	0x6008    STR	R0, [R1, #0]
;list.c, 212 :: 		( pxList->uxNumberOfItems )++;
0x01A0	0x9802    LDR	R0, [SP, #8]
0x01A2	0x4601    MOV	R1, R0
0x01A4	0x6808    LDR	R0, [R1, #0]
0x01A6	0x1C40    ADDS	R0, R0, #1
0x01A8	0x6008    STR	R0, [R1, #0]
;list.c, 213 :: 		}
L_end_vListInsert:
0x01AA	0xB002    ADD	SP, SP, #8
0x01AC	0x4770    BX	LR
; end of _vListInsert
_task2:
;main.c, 40 :: 		void task2(void *pvParameters)
0x34A4	0xB081    SUB	SP, SP, #4
0x34A6	0xF8CDE000  STR	LR, [SP, #0]
;main.c, 43 :: 		GPIO_Digital_Output(&GPIOB_ODR, _GPIO_PINMASK_6);
0x34AA	0xF2400140  MOVW	R1, #64
0x34AE	0x480A    LDR	R0, [PC, #40]
0x34B0	0xF7FEFD98  BL	_GPIO_Digital_Output+0
;main.c, 45 :: 		while (1)
L_task24:
;main.c, 47 :: 		vTaskDelay(pdMS_TO_TICKS(500));
0x34B4	0xF44F70FA  MOV	R0, #500
0x34B8	0xB401    PUSH	(R0)
0x34BA	0xF7FDFE59  BL	_vTaskDelay+0
0x34BE	0xB001    ADD	SP, SP, #4
;main.c, 48 :: 		GPIOB_ODR.B6 = ~GPIOB_ODR.B6;
0x34C0	0x4806    LDR	R0, [PC, #24]
0x34C2	0x6800    LDR	R0, [R0, #0]
0x34C4	0xF0800101  EOR	R1, R0, #1
0x34C8	0xB2C9    UXTB	R1, R1
0x34CA	0x4804    LDR	R0, [PC, #16]
0x34CC	0x6001    STR	R1, [R0, #0]
;main.c, 49 :: 		}
0x34CE	0xE7F1    B	L_task24
;main.c, 50 :: 		}
L_end_task2:
0x34D0	0xF8DDE000  LDR	LR, [SP, #0]
0x34D4	0xB001    ADD	SP, SP, #4
0x34D6	0x4770    BX	LR
0x34D8	0x0C0C4001  	GPIOB_ODR+0
0x34DC	0x81984221  	GPIOB_ODR+0
; end of _task2
_task3:
;main.c, 53 :: 		void task3(void *pvParameters)
0x340C	0xB081    SUB	SP, SP, #4
0x340E	0xF8CDE000  STR	LR, [SP, #0]
;main.c, 56 :: 		GPIO_Digital_Output(&GPIOB_ODR, _GPIO_PINMASK_7);
0x3412	0xF2400180  MOVW	R1, #128
0x3416	0x480A    LDR	R0, [PC, #40]
0x3418	0xF7FEFDE4  BL	_GPIO_Digital_Output+0
;main.c, 58 :: 		while (1)
L_task36:
;main.c, 60 :: 		vTaskDelay(pdMS_TO_TICKS(1000));
0x341C	0xF44F707A  MOV	R0, #1000
0x3420	0xB401    PUSH	(R0)
0x3422	0xF7FDFEA5  BL	_vTaskDelay+0
0x3426	0xB001    ADD	SP, SP, #4
;main.c, 61 :: 		GPIOB_ODR.B7 = ~GPIOB_ODR.B7;
0x3428	0x4806    LDR	R0, [PC, #24]
0x342A	0x6800    LDR	R0, [R0, #0]
0x342C	0xF0800101  EOR	R1, R0, #1
0x3430	0xB2C9    UXTB	R1, R1
0x3432	0x4804    LDR	R0, [PC, #16]
0x3434	0x6001    STR	R1, [R0, #0]
;main.c, 62 :: 		}
0x3436	0xE7F1    B	L_task36
;main.c, 63 :: 		}
L_end_task3:
0x3438	0xF8DDE000  LDR	LR, [SP, #0]
0x343C	0xB001    ADD	SP, SP, #4
0x343E	0x4770    BX	LR
0x3440	0x0C0C4001  	GPIOB_ODR+0
0x3444	0x819C4221  	GPIOB_ODR+0
; end of _task3
tasks_prvIdleTask:
;tasks.c, 3131 :: 		static portTASK_FUNCTION( prvIdleTask, pvParameters )
0x2F40	0xB081    SUB	SP, SP, #4
0x2F42	0xF8CDE000  STR	LR, [SP, #0]
;tasks.c, 3139 :: 		for( ;; )
L_tasks_prvIdleTask256:
;tasks.c, 3143 :: 		prvCheckTasksWaitingTermination();
0x2F46	0xF7FEF891  BL	tasks_prvCheckTasksWaitingTermination+0
;tasks.c, 3166 :: 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
0x2F4A	0x480A    LDR	R0, [PC, #40]
0x2F4C	0x6800    LDR	R0, [R0, #0]
0x2F4E	0x2801    CMP	R0, #1
0x2F50	0xD90B    BLS	L_tasks_prvIdleTask259
;tasks.c, 3168 :: 		taskYIELD();
0x2F52	0x2201    MOVS	R2, #1
0x2F54	0xB252    SXTB	R2, R2
0x2F56	0x4908    LDR	R1, [PC, #32]
0x2F58	0x6808    LDR	R0, [R1, #0]
0x2F5A	0xF362701C  BFI	R0, R2, BitPos(PENDSVSET_bit+0), #1
0x2F5E	0x6008    STR	R0, [R1, #0]
0x2F60	0xF3BF8F4F  DSB	#15
0x2F64	0xF3BF8F6F  ISB	#15
;tasks.c, 3169 :: 		}
0x2F68	0xE7FF    B	L_tasks_prvIdleTask260
L_tasks_prvIdleTask259:
;tasks.c, 3173 :: 		}
L_tasks_prvIdleTask260:
;tasks.c, 3234 :: 		}
0x2F6A	0xE7EC    B	L_tasks_prvIdleTask256
;tasks.c, 3235 :: 		}
L_end_prvIdleTask:
0x2F6C	0xF8DDE000  LDR	LR, [SP, #0]
0x2F70	0xB001    ADD	SP, SP, #4
0x2F72	0x4770    BX	LR
0x2F74	0x204C2000  	tasks_pxReadyTasksLists+0
0x2F78	0xED04E000  	PENDSVSET_bit+0
; end of tasks_prvIdleTask
tasks_prvCheckTasksWaitingTermination:
;tasks.c, 3365 :: 		static void prvCheckTasksWaitingTermination( void )
0x106C	0xB083    SUB	SP, SP, #12
0x106E	0xF8CDE000  STR	LR, [SP, #0]
;tasks.c, 3376 :: 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
L_tasks_prvCheckTasksWaitingTermination264:
0x1072	0x481B    LDR	R0, [PC, #108]
0x1074	0x6800    LDR	R0, [R0, #0]
0x1076	0x2800    CMP	R0, #0
0x1078	0xD92D    BLS	L_tasks_prvCheckTasksWaitingTermination265
;tasks.c, 3378 :: 		vTaskSuspendAll();
0x107A	0xF001FF59  BL	_vTaskSuspendAll+0
;tasks.c, 3380 :: 		xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
0x107E	0x4819    LDR	R0, [PC, #100]
0x1080	0x6800    LDR	R0, [R0, #0]
0x1082	0x2800    CMP	R0, #0
0x1084	0xF2400000  MOVW	R0, #0
0x1088	0xD100    BNE	L_tasks_prvCheckTasksWaitingTermination443
0x108A	0x2001    MOVS	R0, #1
L_tasks_prvCheckTasksWaitingTermination443:
0x108C	0x9002    STR	R0, [SP, #8]
;tasks.c, 3382 :: 		( void ) xTaskResumeAll();
0x108E	0xF002F90F  BL	_xTaskResumeAll+0
;tasks.c, 3384 :: 		if( xListIsEmpty == pdFALSE )
0x1092	0x9802    LDR	R0, [SP, #8]
0x1094	0xB9F0    CBNZ	R0, L_tasks_prvCheckTasksWaitingTermination266
;tasks.c, 3388 :: 		taskENTER_CRITICAL();
0x1096	0xF000F82B  BL	_vPortEnterCritical+0
;tasks.c, 3390 :: 		pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
0x109A	0x4813    LDR	R0, [PC, #76]
0x109C	0x6800    LDR	R0, [R0, #0]
0x109E	0x300C    ADDS	R0, #12
0x10A0	0x6800    LDR	R0, [R0, #0]
0x10A2	0x9001    STR	R0, [SP, #4]
;tasks.c, 3391 :: 		( void ) uxListRemove( &( pxTCB->xStateListItem ) );
0x10A4	0x9801    LDR	R0, [SP, #4]
0x10A6	0x1D00    ADDS	R0, R0, #4
0x10A8	0xB401    PUSH	(R0)
0x10AA	0xF002FA67  BL	_uxListRemove+0
0x10AE	0xB001    ADD	SP, SP, #4
;tasks.c, 3392 :: 		--uxCurrentNumberOfTasks;
0x10B0	0x480E    LDR	R0, [PC, #56]
0x10B2	0x6800    LDR	R0, [R0, #0]
0x10B4	0x1E41    SUBS	R1, R0, #1
0x10B6	0x480D    LDR	R0, [PC, #52]
0x10B8	0x6001    STR	R1, [R0, #0]
;tasks.c, 3393 :: 		--uxDeletedTasksWaitingCleanUp;
0x10BA	0x4809    LDR	R0, [PC, #36]
0x10BC	0x6800    LDR	R0, [R0, #0]
0x10BE	0x1E41    SUBS	R1, R0, #1
0x10C0	0x4807    LDR	R0, [PC, #28]
0x10C2	0x6001    STR	R1, [R0, #0]
;tasks.c, 3395 :: 		taskEXIT_CRITICAL();
0x10C4	0xF000F838  BL	_vPortExitCritical+0
;tasks.c, 3397 :: 		prvDeleteTCB( pxTCB );
0x10C8	0x9801    LDR	R0, [SP, #4]
0x10CA	0xB401    PUSH	(R0)
0x10CC	0xF7FFFEFC  BL	tasks_prvDeleteTCB+0
0x10D0	0xB001    ADD	SP, SP, #4
;tasks.c, 3398 :: 		}
0x10D2	0xE7FF    B	L_tasks_prvCheckTasksWaitingTermination267
L_tasks_prvCheckTasksWaitingTermination266:
;tasks.c, 3402 :: 		}
L_tasks_prvCheckTasksWaitingTermination267:
;tasks.c, 3403 :: 		}
0x10D4	0xE7CD    B	L_tasks_prvCheckTasksWaitingTermination264
L_tasks_prvCheckTasksWaitingTermination265:
;tasks.c, 3406 :: 		}
L_end_prvCheckTasksWaitingTermination:
0x10D6	0xF8DDE000  LDR	LR, [SP, #0]
0x10DA	0xB003    ADD	SP, SP, #12
0x10DC	0x4770    BX	LR
0x10DE	0xBF00    NOP
0x10E0	0x003C2000  	tasks_uxDeletedTasksWaitingCleanUp+0
0x10E4	0x21C82000  	tasks_xTasksWaitingTermination+0
0x10E8	0x21D42000  	tasks_xTasksWaitingTermination+12
0x10EC	0x00342000  	tasks_uxCurrentNumberOfTasks+0
; end of tasks_prvCheckTasksWaitingTermination
tasks_prvDeleteTCB:
;tasks.c, 3581 :: 		static void prvDeleteTCB( TCB_t *pxTCB )
0x0EC8	0xB081    SUB	SP, SP, #4
0x0ECA	0xF8CDE000  STR	LR, [SP, #0]
;tasks.c, 3600 :: 		vPortFree( pxTCB->pxStack );
0x0ECE	0x9801    LDR	R0, [SP, #4]
0x0ED0	0x3030    ADDS	R0, #48
0x0ED2	0x6800    LDR	R0, [R0, #0]
0x0ED4	0xB401    PUSH	(R0)
0x0ED6	0xF002FD09  BL	_vPortFree+0
0x0EDA	0xB001    ADD	SP, SP, #4
;tasks.c, 3601 :: 		vPortFree( pxTCB );
0x0EDC	0x9801    LDR	R0, [SP, #4]
0x0EDE	0xB401    PUSH	(R0)
0x0EE0	0xF002FD04  BL	_vPortFree+0
0x0EE4	0xB001    ADD	SP, SP, #4
;tasks.c, 3630 :: 		}
L_end_prvDeleteTCB:
0x0EE6	0xF8DDE000  LDR	LR, [SP, #0]
0x0EEA	0xB001    ADD	SP, SP, #4
0x0EEC	0x4770    BX	LR
; end of tasks_prvDeleteTCB
_vPortSetupTimerInterrupt:
;port.c, 651 :: 		void vPortSetupTimerInterrupt()
;port.c, 665 :: 		STK_CTRL = 0UL;
0x3470	0xF04F0100  MOV	R1, #0
0x3474	0x4807    LDR	R0, [PC, #28]
0x3476	0x6001    STR	R1, [R0, #0]
;port.c, 666 :: 		STK_VAL = 0UL;
0x3478	0xF04F0100  MOV	R1, #0
0x347C	0x4806    LDR	R0, [PC, #24]
0x347E	0x6001    STR	R1, [R0, #0]
;port.c, 669 :: 		STK_LOAD = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
0x3480	0x4906    LDR	R1, [PC, #24]
0x3482	0x4807    LDR	R0, [PC, #28]
0x3484	0x6001    STR	R1, [R0, #0]
;port.c, 670 :: 		STK_CTRL |= 0x7;
0x3486	0x4803    LDR	R0, [PC, #12]
0x3488	0x6800    LDR	R0, [R0, #0]
0x348A	0xF0400107  ORR	R1, R0, #7
0x348E	0x4801    LDR	R0, [PC, #4]
0x3490	0x6001    STR	R1, [R0, #0]
;port.c, 671 :: 		}
L_end_vPortSetupTimerInterrupt:
0x3492	0x4770    BX	LR
0x3494	0xE010E000  	STK_CTRL+0
0x3498	0xE018E000  	STK_VAL+0
0x349C	0x193F0001  	#71999
0x34A0	0xE014E000  	STK_LOAD+0
; end of _vPortSetupTimerInterrupt
port_prvPortStartFirstTask:
;port.c, 251 :: 		static void prvPortStartFirstTask()
;port.c, 255 :: 		LDR R0, =0xE000ED08
0x3448	0xF8DF001C  LDR	R0, [PC, #28]
;port.c, 256 :: 		LDR R0, [R0]
0x344C	0x6800    LDR	R0, [R0, #0]
;port.c, 257 :: 		LDR R0, [R0]
0x344E	0x6800    LDR	R0, [R0, #0]
;port.c, 259 :: 		MSR CPU_MSP, R0
0x3450	0xF3808808  MSR	#8, R0
;port.c, 261 :: 		CPSIE I
0x3454	0xB662    CPSIE	i
;port.c, 262 :: 		CPSIE F
0x3456	0xB661    CPSIE	f
;port.c, 263 :: 		DSB
0x3458	0xF3BF8F4F  DSB	#15
;port.c, 264 :: 		ISB
0x345C	0xF3BF8F6F  ISB	#15
;port.c, 266 :: 		SVC #0
0x3460	0xDF00    SVC	#0
;port.c, 267 :: 		NOP
0x3462	0xBF00    NOP
;port.c, 268 :: 		}
0x3464	0xF000B802  B	#4
0x3468	0xED08E000  	#-536810232
0x346C	0xBF00    NOP
;port.c, 269 :: 		}
L_end_prvPortStartFirstTask:
0x346E	0x4770    BX	LR
; end of port_prvPortStartFirstTask
_vTaskSwitchContext:
;tasks.c, 2761 :: 		void vTaskSwitchContext( void )
0x3A30	0xB083    SUB	SP, SP, #12
0x3A32	0xF8CDE000  STR	LR, [SP, #0]
;tasks.c, 2763 :: 		if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
0x3A36	0x4826    LDR	R0, [PC, #152]
0x3A38	0x6800    LDR	R0, [R0, #0]
0x3A3A	0xB120    CBZ	R0, L_vTaskSwitchContext209
;tasks.c, 2767 :: 		xYieldPending = pdTRUE;
0x3A3C	0xF04F0101  MOV	R1, #1
0x3A40	0x4824    LDR	R0, [PC, #144]
0x3A42	0x6001    STR	R1, [R0, #0]
;tasks.c, 2768 :: 		}
0x3A44	0xE040    B	L_vTaskSwitchContext210
L_vTaskSwitchContext209:
;tasks.c, 2771 :: 		xYieldPending = pdFALSE;
0x3A46	0xF04F0100  MOV	R1, #0
0x3A4A	0x4822    LDR	R0, [PC, #136]
0x3A4C	0x6001    STR	R1, [R0, #0]
;tasks.c, 2806 :: 		taskSELECT_HIGHEST_PRIORITY_TASK();
0x3A4E	0x4822    LDR	R0, [PC, #136]
0x3A50	0x6800    LDR	R0, [R0, #0]
0x3A52	0xB401    PUSH	(R0)
0x3A54	0xF7FFFD44  BL	tasks_ucPortCountLeadingZeros+0
0x3A58	0xB001    ADD	SP, SP, #4
0x3A5A	0xF1C0001F  RSB	R0, R0, #31
0x3A5E	0x9002    STR	R0, [SP, #8]
0x3A60	0x9902    LDR	R1, [SP, #8]
0x3A62	0x2014    MOVS	R0, #20
0x3A64	0x4341    MULS	R1, R0, R1
0x3A66	0x481D    LDR	R0, [PC, #116]
0x3A68	0x1840    ADDS	R0, R0, R1
0x3A6A	0x6800    LDR	R0, [R0, #0]
0x3A6C	0x2800    CMP	R0, #0
0x3A6E	0xF2400000  MOVW	R0, #0
0x3A72	0xD900    BLS	L__vTaskSwitchContext430
0x3A74	0x2001    MOVS	R0, #1
L__vTaskSwitchContext430:
0x3A76	0xB910    CBNZ	R0, L_vTaskSwitchContext211
0x3A78	0xF7FFFDC2  BL	tasks_vPortRaiseBASEPRI+0
L_vTaskSwitchContext212:
0x3A7C	0xE7FE    B	L_vTaskSwitchContext212
L_vTaskSwitchContext211:
0x3A7E	0x9902    LDR	R1, [SP, #8]
0x3A80	0x2014    MOVS	R0, #20
0x3A82	0x4341    MULS	R1, R0, R1
0x3A84	0x4815    LDR	R0, [PC, #84]
0x3A86	0x1840    ADDS	R0, R0, R1
0x3A88	0x9001    STR	R0, [SP, #4]
0x3A8A	0x9801    LDR	R0, [SP, #4]
0x3A8C	0x1D01    ADDS	R1, R0, #4
0x3A8E	0x9801    LDR	R0, [SP, #4]
0x3A90	0x1D00    ADDS	R0, R0, #4
0x3A92	0x6800    LDR	R0, [R0, #0]
0x3A94	0x1D00    ADDS	R0, R0, #4
0x3A96	0x6800    LDR	R0, [R0, #0]
0x3A98	0x6008    STR	R0, [R1, #0]
0x3A9A	0x9801    LDR	R0, [SP, #4]
0x3A9C	0x1D00    ADDS	R0, R0, #4
0x3A9E	0x6800    LDR	R0, [R0, #0]
0x3AA0	0x4601    MOV	R1, R0
0x3AA2	0x9801    LDR	R0, [SP, #4]
0x3AA4	0x3008    ADDS	R0, #8
0x3AA6	0x4281    CMP	R1, R0
0x3AA8	0xD107    BNE	L_vTaskSwitchContext214
0x3AAA	0x9801    LDR	R0, [SP, #4]
0x3AAC	0x1D01    ADDS	R1, R0, #4
0x3AAE	0x9801    LDR	R0, [SP, #4]
0x3AB0	0x1D00    ADDS	R0, R0, #4
0x3AB2	0x6800    LDR	R0, [R0, #0]
0x3AB4	0x1D00    ADDS	R0, R0, #4
0x3AB6	0x6800    LDR	R0, [R0, #0]
0x3AB8	0x6008    STR	R0, [R1, #0]
L_vTaskSwitchContext214:
0x3ABA	0x9801    LDR	R0, [SP, #4]
0x3ABC	0x1D00    ADDS	R0, R0, #4
0x3ABE	0x6800    LDR	R0, [R0, #0]
0x3AC0	0x300C    ADDS	R0, #12
0x3AC2	0x6801    LDR	R1, [R0, #0]
0x3AC4	0x4806    LDR	R0, [PC, #24]
0x3AC6	0x6001    STR	R1, [R0, #0]
;tasks.c, 2816 :: 		}
L_vTaskSwitchContext210:
;tasks.c, 2817 :: 		}
L_end_vTaskSwitchContext:
0x3AC8	0xF8DDE000  LDR	LR, [SP, #0]
0x3ACC	0xB003    ADD	SP, SP, #12
0x3ACE	0x4770    BX	LR
0x3AD0	0x000C2000  	tasks_uxSchedulerSuspended+0
0x3AD4	0x00282000  	tasks_xYieldPending+0
0x3AD8	0x001C2000  	tasks_uxTopReadyPriority+0
0x3ADC	0x204C2000  	tasks_pxReadyTasksLists+0
0x3AE0	0x00202000  	_pxCurrentTCB+0
; end of _vTaskSwitchContext
tasks_ucPortCountLeadingZeros:
;portmacro.h, 176 :: 		static inline uint8_t ucPortCountLeadingZeros(uint32_t ulBitmap)
;portmacro.h, 178 :: 		asm CLZ R0, R0;
0x34E0	0xFAB0F080  CLZ	R0, R0
;portmacro.h, 179 :: 		return R0;
0x34E4	0xB2C0    UXTB	R0, R0
;portmacro.h, 180 :: 		}
L_end_ucPortCountLeadingZeros:
0x34E6	0x4770    BX	LR
; end of tasks_ucPortCountLeadingZeros
port_prvTaskExitError:
;port.c, 203 :: 		static void prvTaskExitError()
0x273C	0xB082    SUB	SP, SP, #8
0x273E	0xF8CDE000  STR	LR, [SP, #0]
;port.c, 205 :: 		volatile uint32_t ulDummy = 0UL;
0x2742	0xF04F0000  MOV	R0, #0
0x2746	0x9001    STR	R0, [SP, #4]
;port.c, 213 :: 		configASSERT( uxCriticalNesting == ~0UL );
0x2748	0x480A    LDR	R0, [PC, #40]
0x274A	0x6800    LDR	R0, [R0, #0]
0x274C	0xF1B03FFF  CMP	R0, #-1
0x2750	0xF2400000  MOVW	R0, #0
0x2754	0xD100    BNE	L_port_prvTaskExitError38
0x2756	0x2001    MOVS	R0, #1
L_port_prvTaskExitError38:
0x2758	0xB910    CBNZ	R0, L_port_prvTaskExitError2
0x275A	0xF001FADB  BL	port_vPortRaiseBASEPRI+0
L_port_prvTaskExitError3:
0x275E	0xE7FE    B	L_port_prvTaskExitError3
L_port_prvTaskExitError2:
;port.c, 214 :: 		portDISABLE_INTERRUPTS();
0x2760	0xF001FAD8  BL	port_vPortRaiseBASEPRI+0
;port.c, 215 :: 		while( ulDummy == 0 )
L_port_prvTaskExitError5:
0x2764	0x9801    LDR	R0, [SP, #4]
0x2766	0xB900    CBNZ	R0, L_port_prvTaskExitError6
;port.c, 224 :: 		}
0x2768	0xE7FC    B	L_port_prvTaskExitError5
L_port_prvTaskExitError6:
;port.c, 225 :: 		}
L_end_prvTaskExitError:
0x276A	0xF8DDE000  LDR	LR, [SP, #0]
0x276E	0xB002    ADD	SP, SP, #8
0x2770	0x4770    BX	LR
0x2772	0xBF00    NOP
0x2774	0x00002000  	port_uxCriticalNesting+0
; end of port_prvTaskExitError
__Lib_System_101_102_103_InitialSetUpRCCRCC2:
;__Lib_System_101_102_103.c, 377 :: 		
0x3E88	0xB082    SUB	SP, SP, #8
0x3E8A	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_System_101_102_103.c, 380 :: 		
; ulRCC_CR start address is: 8 (R2)
0x3E8E	0x4A33    LDR	R2, [PC, #204]
;__Lib_System_101_102_103.c, 381 :: 		
; ulRCC_CFGR start address is: 12 (R3)
0x3E90	0x4B33    LDR	R3, [PC, #204]
;__Lib_System_101_102_103.c, 382 :: 		
; Fosc_kHz start address is: 4 (R1)
0x3E92	0x4934    LDR	R1, [PC, #208]
;__Lib_System_101_102_103.c, 389 :: 		
0x3E94	0xF64B3080  MOVW	R0, #48000
0x3E98	0x4281    CMP	R1, R0
0x3E9A	0xD906    BLS	L___Lib_System_101_102_103_InitialSetUpRCCRCC232
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_101_102_103.c, 390 :: 		
0x3E9C	0x4832    LDR	R0, [PC, #200]
0x3E9E	0x6800    LDR	R0, [R0, #0]
0x3EA0	0xF0400102  ORR	R1, R0, #2
0x3EA4	0x4830    LDR	R0, [PC, #192]
0x3EA6	0x6001    STR	R1, [R0, #0]
0x3EA8	0xE011    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC233
L___Lib_System_101_102_103_InitialSetUpRCCRCC232:
;__Lib_System_101_102_103.c, 391 :: 		
; Fosc_kHz start address is: 4 (R1)
0x3EAA	0xF64550C0  MOVW	R0, #24000
0x3EAE	0x4281    CMP	R1, R0
0x3EB0	0xD906    BLS	L___Lib_System_101_102_103_InitialSetUpRCCRCC234
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_101_102_103.c, 392 :: 		
0x3EB2	0x482D    LDR	R0, [PC, #180]
0x3EB4	0x6800    LDR	R0, [R0, #0]
0x3EB6	0xF0400101  ORR	R1, R0, #1
0x3EBA	0x482B    LDR	R0, [PC, #172]
0x3EBC	0x6001    STR	R1, [R0, #0]
0x3EBE	0xE006    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC235
L___Lib_System_101_102_103_InitialSetUpRCCRCC234:
;__Lib_System_101_102_103.c, 394 :: 		
0x3EC0	0x4829    LDR	R0, [PC, #164]
0x3EC2	0x6801    LDR	R1, [R0, #0]
0x3EC4	0xF06F0007  MVN	R0, #7
0x3EC8	0x4001    ANDS	R1, R0
0x3ECA	0x4827    LDR	R0, [PC, #156]
0x3ECC	0x6001    STR	R1, [R0, #0]
L___Lib_System_101_102_103_InitialSetUpRCCRCC235:
L___Lib_System_101_102_103_InitialSetUpRCCRCC233:
;__Lib_System_101_102_103.c, 396 :: 		
0x3ECE	0xF7FFFD69  BL	__Lib_System_101_102_103_SystemClockSetDefault+0
;__Lib_System_101_102_103.c, 398 :: 		
0x3ED2	0x4826    LDR	R0, [PC, #152]
0x3ED4	0x6003    STR	R3, [R0, #0]
;__Lib_System_101_102_103.c, 399 :: 		
0x3ED6	0x4826    LDR	R0, [PC, #152]
0x3ED8	0xEA020100  AND	R1, R2, R0, LSL #0
0x3EDC	0x4825    LDR	R0, [PC, #148]
0x3EDE	0x6001    STR	R1, [R0, #0]
;__Lib_System_101_102_103.c, 401 :: 		
0x3EE0	0xF0020001  AND	R0, R2, #1
0x3EE4	0xB140    CBZ	R0, L___Lib_System_101_102_103_InitialSetUpRCCRCC247
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x3EE6	0x4619    MOV	R1, R3
;__Lib_System_101_102_103.c, 402 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC237:
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x3EE8	0x4822    LDR	R0, [PC, #136]
0x3EEA	0x6800    LDR	R0, [R0, #0]
0x3EEC	0xF0000002  AND	R0, R0, #2
0x3EF0	0x2800    CMP	R0, #0
0x3EF2	0xD100    BNE	L___Lib_System_101_102_103_InitialSetUpRCCRCC238
;__Lib_System_101_102_103.c, 403 :: 		
0x3EF4	0xE7F8    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC237
L___Lib_System_101_102_103_InitialSetUpRCCRCC238:
;__Lib_System_101_102_103.c, 404 :: 		
; ulRCC_CFGR end address is: 4 (R1)
0x3EF6	0xE000    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC236
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_101_102_103_InitialSetUpRCCRCC247:
;__Lib_System_101_102_103.c, 401 :: 		
0x3EF8	0x4619    MOV	R1, R3
;__Lib_System_101_102_103.c, 404 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC236:
;__Lib_System_101_102_103.c, 406 :: 		
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x3EFA	0xF4023080  AND	R0, R2, #65536
0x3EFE	0xB148    CBZ	R0, L___Lib_System_101_102_103_InitialSetUpRCCRCC248
; ulRCC_CR end address is: 8 (R2)
; ulRCC_CFGR end address is: 4 (R1)
;__Lib_System_101_102_103.c, 407 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC240:
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 4 (R1)
0x3F00	0x481C    LDR	R0, [PC, #112]
0x3F02	0x6800    LDR	R0, [R0, #0]
0x3F04	0xF4003000  AND	R0, R0, #131072
0x3F08	0xB900    CBNZ	R0, L___Lib_System_101_102_103_InitialSetUpRCCRCC241
;__Lib_System_101_102_103.c, 408 :: 		
0x3F0A	0xE7F9    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC240
L___Lib_System_101_102_103_InitialSetUpRCCRCC241:
;__Lib_System_101_102_103.c, 409 :: 		
0x3F0C	0x9201    STR	R2, [SP, #4]
; ulRCC_CFGR end address is: 4 (R1)
0x3F0E	0x460A    MOV	R2, R1
0x3F10	0x9901    LDR	R1, [SP, #4]
0x3F12	0xE002    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC239
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_101_102_103_InitialSetUpRCCRCC248:
;__Lib_System_101_102_103.c, 406 :: 		
0x3F14	0x9101    STR	R1, [SP, #4]
0x3F16	0x4611    MOV	R1, R2
0x3F18	0x9A01    LDR	R2, [SP, #4]
;__Lib_System_101_102_103.c, 409 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC239:
;__Lib_System_101_102_103.c, 411 :: 		
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x3F1A	0xF0017080  AND	R0, R1, #16777216
; ulRCC_CR end address is: 4 (R1)
0x3F1E	0xB170    CBZ	R0, L___Lib_System_101_102_103_InitialSetUpRCCRCC249
;__Lib_System_101_102_103.c, 412 :: 		
0x3F20	0x4814    LDR	R0, [PC, #80]
0x3F22	0x6800    LDR	R0, [R0, #0]
0x3F24	0xF0407180  ORR	R1, R0, #16777216
0x3F28	0x4812    LDR	R0, [PC, #72]
0x3F2A	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 8 (R2)
0x3F2C	0x4611    MOV	R1, R2
;__Lib_System_101_102_103.c, 413 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC243:
; ulRCC_CFGR start address is: 4 (R1)
0x3F2E	0x4811    LDR	R0, [PC, #68]
0x3F30	0x6800    LDR	R0, [R0, #0]
0x3F32	0xF0007000  AND	R0, R0, #33554432
0x3F36	0xB900    CBNZ	R0, L___Lib_System_101_102_103_InitialSetUpRCCRCC244
;__Lib_System_101_102_103.c, 414 :: 		
0x3F38	0xE7F9    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC243
L___Lib_System_101_102_103_InitialSetUpRCCRCC244:
;__Lib_System_101_102_103.c, 415 :: 		
0x3F3A	0x460A    MOV	R2, R1
0x3F3C	0xE7FF    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC242
; ulRCC_CFGR end address is: 4 (R1)
L___Lib_System_101_102_103_InitialSetUpRCCRCC249:
;__Lib_System_101_102_103.c, 411 :: 		
;__Lib_System_101_102_103.c, 415 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC242:
;__Lib_System_101_102_103.c, 418 :: 		
; ulRCC_CFGR start address is: 8 (R2)
; ulRCC_CFGR end address is: 8 (R2)
L___Lib_System_101_102_103_InitialSetUpRCCRCC245:
; ulRCC_CFGR start address is: 8 (R2)
0x3F3E	0x480B    LDR	R0, [PC, #44]
0x3F40	0x6800    LDR	R0, [R0, #0]
0x3F42	0xF000010C  AND	R1, R0, #12
0x3F46	0x0090    LSLS	R0, R2, #2
0x3F48	0xF000000C  AND	R0, R0, #12
0x3F4C	0x4281    CMP	R1, R0
0x3F4E	0xD000    BEQ	L___Lib_System_101_102_103_InitialSetUpRCCRCC246
;__Lib_System_101_102_103.c, 419 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x3F50	0xE7F5    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC245
L___Lib_System_101_102_103_InitialSetUpRCCRCC246:
;__Lib_System_101_102_103.c, 421 :: 		
L_end_InitialSetUpRCCRCC2:
0x3F52	0xF8DDE000  LDR	LR, [SP, #0]
0x3F56	0xB002    ADD	SP, SP, #8
0x3F58	0x4770    BX	LR
0x3F5A	0xBF00    NOP
0x3F5C	0x00800101  	#16842880
0x3F60	0x0002001D  	#1900546
0x3F64	0x19400001  	#72000
0x3F68	0x20004002  	FLASH_ACR+0
0x3F6C	0x10044002  	RCC_CFGR+0
0x3F70	0xFFFF000F  	#1048575
0x3F74	0x10004002  	RCC_CR+0
; end of __Lib_System_101_102_103_InitialSetUpRCCRCC2
__Lib_System_101_102_103_SystemClockSetDefault:
;__Lib_System_101_102_103.c, 356 :: 		
0x39A4	0xB081    SUB	SP, SP, #4
;__Lib_System_101_102_103.c, 359 :: 		
0x39A6	0x480F    LDR	R0, [PC, #60]
0x39A8	0x6800    LDR	R0, [R0, #0]
0x39AA	0xF0400101  ORR	R1, R0, #1
0x39AE	0x480D    LDR	R0, [PC, #52]
0x39B0	0x6001    STR	R1, [R0, #0]
;__Lib_System_101_102_103.c, 362 :: 		
0x39B2	0x490D    LDR	R1, [PC, #52]
0x39B4	0x480D    LDR	R0, [PC, #52]
0x39B6	0x6001    STR	R1, [R0, #0]
;__Lib_System_101_102_103.c, 365 :: 		
0x39B8	0x480A    LDR	R0, [PC, #40]
0x39BA	0x6801    LDR	R1, [R0, #0]
0x39BC	0x480C    LDR	R0, [PC, #48]
0x39BE	0x4001    ANDS	R1, R0
0x39C0	0x4808    LDR	R0, [PC, #32]
0x39C2	0x6001    STR	R1, [R0, #0]
;__Lib_System_101_102_103.c, 368 :: 		
0x39C4	0x4807    LDR	R0, [PC, #28]
0x39C6	0x6801    LDR	R1, [R0, #0]
0x39C8	0xF46F2080  MVN	R0, #262144
0x39CC	0x4001    ANDS	R1, R0
0x39CE	0x4805    LDR	R0, [PC, #20]
0x39D0	0x6001    STR	R1, [R0, #0]
;__Lib_System_101_102_103.c, 371 :: 		
0x39D2	0x4806    LDR	R0, [PC, #24]
0x39D4	0x6801    LDR	R1, [R0, #0]
0x39D6	0xF46F00FE  MVN	R0, #8323072
0x39DA	0x4001    ANDS	R1, R0
0x39DC	0x4803    LDR	R0, [PC, #12]
0x39DE	0x6001    STR	R1, [R0, #0]
;__Lib_System_101_102_103.c, 375 :: 		
L_end_SystemClockSetDefault:
0x39E0	0xB001    ADD	SP, SP, #4
0x39E2	0x4770    BX	LR
0x39E4	0x10004002  	RCC_CR+0
0x39E8	0x0000F8FF  	#-117506048
0x39EC	0x10044002  	RCC_CFGR+0
0x39F0	0xFFFFFEF6  	#-17367041
; end of __Lib_System_101_102_103_SystemClockSetDefault
__Lib_System_101_102_103_InitialSetUpFosc:
;__Lib_System_101_102_103.c, 423 :: 		
0x3F78	0xB081    SUB	SP, SP, #4
;__Lib_System_101_102_103.c, 424 :: 		
0x3F7A	0x4902    LDR	R1, [PC, #8]
0x3F7C	0x4802    LDR	R0, [PC, #8]
0x3F7E	0x6001    STR	R1, [R0, #0]
;__Lib_System_101_102_103.c, 425 :: 		
L_end_InitialSetUpFosc:
0x3F80	0xB001    ADD	SP, SP, #4
0x3F82	0x4770    BX	LR
0x3F84	0x19400001  	#72000
0x3F88	0x23E82000  	___System_CLOCK_IN_KHZ+0
; end of __Lib_System_101_102_103_InitialSetUpFosc
___GenExcept:
;__Lib_System_101_102_103.c, 307 :: 		
0x3DF4	0xB081    SUB	SP, SP, #4
;__Lib_System_101_102_103.c, 308 :: 		
L___GenExcept28:
0x3DF6	0xE7FE    B	L___GenExcept28
;__Lib_System_101_102_103.c, 309 :: 		
L_end___GenExcept:
0x3DF8	0xB001    ADD	SP, SP, #4
0x3DFA	0x4770    BX	LR
; end of ___GenExcept
0x3FF8	0xB500    PUSH	(R14)
0x3FFA	0xF8DFB024  LDR	R11, [PC, #36]
0x3FFE	0xF8DFA024  LDR	R10, [PC, #36]
0x4002	0xF8DFC024  LDR	R12, [PC, #36]
0x4006	0xF7FCFFE7  BL	4056
0x400A	0xF8DFB020  LDR	R11, [PC, #32]
0x400E	0xF8DFA020  LDR	R10, [PC, #32]
0x4012	0xF8DFC020  LDR	R12, [PC, #32]
0x4016	0xF7FCFFDF  BL	4056
0x401A	0xBD00    POP	(R15)
0x401C	0x4770    BX	LR
0x401E	0xBF00    NOP
0x4020	0x00002000  	#536870912
0x4024	0x00062000  	#536870918
0x4028	0x3FEC0000  	#16364
0x402C	0x00082000  	#536870920
0x4030	0x00402000  	#536870976
0x4034	0x3F8C0000  	#16268
0x4094	0xB500    PUSH	(R14)
0x4096	0xF8DFB010  LDR	R11, [PC, #16]
0x409A	0xF8DFA010  LDR	R10, [PC, #16]
0x409E	0xF7FFFCA9  BL	14836
0x40A2	0xBD00    POP	(R15)
0x40A4	0x4770    BX	LR
0x40A6	0xBF00    NOP
0x40A8	0x00002000  	#536870912
0x40AC	0x23EC2000  	#536880108
_xPortSysTickHandler:
;port.c, 461 :: 		void xPortSysTickHandler() iv IVT_INT_SysTick
0x3D30	0xB081    SUB	SP, SP, #4
0x3D32	0xF8CDE000  STR	LR, [SP, #0]
;port.c, 467 :: 		portDISABLE_INTERRUPTS();
0x3D36	0xF7FFFFED  BL	port_vPortRaiseBASEPRI+0
;port.c, 470 :: 		if( xTaskIncrementTick() != pdFALSE )
0x3D3A	0xF7FFFED3  BL	_xTaskIncrementTick+0
0x3D3E	0xB130    CBZ	R0, L_xPortSysTickHandler23
;port.c, 474 :: 		PENDSVSET_bit = 1;
0x3D40	0x2201    MOVS	R2, #1
0x3D42	0xB252    SXTB	R2, R2
0x3D44	0x4906    LDR	R1, [PC, #24]
0x3D46	0x6808    LDR	R0, [R1, #0]
0x3D48	0xF362701C  BFI	R0, R2, BitPos(PENDSVSET_bit+0), #1
0x3D4C	0x6008    STR	R0, [R1, #0]
;port.c, 475 :: 		}
L_xPortSysTickHandler23:
;port.c, 477 :: 		portENABLE_INTERRUPTS();
0x3D4E	0x2000    MOVS	R0, #0
0x3D50	0xB401    PUSH	(R0)
0x3D52	0xF7FFFF93  BL	port_vPortSetBASEPRI+0
0x3D56	0xB001    ADD	SP, SP, #4
;port.c, 478 :: 		}
L_end_xPortSysTickHandler:
0x3D58	0xF8DDE000  LDR	LR, [SP, #0]
0x3D5C	0xB001    ADD	SP, SP, #4
0x3D5E	0x4770    BX	LR
0x3D60	0xED04E000  	PENDSVSET_bit+0
; end of _xPortSysTickHandler
_xPortPendSVHandler:
;port.c, 416 :: 		void xPortPendSVHandler() iv IVT_INT_PendSV ics ICS_OFF
0x3D94	0xB081    SUB	SP, SP, #4
0x3D96	0xF8CDE000  STR	LR, [SP, #0]
;port.c, 422 :: 		ADD SP, SP, #4
0x3D9A	0xF10D0D04  ADD	SP, SP, #4
;port.c, 424 :: 		MRS R0, CPU_PSP
0x3D9E	0xF3EF8009  MRS	R0, #9
;port.c, 425 :: 		ISB
0x3DA2	0xF3BF8F6F  ISB	#15
;port.c, 428 :: 		LDR R3, =_pxCurrentTCB
0x3DA6	0xF8DF303C  LDR	R3, [PC, #60]
;port.c, 429 :: 		LDR R2, [R3]
0x3DAA	0x681A    LDR	R2, [R3, #0]
;port.c, 432 :: 		STMDB R0!, (R4-R11)
0x3DAC	0xE9200FF0  STMDB	R0, (R4, R5, R6, R7, R8, R9, R10, R11)
;port.c, 434 :: 		STR R0, [R2]
0x3DB0	0x6010    STR	R0, [R2, #0]
;port.c, 436 :: 		STMDB SP!, (R3, R14)
0x3DB2	0xE92D4008  STMDB	SP, (R3, R14)
;port.c, 437 :: 		MOV R0, # configMAX_SYSCALL_INTERRUPT_PRIORITY
0x3DB6	0xF04F0010  MOV	R0, #16
;port.c, 438 :: 		MSR CPU_BASEPRI, R0
0x3DBA	0xF3808811  MSR	#17, R0
;port.c, 440 :: 		BL _vTaskSwitchContext
0x3DBE	0xF7FFFE37  BL	_vTaskSwitchContext+0
;port.c, 442 :: 		MOV R0, #0
0x3DC2	0xF04F0000  MOV	R0, #0
;port.c, 443 :: 		MSR CPU_BASEPRI, R0
0x3DC6	0xF3808811  MSR	#17, R0
;port.c, 444 :: 		LDM SP!, (R3, R14)
0x3DCA	0xE8BD4008  LDM	SP!, (R3, R14)
;port.c, 447 :: 		LDR R1, [R3]
0x3DCE	0x6819    LDR	R1, [R3, #0]
;port.c, 449 :: 		LDR R0, [R1]
0x3DD0	0x6808    LDR	R0, [R1, #0]
;port.c, 451 :: 		LDM R0!, (R4-R11)
0x3DD2	0xE8B00FF0  LDM	R0!, (R4, R5, R6, R7, R8, R9, R10, R11)
;port.c, 453 :: 		MSR CPU_PSP, R0
0x3DD6	0xF3808809  MSR	#9, R0
;port.c, 454 :: 		ISB
0x3DDA	0xF3BF8F6F  ISB	#15
;port.c, 456 :: 		BX R14
0x3DDE	0x4770    BX	LR
;port.c, 457 :: 		}
0x3DE0	0xF000B802  B	#4
0x3DE4	0x00202000  	_pxCurrentTCB+0
0x3DE8	0xBF00    NOP
;port.c, 458 :: 		}
L_end_xPortPendSVHandler:
0x3DEA	0xF8DDE000  LDR	LR, [SP, #0]
0x3DEE	0xB001    ADD	SP, SP, #4
0x3DF0	0x4770    BX	LR
; end of _xPortPendSVHandler
_vPortSVCHandler:
;port.c, 228 :: 		void vPortSVCHandler() iv IVT_INT_SVCall ics ICS_OFF
;port.c, 232 :: 		LDR R3, =_pxCurrentTCB
0x3D64	0xF8DF3024  LDR	R3, [PC, #36]
;port.c, 234 :: 		LDR R1, [R3]
0x3D68	0x6819    LDR	R1, [R3, #0]
;port.c, 236 :: 		LDR R0, [R1]
0x3D6A	0x6808    LDR	R0, [R1, #0]
;port.c, 239 :: 		LDM R0!, (R4-R11)
0x3D6C	0xE8B00FF0  LDM	R0!, (R4, R5, R6, R7, R8, R9, R10, R11)
;port.c, 241 :: 		MSR CPU_PSP, R0
0x3D70	0xF3808809  MSR	#9, R0
;port.c, 242 :: 		ISB
0x3D74	0xF3BF8F6F  ISB	#15
;port.c, 243 :: 		MOV R0, #0
0x3D78	0xF04F0000  MOV	R0, #0
;port.c, 244 :: 		MSR CPU_BASEPRI, R0
0x3D7C	0xF3808811  MSR	#17, R0
;port.c, 245 :: 		ORR R14, #0xD
0x3D80	0xF04E0E0D  ORR	LR, LR, #13
;port.c, 246 :: 		BX R14
0x3D84	0x4770    BX	LR
;port.c, 247 :: 		}
0x3D86	0xF000B803  B	#6
0x3D8A	0xBF00    NOP
0x3D8C	0x00202000  	_pxCurrentTCB+0
;port.c, 248 :: 		}
L_end_vPortSVCHandler:
0x3D90	0x4770    BX	LR
; end of _vPortSVCHandler
;port.c,0 :: ?ICSport_ulMaxPRIGROUPValue [4]
0x3F8C	0x00000000 ;?ICSport_ulMaxPRIGROUPValue+0
; end of ?ICSport_ulMaxPRIGROUPValue
;tasks.c,0 :: ?ICStasks_uxSchedulerSuspended [4]
0x3F90	0x00000000 ;?ICStasks_uxSchedulerSuspended+0
; end of ?ICStasks_uxSchedulerSuspended
;tasks.c,0 :: ?ICStasks_xTickCount [4]
0x3F94	0x00000000 ;?ICStasks_xTickCount+0
; end of ?ICStasks_xTickCount
;tasks.c,0 :: ?ICStasks_xNumOfOverflows [4]
0x3F98	0x00000000 ;?ICStasks_xNumOfOverflows+0
; end of ?ICStasks_xNumOfOverflows
;tasks.c,0 :: ?ICStasks_xNextTaskUnblockTime [4]
0x3F9C	0x00000000 ;?ICStasks_xNextTaskUnblockTime+0
; end of ?ICStasks_xNextTaskUnblockTime
;tasks.c,0 :: ?ICStasks_uxTopReadyPriority [4]
0x3FA0	0x00000000 ;?ICStasks_uxTopReadyPriority+0
; end of ?ICStasks_uxTopReadyPriority
;tasks.c,0 :: ?ICS_pxCurrentTCB [4]
0x3FA4	0x00000000 ;?ICS_pxCurrentTCB+0
; end of ?ICS_pxCurrentTCB
;tasks.c,0 :: ?ICStasks_uxPendedTicks [4]
0x3FA8	0x00000000 ;?ICStasks_uxPendedTicks+0
; end of ?ICStasks_uxPendedTicks
;tasks.c,0 :: ?ICStasks_xYieldPending [4]
0x3FAC	0x00000000 ;?ICStasks_xYieldPending+0
; end of ?ICStasks_xYieldPending
;tasks.c,0 :: ?ICStasks_xIdleTaskHandle [4]
0x3FB0	0x00000000 ;?ICStasks_xIdleTaskHandle+0
; end of ?ICStasks_xIdleTaskHandle
;tasks.c,0 :: ?ICStasks_xSchedulerRunning [4]
0x3FB4	0x00000000 ;?ICStasks_xSchedulerRunning+0
; end of ?ICStasks_xSchedulerRunning
;tasks.c,0 :: ?ICStasks_uxCurrentNumberOfTasks [4]
0x3FB8	0x00000000 ;?ICStasks_uxCurrentNumberOfTasks+0
; end of ?ICStasks_uxCurrentNumberOfTasks
;tasks.c,0 :: ?ICStasks_uxTaskNumber [4]
0x3FBC	0x00000000 ;?ICStasks_uxTaskNumber+0
; end of ?ICStasks_uxTaskNumber
;tasks.c,0 :: ?ICStasks_uxDeletedTasksWaitingCleanUp [4]
0x3FC0	0x00000000 ;?ICStasks_uxDeletedTasksWaitingCleanUp+0
; end of ?ICStasks_uxDeletedTasksWaitingCleanUp
;__Lib_dlmalloc.c,0 :: ?ICS__Lib_dlmalloc_sys_alloc_br_L1 [4]
0x3FC4	0xFFFFFFFF ;?ICS__Lib_dlmalloc_sys_alloc_br_L1+0
; end of ?ICS__Lib_dlmalloc_sys_alloc_br_L1
;__Lib_dlmalloc.c,0 :: ?ICS__Lib_dlmalloc_sys_alloc_mp_L1 [4]
0x3FC8	0xFFFFFFFF ;?ICS__Lib_dlmalloc_sys_alloc_mp_L1+0
; end of ?ICS__Lib_dlmalloc_sys_alloc_mp_L1
;__Lib_dlmalloc.c,0 :: ?ICS__Lib_dlmalloc_sys_alloc_tbase_L0 [4]
0x3FCC	0xFFFFFFFF ;?ICS__Lib_dlmalloc_sys_alloc_tbase_L0+0
; end of ?ICS__Lib_dlmalloc_sys_alloc_tbase_L0
;__Lib_dlmalloc.c,0 :: ?ICS__Lib_dlmalloc_sys_alloc_tsize_L0 [4]
0x3FD0	0x00000000 ;?ICS__Lib_dlmalloc_sys_alloc_tsize_L0+0
; end of ?ICS__Lib_dlmalloc_sys_alloc_tsize_L0
;,0 :: _initBlock_18 [14]
; Containing: ?lstr_3_main [7]
;             ?lstr_1_main [7]
0x3FD4	0x6B736154 ;_initBlock_18+0 : ?lstr_3_main at 0x3FD4
0x3FD8	0x54003320 ;_initBlock_18+4 : ?lstr_1_main at 0x3FDB
0x3FDC	0x206B7361 ;_initBlock_18+8
0x3FE0	0x0031 ;_initBlock_18+12
; end of _initBlock_18
;main.c,0 :: ?lstr_2_main [7]
0x3FE2	0x6B736154 ;?lstr_2_main+0
0x3FE6	0x003220 ;?lstr_2_main+4
; end of ?lstr_2_main
;port.c,0 :: ?ICSport_uxCriticalNesting [4]
0x3FEC	0xAAAAAAAA ;?ICSport_uxCriticalNesting+0
; end of ?ICSport_uxCriticalNesting
;,0 :: _initBlock_21 [2]
; Containing: ?ICSport_ucMaxSysCallPriority [1]
;             ?ICS__Lib_dlmalloc_firstAlloc [1]
0x3FF0	0x0100 ;_initBlock_21+0 : ?ICSport_ucMaxSysCallPriority at 0x3FF0 : ?ICS__Lib_dlmalloc_firstAlloc at 0x3FF1
; end of _initBlock_21
;tasks.c,0 :: ?lstr_1_tasks [5]
0x3FF2	0x454C4449 ;?lstr_1_tasks+0
0x3FF6	0x00 ;?lstr_1_tasks+4
; end of ?lstr_1_tasks
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0130     [126]    _vListInsert
0x01B0     [140]    _GPIO_Clk_Enable
0x023C     [116]    __Lib_dlmalloc_init_top
0x02B0      [36]    __Lib_dlmalloc_init_bins
0x02D4      [58]    __Lib_dlmalloc_segment_holding
0x0310     [108]    __Lib_dlmalloc_mikroCMemAlloc
0x037C    [1332]    __Lib_dlmalloc_prepend_alloc
0x08B0     [216]    tasks_prvAddCurrentTaskToDelayedList
0x0988     [500]    _GPIO_Config
0x0B7C     [844]    __Lib_dlmalloc_add_segment
0x0EC8      [38]    tasks_prvDeleteTCB
0x0EF0     [232]    __Lib_dlmalloc_mmap_alloc
0x0FD8      [20]    ___CC2DW
0x0FEC     [128]    __Lib_dlmalloc_init_mparams
0x106C     [132]    tasks_prvCheckTasksWaitingTermination
0x10F0      [72]    _vPortEnterCritical
0x1138      [56]    _vPortExitCritical
0x1170     [112]    _vTaskDelay
0x11E0    [1214]    __Lib_dlmalloc_release_unused_segments
0x16A0      [60]    _vListInitialise
0x16DC    [1492]    __Lib_dlmalloc_tmalloc_large
0x1CB0     [820]    __Lib_dlmalloc_tmalloc_small
0x1FE4      [28]    _GPIO_Digital_Output
0x2000    [1548]    __Lib_dlmalloc_sys_alloc
0x260C      [12]    _vListInitialiseItem
0x2618     [148]    tasks_prvInitialiseTaskLists
0x26AC      [60]    _task1
0x26E8      [84]    _pxPortInitialiseStack
0x273C      [60]    port_prvTaskExitError
0x2778    [1976]    _free
0x2F30      [16]    _vTaskSuspendAll
0x2F40      [60]    tasks_prvIdleTask
0x2F7C     [820]    _malloc
0x32B0     [348]    _xTaskResumeAll
0x340C      [60]    _task3
0x3448      [40]    port_prvPortStartFirstTask
0x3470      [52]    _vPortSetupTimerInterrupt
0x34A4      [60]    _task2
0x34E0       [8]    tasks_ucPortCountLeadingZeros
0x34E8      [78]    _vListInsertEnd
0x3538      [68]    tasks_prvResetNextTaskUnblockTime
0x357C      [98]    _uxListRemove
0x35E0      [32]    _pvPortMalloc
0x3600      [26]    tasks_vPortRaiseBASEPRI
0x361C     [296]    tasks_prvInitialiseNewTask
0x3744     [236]    tasks_prvAddNewTaskToReadyList
0x3830     [188]    _xPortStartScheduler
0x38EC      [32]    _vPortFree
0x390C     [150]    _xTaskCreate
0x39A4      [80]    __Lib_System_101_102_103_SystemClockSetDefault
0x39F4      [58]    ___FillZeros
0x3A30     [180]    _vTaskSwitchContext
0x3AE4     [408]    _xTaskIncrementTick
0x3C7C      [10]    port_vPortSetBASEPRI
0x3C88     [140]    _vTaskStartScheduler
0x3D14      [26]    port_vPortRaiseBASEPRI
0x3D30      [52]    _xPortSysTickHandler
0x3D64      [46]    _vPortSVCHandler
0x3D94      [94]    _xPortPendSVHandler
0x3DF4       [8]    ___GenExcept
0x3DFC     [140]    _main
0x3E88     [240]    __Lib_System_101_102_103_InitialSetUpRCCRCC2
0x3F78      [20]    __Lib_System_101_102_103_InitialSetUpFosc
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x20000000       [4]    port_uxCriticalNesting
0x20000004       [1]    port_ucMaxSysCallPriority
0x20000005       [1]    __Lib_dlmalloc_firstAlloc
0x20000008       [4]    port_ulMaxPRIGROUPValue
0x2000000C       [4]    tasks_uxSchedulerSuspended
0x20000010       [4]    tasks_xTickCount
0x20000014       [4]    tasks_xNumOfOverflows
0x20000018       [4]    tasks_xNextTaskUnblockTime
0x2000001C       [4]    tasks_uxTopReadyPriority
0x20000020       [4]    _pxCurrentTCB
0x20000024       [4]    tasks_uxPendedTicks
0x20000028       [4]    tasks_xYieldPending
0x2000002C       [4]    tasks_xIdleTaskHandle
0x20000030       [4]    tasks_xSchedulerRunning
0x20000034       [4]    tasks_uxCurrentNumberOfTasks
0x20000038       [4]    tasks_uxTaskNumber
0x2000003C       [4]    tasks_uxDeletedTasksWaitingCleanUp
0x20002040       [4]    _taskFunction
0x20002044       [4]    tasks_pxDelayedTaskList
0x20002048       [4]    tasks_pxOverflowDelayedTaskList
0x2000204C     [320]    tasks_pxReadyTasksLists
0x2000218C      [20]    tasks_xDelayedTaskList1
0x200021A0      [20]    tasks_xDelayedTaskList2
0x200021B4      [20]    tasks_xPendingReadyList
0x200021C8      [20]    tasks_xTasksWaitingTermination
0x200021DC      [20]    tasks_xSuspendedTaskList
0x200021F0      [24]    __Lib_dlmalloc_mparams
0x20002208     [472]    __Lib_dlmalloc__gm_
0x200023E0       [4]    __Lib_dlmalloc_currentPtr
0x200023E4       [4]    __Lib_dlmalloc_currentSize
0x200023E8       [4]    ___System_CLOCK_IN_KHZ
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x3F8C       [4]    ?ICSport_ulMaxPRIGROUPValue
0x3F90       [4]    ?ICStasks_uxSchedulerSuspended
0x3F94       [4]    ?ICStasks_xTickCount
0x3F98       [4]    ?ICStasks_xNumOfOverflows
0x3F9C       [4]    ?ICStasks_xNextTaskUnblockTime
0x3FA0       [4]    ?ICStasks_uxTopReadyPriority
0x3FA4       [4]    ?ICS_pxCurrentTCB
0x3FA8       [4]    ?ICStasks_uxPendedTicks
0x3FAC       [4]    ?ICStasks_xYieldPending
0x3FB0       [4]    ?ICStasks_xIdleTaskHandle
0x3FB4       [4]    ?ICStasks_xSchedulerRunning
0x3FB8       [4]    ?ICStasks_uxCurrentNumberOfTasks
0x3FBC       [4]    ?ICStasks_uxTaskNumber
0x3FC0       [4]    ?ICStasks_uxDeletedTasksWaitingCleanUp
0x3FC4       [4]    ?ICS__Lib_dlmalloc_sys_alloc_br_L1
0x3FC8       [4]    ?ICS__Lib_dlmalloc_sys_alloc_mp_L1
0x3FCC       [4]    ?ICS__Lib_dlmalloc_sys_alloc_tbase_L0
0x3FD0       [4]    ?ICS__Lib_dlmalloc_sys_alloc_tsize_L0
0x3FD4       [7]    ?lstr_3_main
0x3FDB       [7]    ?lstr_1_main
0x3FE2       [7]    ?lstr_2_main
0x3FEC       [4]    ?ICSport_uxCriticalNesting
0x3FF0       [1]    ?ICSport_ucMaxSysCallPriority
0x3FF1       [1]    ?ICS__Lib_dlmalloc_firstAlloc
0x3FF2       [5]    ?lstr_1_tasks
